<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ILGPU</name>
    </assembly>
    <members>
        <member name="T:ILGPU.IArrayView">
            <summary>
            An abstract untyped basic array view.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView.Buffer">
            <summary>
            Returns the underlying managed buffer.
            </summary>
            <remarks>This property is not supported on accelerators.</remarks>
        </member>
        <member name="P:ILGPU.IArrayView.IsValid">
            <summary>
            Returns true if this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView.ElementSize">
            <summary>
            Returns the element size.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="T:ILGPU.IContiguousArrayView">
            <summary>
            Represents a contiguous array view.
            </summary>
        </member>
        <member name="P:ILGPU.IContiguousArrayView.Index">
            <summary>
            Returns the index pointing into the parent buffer.
            </summary>
            <remarks>This property is not supported on accelerators.</remarks>
        </member>
        <member name="P:ILGPU.IContiguousArrayView.IndexInBytes">
            <summary>
            Returns the index in bytes of the given view.
            </summary>
            <returns>The index in bytes of the given view.</returns>
            <remarks>This property is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.IContiguousArrayView.AsRawArrayView">
            <summary>
            Returns the raw array view pointing to this view.
            </summary>
            <returns>The raw array view.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="T:ILGPU.IArrayView`1">
            <summary>
            An abstract typed array view used for generic constraints.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="T:ILGPU.IContiguousArrayView`1">
            <summary>
            Represents a contiguous array view.
            </summary>
        </member>
        <member name="T:ILGPU.IStridedArrayView`3">
            <summary>
            An array view that uses an n-Dimensional stride.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStrideIndex">The underlying stride dimension index.</typeparam>
            <typeparam name="TStride">The stride type.</typeparam>
        </member>
        <member name="P:ILGPU.IStridedArrayView`3.Stride">
            <summary>
            Returns the current stride.
            </summary>
        </member>
        <member name="T:ILGPU.IArrayView`2">
            <summary>
            Represents an abstract array view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="P:ILGPU.IArrayView`2.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView`2.Item(`1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="T:ILGPU.IArrayView`4">
            <summary>
            Represents an abstract array view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The 32-bit index type.</typeparam>
            <typeparam name="TLongIndex">The 64-bit index type.</typeparam>
            <typeparam name="TStride">The stride type.</typeparam>
        </member>
        <member name="P:ILGPU.IArrayView`4.IntLength">
            <summary>
            Returns the 32-bit length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView`4.IntExtent">
            <summary>
            Returns the 32-bit extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.IArrayView`4.Item(`1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="T:ILGPU.ArrayView`1">
            <summary>
            Represents a generic view to a contiguous chunk of memory.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:ILGPU.ArrayView`1.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.ArrayView`1.Empty">
            <summary>
            Represents an empty view that is not valid and has a length of 0 elements.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView`1.#ctor(ILGPU.Runtime.MemoryBuffer,System.Int64,System.Int64)">
            <summary>
            Constructs a new array view.
            </summary>
            <param name="source">The source.</param>
            <param name="index">The base index.</param>
            <param name="length">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.ArrayView`1.Buffer">
            <summary>
            Returns the associated buffer.
            </summary>
            <remarks>This property is not supported on accelerators.</remarks>
        </member>
        <member name="P:ILGPU.ArrayView`1.ILGPU#IArrayView#Buffer">
            <summary>
            A private interface implementation of the <see cref="P:ILGPU.ArrayView`1.Buffer"/> property.
            </summary>
            <remarks>This property is not supported on accelerators.</remarks>
        </member>
        <member name="P:ILGPU.ArrayView`1.Index">
            <summary>
            Returns the index of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.ILGPU#IContiguousArrayView#Index">
            <summary>
            Returns the index pointing into the parent buffer.
            </summary>
            <remarks>This property is not supported on accelerators.</remarks>
        </member>
        <member name="P:ILGPU.ArrayView`1.ILGPU#IContiguousArrayView#IndexInBytes">
            <summary>
            Returns the index in bytes of the given view.
            </summary>
            <returns>The index in bytes of the given view.</returns>
            <remarks>This property is not supported on accelerators.</remarks>
        </member>
        <member name="P:ILGPU.ArrayView`1.ILGPU#IArrayView#ElementSize">
            <summary>
            Returns the statically known element size.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.IsValid">
            <summary>
            Returns true if this view points to a valid location.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView`1.EnsureCPUBuffer">
            <summary>
            Ensures that the current view is valid CPU buffer.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Stride">
            <summary>
            Returns the dense stride of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.IntExtent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.IntLength">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Item(ILGPU.Index1D)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.ArrayView`1.Item(ILGPU.LongIndex1D)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.ArrayView`1.Item(System.Int32)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.ArrayView`1.Item(System.Int64)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.GetIndexInBytes">
            <summary>
            Returns the index in bytes of the given view.
            </summary>
            <returns>The index in bytes of the given view.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.ArrayView`1.ILGPU#IContiguousArrayView#AsRawArrayView">
            <summary>
            Converts the given generic array view into a raw view of bytes.
            </summary>
            <returns>The raw array view.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.ArrayView`1.ComputeNumUnalignedElementsToSkip(System.Int32)">
            <summary>
            Computes the number of unaligned elements in this view while taking the given
            alignment into account.
            </summary>
            <param name="alignmentInBytes">The alignment in bytes.</param>
            <returns>The number of unaligned elements to skip.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.AlignToInternal(System.Int32)">
            <summary>
            Aligns the current array view to the given alignment in bytes and returns a
            view spanning the initial unaligned parts of the current view and another
            view (main) spanning the remaining aligned elements of the current view.
            </summary>
            <param name="alignmentInBytes">The basic alignment in bytes.</param>
            <returns>
            The prefix and main views pointing to non-aligned and aligned sub-views of
            this view.
            </returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.AsAlignedInternal(System.Int32)">
            <summary>
            Performs an assertion check to verify the alignment of the given array view.
            </summary>
            <returns>The given input view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.LoadEffectiveAddress(System.Int64)">
            <summary>
            Loads the effective address of the current view.
            </summary>
            <param name="index">The relative element index.</param>
            <returns>The effective address.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.LoadEffectiveAddressAsPtr(System.Int64)">
            <summary>
            Loads the effective address of the current view.
            </summary>
            <param name="index">The relative element index.</param>
            <returns>The effective address.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.LoadEffectiveAddress">
            <summary>
            Loads the effective address of the current view.
            </summary>
            <returns>The effective address.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.LoadEffectiveAddressAsPtr">
            <summary>
            Loads the effective address of the current view.
            </summary>
            <returns>The effective address.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.SubView(System.Int64)">
            <summary>
            Returns a sub view of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <returns>The new sub view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.SubView(System.Int32,System.Int32)">
            <summary>
            Returns a sub view of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="subViewLength">The extent of the new sub view.</param>
            <returns>The new sub view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.SubView(System.Int64,System.Int64)">
            <summary>
            Returns a sub view of the current view starting at the given offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="subViewLength">The extent of the new sub view.</param>
            <returns>The new sub view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.Cast``1">
            <summary>
            Casts the current array view into another array-view type.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.ArrayView`1.op_Implicit(ILGPU.ArrayView{`0})~ILGPU.Runtime.ArrayView1D{`0,ILGPU.Stride1D.Dense}">
            <summary>
            Converts the given specialized array view into a corresponding generic view.
            </summary>
            <returns>The corresponding generic view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.op_Implicit(ILGPU.Runtime.ArrayView1D{`0,ILGPU.Stride1D.Dense})~ILGPU.ArrayView{`0}">
            <summary>
            Converts the given specialized array view into a corresponding generic view.
            </summary>
            <returns>The corresponding generic view.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.ICompareExchangeOperation`1">
            <summary>
            Represents the base interface for compare-exchange operations.
            </summary>
            <typeparam name="T">The type of the compare-exchange operation.</typeparam>
        </member>
        <member name="M:ILGPU.AtomicOperations.ICompareExchangeOperation`1.CompareExchange(`0@,`0,`0)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.AtomicOperations.ICompareExchangeOperation`1.IsSame(`0,`0)">
            <summary>
            Returns true if both operands represent the same value.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>True, if both operands represent the same value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.IAtomicOperation`1">
            <summary>
            Represents the base interface for atomic binary operations.
            </summary>
            <typeparam name="T">The parameter type of the atomic operation.</typeparam>
        </member>
        <member name="M:ILGPU.AtomicOperations.IAtomicOperation`1.Operation(`0,`0)">
            <summary>
            Performs the actual atomic binary operation.
            </summary>
            <param name="current">
            The current value at the target memory location.
            </param>
            <param name="value">The involved external value.</param>
            <returns>The result of the binary operation.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeInt32">
            <summary>
            Represents an atomic compare-exchange operation of type int.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeInt32.CompareExchange(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeInt32.IsSame(System.Int32,System.Int32)">
            <summary>
            Returns true if both operands represent the same value.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>True, if both operands represent the same value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeInt64">
            <summary>
            Represents an atomic compare-exchange operation of type long.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeInt64.CompareExchange(System.Int64@,System.Int64,System.Int64)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeInt64.IsSame(System.Int64,System.Int64)">
            <summary>
            Returns true if both operands represent the same value.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>True, if both operands represent the same value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeUInt32">
            <summary>
            Represents an atomic compare-exchange operation of type uint.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeUInt32.CompareExchange(System.UInt32@,System.UInt32,System.UInt32)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeUInt32.IsSame(System.UInt32,System.UInt32)">
            <summary>
            Returns true if both operands represent the same value.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>True, if both operands represent the same value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeUInt64">
            <summary>
            Represents an atomic compare-exchange operation of type ulong.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeUInt64.CompareExchange(System.UInt64@,System.UInt64,System.UInt64)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeUInt64.IsSame(System.UInt64,System.UInt64)">
            <summary>
            Returns true if both operands represent the same value.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>True, if both operands represent the same value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeFloat">
            <summary>
            Represents an atomic compare-exchange operation of type float.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeFloat.CompareExchange(System.Single@,System.Single,System.Single)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeFloat.IsSame(System.Single,System.Single)">
            <summary>
            Returns true if both operands represent the same value.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>True, if both operands represent the same value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeDouble">
            <summary>
            Represents an atomic compare-exchange operation of type double.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeDouble.CompareExchange(System.Double@,System.Double,System.Double)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeDouble.IsSame(System.Double,System.Double)">
            <summary>
            Returns true if both operands represent the same value.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>True, if both operands represent the same value.</returns>
        </member>
        <member name="T:ILGPU.Atomic">
            <summary>
            Contains atomic functions that are supported on devices.
            </summary>
        </member>
        <member name="M:ILGPU.Atomic.Add(ILGPU.Index1D@,ILGPU.Index1D)">
            <summary>
            Atomically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">the target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.UInt32@,System.UInt32)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.UInt64@,System.UInt64)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.Single@,System.Single)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.Double@,System.Double)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(ILGPU.Index1D@,ILGPU.Index1D)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">the target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.UInt32@,System.UInt32,System.UInt32)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.UInt64@,System.UInt64,System.UInt64)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.Single@,System.Single,System.Single)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.Double@,System.Double,System.Double)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(ILGPU.Index1D@,ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">the target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The value to add.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.MakeAtomic``3(``0@,``0,``1,``2)">
            <summary>
            Implements a generic pattern to build custom atomic operations.
            </summary>
            <typeparam name="T">The parameter type of the atomic operation.</typeparam>
            <typeparam name="TOperation">
            The type of the custom atomic operation.
            </typeparam>
            <typeparam name="TCompareExchangeOperation">
            The type of the custom compare-exchange-operation logic.
            </typeparam>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <param name="operation">The custom atomic operation.</param>
            <param name="compareExchangeOperation">
            The custom compare-exchange-operation logic.
            </param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.Int32@,System.Int32)">
            <summary>
            Atomically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.Int64@,System.Int64)">
            <summary>
            Atomically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.UInt32@,System.UInt32)">
            <summary>
            Atomically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.UInt64@,System.UInt64)">
            <summary>
            Atomically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.Single@,System.Single)">
            <summary>
            Atomically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(System.Double@,System.Double)">
            <summary>
            Atomically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.Int32@,System.Int32)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.Int64@,System.Int64)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.UInt32@,System.UInt32)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.UInt64@,System.UInt64)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.Single@,System.Single)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(System.Double@,System.Double)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.Int32@,System.Int32)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.Int64@,System.Int64)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.UInt32@,System.UInt32)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.UInt64@,System.UInt64)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.Single@,System.Single)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(System.Double@,System.Double)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(System.Int32@,System.Int32)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(System.Int64@,System.Int64)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(System.UInt32@,System.UInt32)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(System.UInt64@,System.UInt64)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(System.Int32@,System.Int32)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(System.Int64@,System.Int64)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(System.UInt32@,System.UInt32)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(System.UInt64@,System.UInt64)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(System.Int32@,System.Int32)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(System.Int64@,System.Int64)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(System.UInt32@,System.UInt32)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(System.UInt64@,System.UInt64)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target
            location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.Int32@,System.Int32)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(System.Int64@,System.Int64)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(System.Int64@,System.Int64,System.Int64)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.Backends.TargetPlatform">
            <summary>
            Represents a target platform.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.TargetPlatform.Platform32Bit">
            <summary>
            The target platform is 32-bit.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.TargetPlatform.Platform64Bit">
            <summary>
            The target platform is 64-bit.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.TargetPlatformExtensions">
            <summary>
            Extension methods for TargetPlatform related objects.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.TargetPlatformExtensions.Is64Bit(ILGPU.Backends.TargetPlatform)">
            <summary>
            Returns true if the current runtime platform is 64-bit.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.BackendType">
            <summary>
            Represents the general type of a backend.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.BackendType.IL">
            <summary>
            An IL backend.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.BackendType.PTX">
            <summary>
            A PTX backend.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.BackendType.OpenCL">
            <summary>
            An OpenCL source backend.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.BackendExtension">
            <summary>
            Represents an abstract backend extensions that can store additional data.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.Backend">
            <summary>
            Represents a general ILGPU backend.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.Backend.NoHook">
            <summary>
            No backend hook.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.NoHook.FinishedCodeGeneration(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.NoHook.InitializedKernelContext(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.NoHook.OptimizedKernelContext(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.Backend.BackendContext">
            <summary>
            Represents the current kernel context in scope of a backend instance.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.Backend.BackendContext.Enumerator">
            <summary>
            An enumerator backend methods.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.Enumerator.#ctor(ILGPU.Backends.Backend.BackendContext@)">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="context">The current backend context.</param>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Enumerator.KernelMethod">
            <summary>
            Returns the associated kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Enumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.#ctor(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Constructs a new backend context.
            </summary>
            <param name="kernelContext">The current kernel context.</param>
            <param name="kernelMethod">The kernel function.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.CreateKernelInfo">
            <summary>
            Creates a new kernel information object.
            </summary>
            <returns>The created kernel information object.</returns>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Context">
            <summary>
            The associated kernel context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.KernelMethod">
            <summary>
            Returns the main kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Methods">
            <summary>
            Returns all methods
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.KernelAllocas">
            <summary>
            Returns the associated allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.SharedAllocations">
            <summary>
            Returns all shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.DynamicSharedAllocations">
            <summary>
            Returns all dynamic shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.SharedMemorySpecification">
            <summary>
            Returns the associated shared memory specification.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.Count">
            <summary>
            Returns the number of all functions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendContext.KernelInfo">
            <summary>
            Returns the associated kernel information object (if any).
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.EnsureIntrinsicImplementations``1(ILGPU.IR.Intrinsics.IntrinsicImplementationProvider{``0})">
            <summary>
            Ensures that all not-implemented intrinsics have a valid associated
            code generator that will implement this intrinsic.
            </summary>
            <typeparam name="TDelegate">
            The backend-specific delegate type.
            </typeparam>
            <param name="provider">The implementation provider to use.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend.BackendContext.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all entries.
            </summary>
            <returns>An enumerator to enumerate all entries.</returns>
        </member>
        <member name="T:ILGPU.Backends.Backend.CreateArgumentMapper">
            <summary>
            Represents a function to create backend-specific argument mappers.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="T:ILGPU.Backends.Backend.CreateTransformersHandler">
            <summary>
            Represents a function to create backend-specific transformers.
            </summary>
            <param name="context">The current context.</param>
            <param name="builder">The target transformer builder.</param>
        </member>
        <member name="P:ILGPU.Backends.Backend.RuntimePlatform">
            <summary>
            Returns the current execution platform.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.OSPlatform">
            <summary>
            Returns the native OS platform.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.RunningOnNativePlatform">
            <summary>
            Returns true if the current runtime platform is equal to the OS platform.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.EnsureRunningOnNativePlatform">
            <summary>
            Ensures that the current runtime platform is equal to the OS platform.
            If not, this method will throw a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.EnsureRunningOnPlatform(ILGPU.Backends.TargetPlatform)">
            <summary>
            Ensures that the current runtime platform is equal to the given platform.
            If not, this method will throw a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="platform">The desired target platform.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend.GetPlatform(System.Nullable{ILGPU.Backends.TargetPlatform})">
            <summary>
            Returns either the given target platform or the current one.
            </summary>
            <param name="platform">The nullable target platform.</param>
            <returns>The computed target platform.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.#ctor(ILGPU.Context,ILGPU.Runtime.CapabilityContext,ILGPU.Backends.BackendType,ILGPU.Backends.EntryPoints.ArgumentMapper)">
            <summary>
            Constructs a new generic backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="capabilities">The supported capabilities.</param>
            <param name="backendType">The backend type.</param>
            <param name="argumentMapper">The argument mapper to use.</param>
        </member>
        <member name="P:ILGPU.Backends.Backend.Context">
            <summary>
            Returns the assigned context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.RuntimeSystem">
            <summary>
            Returns the current runtime system instance.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.Capabilities">
            <summary>
            Returns the supported capabilities.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.BackendType">
            <summary>
            Returns the associated backend type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.Platform">
            <summary>
            Returns the target platform.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.ArgumentMapper">
            <summary>
            Returns the associated <see cref="P:ILGPU.Backends.Backend.ArgumentMapper"/>.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.KernelTransformers">
            <summary>
            Returns the transformer that is applied before the final compilation step.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.PointerType">
            <summary>
            Returns type of a native pointer.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.PointerSize">
            <summary>
            Returns the pointer size of a native pointer type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.PointerBasicValueType">
            <summary>
            Returns the basic type of a native pointer.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.PointerArithmeticType">
            <summary>
            Returns the arithmetic type of a native pointer.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.InitializeKernelTransformers(System.Action{System.Collections.Immutable.ImmutableArray{ILGPU.IR.Transformations.Transformer}.Builder})">
            <summary>
            Initializes the associated kernel transformers.
            </summary>
            <param name="createTransformers">The target handler.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend.PreCompileKernelMethod(ILGPU.Backends.EntryPoints.EntryPointDescription@)">
            <summary>
            Pre-compiles the given entry point description into an IR method.
            </summary>
            <param name="entry">The desired entry point.</param>
            <returns>The pre-compiled IR method.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.PreCompileKernelMethod``1(ILGPU.Backends.EntryPoints.EntryPointDescription@,``0)">
            <summary>
            Pre-compiles the given entry point description into an IR method.
            </summary>
            <typeparam name="TBackendHook">The backend hook type.</typeparam>
            <param name="entry">The desired entry point.</param>
            <param name="backendHook">The backend hook.</param>
            <returns>The pre-compiled IR method.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Compiles a given compile unit with the specified entry point using
            the given kernel specialization.
            </summary>
            <param name="entry">The desired entry point.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile``1(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``0)">
            <summary>
            Compiles a given compile unit with the specified entry point using
            the given kernel specialization.
            </summary>
            <typeparam name="TBackendHook">The backend hook type.</typeparam>
            <param name="entry">The desired entry point.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="backendHook">The backend hook.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile(ILGPU.IR.Method,ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Compiles a given method into a compiled kernel.
            </summary>
            <param name="kernelMethod">The main IR kernel method.</param>
            <param name="entry">The desired entry point.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile``1(ILGPU.IR.Method,ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``0)">
            <summary>
            Compiles a given method into a compiled kernel.
            </summary>
            <typeparam name="TBackendHook">The backend hook type.</typeparam>
            <param name="kernelMethod">The main IR kernel method.</param>
            <param name="entry">The desired entry point.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="backendHook">The backend hook.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.CreateEntryPoint(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Creates a new entry point that is compatible with the current backend.
            </summary>
            <param name="entry">The entry point.</param>
            <param name="backendContext">
            The current kernel context containing all required functions.
            </param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The created entry point.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Compiles a given compile unit with the specified entry point using
            the given kernel specialization and the placement information.
            </summary>
            <param name="entryPoint">The desired entry point.</param>
            <param name="backendContext">
            The current kernel context containing all required functions.
            </param>
            <param name="specialization">The kernel specialization.</param>
            <returns>
            The compiled kernel that represents the compilation result.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>This method is not thread-safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.Backend`1">
            <summary>
            Represents a general ILGPU backend.
            </summary>
            <typeparam name="TDelegate">
            The intrinsic delegate type for backend implementations.
            </typeparam>
        </member>
        <member name="M:ILGPU.Backends.Backend`1.#ctor(ILGPU.Context,ILGPU.Runtime.CapabilityContext,ILGPU.Backends.BackendType,ILGPU.Backends.EntryPoints.ArgumentMapper)">
            <summary>
            Constructs a new generic backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="capabilities">The supported capabilities.</param>
            <param name="backendType">The backend type.</param>
            <param name="argumentMapper">The argument mapper to use.</param>
        </member>
        <member name="P:ILGPU.Backends.Backend`1.IntrinsicProvider">
            <summary>
            Returns the current intrinsic provider.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend`1.InitIntrinsicProvider">
            <summary>
            Initializes the current intrinsic provider.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend`1.InitializeKernelTransformers(System.Action{System.Collections.Immutable.ImmutableArray{ILGPU.IR.Transformations.Transformer}.Builder})">
            <summary>
            Initializes the associated kernel transformers.
            </summary>
            <param name="createTransformers">The target handler.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend`1.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>This method is not thread-safe.</remarks>
        </member>
        <member name="M:ILGPU.Backends.Backend`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Backends.BackendExtensions">
            <summary>
            Extension methods for backend related objects.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.BackendExtensions.GetBackend(ILGPU.Runtime.Accelerator)">
            <summary>
            Gets the underlying backend from the given accelerator.
            </summary>
            <param name="accelerator">The accelerator instance.</param>
            <returns>The associated accelerator backend.</returns>
        </member>
        <member name="T:ILGPU.Backends.CodeGeneratorBackend`4">
            <summary>
            Represents a backend that works on several code generators and kernel builders
            in parallel to speed up code generation.
            </summary>
            <typeparam name="TDelegate">
            The intrinsic delegate type for backend implementations.
            </typeparam>
            <typeparam name="T">The main data type.</typeparam>
            <typeparam name="TCodeGenerator">The code-generator type.</typeparam>
            <typeparam name="TKernelBuilder">The kernel-builder type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.#ctor(ILGPU.Context,ILGPU.Runtime.CapabilityContext,ILGPU.Backends.BackendType,ILGPU.Backends.EntryPoints.ArgumentMapper)">
            <summary>
            Constructs a new generic backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="capabilities">The supported capabilities.</param>
            <param name="backendType">The backend type.</param>
            <param name="argumentMapper">The argument mapper to use.</param>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.Compile(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Compiles a new kernel using parallel processing.
            </summary>
            <param name="entryPoint"></param>
            <param name="backendContext"></param>
            <param name="specialization"></param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateKernelBuilder(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@,`1@)">
            <summary>
            Creates the main kernel builder and initializes
            all required information.
            </summary>
            <param name="entryPoint">The current entry point.</param>
            <param name="backendContext">The backend context.</param>
            <param name="specialization">The backend specialization.</param>
            <param name="data">The user-defined data instance.</param>
            <returns>The resulting kernel builder.</returns>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateFunctionCodeGenerator(ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas,`1)">
            <summary>
            Creates a new function-code generator.
            </summary>
            <param name="method">The current method.</param>
            <param name="allocas">The associated allocations.</param>
            <param name="data">The user-defined data instance.</param>
            <returns>The created function-code generator.</returns>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateKernelCodeGenerator(ILGPU.IR.Analyses.AllocaKindInformation@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas,`1)">
            <summary>
            Creates a new kernel-code generator.
            </summary>
            <param name="sharedAllocations">All shared allocations.</param>
            <param name="method">The current method.</param>
            <param name="allocas">The associated allocations.</param>
            <param name="data">The user-defined data instance.</param>
            <returns>The created kernel-code generator.</returns>
        </member>
        <member name="M:ILGPU.Backends.CodeGeneratorBackend`4.CreateKernel(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.CompiledKernel.KernelInfo,`3,`1)">
            <summary>
            Creates the final compiled kernel instance.
            </summary>
            <param name="entryPoint">The current entry point.</param>
            <param name="builder">The kernel builder.</param>
            <param name="kernelInfo">Detailed information about the kernel.</param>
            <param name="data">The user-defined data instance.</param>
            <returns>The resulting compiled kernel.</returns>
        </member>
        <member name="T:ILGPU.Backends.CompiledKernel">
            <summary>
            Represents a compiled kernel that encapsulates emitted binary code.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.CompiledKernel.FunctionInfo">
            <summary>
            Contains information about functions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.CompiledKernel.FunctionInfo.#ctor(System.String,System.Reflection.MethodBase,System.Int32)">
            <summary>
            Constructs a new function information object.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.FunctionInfo.Name">
            <summary>
            The name of the compiled function inside the kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.FunctionInfo.Method">
            <summary>
            Returns the managed method reference (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.FunctionInfo.LocalMemorySize">
            <summary>
            Returns the local memory size in bytes.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.CompiledKernel.KernelInfo">
            <summary>
            Provides detailed information about compiled kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.CompiledKernel.KernelInfo.#ctor(ILGPU.IR.Analyses.AllocaKindInformation@,System.Collections.Immutable.ImmutableArray{ILGPU.Backends.CompiledKernel.FunctionInfo})">
            <summary>
            Constructs a new kernel information object.
            </summary>
            <param name="sharedAllocations">All shared allocations.</param>
            <param name="functions">
            An array containing detailed function information.
            </param>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.KernelInfo.SharedAllocations">
            <summary>
            Returns detailed information about all shared allocations.
            </summary>
            <remarks>
            This information will be populated if the property
            <see cref="P:ILGPU.ContextProperties.EnableKernelInformation"/> is enabled.
            </remarks>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.KernelInfo.Functions">
            <summary>
            Returns information about all functions in the compiled kernel.
            </summary>
            <remarks>
            This array will be populated if the property
            <see cref="P:ILGPU.ContextProperties.EnableKernelInformation"/> is enabled.
            </remarks>
        </member>
        <member name="M:ILGPU.Backends.CompiledKernel.KernelInfo.Dump(System.IO.TextWriter)">
            <summary>
            Dumps kernel information to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.Backends.CompiledKernel.#ctor(ILGPU.Context,ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.CompiledKernel.KernelInfo)">
            <summary>
            Constructs a new compiled kernel.
            </summary>
            <param name="context">The associated context.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="info">Detailed kernel information.</param>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.SourceMethod">
            <summary>
            Represents the source method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.Name">
            <summary>
            Returns the associated kernel function name.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.IndexType">
            <summary>
            Returns the index type of the entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.Specialization">
            <summary>
            Returns the associated kernel specialization.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.NumParameters">
            <summary>
            Returns the number of uniform parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.EntryPoint">
            <summary>
            Returns the internally used entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.CompiledKernel.Info">
            <summary>
            Returns information about all functions in the compiled kernel.
            </summary>
            <remarks>
            This instance will be available when the property
            <see cref="P:ILGPU.ContextProperties.EnableKernelInformation"/> is enabled.
            </remarks>
        </member>
        <member name="M:ILGPU.Backends.CompiledKernel.ToString">
            <summary>
            Returns the string representation of this kernel.
            </summary>
            <returns>The string representation of this kernel.</returns>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper">
            <summary>
            Maps kernel arguments to a compatible representation that
            can be accessed by the native kernel.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Backends.EntryPoints.ArgumentMapper.FieldPrefixName">
            <summary>
            The internal prefix name for all runtime fields.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.EntryPoints.ArgumentMapper.KernelLengthField">
            <summary>
            The intrinsic kernel length parameter field name.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.IRawValueSource">
            <summary>
            An emission source.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.IRawValueSource.EmitLoadSource``1(``0@)">
            <summary>
            Emits a load command.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The current emitter.</param>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource">
            <summary>
            An emission source.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType">
            <summary>
            Returns the source type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.EmitLoadSourceAddress``1(``0@)">
            <summary>
            Emits a load command that loads a reference to the underlying data.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The current emitter.</param>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget">
            <summary>
            An emission target.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.TargetType">
            <summary>
            Returns the target type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.EmitLoadTargetAddress``1(``0@)">
            <summary>
            Emits a target command.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The current emitter.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.EmitStoreTarget``2(``0@,``1@)">
            <summary>
            Emits a target command.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The source value.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="source">The source value.</param>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1">
            <summary>
            A structure source.
            </summary>
            <typeparam name="TParentTarget">The parent source type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.#ctor(`0@,System.Reflection.FieldInfo)">
            <summary>
            Constructs a new structure target.
            </summary>
            <param name="parentTarget">The parent target.</param>
            <param name="targetField">The target field.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.TargetType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.TargetType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.ParentTarget">
            <summary>
            Returns the parent target.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.TargetField">
            <summary>
            Returns the target field.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.EmitLoadTargetAddress``1(``0@)">
            <summary>
            Emits a target field address.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget`1.EmitStoreTarget``2(``0@,``1@)">
            <summary>
            Emits a store field address.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget">
            <summary>
            A <see cref="T:ILGPU.Backends.IL.ILLocal"/> target.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget.#ctor(ILGPU.Backends.IL.ILLocal)">
            <summary>
            Constructs a new local target.
            </summary>
            <param name="local">The current local.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget.TargetType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ITarget.TargetType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget.Local">
            <summary>
            Returns the associated local variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget.EmitLoadTargetAddress``1(``0@)">
            <summary>
            Emits a target field address.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalTarget.EmitStoreTarget``2(``0@,``1@)">
            <summary>
            Emits a store local.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource">
            <summary>
            An argument source.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource.#ctor(System.Type,System.Int32)">
            <summary>
            Constructs a new argument source.
            </summary>
            <param name="type">The argument type.</param>
            <param name="argumentIndex">The argument index.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource.ArgumentIndex">
            <summary>
            Returns the argument index.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource.EmitLoadSourceAddress``1(``0@)">
            <summary>
            Emits the address of an argument.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ArgumentSource.EmitLoadSource``1(``0@)">
            <summary>
            Emits the value of an argument.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource">
            <summary>
            A <see cref="T:ILGPU.Backends.IL.ILLocal"/> source.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource.#ctor(ILGPU.Backends.IL.ILLocal)">
            <summary>
            Constructs a new local source.
            </summary>
            <param name="local">The current local.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource.Local">
            <summary>
            Returns the associated local variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource.EmitLoadSourceAddress``1(``0@)">
            <summary>
            Emits the address of a local variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.LocalSource.EmitLoadSource``1(``0@)">
            <summary>
            Emits the value of a local variable.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1">
            <summary>
            A structure source.
            </summary>
            <typeparam name="TParentSource">The parent source type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.#ctor(`0@,System.Reflection.FieldInfo)">
            <summary>
            Construct a new structure source.
            </summary>
            <param name="parentSource">The parent source.</param>
            <param name="sourceField">The source field.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.ParentSource">
            <summary>
            Returns the parent source.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.SourceField">
            <summary>
            Returns the source field.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.EmitLoadSourceAddress``1(``0@)">
            <summary>
            Emits the address of a structure field.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.StructureSource`1.EmitLoadSource``1(``0@)">
            <summary>
            Emits the value of a structure field.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1">
            <summary>
            A view-parameter source.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.#ctor(ILGPU.IR.Types.TypeInformationManager,`0@,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter@)">
            <summary>
            Constructs a new view source.
            </summary>
            <param name="typeInformationManager">
            The parent type information manager.
            </param>
            <param name="source">The underlying source.</param>
            <param name="viewParameter">The view parameter to map.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.Source">
            <summary>
            Returns the underlying source.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.ParameterType">
            <summary>
            Returns the parameter type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.AccessChain">
            <summary>
            Returns the access chain to resolve the actual view instance.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.EmitLoadSourceAddress``1(``0@)">
            <summary>
            Loads a nested access chain address.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ViewSource`1.EmitLoadSource``1(``0@)">
            <summary>
            Loads a nested access chain.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.IMappingHandler">
            <summary>
            An abstract argument mapping handler.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.IMappingHandler.MapArgument``2(``0@,``1@,System.Int32)">
            <summary>
            Emits a mapping command that maps a kernel argument.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <param name="emitter">The target emitter.</param>
            <param name="source">The value source.</param>
            <param name="argumentIndex">The index of the kernel argument.</param>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.IStructMappingHandler`1">
            <summary>
            An abstract argument mapping handler.
            </summary>
            <typeparam name="T">The custom return type of this mapper.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.IStructMappingHandler`1.CanMapKernelLength(System.Type@)">
            <summary>
            Returns true if the current kernel supports an implicit kernel length.
            </summary>
            <param name="indexType">The current index type (if any).</param>
            <returns>
            True, if the current kernel supports an implicit kernel length.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.IStructMappingHandler`1.MapKernelLength``2(``0@,ILGPU.Backends.EntryPoints.ArgumentMapper.StructureTarget{``1}@)">
            <summary>
            Maps a kernel length parameter.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TTarget">The value target type.</typeparam>
            <param name="emitter">The target emitter.</param>
            <param name="kernelLengthTarget">The length target.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.IStructMappingHandler`1.MapArgumentStruct``1(``0@,ILGPU.Backends.IL.ILLocal,System.Int32)">
            <summary>
            Emits a mapping command that maps all kernel arguments via a struct.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The target emitter.</param>
            <param name="local">The local variable reference.</param>
            <param name="rawSizeInBytesWithoutPadding">
            The raw size in bytes of the argument structure without taking the
            structure-conversion induced alignment padding into account.
            </param>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ArgumentMapper.ISeparateViewMappingHandler">
            <summary>
            An abstract argument mapping handler.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ISeparateViewMappingHandler.MapViewArgument``2(``0@,``1@,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter@,System.Int32)">
            <summary>
            Emits a set of commands that map an implementation view instance
            and stores the converted instance into the given target.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="source">The value source.</param>
            <param name="viewParameter">The source view parameter.</param>
            <param name="viewArgumentIndex">The argument index.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.GetFieldName(System.Int32)">
            <summary>
            Constructs a new field name based on the relative field index within a
            dynamically generated structure.
            </summary>
            <param name="index">The relative field index.</param>
            <returns>The field name.</returns>
        </member>
        <member name="F:ILGPU.Backends.EntryPoints.ArgumentMapper.typeMapping">
            <summary>
            The internal type mapping (from old to new types).
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new argument mapper.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.RuntimeSystem">
            <summary>
            Returns the current runtime system.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ArgumentMapper.TypeContext">
            <summary>
            Returns the current type context.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapViewType(System.Type,System.Type)">
            <summary>
            Maps a view type to its implementation specific type.
            </summary>
            <param name="viewType">The view type.</param>
            <param name="elementType">The element type.</param>
            <returns>The resulting implementation type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapStructType(System.Type)">
            <summary>
            Maps the given structure type to a compatible structure type.
            </summary>
            <param name="structType">The structure type to map.</param>
            <returns>The mapped structure type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.RegisterTypeMapping(System.Type,System.Type)">
            <summary>
            Registers a type mapping entry and returns the mapped type.
            </summary>
            <param name="type">The source type.</param>
            <param name="mappedType">The target type.</param>
            <returns>The mapped type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapType(System.Type)">
            <summary>
            Maps the given source type to a compatible target type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The compatible target type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapViewInstance``3(``0@,System.Type,``1@,``2@)">
            <summary>
            Emits a set of commands that map an implementation view instance
            and stores the converted instance into the given target.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <typeparam name="TTarget">The value target type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="elementType">The element type.</param>
            <param name="source">The value source.</param>
            <param name="target">The value target.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapStructInstance``3(``0@,``1@,``2@)">
            <summary>
            Maps a specific structure instance.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <typeparam name="TTarget">The value target type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="source">The value source.</param>
            <param name="target">The value target.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapInstance``3(``0@,``1@,``2@)">
            <summary>
            Maps a value instance.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <typeparam name="TTarget">The value target type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="source">The value source.</param>
            <param name="target">The value target.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapParameter``2(``0@,ILGPU.Backends.EntryPoints.ParameterCollection@,System.Int32,``1)">
            <summary>
            Maps a single parameter value.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TTarget">The value target type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="parameters">The parameter collection to map.</param>
            <param name="index">The source parameter index.</param>
            <param name="parameterTarget">The parameter local target.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapArguments``2(``0@,``1@,ILGPU.Backends.EntryPoints.ParameterCollection@)">
            <summary>
            Creates code that maps the given parameter specification to
            a compatible representation.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TMappingHandler">The handler type.</typeparam>
            <param name="emitter">The target emitter to write to.</param>
            <param name="mappingHandler">The target mapping handler to use.</param>
            <param name="parameters">The parameter collection to map.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapArgumentsStruct``3(``0@,``1@,ILGPU.Backends.EntryPoints.ParameterCollection@)">
            <summary>
            Creates code that maps the given parameter specification to
            a compatible representation.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TMappingHandler">The handler type.</typeparam>
            <typeparam name="T">The custom handler type of this mapper.</typeparam>
            <param name="emitter">The target emitter to write to.</param>
            <param name="mappingHandler">The target mapping handler to use.</param>
            <param name="parameters">The parameter collection to map.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.CreateArgumentStructType``2(``0@,ILGPU.Backends.EntryPoints.ParameterCollection@)">
            <summary>
            Creates a mapping argument structure type.
            </summary>
            <typeparam name="TMappingHandler">The handler type.</typeparam>
            <typeparam name="T">The custom handler type of this mapper.</typeparam>
            <param name="mappingHandler">The target mapping handler to use.</param>
            <param name="parameters">The parameter collection to map.</param>
            <returns>The argument mapping structure type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.MapViews``2(``0@,``1@,ILGPU.IR.Types.TypeInformationManager,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint)">
            <summary>
            Creates code that maps (potentially nested) views of kernel arguments
            separately.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TMappingHandler">The handler type.</typeparam>
            <param name="emitter">The target emitter to write to.</param>
            <param name="mappingHandler">The target mapping handler to use.</param>
            <param name="typeInformationManager">
            The parent type information manager.
            </param>
            <param name="entryPoint">The entry point to use.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ArgumentMapper.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.EntryPoint">
            <summary>
            Represents a kernel entry point.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPoint.#ctor(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Backends.EntryPoints.SharedMemorySpecification@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Constructs a new entry point targeting the given method.
            </summary>
            <param name="description">The entry point description.</param>
            <param name="sharedMemory">The shared memory specification.</param>
            <param name="specialization">The kernel specialization.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.Description">
            <summary>
            Returns the associated description instance.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.Name">
            <summary>
            Returns the associated kernel function name.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.MethodInfo">
            <summary>
            Returns the associated method info.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.IndexType">
            <summary>
            Returns the index type of the index parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.KernelIndexParameterOffset">
            <summary>
            Returns the offset for the actual parameter values while taking an implicit
            index argument into account.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.IsExplicitlyGrouped">
            <summary>
            Returns true if the entry point represents an explicitly grouped kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.IsImplictlyGrouped">
            <summary>
            Returns true if the entry point represents an implicitly grouped kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.KernelIndexType">
            <summary>
            Returns the index type of the index parameter.
            This can also return the <see cref="T:ILGPU.KernelConfig"/> type in the case of
            an explicitly grouped kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.Parameters">
            <summary>
            Returns the parameter specification of arguments that are passed to the
            kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.HasSpecializedParameters">
            <summary>
            Returns true if this entry point uses specialized parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.HasByRefParameters">
            <summary>
            Returns true if the parameter specification contains by reference parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.Specialization">
            <summary>
            Returns the associated launch specification.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.NumFlattendedIndexParameters">
            <summary>
            Returns the number of index parameters when all structures
            are flattened into scalar parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPoint.SharedMemory">
            <summary>
            Returns the associated shared memory specification.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPoint.CreateLauncherMethod(ILGPU.RuntimeSystem,ILGPU.RuntimeSystem.MethodEmitter@)">
            <summary>
            Creates a new launcher method.
            </summary>
            <param name="runtimeSystem">The current runtime system.</param>
            <param name="methodEmitter">The method emitter.</param>
            <returns>The acquired scoped lock.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPoint.CreateLauncherMethod(ILGPU.RuntimeSystem,System.Type,ILGPU.RuntimeSystem.MethodEmitter@)">
            <summary>
            Creates a new launcher method.
            </summary>
            <param name="runtimeSystem">The current runtime system.</param>
            <param name="instanceType">The instance type (if any).</param>
            <param name="methodEmitter">The method emitter.</param>
            <returns>The acquired scoped lock.</returns>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.SharedMemorySpecification">
            <summary>
            Represents a shared memory specification of a specific kernel.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.EntryPoints.SharedMemorySpecification.Constructor">
            <summary>
            Represents the associated constructor taking two integer parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SharedMemorySpecification.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructs a new shared memory specification.
            </summary>
            <param name="staticSize">The static shared memory size.</param>
            <param name="hasDynamicMemory">
            True, if this specification requires dynamic shared memory.
            </param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SharedMemorySpecification.HasSharedMemory">
            <summary>
            Returns true if the current specification.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SharedMemorySpecification.StaticSize">
            <summary>
            Returns the amount of shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SharedMemorySpecification.HasStaticMemory">
            <summary>
            Returns true if the current specification required static shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SharedMemorySpecification.HasDynamicMemory">
            <summary>
            Returns true if the current specification requires dynamic shared memory.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.EntryPointDescription">
            <summary>
            Specifies an entry point method including its associated index type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.FromExplicitlyGroupedKernel(System.Reflection.MethodInfo)">
            <summary>
            Creates a new entry point description from the given method source that is
            compatible with explicitly grouped kernels.
            </summary>
            <param name="methodSource">The kernel method source.</param>
            <returns>The created entry point description.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.FromImplicitlyGroupedKernel(System.Reflection.MethodInfo)">
            <summary>
            Creates a new entry point description from the given method source that is
            compatible with implicitly grouped kernels.
            </summary>
            <param name="methodSource">The kernel method source.</param>
            <returns>The created entry point description.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.#ctor(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[],ILGPU.IndexType)">
            <summary>
            Constructs a new entry point description.
            </summary>
            <param name="methodSource">The method source.</param>
            <param name="parameters">The raw array of attached kernel parameters.</param>
            <param name="indexType">The index type.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPointDescription.MethodSource">
            <summary>
            Returns the kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPointDescription.Name">
            <summary>
            Returns the name of the underlying entry point to be used in the scope of
            loaded runtime <see cref="T:ILGPU.Runtime.Kernel"/> instances.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPointDescription.IndexType">
            <summary>
            Returns the associated index type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPointDescription.Parameters">
            <summary>
            Returns all parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPointDescription.KernelIndexParameterOffset">
            <summary>
            Returns the offset for the actual parameter values while taking an implicit
            index argument into account.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.EntryPointDescription.HasSpecializedParameters">
            <summary>
            Returns true if this entry point uses specialized parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.Validate">
            <summary>
            Validates this object and throws a <see cref="T:System.NotSupportedException"/> in
            the case of an unsupported kernel configuration.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.CreateLauncherMethod(ILGPU.RuntimeSystem,System.Type,ILGPU.RuntimeSystem.MethodEmitter@)">
            <summary>
            Creates a new launcher method.
            </summary>
            <param name="runtimeSystem">The current runtime system.</param>
            <param name="instanceType">The instance type (if any).</param>
            <param name="methodEmitter">The method emitter.</param>
            <returns>The acquired scoped lock.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.Equals(ILGPU.Backends.EntryPoints.EntryPointDescription)">
            <summary>
            Returns true if the given description is equal to the current one.
            </summary>
            <param name="other">The other description.</param>
            <returns>True, if the given cached key is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.GetHashCode">
            <summary>
            Returns the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.op_Equality(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Backends.EntryPoints.EntryPointDescription)">
            <summary>
            Returns true if the left and right descriptions are the same.
            </summary>
            <param name="left">The left description.</param>
            <param name="right">The right description.</param>
            <returns>True, if the left and right descriptions are the same.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.EntryPointDescription.op_Inequality(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Backends.EntryPoints.EntryPointDescription)">
            <summary>
            Returns true if the left and right descriptions are not the same.
            </summary>
            <param name="left">The left description.</param>
            <param name="right">The right description.</param>
            <returns>True, if the left and right descriptions are not the same.</returns>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.KernelNameAttribute">
            <summary>
            Specifies a custom kernel name used in OpenCL or PTX kernels.
            </summary>
            <remarks>
            Kernel names have to consist of ASCII characters only.
            </remarks>
        </member>
        <member name="F:ILGPU.Backends.EntryPoints.KernelNameAttribute.KernelNamePrefix">
            <summary>
            The internally used kernel prefix to avoid clashes with other utility/local
            functions in the finally emitted assembly.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.KernelNameAttribute.GetKernelName(System.Reflection.MethodInfo)">
            <summary>
            Gets the kernel name for the given entry point function.
            </summary>
            <param name="methodInfo">The entry point function.</param>
            <returns>The kernel name.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.KernelNameAttribute.GetCompatibleName(System.String)">
            <summary>
            Returns a compatible function name for all runtime backends.
            </summary>
            <param name="name">The source name.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.KernelNameAttribute.#ctor(System.String)">
            <summary>
            Constructs a new kernel name attribute.
            </summary>
            <param name="kernelName">The kernel name to use.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.KernelNameAttribute.KernelName">
            <summary>
            Returns the kernel name to use.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ParameterCollection">
            <summary>
            The parameter specification of an entry point.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator">
            <summary>
            Returns an enumerator to enumerate all types in the collection.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.#ctor(System.Collections.Immutable.ImmutableArray{System.Type})">
            <summary>
            Constructs a new parameter type enumerator.
            </summary>
            <param name="source">The source array.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.Current">
            <summary>
            Returns the current type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameter">
            <summary>
            Represents a parameter that is annotated with the help of the
            <see cref="T:ILGPU.Runtime.SpecializedValue`1"/> structure to enable dynamic specialization
            of kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameter.#ctor(System.Int32,System.Type,System.Type)">
            <summary>
            Constructs a new specialized parameter.
            </summary>
            <param name="index">The referenced parameter index.</param>
            <param name="parameterType">The raw parameter type.</param>
            <param name="specializedType">The specialized parameter type.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameter.Index">
            <summary>
            Returns the parameter index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameter.ParameterType">
            <summary>
            Returns the actual parameter type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameter.SpecializedType">
            <summary>
            Returns the specialized parameter type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.#ctor(System.Collections.Immutable.ImmutableArray{System.Type})">
            <summary>
            Constructs a new parameter type collection.
            </summary>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.Count">
            <summary>
            Returns the number of parameter types.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.ParameterTypes">
            <summary>
            Returns the desired kernel launcher parameter types (including references).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.SpecializedParameters">
            <summary>
            Returns the desired kernel launcher parameter types (including references).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.HasSpecializedParameters">
            <summary>
            Returns true if this collection has specialized parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.ParameterCollection.Item(System.Int32)">
            <summary>
            Returns the underlying parameter type (without references).
            </summary>
            <param name="index">The parameter index.</param>
            <returns>The desired parameter type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.GetParameterType(System.Collections.Immutable.ImmutableArray{System.Type},System.Int32)">
            <summary>
            Returns the underlying parameter type (without references).
            </summary>
            <param name="parameterTypes">The parameter types.</param>
            <param name="parameterIndex">The parameter index.</param>
            <returns>The desired parameter type.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.IsByRef(System.Int32)">
            <summary>
            Returns true if the specified parameter is passed by reference.
            </summary>
            <param name="parameterIndex">The parameter index.</param>
            <returns>True, if the specified parameter is passed by reference.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.CopyTo(System.Type[],System.Int32)">
            <summary>
            Copies the parameter types to the given array.
            </summary>
            <param name="target">The target array.</param>
            <param name="offset">The target offset to copy to.</param>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all types in the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.System#Collections#Generic#IEnumerable{System#Type}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all types in the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.ParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all types in the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint">
            <summary>
            An entry point that differentiates between views and data structures.
            </summary>
            <remarks>
            This is useful since many APIs (like OpenCL) require intrinsic support for
            passing views to kernels via separate API calls.
            </remarks>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter">
            <summary>
            Represents a single view parameter in the scope of a kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.#ctor(System.Int32,System.ValueTuple{System.Type,System.Int32}@,ILGPU.IR.Values.FieldAccessChain,ILGPU.IR.Values.FieldAccess,System.Type,System.Type)">
            <summary>
            Constructs a new view parameter.
            </summary>
            <param name="index">The view parameter index.</param>
            <param name="parameter">The parameter info.</param>
            <param name="sourceChain">The source access chain.</param>
            <param name="targetAccess">The target access.</param>
            <param name="elementType">The element type of the view.</param>
            <param name="viewType">The source view type.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.Index">
            <summary>
            Returns the index of the i-th view entry.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.ParameterType">
            <summary>
            Returns the associated parameter type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.ParameterIndex">
            <summary>
            Returns the associated kernel-parameter index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.SourceChain">
            <summary>
            Returns the access to resolve the view parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.TargetAccess">
            <summary>
            Returns the target access.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.ElementType">
            <summary>
            Returns the underlying element type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter.ViewType">
            <summary>
            Returns the associated array-view type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection">
            <summary>
            Represents a readonly list of view parameters.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator">
            <summary>
            An enumerator to enumerate all view parameters in this collection.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.#ctor(ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection@)">
            <summary>
            Constructs a new parameter enumerator.
            </summary>
            <param name="collection">The parent collection.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.EntryPoint">
            <summary>
            Returns the parent entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.Index">
            <summary>
            Returns the current index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.EndIndex">
            <summary>
            Returns the end index (exclusive).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.#ctor(ILGPU.Backends.EntryPoints.SeparateViewEntryPoint,System.Int32,System.Int32)">
            <summary>
            Constructs a new parameter collection.
            </summary>
            <param name="entryPoint">The parent entry point.</param>
            <param name="startIndex">The start index (inclusive).</param>
            <param name="endIndex">The end index (exclusive).</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.EntryPoint">
            <summary>
            Returns the parent entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.StartIndex">
            <summary>
            Returns the start index (inclusive).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.EndIndex">
            <summary>
            Returns the end index (exclusive).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Count">
            <summary>
            Returns the number of view parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.Item(System.Int32)">
            <summary>
            Returns the i-th view parameter.
            </summary>
            <param name="index">The index of the view parameter to get.</param>
            <returns>The desired view parameter.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all parameters in this collection.
            </summary>
            <returns>
            An enumerator to enumerate all parameters in this collection.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.System#Collections#Generic#IEnumerable{ILGPU#Backends#EntryPoints#SeparateViewEntryPoint#ViewParameter}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="F:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.viewParameterMapping">
            <summary>
            Maps parameter indices to view-parameter intervals.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.#ctor(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Backends.EntryPoints.SharedMemorySpecification@,ILGPU.Runtime.KernelSpecialization@,ILGPU.IR.Types.TypeInformationManager,System.Int32)">
            <summary>
            Constructs a new entry point targeting the given method.
            </summary>
            <param name="description">The entry point description.</param>
            <param name="sharedMemory">The shared memory specification.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="typeInformationManager">The information manager to use.</param>
            <param name="numImplementationFieldsPerView">
            The number of fields per view.
            </param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.NumImplementationFieldsPerView">
            <summary>
            Returns the number of fields per view.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ResolveVirtualViewParameters(System.Collections.Immutable.ImmutableArray{ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter}.Builder,System.ValueTuple{System.Type,System.Int32}@,ILGPU.IR.Types.TypeInformationManager.TypeInformation,ILGPU.IR.Values.FieldAccessChain,ILGPU.IR.Values.FieldAccess)">
            <summary>
            Analyzes the given parameter types and resolves all virtual
            view parameters that should be passed separately.
            </summary>
            <param name="builder">The target builder to append to.</param>
            <param name="parameter">The parameter info.</param>
            <param name="type">The current type.</param>
            <param name="sourceChain">The source access chain.</param>
            <param name="targetAccess">The target field access.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.NumViewParameters">
            <summary>
            Returns the number of all separate view parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameters">
            <summary>
            Contains all separate view parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.TryGetViewParameters(System.Int32,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameterCollection@)">
            <summary>
            Tries to get view parameters for the given kernel-parameter index.
            </summary>
            <param name="parameterIndex">The kernel-parameter index.</param>
            <param name="viewParameters">The resolved view parameters (if any).</param>
            <returns>True, if view parameters could be determined.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.GetViewParameters(System.Int32)">
            <summary>
            Get view parameters for the given kernel-parameter index.
            </summary>
            <param name="parameterIndex">The kernel-parameter index.</param>
            <returns>The collection of view parameters.</returns>
        </member>
        <member name="T:ILGPU.Backends.IBackendCodeGenerator`1">
            <summary>
            Represents an abstract code generator that works on a given data type.
            </summary>
            <typeparam name="TKernelBuilder">
            The data type on which this code generator can work.
            </typeparam>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator`1.GenerateConstants(`0)">
            <summary>
            Generates all constant definitions (if any).
            </summary>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator`1.GenerateHeader(`0)">
            <summary>
            Generates a header definition (if any).
            </summary>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator`1.GenerateCode">
            <summary>
            Generates the actual function code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator`1.Merge(`0)">
            <summary>
            Merges all changes inside the current code generator into the given builder.
            </summary>
            <param name="builder">The builder to merge with.</param>
        </member>
        <member name="T:ILGPU.Backends.IBackendCodeGenerator">
            <summary>
            An abstract backend code generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.MethodCall)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="methodCall">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PhiValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="phiValue">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Parameter)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="parameter">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.UnaryArithmeticValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.BinaryArithmeticValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.TernaryArithmeticValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.CompareValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.ConvertValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsPointerCast)">
            <summary>
            Generates code for the given int to pointer cast.
            </summary>
            <param name="cast">The cast node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PointerAsIntCast)">
            <summary>
            Generates code for the given pointer to int cast.
            </summary>
            <param name="cast">The cast node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PointerCast)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="cast">The cast node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AddressSpaceCast)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.FloatAsIntCast)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsFloatCast)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Predicate)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="predicate">The predicate node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GenericAtomic)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="atomic">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AtomicCAS)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="atomicCAS">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Alloca)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="alloca">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.MemoryBarrier)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="barrier">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Load)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="load">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Store)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="store">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadElementAddress)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadFieldAddress)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AlignTo)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AsAligned)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PrimitiveValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.StringValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.NullValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.StructureValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GetField)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SetField)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GridIndexValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupIndexValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GridDimensionValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupDimensionValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpSizeValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LaneIdxValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.DynamicMemoryLengthValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PredicateBarrier)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="barrier">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Barrier)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="barrier">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Broadcast)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="broadcast">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpShuffle)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="shuffle">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SubWarpShuffle)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="shuffle">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.DebugAssertOperation)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="debug">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.ReturnTerminator)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="returnTerminator">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.UnconditionalBranch)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="branch">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IfBranch)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="branch">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SwitchBranch)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="branch">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LanguageEmitValue)">
            <summary>
            Generates code for the given value.
            </summary>
            <param name="emit">The node.</param>
        </member>
        <member name="T:ILGPU.Backends.BackendCodeGenerator">
            <summary>
            Extension methods for <see cref="T:ILGPU.Backends.IBackendCodeGenerator"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.#ctor(`0)">
            <summary>
            Creates a new code-generation visitor wrapper.
            </summary>
            <param name="codeGenerator">The parent code generator.</param>
        </member>
        <member name="P:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.CodeGenerator">
            <summary>
            Returns the parent code generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.MethodCall)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.MethodCall)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.PhiValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PhiValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.Parameter)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Parameter)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.UnaryArithmeticValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UnaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.BinaryArithmeticValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.BinaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.TernaryArithmeticValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.TernaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.CompareValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.CompareValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.ConvertValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ConvertValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.IntAsPointerCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IntAsPointerCast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.PointerAsIntCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PointerAsIntCast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.PointerCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PointerCast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.AddressSpaceCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AddressSpaceCast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.ViewCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ViewCast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.ArrayToViewCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ArrayToViewCast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.FloatAsIntCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.FloatAsIntCast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.IntAsFloatCast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IntAsFloatCast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.Predicate)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Predicate)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GenericAtomic)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GenericAtomic)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.AtomicCAS)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AtomicCAS)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.Alloca)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Alloca)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.MemoryBarrier)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.MemoryBarrier)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.Load)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Load)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.Store)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Store)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.SubViewValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SubViewValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.NewArray)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NewArray)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GetArrayLength)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetArrayLength)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.LoadElementAddress)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadElementAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.LoadArrayElementAddress)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadArrayElementAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.LoadFieldAddress)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadElementAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.NewView)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NewView)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.AlignTo)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AlignTo)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.AsAligned)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AsAligned)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GetViewLength)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetViewLength)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.PrimitiveValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PrimitiveValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.StringValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.StringValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.NullValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NullValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.StructureValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.StructureValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GetField)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetField)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.SetField)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SetField)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.AcceleratorTypeValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AcceleratorTypeValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GridIndexValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GridIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GroupIndexValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GroupIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GridDimensionValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GridDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.GroupDimensionValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GroupDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.WarpSizeValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WarpSizeValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.LaneIdxValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LaneIdxValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.DynamicMemoryLengthValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.DynamicMemoryLengthValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.PredicateBarrier)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PredicateBarrier)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.Barrier)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Barrier)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.Broadcast)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Broadcast)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.WarpShuffle)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WarpShuffle)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.SubWarpShuffle)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SubWarpShuffle)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.UndefinedValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UndefinedValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.HandleValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.HandleValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.DebugAssertOperation)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.DebugAssertOperation)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.WriteToOutput)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WriteToOutput)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.ReturnTerminator)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ReturnTerminator)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.UnconditionalBranch)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UnconditionalBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.IfBranch)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IfBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.SwitchBranch)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SwitchBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.BackendValueVisitor`1.Visit(ILGPU.IR.Values.LanguageEmitValue)">
            <summary cref="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LanguageEmitValue)"/>
        </member>
        <member name="M:ILGPU.Backends.BackendCodeGenerator.GenerateCodeFor``1(``0,ILGPU.IR.Value)">
            <summary>
            Generates code for the given value.
            </summary>
            <typeparam name="TCodeGenerator">The actual code-generator type.</typeparam>
            <param name="codeGenerator">The code-generator instance.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="T:ILGPU.Backends.IBackendHook">
            <summary>
            Represents a custom backend hook.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IBackendHook.FinishedCodeGeneration(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Completed all frontend operations.
            </summary>
            <param name="context">The main context.</param>
            <param name="entryPoint">The kernel function.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendHook.InitializedKernelContext(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Initialized the kernel context via imports of the required
            kernel function.
            </summary>
            <param name="kernelContext">The custom backend kernel context.</param>
            <param name="kernelMethod">The kernel function.</param>
        </member>
        <member name="M:ILGPU.Backends.IBackendHook.OptimizedKernelContext(ILGPU.IR.IRContext,ILGPU.IR.Method)">
            <summary>
            Performed final kernel optimization steps.
            </summary>
            <param name="kernelContext">The custom backend kernel context.</param>
            <param name="kernelMethod">The kernel function.</param>
        </member>
        <member name="T:ILGPU.Backends.IL.DefaultILBackend">
            <summary>
            The default IL backend that uses the original kernel method.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.DefaultILBackend.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new IL backend.
            </summary>
            <param name="context">The context to use.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.DefaultILBackend.GenerateCode``1(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,``0,ILGPU.Backends.IL.ILLocal@,ILGPU.Backends.IL.ILLocal@,System.Collections.Immutable.ImmutableArray{ILGPU.Backends.IL.ILLocal})">
            <summary>
            Generates the actual kernel invocation call.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ILArgumentMapper">
            <summary>
            Constructs mappings for CPU kernels.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.IL.ILArgumentMapper.MappingHandler">
            <summary>
            Implements the actual argument mapping.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILArgumentMapper.MappingHandler.MapArgument``2(``0@,``1@,System.Int32)">
            <summary>
            Emits code to set an individual argument.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILArgumentMapper.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new IL argument mapper.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILArgumentMapper.Map(ILGPU.Backends.EntryPoints.EntryPoint)">
            <summary>
            Creates code that maps the given parameter specification to
            a compatible representation.
            </summary>
            <param name="entryPoint">The entry point.</param>
        </member>
        <member name="T:ILGPU.Backends.IL.ILBackend">
            <summary>
            The basic MSIL backend for the CPU runtime.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ILBackend.Handler">
            <summary>
            Represents the handler delegate type of custom code-generation handlers.
            </summary>
            <param name="backend">The current backend.</param>
            <param name="emitter">The current emitter.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="F:ILGPU.Backends.IL.ILBackend.Reconstruct2DIndexMethod">
            <summary>
            A reference to the static <see cref="M:ILGPU.Backends.IL.ILBackend.Reconstruct2DIndex(ILGPU.Index2D,System.Int32)"/>
            method.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.ILBackend.Reconstruct3DIndexMethod">
            <summary>
            A reference to the static <see cref="M:ILGPU.Backends.IL.ILBackend.Reconstruct3DIndex(ILGPU.Index3D,System.Int32)"/>
            method.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.Reconstruct2DIndex(ILGPU.Index2D,System.Int32)">
            <summary>
            Helper method to reconstruct 2D indices.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.Reconstruct3DIndex(ILGPU.Index3D,System.Int32)">
            <summary>
            Helper method to reconstruct 3D indices.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.#ctor(ILGPU.Context,ILGPU.Runtime.CapabilityContext,System.Int32,ILGPU.Backends.EntryPoints.ArgumentMapper)">
            <summary>
            Constructs a new IL backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="capabilities">The supported capabilities.</param>
            <param name="warpSize">The current warp size.</param>
            <param name="argumentMapper">The argument mapper to use.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.WarpSize">
            <summary>
            Returns the associated warp size.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILBackend.ArgumentMapper">
            <summary>
            Returns the associated <see cref="P:ILGPU.Backends.Backend.ArgumentMapper"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.Compile(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.IL.ILCompiledKernel"/> instance.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.GenerateCode``1(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,``0,ILGPU.Backends.IL.ILLocal@,ILGPU.Backends.IL.ILLocal@,System.Collections.Immutable.ImmutableArray{ILGPU.Backends.IL.ILLocal})">
            <summary>
            Generates the actual kernel code.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="entryPoint">The desired entry point.</param>
            <param name="backendContext">The current backend context.</param>
            <param name="emitter">The current code generator.</param>
            <param name="task">The strongly typed task local.</param>
            <param name="index">The index dimension local (for implicit kernels).</param>
            <param name="locals">
            The array of all local variables loaded from the task kernel implementation.
            </param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.GenerateLocals``1(``0,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo},ILGPU.Backends.IL.ILLocal)">
            <summary>
            Generates code that caches all task fields in local variables.
            </summary>
            <param name="emitter">The current code generator.</param>
            <param name="taskArgumentMapping">
            The created task-argument mapping that maps parameter indices of uniforms
            and dynamically-sized shared-memory-variable-length specifications to fields
            in the task class.
            </param>
            <param name="task">The strongly typed task local.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.GenerateAcceleratorTask(ILGPU.Backends.EntryPoints.ParameterCollection@,System.Reflection.ConstructorInfo@,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo}@)">
            <summary>
            Generates specialized task classes for kernel execution.
            </summary>codeEmitter
            <param name="parameters">The parameter collection.</param>
            <param name="taskConstructor">The created task constructor.</param>
            <param name="taskArgumentMapping">
            The created task-argument mapping that maps parameter indices of uniforms
            and dynamically-sized shared-memory-variable-length specifications to fields
            in the task class.
            </param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILBackend.GenerateStartupCode``1(ILGPU.Backends.EntryPoints.EntryPoint,``0,System.Type,ILGPU.Backends.IL.ILLocal@,ILGPU.Backends.IL.ILLocal@)">
            <summary>
            Generates kernel startup code.
            </summary>
            <param name="entryPoint">The entry point.</param>
            <param name="emitter">The current code generator.</param>
            <param name="taskType">The created task.</param>
            <param name="task">The created strongly typed task local.</param>
            <param name="index">The index dimension local (for implicit kernels).</param>
        </member>
        <member name="T:ILGPU.Backends.IL.ILCompiledKernel">
            <summary>
            Represents a compiled kernel in MSIL form.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILCompiledKernel.#ctor(ILGPU.Context,ILGPU.Backends.EntryPoints.EntryPoint,System.Reflection.MethodInfo,System.Type,System.Reflection.ConstructorInfo,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo},System.Int32,System.Int32)">
            <summary>
            Constructs a new IL compiled kernel.
            </summary>
            <param name="context">The associated context.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="kernelMethod">The main kernel method.</param>
            <param name="taskType">The custom task type.</param>
            <param name="taskConstructor">The custom task constructor.</param>
            <param name="taskArgumentMapping">
            Mapping of argument indices to fields.
            </param>
            <param name="numSharedMemoryAllocations">
            The number of shared-memory allocations.
            </param>
            <param name="allocatedSharedMemorySize">
            The amount of statically allocated bytes of shared memory.
            </param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.KernelMethod">
            <summary>
            Returns the main kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.ExecutionHandler">
            <summary>
            Returns a CPU-runtime compatible execution handler.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.TaskType">
            <summary>
            Returns the custom task type to dispatch the kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.TaskConstructor">
            <summary>
            Returns the task constructor to instantiate the custom task type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.TaskArgumentMapping">
            <summary>
            Returns a mapping of argument indices to fields.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.NumSharedMemoryAllocations">
            <summary>
            Returns the number of shared-memory allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILCompiledKernel.AllocatedSharedMemorySize">
            <summary>
            Returns the size of statically allocated shared memory in bytes.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ILLocal">
            <summary>
            Represents a local variable in MSIL.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILLocal.#ctor(System.Int32,System.Type)">
            <summary>
            Constructs a new local variable in MSIL.
            </summary>
            <param name="index">The variable index.</param>
            <param name="type">The variable type.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILLocal.Index">
            <summary>
            Returns the variable index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.IL.ILLocal.VariableType">
            <summary>
            Returns the variable type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ILLabel">
            <summary>
            Represents a label in MSIL.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILLabel.#ctor(System.Int32)">
            <summary>
            Constructs a new label.
            </summary>
            <param name="index">The label index.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILLabel.Index">
            <summary>
            Returns the assigned label index.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.LocalOperation">
            <summary>
            A local operation on a variable.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.LocalOperation.Load">
            <summary>
            Loads a local variable.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.LocalOperation.LoadAddress">
            <summary>
            Loads the address of a local variable.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.LocalOperation.Store">
            <summary>
            Stores a local variable.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ArgumentOperation">
            <summary>
            An operation on a function argument.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.ArgumentOperation.Load">
            <summary>
            Loads an argument.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.IL.ArgumentOperation.LoadAddress">
            <summary>
            Loads the address of an argument.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.IILEmitter">
            <summary>
            Represents an emitter for MSIL code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable.
            </summary>
            <param name="type">The variable type.</param>
            <returns>The variable reference.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.DeclarePinnedLocal(System.Type)">
            <summary>
            Declares a pinned local variable.
            </summary>
            <param name="type">The variable type.</param>
            <returns>The variable reference.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.DeclareLabel">
            <summary>
            Declares a new label.
            </summary>
            <returns>The label reference.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)">
            <summary>
            Marks the given label by associating the current
            instruction pointer with the jump label.
            </summary>
            <param name="label">The label to mark.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)">
            <summary>
            Emits a new local-variable operation.
            </summary>
            <param name="operation">The operation type.</param>
            <param name="local">The local variable reference.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)">
            <summary>
            Emits a new argument operation.
            </summary>
            <param name="operation">The operation type.</param>
            <param name="argumentIndex">The argument reference.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitCall(System.Reflection.MethodInfo)">
            <summary>
            Emits a new call to the given method.
            </summary>
            <param name="target">The target to call.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)">
            <summary>
            Emits a new object instruction.
            </summary>
            <param name="info">The constructor to call.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitAlloca(System.Int32)">
            <summary>
            Emits a local memory allocation.
            </summary>
            <param name="size">The size in bytes to allocate.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.String)">
            <summary>
            Emits a new constant.
            </summary>
            <param name="constant">The constant to emit.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int32)">
            <summary>
            Emits a new constant.
            </summary>
            <param name="constant">The constant to emit.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int64)">
            <summary>
            Emits a new constant.
            </summary>
            <param name="constant">The constant to emit.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Single)">
            <summary>
            Emits a new constant.
            </summary>
            <param name="constant">The constant to emit.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Double)">
            <summary>
            Emits a new constant.
            </summary>
            <param name="constant">The constant to emit.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary>
            Emits a new operation.
            </summary>
            <param name="opCode">The operation code.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)">
            <summary>
            Emits a new operation.
            </summary>
            <param name="opCode">The operation code.</param>
            <param name="label">The label argument.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary>
            Emits a new operation.
            </summary>
            <param name="opCode">The operation code.</param>
            <param name="type">The type argument.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <summary>
            Emits a new operation.
            </summary>
            <param name="opCode">The operation code.</param>
            <param name="field">The field argument.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])">
            <summary>
            Emits a switch instruction.
            </summary>
            <param name="labels">The jump targets.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.IILEmitter.Finish">
            <summary>
            Finishes the code generation process.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.IL.ILEmitter">
            <summary>
            A default IL emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.#ctor(System.Reflection.Emit.ILGenerator)">
            <summary>
            Constructs a new IL emitter.
            </summary>
            <param name="generator">The associated IL generator.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.ILEmitter.Generator">
            <summary>
            Returns the underlying generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.DeclareLocalInternal(System.Type,System.Boolean)">
            <summary>
            Declares a internal local.
            </summary>
            <param name="type">The local type.</param>
            <param name="pinned">True, if the local is pinned.</param>
            <returns>The declared local.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.DeclareLocal(System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclareLocal(System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.DeclarePinnedLocal(System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclarePinnedLocal(System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.DeclareLabel">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclareLabel"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitCall(System.Reflection.MethodInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitCall(System.Reflection.MethodInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitAlloca(System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitAlloca(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitConstant(System.String)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.String)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitConstant(System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitConstant(System.Int64)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int64)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitConstant(System.Single)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Single)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitConstant(System.Double)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Double)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])"/>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitter.Finish">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Finish"/>
        </member>
        <member name="T:ILGPU.Backends.IL.DebugILEmitter">
            <summary>
            Represents an IL emitter for debugging purposes.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.#ctor(System.IO.TextWriter)">
            <summary>
            Constructs a new IL emitter for debugging purposes.
            </summary>
            <param name="writer">The associated text writer.</param>
        </member>
        <member name="P:ILGPU.Backends.IL.DebugILEmitter.Writer">
            <summary>
            Returns the associated stream writer.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.DeclareLocalInternal(System.Type)">
            <summary>
            Declares a locally internal type.
            </summary>
            <param name="type">The allocation type.</param>
            <returns>The allocated local.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.DeclareLocal(System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclareLocal(System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.DeclarePinnedLocal(System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclarePinnedLocal(System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.DeclareLabel">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclareLabel"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitCall(System.Reflection.MethodInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitCall(System.Reflection.MethodInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitAlloca(System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitAlloca(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitConstant(System.String)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.String)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitConstant(System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitConstant(System.Int64)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int64)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitConstant(System.Single)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Single)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitConstant(System.Double)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Double)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])"/>
        </member>
        <member name="M:ILGPU.Backends.IL.DebugILEmitter.Finish">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Finish"/>
        </member>
        <member name="T:ILGPU.Backends.IL.NopILEmitter">
            <summary>
            Represents a no-operation IL emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.DeclareLocal(System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclareLocal(System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.DeclarePinnedLocal(System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclarePinnedLocal(System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.DeclareLabel">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.DeclareLabel"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.MarkLabel(ILGPU.Backends.IL.ILLabel)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.LocalOperation,ILGPU.Backends.IL.ILLocal)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(ILGPU.Backends.IL.ArgumentOperation,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.EmitCall(System.Reflection.MethodInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitCall(System.Reflection.MethodInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitNewObject(System.Reflection.ConstructorInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,ILGPU.Backends.IL.ILLabel)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.EmitAlloca(System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitAlloca(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.EmitConstant(System.String)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.String)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.EmitConstant(System.Int32)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.EmitConstant(System.Int64)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Int64)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.EmitConstant(System.Single)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Single)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.EmitConstant(System.Double)">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitConstant(System.Double)"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.EmitSwitch(ILGPU.Backends.IL.ILLabel[])"/>
        </member>
        <member name="M:ILGPU.Backends.IL.NopILEmitter.Finish">
            <summary cref="M:ILGPU.Backends.IL.IILEmitter.Finish"/>
        </member>
        <member name="T:ILGPU.Backends.IL.ILEmitterExtensions">
            <summary>
            General IL emitter extensions methods.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitterExtensions.GenerateEqualsAndHashCode(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            Generates hash code and equals functions for the given fields.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="fieldsToUse">All fields to use to compute the hash code.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitterExtensions.GenerateHashCode(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            Generates a new hash code function.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="fieldsToUse">All fields to use to compute the hash code.</param>
            <returns>The created hash code function.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitterExtensions.GenerateEquals(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            Generates a new typed equals method using the given fields.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="fieldsToUse">All fields to use to compute the hash code.</param>
            <returns>The created equals function.</returns>
        </member>
        <member name="M:ILGPU.Backends.IL.ILEmitterExtensions.GenerateEquals(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo)">
            <summary>
            Generates a new object equals method using the given typed equals overload.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="equalsInfo">The typed equals function to call.</param>
            <returns>The created equals function.</returns>
        </member>
        <member name="T:ILGPU.Backends.IL.Transformations.ILAcceleratorSpecializer">
            <summary>
            The IL accelerator specializer.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.Transformations.ILAcceleratorSpecializer.#ctor(ILGPU.IR.Types.PrimitiveType,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new IL accelerator specializer.
            </summary>
            <param name="pointerType">The actual pointer type to use.</param>
            <param name="warpSize">The warp size to use.</param>
            <param name="enableAssertions">True, if the assertions are enabled.</param>
            <param name="enableIOOperations">True, if the IO is enabled.</param>
        </member>
        <member name="M:ILGPU.Backends.IL.Transformations.ILAcceleratorSpecializer.Implement(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.DebugAssertOperation)">
            <summary>
            Keeps the debug assertion operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.IL.Transformations.ILAcceleratorSpecializer.Implement(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.WriteToOutput)">
            <summary>
            Keeps the IO operation.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.InvalidCodeGenerationException">
            <summary>
            An exception that is thrown in case of a fatal error in a backend.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.InvalidCodeGenerationException.#ctor">
            <summary>
            Constructs a new code generation exception.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.InvalidCodeGenerationException.#ctor(System.String)">
            <summary>
            Constructs a new code generation exception.
            </summary>
            <param name="message">The detailed error message.</param>
        </member>
        <member name="M:ILGPU.Backends.InvalidCodeGenerationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new code generation exception.
            </summary>
            <param name="message">The detailed error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ILGPU.Backends.InvalidCodeGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new code generation exception.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.NotSupportedIntrinsicException">
            <summary>
            An exception that is thrown in case of a not support intrinsic.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.NotSupportedIntrinsicException.#ctor">
            <summary>
            Constructs a new intrinsic exception.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.NotSupportedIntrinsicException.#ctor(ILGPU.IR.Method)">
            <summary>
            Constructs a new intrinsic exception.
            </summary>
            <param name="intrinsicMethod">
            The IR method that could not be implemented.
            </param>
        </member>
        <member name="M:ILGPU.Backends.NotSupportedIntrinsicException.#ctor(System.String)">
            <summary>
            Constructs a new intrinsic exception.
            </summary>
            <param name="intrinsicName">The name of the not supported intrinsic.</param>
        </member>
        <member name="M:ILGPU.Backends.NotSupportedIntrinsicException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new intrinsic exception.
            </summary>
            <param name="message">The detailed error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ILGPU.Backends.NotSupportedIntrinsicException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new intrinsic exception.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLArgumentMapper">
            <summary>
            Constructs mappings for CL kernels.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLArgumentMapper.SetKernelArgumentMethod">
            <summary>
            The method to set OpenCL kernel arguments.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler">
            <summary>
            Implements the actual argument mapping.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1">
            <summary>
            A source mapper.
            </summary>
            <typeparam name="TSource">The internal source type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1.#ctor(`0)">
            <summary>
            Constructs a new source mapper.
            </summary>
            <param name="source">The underlying source.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1.Source">
            <summary>
            Returns the associated source.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1.EmitLoadSourceAddress``1(``0@)">
            <summary>
            Emits a nested source address.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapperSource`1.EmitLoadSource``1(``0@)">
            <summary>
            Emits a nested source value.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.#ctor(ILGPU.Backends.OpenCL.CLArgumentMapper,ILGPU.Backends.IL.ILLocal,ILGPU.Backends.IL.ILLocal,System.Int32)">
            <summary>
            Constructs a new mapping handler.
            </summary>
            <param name="parent">The parent mapper.</param>
            <param name="kernelLocal">
            The local variable holding the associated kernel reference.
            </param>
            <param name="resultLocal">
            The local variable holding the result API status.
            </param>
            <param name="startIndex">The start argument index.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.Parent">
            <summary>
            Returns the underlying ABI.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.KernelLocal">
            <summary>
            Returns the associated kernel local.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.ResultLocal">
            <summary>
            Returns the associated result variable which is
            used to accumulate all intermediate method return values.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.StartIndex">
            <summary>
            Returns the start argument index.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.MappingHandler.MapArgument``2(``0@,``1@,System.Int32)">
            <summary>
            Emits code to set an individual argument.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler">
            <summary>
            Implements the actual argument mapping.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1">
            <summary>
            A source mapper.
            </summary>
            <typeparam name="TSource">The internal source type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.#ctor(`0,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter@)">
            <summary>
            Constructs a new source mapper.
            </summary>
            <param name="source">The underlying source.</param>
            <param name="viewParameter">The view parameter.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.Source">
            <summary>
            Returns the associated source.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.SourceType">
            <summary cref="P:ILGPU.Backends.EntryPoints.ArgumentMapper.ISource.SourceType"/>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.Parameter">
            <summary>
            The associated parameter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.EmitSourceLocal``1(``0@)">
            <summary>
            Emits a source local that contains the native view pointer.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.EmitLoadSourceAddress``1(``0@)">
            <summary>
            Converts a view into its native implementation form and maps it to
            an argument.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapperSource`1.EmitLoadSource``1(``0@)">
            <summary>
            Converts a view into its native implementation form and maps it to
            an argument.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.#ctor(ILGPU.Backends.OpenCL.CLArgumentMapper,ILGPU.Backends.IL.ILLocal,ILGPU.Backends.IL.ILLocal,System.Int32)">
            <summary>
            Constructs a new mapping handler.
            </summary>
            <param name="parent">The parent mapper.</param>
            <param name="kernelLocal">
            The local variable holding the associated kernel reference.
            </param>
            <param name="resultLocal">
            The local variable holding the result API status.
            </param>
            <param name="startIndex">The start argument index.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.Parent">
            <summary>
            Returns the underlying ABI.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.KernelLocal">
            <summary>
            Returns the associated kernel local.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.ResultLocal">
            <summary>
            Returns the associated result variable which is
            used to accumulate all intermediate method return values.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.StartIndex">
            <summary>
            Returns the start argument index.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.ViewMappingHandler.MapViewArgument``2(``0@,``1@,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint.ViewParameter@,System.Int32)">
            <summary>
            Maps a view input argument.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new OpenCL argument mapper.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.GetSizeOf(System.Type)">
            <summary>
            Returns the ABI size of the given managed type.
            </summary>
            <param name="type">The type.</param>
            <returns>The interop size in bytes.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.SetKernelArgument``2(``0@,ILGPU.Backends.IL.ILLocal,ILGPU.Backends.IL.ILLocal,System.Int32,``1@)">
            <summary>
            Emits code that sets an OpenCL kernel argument.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <typeparam name="TSource">The value source type.</typeparam>
            <param name="emitter">The current emitter.</param>
            <param name="kernelLocal">
            The local variable holding the associated kernel reference.
            </param>
            <param name="resultLocal">
            The local variable holding the result API status.
            </param>
            <param name="argumentIndex">The argument index.</param>
            <param name="source">The value source.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLArgumentMapper.Map``1(``0@,ILGPU.Backends.IL.ILLocal,ILGPU.IR.Types.TypeInformationManager,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint)">
            <summary>
            Creates code that maps all parameters of the given entry point using
            OpenCL API calls.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The target emitter to write to.</param>
            <param name="kernel">A local that holds the kernel driver reference.</param>
            <param name="typeInformationManager">
            The parent type information manager.
            </param>
            <param name="entryPoint">The entry point.</param>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLBackend">
            <summary>
            Represents an OpenCL source backend.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLBackend.MinimumVersion">
            <summary>
            Represents the minimum OpenCL C version that is required.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLBackend.extensions">
            <summary>
            Returns the list of enabled OpenCL extensions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.#ctor(ILGPU.Context,ILGPU.Runtime.OpenCL.CLCapabilityContext,ILGPU.Runtime.OpenCL.CLDeviceVendor,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Constructs a new OpenCL source backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="capabilities">The supported capabilities.</param>
            <param name="vendor">The associated major vendor.</param>
            <param name="clStdVersion">The OpenCL C version passed to -cl-std.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLBackend.Vendor">
            <summary>
            Returns the associated major device vendor.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLBackend.CLStdVersion">
            <summary>
            Returns the associated OpenCL C version.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLBackend.ArgumentMapper">
            <summary>
            Returns the associated <see cref="P:ILGPU.Backends.Backend.ArgumentMapper"/>.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLBackend.Capabilities">
            <summary>
            Returns the capabilities of this accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.CreateEntryPoint(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.EntryPoints.SeparateViewEntryPoint"/> instance.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.CreateKernelBuilder(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@,ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs@)">
            <summary>
            Creates a new <see cref="T:System.Text.StringBuilder"/> and configures a
            <see cref="T:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs"/> instance.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.CreateFunctionCodeGenerator(ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas,ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.OpenCL.CLFunctionGenerator"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.CreateKernelCodeGenerator(ILGPU.IR.Analyses.AllocaKindInformation@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas,ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs)">
            <summary>
            Generates a new <see cref="T:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLBackend.CreateKernel(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.CompiledKernel.KernelInfo,System.Text.StringBuilder,ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.OpenCL.CLCompiledKernel"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator">
            <summary>
            Generates OpenCL source code out of IR values.
            </summary>
            <remarks>The code needs to be prepared for this code generator.</remarks>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs">
            <summary>
            Generation arguments for code-generator construction.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.Backend">
            <summary>
            Returns the underlying backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.TypeGenerator">
            <summary>
            Returns the associated type generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.EntryPoint">
            <summary>
            Returns the current entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.SharedAllocations">
            <summary>
            Returns all shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.DynamicSharedAllocations">
            <summary>
            Returns all dynamic shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs.KernelTypeGenerator">
            <summary>
            Returns the current kernel-type generator.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator.MappedParameter">
            <summary>
            Represents a parameter that is mapped to OpenCL.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.MappedParameter.#ctor(ILGPU.Backends.VariableAllocator.Variable,System.String,ILGPU.IR.Values.Parameter)">
            <summary>
            Constructs a new mapped parameter.
            </summary>
            <param name="variable">The OpenCL variable.</param>
            <param name="clName">The name of the parameter in OpenCL code.</param>
            <param name="parameter">The source parameter.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.MappedParameter.Variable">
            <summary>
            Returns the associated OpenCL variable.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.MappedParameter.CLName">
            <summary>
            Returns the name of the parameter in OpenCL code.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.MappedParameter.Parameter">
            <summary>
            Returns the source parameter.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator.IParametersSetupLogic">
            <summary>
            Represents a parameter logic to setup function parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.IParametersSetupLogic.GetParameterType(ILGPU.IR.Values.Parameter)">
            <summary>
            Gets the corresponding OpenCL type for the given parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>The resulting OpenCL type representation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.IParametersSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary>
            Handles an intrinsic parameter and returns the
            associated allocated variable (if any).
            </summary>
            <param name="parameterOffset">
            The current intrinsic parameter index.
            </param>
            <param name="parameter">The intrinsic parameter.</param>
            <returns>The allocated variable (if any).</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GetMethodName(ILGPU.IR.Method)">
            <summary>
            Returns the OpenCL function name for the given function.
            </summary>
            <param name="method">The method.</param>
            <returns>The resolved OpenCL function name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GetParameterName(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the OpenCL parameter name for the given parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>The resolved OpenCL parameter name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.#ctor(ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Constructs a new code generator.
            </summary>
            <param name="args">The generator arguments.</param>
            <param name="method">The current method.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Backend">
            <summary>
            Returns the associated backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Allocas">
            <summary>
            Returns all local allocas.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.ImplementationProvider">
            <summary>
            Returns the current intrinsic provider for code-generation purposes.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Builder">
            <summary>
            Returns the associated string builder.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.VariableBuilder">
            <summary>
            Returns the associated string builder.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode">
            <summary>
            Generates PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateConstants(System.Text.StringBuilder)">
            <summary>
            Generates PTX constant declarations.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Merge(System.Text.StringBuilder)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator`1.Merge(`0)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.DeclareLabel">
            <summary>
            Declares a new label.
            </summary>
            <returns>The declared label.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.MarkLabel(System.String)">
            <summary>
            Marks the given label.
            </summary>
            <param name="label">The label to mark.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.SetupParameters``1(System.Text.StringBuilder,``0@,System.Int32)">
            <summary>
            Generates parameter declarations by writing them to the
            target builder provided.
            </summary>
            <typeparam name="TSetupLogic">
            The dependent code-generator type to use.
            </typeparam>
            <param name="logic">The type generator to use.</param>
            <param name="targetBuilder">The target builder to use.</param>
            <param name="paramOffset">The intrinsic parameter offset.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.DeclareAllocation(ILGPU.IR.Analyses.AllocaInformation@,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Setups a given allocation.
            </summary>
            <param name="allocaInfo">The single allocation to declare.</param>
            <param name="addressSpace">The target address space.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.SetupAllocations(ILGPU.IR.Analyses.AllocaKindInformation,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Setups local or shared allocations.
            </summary>
            <param name="allocas">The allocations to setup.</param>
            <param name="addressSpace">The source address space.local).</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BindSharedMemoryAllocation(ILGPU.IR.Analyses.AllocaKindInformation@)">
            <summary>
            Binds shared memory allocations.
            </summary>
            <param name="allocas">All allocations to bind.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCodeInternal">
            <summary>
            Generates code for all basic blocks.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter">
            <summary>
            Generates OpenCL source statements.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.FormattedFloatLiteralTokens">
            <summary>
            Indicates char tokens in a formatted floating-point literal that
            do not require a ".0f" suffix.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.#ctor(ILGPU.Backends.OpenCL.CLCodeGenerator)">
            <summary>
            Constructs a new statement emitter using the given target.
            </summary>
            <param name="codeGenerator">The parent code generator.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.CodeGenerator">
            <summary>
            Returns the associated code generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.BeginAppendTarget(ILGPU.Backends.VariableAllocator.Variable,System.Boolean)">
            <summary>
            Starts a target assignment.
            </summary>
            <param name="target">The target.</param>
            <param name="appendNew">True, to append a new variable target.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendDeclaration(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends a target declaration.
            </summary>
            <param name="target">The target declaration.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendTarget(ILGPU.Backends.VariableAllocator.Variable,System.Boolean)">
            <summary>
            Appends a target.
            </summary>
            <param name="target">The target.</param>
            <param name="newTarget">True, if this a new target.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendIndexedTarget(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends an indexer target.
            </summary>
            <param name="target">The target.</param>
            <param name="indexer">The indexer variable.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendFieldTarget(ILGPU.Backends.VariableAllocator.Variable,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Appends a field target.
            </summary>
            <param name="target">The target.</param>
            <param name="fieldSpan">The field span.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendIndexer(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends an indexer.
            </summary>
            <param name="indexer">The indexer variable.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendIndexer(System.String)">
            <summary>
            Appends an indexer.
            </summary>
            <param name="indexer">The indexer expression.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendPointerCast(System.String)">
            <summary>
            Appends an unsafe pointer cast expression.
            </summary>
            <param name="typeExpression">The type expression.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCast(System.String)">
            <summary>
            Appends an unsafe cast expression.
            </summary>
            <param name="typeExpression">The type expression.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendAtomicCast(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Appends a pointer cast to an intrinsic atomic pointer type.
            </summary>
            <param name="type">The arithmetic type to use.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCast(ILGPU.BasicValueType)">
            <summary>
            Appends a cast to the given basic value type.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCast(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Appends a cast to the given arithmetic basic value type.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCast(ILGPU.IR.Types.TypeNode)">
            <summary>
            Appends a cast to the given type.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCommand(System.Char)">
            <summary>
            Appends the given raw command.
            </summary>
            <param name="command">The command to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendCommand(System.String)">
            <summary>
            Appends the given raw command.
            </summary>
            <param name="command">The command to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendFieldName(System.Int32)">
            <summary>
            Appends the specified field name.
            </summary>
            <param name="fieldIndex">The field index.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendFieldViaPtr(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Appends the referenced field accessor.
            </summary>
            <param name="fieldAccess">The field access.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendField(System.Nullable{ILGPU.IR.Values.FieldSpan})">
            <summary>
            Appends the referenced field accessor.
            </summary>
            <param name="fieldAccess">The field access.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendField(ILGPU.IR.Values.FieldSpan)">
            <summary>
            Appends the referenced field accessor.
            </summary>
            <param name="fieldAccess">The field access.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendField(ILGPU.IR.Values.FieldAccessChain)">
            <summary>
            Appends a referenced field via an access chain.
            </summary>
            <param name="accessChain">The field access chain.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.OpenParen">
            <summary>
            Opens a parenthesis.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.CloseParen">
            <summary>
            Closes a parenthesis.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.BeginArguments">
            <summary>
            Starts a function-call argument list.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.EndArguments">
            <summary>
            Ends a function-call argument list.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendArgument">
            <summary>
            Appends code to finish an appended argument.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.Append(ILGPU.Backends.VariableAllocator.ConstantVariable)">
            <summary>
            Appends the given constant variable.
            </summary>
            <param name="variable">The variable to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.Append(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends the given variable directly.
            </summary>
            <param name="variable">The variable to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendArgument(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends the given register argument.
            </summary>
            <param name="argument">The argument to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendArgumentWithCast(ILGPU.Backends.VariableAllocator.Variable,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Appends the given register argument.
            </summary>
            <param name="argument">The argument to append.</param>
            <param name="valueType">The value type.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendArgumentAddress(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Appends the address of the given register argument.
            </summary>
            <param name="argument">The argument to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendArgumentAddressWithCast(ILGPU.Backends.VariableAllocator.Variable,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Appends the address of the given register argument with a cast.
            </summary>
            <param name="argument">The argument to append.</param>
            <param name="valueType">The value type.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendOperation(System.FormattableString)">
            <summary>
            Append the given operation.
            </summary>
            <param name="operation">The operation to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendOperation(ILGPU.Util.RawString)">
            <summary>
            Append the given operation.
            </summary>
            <param name="operation">The operation to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendOperation(ILGPU.Util.RawString,System.Object[])">
            <summary>
            Append the given operation.
            </summary>
            <param name="operation">The operation to append.</param>
            <param name="arguments">The string format arguments.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendConstant(System.String)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendConstant(System.Int64)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendConstant(System.UInt64)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendConstant(System.Single)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.AppendConstant(System.Double)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.Finish">
            <summary>
            Finishes the current statement.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.StatementEmitter.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCodeGenerator.Indent">
            <summary>
            The current indentation level.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PushIndent">
            <summary>
            Increases the current indentation level.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PopIndent">
            <summary>
            Decreases the current indentation level.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.AppendIndent">
            <summary>
            Appends the current indentation level to the builder.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.PushAndAppendIndent">
            <summary>
            Pushes the current indentation level and appends it to the builder.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Declare(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Declares a variable
            </summary>
            <param name="target">The target variable to declare.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GotoStatement(ILGPU.IR.BasicBlock)">
            <summary>
            Emits a new goto statement to the given target block.
            </summary>
            <param name="block">The target block to jump to.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.Move(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Emits a move operation.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <param name="source">The source variable to assign to.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Backends.VariableAllocator.Variable,System.Nullable{ILGPU.IR.Values.FieldAccess})">
            <summary>
            Begins a new statement.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <param name="fieldAccess">The field access to use.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Backends.VariableAllocator.Variable,ILGPU.IR.Values.FieldAccess)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <param name="fieldAccess">The field access to use.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <param name="indexer">The indexer variable to use.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Backends.VariableAllocator.Variable,System.String)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="target">The target variable to assign to.</param>
            <param name="command">The initial command to emit.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(ILGPU.Util.RawString)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="command">The initial command to emit.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginStatement(System.FormattableString)">
            <summary>
            Begins a new statement.
            </summary>
            <param name="command">The initial command to emit.</param>
            <returns>The created statement emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.BeginFunctionBody">
            <summary>
            Begins the function body, switching to variable capturing mode.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.FinishFunctionBody">
            <summary>
            Finishes the function body, ending variable capturing mode.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.ReturnTerminator)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.ReturnTerminator)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.UnconditionalBranch)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.UnconditionalBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.IfBranch)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IfBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.SwitchBranch)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SwitchBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.MethodCall)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.MethodCall)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.Parameter)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Parameter)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.PhiValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PhiValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.UnaryArithmeticValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.UnaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.BinaryArithmeticValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.BinaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.TernaryArithmeticValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.TernaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.CompareValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.CompareValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.ConvertValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.ConvertValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCodeForCast(ILGPU.IR.Values.CastValue)">
            <summary>
            Generates code for the given cast value.
            </summary>
            <param name="cast">The cast value to generte code for.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsPointerCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsPointerCast)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.PointerAsIntCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsPointerCast)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.PointerCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PointerCast)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.FloatAsIntCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.FloatAsIntCast)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsFloatCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsFloatCast)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.Predicate)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Predicate)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.ThrowIfUnsupportedAtomicOperation(ILGPU.IR.Values.AtomicValue)">
            <summary>
            Throws an exception if the supplied atomic operation is not supported
            by the capabilities of the accelerator.
            </summary>
            <param name="atomic">The atomic operation.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.GenericAtomic)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GenericAtomic)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.AtomicCAS)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AtomicCAS)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.Alloca)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Alloca)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.MemoryBarrier)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.MemoryBarrier)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.Load)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Load)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.Store)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Store)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadFieldAddress)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadFieldAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.AlignTo)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AlignTo)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.AsAligned)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AsAligned)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.PrimitiveValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PrimitiveValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.StringValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.StringValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.NullValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.NullValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.StructureValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.StructureValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.GetField)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GetField)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.SetField)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SetField)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.GridIndexValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GridIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupIndexValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.GridDimensionValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GridDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupDimensionValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpSizeValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpSizeValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.LaneIdxValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LaneIdxValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.DynamicMemoryLengthValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.DynamicMemoryLengthValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.PredicateBarrier)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PredicateBarrier)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.Barrier)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Barrier)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.Broadcast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Broadcast)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpShuffle)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpShuffle)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.SubWarpShuffle)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SubWarpShuffle)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.DebugAssertOperation)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.DebugAssertOperation)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.LanguageEmitValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LanguageEmitValue)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadElementAddress)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadElementAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCodeGenerator.GenerateCode(ILGPU.IR.Values.AddressSpaceCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AddressSpaceCast)"/>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCompiledKernel">
            <summary>
            Represents a compiled kernel in OpenCL source form.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCompiledKernel.#ctor(ILGPU.Context,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint,ILGPU.Backends.CompiledKernel.KernelInfo,System.String,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Constructs a new compiled kernel in OpenCL source form.
            </summary>
            <param name="context">The associated context.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="info">Detailed kernel information.</param>
            <param name="source">The source code.</param>
            <param name="version">The OpenCL C version.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCompiledKernel.Source">
            <summary>
            Returns the OpenCL source code.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCompiledKernel.CVersion">
            <summary>
            Returns the used OpenCL C version.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCompiledKernel.EntryPoint">
            <summary>
            Returns the internally used entry point.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLCVersion">
            <summary>
            Represents an OpenCL C version.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.CL10">
            <summary>
            The OpenCL C version 1.0.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.CL11">
            <summary>
            The OpenCL C version 1.1.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.CL12">
            <summary>
            The OpenCL C version 1.2.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.CL20">
            <summary>
            The OpenCL C version 2.0.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.CL30">
            <summary>
            The OpenCL C version 3.0.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLCVersion.VersionRegex">
            <summary>
            The internal regex that is used to parse OpenCL C versions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.TryParse(System.String,ILGPU.Backends.OpenCL.CLCVersion@)">
            <summary>
            Tries to parse the given string expression into an OpenCL C version.
            </summary>
            <param name="expression">The expression to parse.</param>
            <param name="version">The parsed version (if any).</param>
            <returns>
            True, if the given expression could be parsed into an OpenCL C version.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new OpenCL C version.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCVersion.Major">
            <summary>
            The major OpenCL C Version.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLCVersion.Minor">
            <summary>
            The minor OpenCL C Version.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.ToString">
            <summary>
            Returns the OpenCL C string representation that is compatible
            with the OpenCL API.
            </summary>
            <returns>The string representation of this OpenCL C version.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.op_LessThan(ILGPU.Backends.OpenCL.CLCVersion,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Returns true if the first version is smaller than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is smaller than the second one.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.op_GreaterThan(ILGPU.Backends.OpenCL.CLCVersion,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Returns true if the first version is greater than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is greater than the second one.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.op_LessThanOrEqual(ILGPU.Backends.OpenCL.CLCVersion,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Returns true if the first version is smaller than or equal to the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is smaller than the second one.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLCVersion.op_GreaterThanOrEqual(ILGPU.Backends.OpenCL.CLCVersion,ILGPU.Backends.OpenCL.CLCVersion)">
            <summary>
            Returns true if the first version is greater than or equal to the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is greater than the second one.</returns>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLFunctionGenerator">
            <summary>
            Represents a function generator for helper device functions.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLFunctionGenerator.MethodFlagsToSkip">
            <summary>
            Methods with these flags will be skipped during code generation.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLFunctionGenerator.FunctionParameterSetupLogic">
            <summary>
            A specialized function setup logic for parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.FunctionParameterSetupLogic.#ctor(ILGPU.Backends.OpenCL.CLTypeGenerator)">
            <summary>
            Constructs a new specialized function setup logic.
            </summary>
            <param name="typeGenerator">The parent type generator.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLFunctionGenerator.FunctionParameterSetupLogic.TypeGenerator">
            <summary>
            Returns the parent type generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.FunctionParameterSetupLogic.GetParameterType(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the internal type for the given parameter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.FunctionParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary>
            This setup logic does not support intrinsic parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.#ctor(ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Creates a new OpenCL function generator.
            </summary>
            <param name="args">The generation arguments.</param>
            <param name="method">The current method.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.GenerateHeaderStub(System.Text.StringBuilder)">
            <summary>
            Generates a header stub for the current method.
            </summary>
            <param name="builder">The target builder to use.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in OpenCL code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLFunctionGenerator.GenerateCode">
            <summary>
            Generates OpenCL code.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLInstructions">
            <summary>
            Contains general OpenCL instructions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetCompareOperation(ILGPU.IR.Values.CompareKind)">
            <summary>
            Resolves a compare operation.
            </summary>
            <param name="kind">The compare kind.</param>
            <returns>The resolved compare operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetAddressSpacePrefix(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Resolves an address-space-cast prefix.
            </summary>
            <param name="addressSpace">The address space.</param>
            <returns>The resolved address-space prefix.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.TryGetAddressSpaceCast(ILGPU.IR.MemoryAddressSpace,System.String@)">
            <summary>
            Trues to resolve an address-space-cast operation.
            </summary>
            <param name="addressSpace">The target address space to convert to.</param>
            <param name="operation">The resolved address-space-cast operation.</param>
            <returns>True, if an operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetArithmeticOperation(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.ArithmeticBasicValueType,System.Boolean@)">
            <summary>
            Resolves an unary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="basicValueType">The arithmetic basic value type.</param>
            <param name="isFunction">
            True, if the resolved operation is a function call.
            </param>
            <returns>The resolved arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetArithmeticOperation(ILGPU.IR.Values.BinaryArithmeticKind,System.Boolean,System.Boolean@)">
            <summary>
            Resolves a binary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="isFloat">True, if this is a floating-point operation.</param>
            <param name="isFunction">
            True, if the resolved operation is a function call.
            </param>
            <returns>The resolved arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.TryGetArithmeticOperation(ILGPU.IR.Values.TernaryArithmeticKind,System.Boolean,System.String@)">
            <summary>
            Tries to resolve a ternary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="isFloat">True, if this is a floating-point operation.</param>
            <param name="operation">The resolved operation.</param>
            <returns>True, if the operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetAtomicOperation(ILGPU.IR.Values.AtomicKind)">
            <summary>
            Resolves an atomic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <returns>The resolved atomic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetBarrier(ILGPU.IR.Values.BarrierKind)">
            <summary>
            Resolves a barrier operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved barrier operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.TryGetPredicateBarrier(ILGPU.IR.Values.PredicateBarrierKind,System.String@)">
            <summary>
            Tries to resolve a predicate-barrier operation.
            </summary>
            <param name="operation">The resolved memory-barrier operation.</param>
            <param name="kind">The barrier kind.</param>
            <returns>True, if the operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetMemoryBarrier(ILGPU.IR.Values.MemoryBarrierKind,System.String@)">
            <summary>
            Tries to resolve a memory-barrier operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <param name="memoryScope">The resolved memory-barrier scope.</param>
            <returns>True, if the operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetMemoryFenceFlags(System.Boolean)">
            <summary>
            Resolves memory-fence flags.
            </summary>
            <param name="isGlobal">True, if the flags represent global memory.</param>
            <returns>The resolved fence flags.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.TryGetShuffleOperation(ILGPU.Runtime.OpenCL.CLDeviceVendor,ILGPU.IR.Values.ShuffleKind,System.String@)">
            <summary>
            Tries to resolve a shuffle operation.
            </summary>
            <param name="vendor">The accelerator vendor.</param>
            <param name="kind">The shuffle kind.</param>
            <param name="operation">The resolved shuffle operation.</param>
            <returns>True, if the operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLInstructions.GetBroadcastOperation(ILGPU.IR.Values.BroadcastKind)">
            <summary>
            Resolves a broadcast operation.
            </summary>
            <param name="kind">The broadcast kind.</param>
            <returns>The resolved broadcast operation.</returns>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.AddressOfOperation">
            <summary>
            An address-of operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.DereferenceOperation">
            <summary>
            A dereference operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.AssignmentOperation">
            <summary>
            An assignment operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.SelectOperation1">
            <summary>
            The first part of a select operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.SelectOperation2">
            <summary>
            The second part of a select operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.StructTypePrefix">
            <summary>
            A structure type prefix.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.TypeDefStatement">
            <summary>
            A typedef statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.IfStatement">
            <summary>
            An if statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.ElseStatement">
            <summary>
            An else statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.BreakStatement">
            <summary>
            A break statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.ContinueStatement">
            <summary>
            A continue statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.ReturnStatement">
            <summary>
            A return statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GotoStatement">
            <summary>
            A goto statement.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.AtomicLoadOperation">
            <summary>
            A atomic load operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.AtomicStoreOperation">
            <summary>
            A atomic store operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.AtomicCASOperation">
            <summary>
            An atomic CAS operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.ShortAsHalf">
            <summary>
            An short-as-half operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.IntAsFloat">
            <summary>
            An int-as-float operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.LongAsDouble">
            <summary>
            An long-as-double operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.HalfAsShort">
            <summary>
            A half-as-short operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.FloatAsInt">
            <summary>
            A float-as-int operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.DoubleAsLong">
            <summary>
            A double-as-long operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetGlobalId">
            <summary>
            Resolves the current global work-item id.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetGridSize">
            <summary>
            Resolves the current grid size.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetGridIndex">
            <summary>
            Resolves the current grid index.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetGroupSize">
            <summary>
            Resolves the current group size.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetGroupIndex">
            <summary>
            Resolves the current group index.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetWarpSize">
            <summary>
            Resolves the current warp size.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetWarpIndexOperation">
            <summary>
            Resolves the current warp index.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.GetLaneIndexOperation">
            <summary>
            Resolves the current lane index.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLInstructions.CLUnaryCategory">
            <summary>
            Identifies the permitted value types for unary arithmetic operations.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.CLUnaryCategory.Boolean">
            <summary>
            Unary operation on booleans.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.CLUnaryCategory.Int">
            <summary>
            Unary operation on signed or unsigned integers.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLInstructions.CLUnaryCategory.Float">
            <summary>
            Unary operation on 32-bit or 64-bit floats.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLIntrinsic">
            <summary>
            Represents a specific handler for user defined code-generation functionality
            that is compatible with the <see cref="T:ILGPU.Backends.OpenCL.CLBackend"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLIntrinsic.Handler">
            <summary>
            Represents the handler delegate type of custom code-generation handlers.
            </summary>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsic.#ctor(System.Reflection.MethodInfo,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new OpenCL intrinsic that can handle all architectures.
            </summary>
            <param name="targetMethod">The associated target method.</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsic.#ctor(System.Type,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new OpenCL intrinsic that can handle all architectures.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsic.#ctor(System.Type,System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new OpenCL intrinsic that can handle all architectures.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="methodName">The target method name (or null).</param>
            <param name="mode">The code-generator mode.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsic.CanHandleBackend(ILGPU.Backends.Backend)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.CanHandleBackend(ILGPU.Backends.Backend)"/>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLIntrinsics">
            <summary>
            Implements and initializes OpenCL intrinsics.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLIntrinsics.CLIntrinsicsType">
            <summary>
            The CLIntrinsics type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsics.CreateIntrinsic(System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Creates a new CL intrinsic.
            </summary>
            <param name="name">The name of the intrinsic.</param>
            <param name="mode">The implementation mode.</param>
            <returns>The created intrinsic.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsics.Register(ILGPU.IR.Intrinsics.IntrinsicImplementationManager)">
            <summary>
            Registers all CL intrinsics with the given manager.
            </summary>
            <param name="manager">The target implementation manager.</param>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLIntrinsics.AddFloat">
            <summary>
            Represents an atomic add operation of type float.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsics.AtomicAddF32(System.Single@,System.Single)">
            <summary>
            A software implementation for atomic adds on 32-bit floats.
            </summary>
            <param name="target">The target address.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLIntrinsics.AddDouble">
            <summary>
            Represents an atomic add operation of type double.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsics.AtomicAddF64(System.Double@,System.Double)">
            <summary>
            A software implementation for atomic adds on 64-bit floats.
            </summary>
            <param name="target">The target address.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLIntrinsics.BarrierPopCount(System.Boolean)">
            <summary>
            A software implementation to simulate barriers with pop count.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator">
            <summary>
            Represents a function generator for main kernel functions.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelViewNameFormat">
            <summary>
            The string format of a kernel-view parameter name.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.DynamicSharedMemoryParamName">
            <summary>
            The parameter name of dynamic shared memory parameter.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.DynamicSharedMemoryLengthParamName">
            <summary>
            The parameter name of dynamic shared memory length parameter.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic">
            <summary>
            A specialized kernel setup logic for parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.#ctor(ILGPU.Backends.OpenCL.CLKernelFunctionGenerator)">
            <summary>
            Constructs a new specialized kernel setup logic.
            </summary>
            <param name="generator">The parent generator.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.IndexVariable">
            <summary>
            Returns the main index variable.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.LengthVariable">
            <summary>
            Returns the length variable of implicitly grouped kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.Parent">
            <summary>
            Returns the parent type generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.GetParameterType(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the associated kernel type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary>
            Updates index and length variables.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.globallySharedAllocations">
            <summary>
            All globally accessible shared allocations inside the kernel module.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.#ctor(ILGPU.Backends.OpenCL.CLCodeGenerator.GeneratorArgs@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Creates a new OpenCL function generator.
            </summary>
            <param name="args">The generation arguments.</param>
            <param name="method">The current method.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.EntryPoint">
            <summary>
            Returns the associated entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.KernelTypeGenerator">
            <summary>
            The current kernel type generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.DynamicSharedAllocations">
            <summary>
            All dynamic shared memory allocations.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in OpenCL code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.GenerateCode">
            <summary>
            Generates OpenCL code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.GenerateArgumentMapping">
            <summary>
            Generates code that wires kernel-specific arguments into internal arguments.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.EmitImplicitKernelIndex(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable,System.Nullable{ILGPU.IR.Values.FieldAccess},System.Int32)">
            <summary>
            Emits an implicit kernel index computation.
            </summary>
            <param name="indexVariable">The index variable to write to.</param>
            <param name="boundsVariable">The associated bounds variable.</param>
            <param name="fieldAccess">The access chain to use.</param>
            <param name="dimension">The parameter dimension.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelFunctionGenerator.SetupKernelIndex(ILGPU.Backends.VariableAllocator.Variable,ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Setups the current kernel indices.
            </summary>
            <param name="indexVariable">The main kernel index variable.</param>
            <param name="lengthVariable">
            The length variable of implicitly grouped kernels.
            </param>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLKernelTypeGenerator">
            <summary>
            Generates OpenCL type structures that can be used for data marshaling data.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.KernelTypeNameSuffix">
            <summary>
            The string format of a single structure-like type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.CLKernelTypeConverter">
            <summary>
            Replaces pointers with an integer index offsets.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.CLKernelTypeConverter.ConvertType``1(``0,ILGPU.IR.Types.PointerType)">
            <summary>
            Converts a pointer to an index argument for kernel-argument mapping.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.CLKernelTypeConverter.GetNumFields(ILGPU.IR.Types.PointerType)">
            <summary>
            The result will consume one field.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.#ctor(ILGPU.Backends.OpenCL.CLTypeGenerator,ILGPU.Backends.EntryPoints.SeparateViewEntryPoint)">
            <summary>
            Constructs a new type generator and defines all internal types for the
            OpenCL backend.
            </summary>
            <param name="typeGenerator">The parent type generator.</param>
            <param name="entryPoint">The current entry point.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.TypeGenerator">
            <summary>
            Returns the parent type generator to use.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.EntryPoint">
            <summary>
            Returns the associated entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.ParameterOffset">
            <summary>
            Returns the current parameter offset.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.Item(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the associated OpenCL type name.
            </summary>
            <param name="parameter">The IR parameter.</param>
            <returns>The resolved OpenCL type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.Register(ILGPU.IR.Values.Parameter)">
            <summary>
            Registers a new kernel parameter.
            </summary>
            <param name="parameter">The parameter to register.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.GenerateTypeDeclarations(System.Text.StringBuilder)">
            <summary>
            Generate all forward type declarations.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLKernelTypeGenerator.GenerateTypeDefinitions(System.Text.StringBuilder)">
            <summary>
            Generate all type definitions.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.ICLTypeGenerator">
            <summary>
            An abstract type generator that can emit type declarations and definitions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.ICLTypeGenerator.GenerateTypeDeclarations(System.Text.StringBuilder)">
            <summary>
            Generate all forward type declarations.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.ICLTypeGenerator.GenerateTypeDefinitions(System.Text.StringBuilder)">
            <summary>
            Generate all type definitions.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLTypeGenerator">
            <summary>
            Generates internal OpenCL type structures that are used inside kernels.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.TypeNameFormat">
            <summary>
            The string format of a single structure-like type.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.FieldNameFormat">
            <summary>
            The string format of a single structure field.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.BasicTypeMapping">
            <summary>
            Maps basic value types to OpenCL language types.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.ArtihmeticTypeMapping">
            <summary>
            Maps arithmetic-basic value types to OpenCL language types.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.CLTypeGenerator.AtomicTypeMapping">
            <summary>
            Maps arithmetic-basic value types to atomic OpenCL language types.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetBasicValueType(ILGPU.BasicValueType)">
            <summary>
            Resolves the given basic-value type to an OpenCL type name.
            </summary>
            <param name="basicValueType">The basic-value type to resolve.</param>
            <returns>The resolved OpenCL type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetBasicValueType(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves the given basic-value type to an OpenCL type name.
            </summary>
            <param name="basicValueType">The basic-value type to resolve.</param>
            <returns>The resolved OpenCL type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetAtomicType(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves the given basic-value type to an atomic OpenCL type name.
            </summary>
            <param name="basicValueType">The basic-value type to resolve.</param>
            <returns>The resolved atomic OpenCL type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetTypeName(ILGPU.IR.Types.TypeNode)">
            <summary>
            Resolves a unique type name for the given node.
            </summary>
            <param name="typeNode">The type node.</param>
            <returns>The unique type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetFieldName(System.Int32)">
            <summary>
            Resolves a unique field name for the field index.
            </summary>
            <param name="fieldIndex">The field index.</param>
            <returns>The unique field name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.Runtime.OpenCL.CLCapabilityContext)">
            <summary>
            Constructs a new type generator and defines all required types
            in OpenCL during construction.
            </summary>
            <param name="typeContext">The associated type context.</param>
            <param name="capabilities">The supported capabilities.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.TypeContext">
            <summary>
            Returns the underlying type context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.Capabilities">
            <summary>
            Returns the supported capabilities.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.Item(ILGPU.IR.Types.TypeNode)">
            <summary>
            Returns the associated OpenCL type name.
            </summary>
            <param name="typeNode">The internal IR type node.</param>
            <returns>The resolved OpenCL type name.</returns>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLTypeGenerator.Item(System.Type)">
            <summary>
            Returns the associated OpenCL type name.
            </summary>
            <param name="type">The managed type to use.</param>
            <returns>The resolved OpenCL type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GetOrCreateType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Gets or creates the given type in OpenCL.
            </summary>
            <param name="typeNode">The type to declare.</param>
            <returns>The declared type name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GenerateTypeDeclarations(System.Text.StringBuilder)">
            <summary>
            Generate all forward type declarations.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GenerateTypeDefinitions(System.Text.StringBuilder)">
            <summary>
            Generate all type definitions.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.GenerateStructureDefinition(ILGPU.IR.Types.StructureType,System.String,System.Text.StringBuilder)">
            <summary>
            Generates a new structure definition in OpenCL format.
            </summary>
            <param name="structureType">The structure type.</param>
            <param name="typeName">The type name.</param>
            <param name="builder">The target builder to write to.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLTypeGenerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLVariableAllocator">
            <summary>
            Represents a specialized OpenCL variable allocator.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLVariableAllocator.GloballySharedMemoryVariable">
            <summary>
            A virtual globally accessible shared memory variable.
            </summary>
            <remarks>
            Instances of this class will not return valid variable ids.
            </remarks>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GloballySharedMemoryVariable.#ctor(ILGPU.IR.Analyses.AllocaInformation@)">
            <summary>
            Constructs a new variable instance.
            </summary>
            <param name="allocaInfo">The source allocation info.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLVariableAllocator.GloballySharedMemoryVariable.Name">
            <summary>
            Returns the allocation name.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GloballySharedMemoryVariable.ToString">
            <summary>
            Returns the allocation name.
            </summary>
            <returns>The allocation name.</returns>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.CLVariableAllocator.GloballySharedMemoryLengthVariable">
            <summary>
            A virtual globally accessible shared memory length variable.
            </summary>
            <remarks>
            Instances of this class will not return valid variable ids.
            </remarks>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GloballySharedMemoryLengthVariable.#ctor(ILGPU.IR.Analyses.AllocaInformation@)">
            <summary>
            Constructs a new variable instance.
            </summary>
            <param name="allocaInfo">The source allocation info.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLVariableAllocator.GloballySharedMemoryLengthVariable.Name">
            <summary>
            Returns the allocation name.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GloballySharedMemoryLengthVariable.ToString">
            <summary>
            Returns the allocation name.
            </summary>
            <returns>The allocation name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GetSharedMemoryAllocationVariable(ILGPU.IR.Analyses.AllocaInformation@)">
            <summary>
            Returns a shared memory allocation variable reference.
            </summary>
            <param name="allocaInfo">The source allocation info.</param>
            <returns>
            The allocation variable reference pointing to the allocation object.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GetSharedMemoryAllocationName(ILGPU.IR.Analyses.AllocaInformation@)">
            <summary>
            Returns a unique shared memory allocation name.
            </summary>
            <param name="allocaInfo">The source allocation info.</param>
            <returns>The allocation name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GetSharedMemoryAllocationLengthVariable(ILGPU.IR.Analyses.AllocaInformation@)">
            <summary>
            Returns a shared memory allocation length variable reference.
            </summary>
            <param name="allocaInfo">The source allocation info.</param>
            <returns>
            The allocation variable reference pointing to the allocation object.
            </returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GetSharedMemoryAllocationLengthName(ILGPU.IR.Analyses.AllocaInformation@)">
            <summary>
            Returns a unique shared memory allocation length name.
            </summary>
            <param name="allocaInfo">The source allocation info.</param>
            <returns>The allocation name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GetSharedMemoryAllocationLengthName(ILGPU.IR.Values.Alloca)">
            <summary>
            Returns a unique shared memory allocation length name.
            </summary>
            <param name="alloca">The source allocation operation.</param>
            <returns>The allocation name.</returns>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.#ctor(ILGPU.Backends.OpenCL.CLTypeGenerator)">
            <summary>
            Constructs a new register allocator.
            </summary>
            <param name="typeGenerator">The associated type generator.</param>
        </member>
        <member name="P:ILGPU.Backends.OpenCL.CLVariableAllocator.TypeGenerator">
            <summary>
            Returns the associated type generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.CLVariableAllocator.GetVariableType(ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Resolves the type name of the given variable.
            </summary>
            <param name="variable">The variable.</param>
            <returns>The resolved variable type name.</returns>
        </member>
        <member name="T:ILGPU.Backends.OpenCL.Transformations.CLAcceleratorSpecializer">
            <summary>
            The OpenCL accelerator specializer.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.Transformations.CLAcceleratorSpecializer.PrintF(System.String)">
            <summary>
            Represents the native OpenCL printf function.
            </summary>
            <param name="str">The string format.</param>
            <remarks>
            The variable number of arguments are not reflected in this declaration.
            </remarks>
        </member>
        <member name="F:ILGPU.Backends.OpenCL.Transformations.CLAcceleratorSpecializer.PrintFMethod">
            <summary>
            A handle to the <see cref="M:ILGPU.Backends.OpenCL.Transformations.CLAcceleratorSpecializer.PrintF(System.String)"/> method.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.Transformations.CLAcceleratorSpecializer.#ctor(ILGPU.IR.Types.PrimitiveType,System.Boolean)">
            <summary>
            Constructs a new OpenCL accelerator specializer.
            </summary>
            <param name="pointerType">The actual pointer type to use.</param>
            <param name="enableIOOperations">True, if the IO is enabled.</param>
        </member>
        <member name="M:ILGPU.Backends.OpenCL.Transformations.CLAcceleratorSpecializer.Implement(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.WriteToOutput)">
            <summary>
            Maps internal <see cref="T:ILGPU.IR.Values.WriteToOutput"/> values to
            <see cref="M:ILGPU.Backends.OpenCL.Transformations.CLAcceleratorSpecializer.PrintF(System.String)"/> method calls.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PhiBindings">
            <summary>
            Maps phi nodes to basic blocks in order to emit move command during
            the final code generation phase.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PhiBindings.IntermediatePhiCollection">
            <summary>
            A collection of intermediate phi values that need to be stored to temporary
            intermediate registers.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PhiBindings.IntermediatePhiCollection.Enumerator">
            <summary>
            An enumerator to enumerate all entries in this collection.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.IntermediatePhiCollection.Enumerator.#ctor(ILGPU.Backends.PhiBindings.BlockInfo@)">
            <summary>
            Constructs a new entry enumerator.
            </summary>
            <param name="blockInfo">The parent collection.</param>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings.IntermediatePhiCollection.Enumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings.IntermediatePhiCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.IntermediatePhiCollection.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.IntermediatePhiCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.IntermediatePhiCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.IntermediatePhiCollection.#ctor(ILGPU.Backends.PhiBindings.BlockInfo@)">
            <summary>
            Constructs a new temp assignment collection.
            </summary>
            <param name="info">The phi information per block.</param>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.IntermediatePhiCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all entries in this collection.
            </summary>
            <returns>
            An enumerator to enumerate all entries in this collection.
            </returns>
        </member>
        <member name="T:ILGPU.Backends.PhiBindings.PhiBindingCollection">
            <summary>
            Represents a readonly list of phi entries.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PhiBindings.PhiBindingCollection.Enumerator">
            <summary>
            An enumerator to enumerate all entries in this collection.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.Enumerator.#ctor(ILGPU.Backends.PhiBindings.PhiBindingCollection@)">
            <summary>
            Constructs a new entry enumerator.
            </summary>
            <param name="collection">The parent collection.</param>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings.PhiBindingCollection.Enumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings.PhiBindingCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.#ctor(ILGPU.Backends.PhiBindings.BlockInfo@)">
            <summary>
            Constructs a new binding collection.
            </summary>
            <param name="info">The phi information per block.</param>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings.PhiBindingCollection.Intermediates">
            <summary>
            Returns all intermediate phi values that must be assigned to temporaries.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.NeedSeparateBindingsFor(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the current binding configuration needs separate bindings
            for individual target blocks.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.IsIntermediate(ILGPU.IR.Values.PhiValue)">
            <summary>
            Returns true if the given phi is an intermediate phi value that requires
            a temporary intermediate variable to be assigned to.
            </summary>
            <param name="phi">The phi value to test.</param>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.PhiBindingCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all entries in this collection.
            </summary>
            <returns>
            An enumerator to enumerate all entries in this collection.
            </returns>
        </member>
        <member name="T:ILGPU.Backends.PhiBindings.BlockInfo">
            <summary>
            Stores <see cref="T:ILGPU.IR.Values.PhiValue"/> information per block.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.BlockInfo.#ctor(System.Int32)">
            <summary>
            Constructs a new information object.
            </summary>
            <param name="capacity">
            The initial capacity of the internal data structures.
            </param>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings.BlockInfo.LHSPhis">
            <summary>
            The set of all phi values in this block on the left-hand side.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings.BlockInfo.IntermediatePhis">
            <summary>
            The set of all phi values in this block that need to be stored into a
            temporary location in order to recover their original value.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings.BlockInfo.Bindings">
            <summary>
            The list of value phi bindings.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.BlockInfo.Add(ILGPU.IR.Values.PhiValue,ILGPU.IR.Value)">
            <summary>
            Registers a new phi binding.
            </summary>
            <param name="phi">The phi value it has to be bound to.</param>
            <param name="value">The source value to read from.</param>
        </member>
        <member name="T:ILGPU.Backends.PhiBindings.InfoProvider">
            <summary>
            Provides new intermediate list instances.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.InfoProvider.GetValue(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.List`1"/> instance.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.Create``2(ILGPU.IR.BasicBlockCollection{``0,``1}@,System.Action{ILGPU.IR.BasicBlock,ILGPU.IR.Values.PhiValue})">
            <summary>
            Creates a new phi bindings mapping.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="collection">The source collection.</param>
            <param name="allocator">The allocator to use.</param>
            <returns>The created phi bindings.</returns>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.#ctor(ILGPU.IR.BasicBlockMap{ILGPU.Backends.PhiBindings.BlockInfo}@,System.Int32,ILGPU.Util.InlineList{ILGPU.IR.Values.PhiValue}@)">
            <summary>
            Constructs new phi bindings.
            </summary>
            <param name="mapping">The phi mapping.</param>
            <param name="maxNumIntermediatePhis">
            The maximum number of intermediate phi values.
            </param>
            <param name="phiValues">The list of all phi values.</param>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings.MaxNumIntermediatePhis">
            <summary>
            Returns the maximum number of intermediate phi values to store temporarily.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PhiBindings.PhiValues">
            <summary>
            Returns a span including all phi values.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PhiBindings.TryGetBindings(ILGPU.IR.BasicBlock,ILGPU.Backends.PhiBindings.PhiBindingCollection@)">
            <summary>
            Tries to resolve phi bindings for the given block.
            </summary>
            <param name="block">The block.</param>
            <param name="bindings">The resolved bindings (if any)</param>
            <returns>True, if phi bindings could be resolved.</returns>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.LowerPointerViews">
            <summary>
            Lowers view instances into pointer view implementations.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.LowerPointerViews.PointerViewLowering">
            <summary>
            Converts view types into pointer-based structure types.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.PointerViewLowering.GetNumFields(ILGPU.IR.Types.ViewType)">
            <summary>
            Returns the number of fields per view type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.PointerViewLowering.ConvertType``1(``0,ILGPU.IR.Types.ViewType)">
            <summary>
            Converts the given view type into a structure with two elements.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.NewView)">
            <summary>
            Lowers a new view.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.GetViewLength)">
            <summary>
            Lowers get-view-length property.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.SubViewValue)">
            <summary>
            Lowers a sub-view value.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.AddressSpaceCast)">
            <summary>
            Lowers an address-space cast.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.ViewCast)">
            <summary>
            Lowers a view cast.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.LoadElementAddress)">
            <summary>
            Lowers a lea operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.AlignTo)">
            <summary>
            Lowers an align-view-to operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.AsAligned)">
            <summary>
            Lowers an as-aligned-view operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PointerViews.LowerPointerViews.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.#cctor">
            <summary>
            Initializes all rewriter patterns.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.#ctor">
            <summary>
            Constructs a new pointer view lowering transformation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.CreateLoweringConverter(ILGPU.IR.Method.Builder)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.PointerViews.LowerPointerViews.PointerViewLowering"/> converter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.LowerPointerViews.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the pointer view lowering transformation.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.ViewImplementation">
            <summary>
            General extensions for pointer-based array view implementations.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PointerViews.ViewImplementation.ImplementationType">
            <summary>
            The generic implementation type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetImplementationType(System.Type)">
            <summary>
            Returns a specialized implementation type.
            </summary>
            <param name="elementType">The view element type.</param>
            <returns>The implement type.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.AppendImplementationTypes``1(``0)">
            <summary>
            Append all implementation-specific element types.
            </summary>
            <typeparam name="TCollection">The target collection type.</typeparam>
            <param name="collection">The target element collection.</param>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetViewConstructor(System.Type)">
            <summary>
            Returns a specialized view constructor.
            </summary>
            <param name="implType">The view implementation type.</param>
            <returns>The resolved view constructor.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetPtrField(System.Type)">
            <summary>
            Returns the pointer field of a view implementation.
            </summary>
            <param name="implType">The view implementation type.</param>
            <returns>The resolved field.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetLengthField(System.Type)">
            <summary>
            Returns the length field of a view implementation.
            </summary>
            <param name="implType">The view implementation type.</param>
            <returns>The resolved field.</returns>
        </member>
        <member name="F:ILGPU.Backends.PointerViews.ViewImplementation.GetNativePtrMethodInfo">
            <summary>
            The method handle of the <see cref="M:ILGPU.Backends.PointerViews.ViewImplementation.GetNativePtrMethod(System.Type)"/> method.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetNativePtr``1(ILGPU.ArrayView{``0}@)">
            <summary>
            Gets the associated native pointer that is stored inside the given view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view type.</param>
            <returns>The underlying native pointer.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation.GetNativePtrMethod(System.Type)">
            <summary>
            Gets the native-pointer method for the given element type.
            </summary>
            <param name="elementType">The element type.</param>
            <returns>The instantiated native method.</returns>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.ViewArgumentMapper">
            <summary>
            Maps array views to pointer implementations.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.ViewArgumentMapper.ViewImplementationSource`1">
            <summary>
            Wraps a value source and created a new view instance from value references.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
        </member>
        <member name="P:ILGPU.Backends.PointerViews.ViewArgumentMapper.ViewImplementationSource`1.Source">
            <summary>
            Returns the parent source.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewArgumentMapper.ViewImplementationSource`1.EmitLoadSource``1(``0@)">
            <summary>
            Emits a new view-value construction.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewArgumentMapper.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new view argument mapper.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewArgumentMapper.MapViewType(System.Type,System.Type)">
            <summary>
            Maps an internal view type to a pointer implementation type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewArgumentMapper.MapViewInstance``3(``0@,System.Type,``1@,``2@)">
            <summary>
            Maps an internal view instance to a pointer instance.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PointerViews.ViewImplementation`1">
            <summary>
            Represents an array view that is implemented with the help of
            native pointers.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:ILGPU.Backends.PointerViews.ViewImplementation`1.Ptr">
            <summary>
            The base pointer.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PointerViews.ViewImplementation`1.Length">
            <summary>
            The length.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation`1.#ctor(System.Void*,System.Int64)">
            <summary>
            Constructs a new array view implementation.
            </summary>
            <param name="ptr">The base pointer.</param>
            <param name="length">The length information.</param>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation`1.#ctor(ILGPU.ArrayView{`0})">
            <summary>
            Constructs a new array view implementation.
            </summary>
            <param name="source">The abstract source view.</param>
        </member>
        <member name="P:ILGPU.Backends.PointerViews.ViewImplementation`1.Item(ILGPU.Index1D)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.Backends.PointerViews.ViewImplementation`1.Item(ILGPU.LongIndex1D)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation`1.LoadElementAddress(ILGPU.Index1D)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.Backends.PointerViews.ViewImplementation`1.LoadElementAddress(ILGPU.LongIndex1D)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.Analyses.DefaultPTXBlockSchedule">
            <summary>
            Represents a default PTX-specific block schedule.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.DefaultPTXBlockSchedule.#ctor(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Constructs a new PTX block schedule.
            </summary>
            <param name="blocks">The underlying block collection.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.DefaultPTXBlockSchedule.IsImplicitSuccessor(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Returns false to ensure that all branches will be generated.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.DefaultPTXBlockSchedule.NeedBranchTarget(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true to ensure that all blocks will receive a branch target.
            </summary>
            <returns>True.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.Analyses.PTXBlockScheduleExtensions">
            <summary>
            Extensions methods for the <see cref="T:ILGPU.Backends.PTX.Analyses.PTXBlockSchedule"/> class.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.PTXBlockScheduleExtensions.CreateDefaultPTXSchedule(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards})">
            <summary>
            Creates a new default block schedule using the given blocks.
            </summary>
            <param name="blocks">The input blocks.</param>
            <returns>The created block schedule.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.Analyses.PTXBlockScheduleExtensions.SuccessorProvider">
            <summary>
            A specific successor provider that inverts the successors of all
            <see cref="T:ILGPU.IR.Values.IfBranch"/> terminators.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.PTXBlockScheduleExtensions.SuccessorProvider.GetSuccessors(ILGPU.IR.BasicBlock)">
            <summary>
            Returns all successors in the default order except for
            <see cref="T:ILGPU.IR.Values.IfBranch"/> terminators. The successors of these terminators
            will be reversed to invert all if branch targets.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.PTXBlockScheduleExtensions.CreatePTXScheduleToOptimize``2(ILGPU.IR.BasicBlockCollection{``0,``1})">
            <summary>
            Creates a new optimized block schedule using the given blocks.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="blocks">The input blocks.</param>
            <returns>The created block schedule.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.PTXBlockScheduleExtensions.CreateOptimizedPTXSchedule``2(ILGPU.IR.BasicBlockCollection{``0,``1})">
            <summary>
            Creates a schedule from an already existing schedule.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="blocks">The input blocks.</param>
            <returns>The created block schedule.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.PTXBlockScheduleExtensions.CreateSchedule``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Creates an optimized PTX block schedule.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="blocks">The input blocks.</param>
            <returns>The created block schedule.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.Analyses.OptimizedPTXBlockSchedule`2">
            <summary>
            Represents a optimized PTX-specific block schedule to place blocks.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.OptimizedPTXBlockSchedule`2.#ctor(ILGPU.IR.BasicBlockCollection{`0,`1}@)">
            <summary>
            Constructs a new PTX block schedule.
            </summary>
            <param name="blocks">The underlying block collection.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.Analyses.OptimizedPTXBlockSchedule`2.BlockIndices">
            <summary>
            Returns the block-traversal indices.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.Analyses.OptimizedPTXBlockSchedule`2.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Maps the given block to its traversal index.
            </summary>
            <param name="block">The block to map to its traversal index.</param>
            <returns>The associated traversal index.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.OptimizedPTXBlockSchedule`2.IsImplicitSuccessor(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given <paramref name="successor"/> is an implicit
            successor of the <paramref name="source"/> block.
            </summary>
            <param name="source">The source block.</param>
            <param name="successor">The target successor to jump to.</param>
            <returns>True, if the given successor in an implicit branch target.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.OptimizedPTXBlockSchedule`2.NeedBranchTarget(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given block needs an explicit branch target.
            </summary>
            <param name="block">The block to test.</param>
            <returns>True, if the given block needs an explicit branch target.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.Analyses.PTXBlockSchedule">
            <summary>
            Represents a PTX-specific block schedule.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.PTXBlockSchedule.#ctor(ILGPU.IR.BasicBlock,System.Collections.Immutable.ImmutableArray{ILGPU.IR.BasicBlock})">
            <summary>
            Constructs a new PTX block schedule.
            </summary>
            <param name="entryBlock">The entry block.</param>
            <param name="blocks">The underlying block collection.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.Analyses.PTXBlockSchedule.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.Analyses.PTXBlockSchedule.Blocks">
            <summary>
            Returns all blocks.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.PTXBlockSchedule.ComputePhiBindings(System.Action{ILGPU.IR.BasicBlock,ILGPU.IR.Values.PhiValue})">
            <summary>
            Creates a new phi bindings mapping.
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>The created phi bindings.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.PTXBlockSchedule.IsImplicitSuccessor(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given <paramref name="successor"/> is an implicit
            successor of the <paramref name="source"/> block.
            </summary>
            <param name="source">The source block.</param>
            <param name="successor">The target successor to jump to.</param>
            <returns>True, if the given successor in an implicit branch target.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.PTXBlockSchedule.NeedBranchTarget(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given block needs an explicit branch target.
            </summary>
            <param name="block">The block to test.</param>
            <returns>True, if the given block needs an explicit branch target.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.PTXBlockSchedule.GetEnumerator">
            <summary>
            Returns an enumerator to iterate over all blocks in the underlying
            collection.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.Analyses.PTXBlockSchedule`2">
            <summary>
            Represents a PTX-specific block schedule.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.PTXBlockSchedule`2.#ctor(ILGPU.IR.BasicBlockCollection{`0,`1}@)">
            <summary>
            Constructs a new PTX block schedule.
            </summary>
            <param name="blocks">The underlying block collection.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.Analyses.PTXBlockSchedule`2.BasicBlockCollection">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.Analyses.PTXBlockSchedule`2.ComputePhiBindings(System.Action{ILGPU.IR.BasicBlock,ILGPU.IR.Values.PhiValue})">
            <summary>
            Creates a new phi bindings mapping.
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>The created phi bindings.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXArgumentMapper">
            <summary>
            Constructs mappings for PTX kernels.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXArgumentMapper.MappingHandler">
            <summary>
            Implements the actual argument mapping.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXArgumentMapper.MappingHandler.#ctor(ILGPU.Backends.EntryPoints.EntryPoint)">
            <summary>
            Constructs a new mapping handler.
            </summary>
            <param name="entryPoint">The parent entry point.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXArgumentMapper.MappingHandler.EntryPoint">
            <summary>
            Returns the associated current entry point.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXArgumentMapper.MappingHandler.MapArgumentStruct``1(``0@,ILGPU.Backends.IL.ILLocal,System.Int32)">
            <summary>
            Maps a single PTX argument structure.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXArgumentMapper.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new PTX argument mapper.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXArgumentMapper.Map``1(``0@,ILGPU.Backends.EntryPoints.EntryPoint)">
            <summary>
            Creates code that maps the given parameter specification to
            a compatible representation.
            </summary>
            <typeparam name="TILEmitter">The emitter type.</typeparam>
            <param name="emitter">The target emitter to write to.</param>
            <param name="entryPoint">The entry point.</param>
            <returns>A local that stores the native kernel argument pointers.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXBackendMode">
            <summary>
            Specifies which PTX backend-specific features should be used.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXBackendMode.Default">
            <summary>
            Enforces the use of the default PTX backend features.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXBackendMode.Enhanced">
            <summary>
            Enables the use of enhanced PTX backend features to improve
            performance of the kernel programs being generated.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXBackend">
            <summary>
            Represents a PTX (Cuda) backend.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXBackend.WarpSize">
            <summary>
            Returns the warp size.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXBackend.DefaultGlobalMemoryAlignment">
            <summary>
            Returns the default global memory alignment in bytes.
            </summary>
            <remarks>
            See Cuda documentation section 5.3.2.
            </remarks>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXBackend.DefaultSharedMemoryAlignment">
            <summary>
            Returns the default shared memory alignment in bytes to benefit from
            vectorized IO operations in most cases.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.#ctor(ILGPU.Context,ILGPU.Runtime.Cuda.CudaArchitecture,ILGPU.Runtime.Cuda.CudaInstructionSet,ILGPU.Runtime.Cuda.NvvmAPI)">
            <summary>
            Constructs a new Cuda backend using an implicitly given capability context
            that is derived from the specified architecture.
            </summary>
            <param name="context">The context to use.</param>
            <param name="architecture">The target GPU architecture.</param>
            <param name="instructionSet">The target GPU instruction set.</param>
            <param name="nvvmAPI">Optional NVVM API instance.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.#ctor(ILGPU.Context,ILGPU.Runtime.Cuda.CudaCapabilityContext,ILGPU.Runtime.Cuda.CudaArchitecture,ILGPU.Runtime.Cuda.CudaInstructionSet,ILGPU.Runtime.Cuda.NvvmAPI)">
            <summary>
            Constructs a new Cuda backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="capabilities">The supported capabilities.</param>
            <param name="architecture">The target GPU architecture.</param>
            <param name="instructionSet">The target GPU instruction set.</param>
            <param name="nvvmAPI">Optional NVVM API instance.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXBackend.Architecture">
            <summary>
            Returns the current architecture.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXBackend.InstructionSet">
            <summary>
            Returns the current instruction set.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXBackend.ArgumentMapper">
            <summary>
            Returns the associated <see cref="P:ILGPU.Backends.Backend.ArgumentMapper"/>.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXBackend.Capabilities">
            <summary>
            Returns the supported capabilities.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXBackend.NvvmAPI">
            <summary>
            Returns the NVVM API instance (if available).
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.CreateKernelBuilder(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.Backend.BackendContext@,ILGPU.Runtime.KernelSpecialization@,ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs@)">
            <summary>
            Creates a new PTX-compatible kernel builder and initializes a
            <see cref="T:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs"/> instance.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.CreateFunctionCodeGenerator(ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas,ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.PTX.PTXFunctionGenerator"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.CreateKernelCodeGenerator(ILGPU.IR.Analyses.AllocaKindInformation@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas,ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.PTX.PTXFunctionGenerator"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXBackend.CreateKernel(ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.CompiledKernel.KernelInfo,System.Text.StringBuilder,ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs)">
            <summary>
            Creates a new <see cref="T:ILGPU.Backends.PTX.PTXCompiledKernel"/> and initializes all debug
            information sections.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXContextExtensions">
            <summary>
            Extension methods for context specific objects.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXContextExtensions.PTXBackend(ILGPU.Context.Builder,ILGPU.Backends.PTX.PTXBackendMode)">
            <summary>
            Specifies a <see cref="T:ILGPU.Backends.PTX.PTXBackendMode"/> (will default to
            <see cref="F:ILGPU.Backends.PTX.PTXBackendMode.Default"/> if not specified).
            </summary>
            <param name="builder">The current builder.</param>
            <param name="mode">The backend mode to use.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXContextExtensions.GetPTXBackendMode(ILGPU.ContextProperties)">
            <summary>
            Gets the current <see cref="T:ILGPU.Backends.PTX.PTXBackendMode"/>.
            </summary>
            <param name="properties">The current properties instance.</param>
            <returns>The current PTX backend.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXContextExtensions.AsEnumerable(System.Collections.Generic.IEnumerator{System.ValueTuple{ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas}})">
            <summary>
            Convenience method to get an IEnumerable of Method.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator">
            <summary>
            Generates PTX code out of IR values.
            </summary>
            <remarks>The code needs to be prepared for this code generator.</remarks>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.SupportedInstructionSets">
            <summary>
            The supported PTX instruction sets (in descending order).
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.DynamicSharedMemoryAllocationName">
            <summary>
            The name for the globally registered dynamic shared memory alloca (if any).
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.MaxVectorSizeInBytes">
            <summary>
            The maximum vector size in bytes (128 bits in PTX).
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs">
            <summary>
            Generation arguments for code-generator construction.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs.Backend">
            <summary>
            Returns the underlying backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs.EntryPoint">
            <summary>
            Returns the current backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs.Properties">
            <summary>
            Returns the current context properties.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs.DebugInfoGenerator">
            <summary>
            Returns the debug-information code generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs.PointerAlignments">
            <summary>
            Returns detailed information about all pointer alignments.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs.Uniforms">
            <summary>
            Returns detailed information about uniform values, terminators in
            particular.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter">
            <summary>
            Represents a parameter that is mapped to PTX.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter.#ctor(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register,System.String,ILGPU.IR.Values.Parameter)">
            <summary>
            Constructs a new mapped parameter.
            </summary>
            <param name="register">The PTX register.</param>
            <param name="ptxName">The name of the parameter in PTX code.</param>
            <param name="parameter">The source parameter.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter.Register">
            <summary>
            Returns the associated PTX register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter.PTXName">
            <summary>
            Returns the name of the parameter in PTX code.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter.Parameter">
            <summary>
            Returns the source parameter.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IParameterSetupLogic">
            <summary>
            Represents a setup logic for function parameters.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary>
            Handles an intrinsic parameter and returns the
            associated allocated register (if any).
            </summary>
            <param name="parameterOffset">
            The current intrinsic parameter index.
            </param>
            <param name="parameter">The intrinsic parameter.</param>
            <returns>The allocated register (if any).</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.EmptyParameterSetupLogic">
            <summary>
            Represents an empty parameter setup logic.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmptyParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary>
            Does not handle intrinsic parameters.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.BasicSuffixes">
            <summary>
            Maps basic types to basic PTX suffixes.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.RegisterMovementTypeRemapping">
            <summary>
            Maps basic types to constant-loading target basic types.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.RegisterIOTypeRemapping">
            <summary>
            Maps basic types to constant-loading target basic types.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GetBasicSuffix(ILGPU.BasicValueType)">
            <summary>
            Resolves the PTX suffix for the given basic value type.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The resolved type suffix.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ResolveRegisterMovementType(ILGPU.BasicValueType)">
            <summary>
            Remaps the given basic type for register movement instructions.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The remapped type.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ResolveIOType(ILGPU.BasicValueType)">
            <summary>
            Remaps the given basic type for global IO movement instructions.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The remapped type.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GetCompatibleName(System.String,ILGPU.IR.NodeId)">
            <summary>
            Returns a PTX compatible name for the given entity.
            </summary>
            <param name="name">The source name.</param>
            <param name="nodeId">The source node id.</param>
            <returns>The resolved PTX name.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GetMethodName(ILGPU.IR.Method)">
            <summary>
            Returns the PTX function name for the given function.
            </summary>
            <param name="method">The method.</param>
            <returns>The resolved PTX function name.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GetParameterName(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the PTX parameter name for the given parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>The resolved PTX parameter name.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.#ctor(ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Constructs a new PTX generator.
            </summary>
            <param name="args">The generator arguments.</param>
            <param name="method">The current method.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Backend">
            <summary>
            Returns the associated backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Allocas">
            <summary>
            Returns all local allocas.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Architecture">
            <summary>
            Returns the currently used PTX architecture.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.DebugInfoGenerator">
            <summary>
            Returns the associated debug information generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.ImplementationProvider">
            <summary>
            Returns the current intrinsic provider for code-generation purposes.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.FastMath">
            <summary>
            Returns true if fast math is active.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Builder">
            <summary>
            Returns the associated string builder.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.ReturnParamName">
            <summary>
            Returns the name of the return parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PointerAlignments">
            <summary>
            Returns detailed information about all pointer alignments.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Uniforms">
            <summary>
            Returns information about whether a branch is a uniform control-flow branch.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.Schedule">
            <summary>
            Returns all blocks in an appropriate schedule.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode">
            <summary>
            Generates PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateConstants(System.Text.StringBuilder)">
            <summary>
            Generates PTX constant declarations.
            </summary>
            <param name="builder">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Merge(System.Text.StringBuilder)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator`1.Merge(`0)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.DeclareLabel">
            <summary>
            Declares a new label.
            </summary>
            <returns>The declared label.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MarkLabel(System.String)">
            <summary>
            Marks the given label.
            </summary>
            <param name="label">The label to mark.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.PhiMoveEmitter">
            <summary>
            Emits complex phi-value moves.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PhiMoveEmitter.AdjustCommand(System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary>
            Returns the same command.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PhiMoveEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary>
            Emits phi-based move instructions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PrepareCodeGeneration">
            <summary>
            Prepares the general code generation process.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCodeInternal(System.Int32)">
            <summary>
            Generates code for all basic blocks.
            </summary>
            <param name="registerOffset">The internal register offset.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.BindPhis(ILGPU.Backends.PhiBindings.PhiBindingCollection,ILGPU.IR.BasicBlock)">
            <summary>
            Binds all phi values of the current block flowing through an edge to the
            target block.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.SetupAllocations``1(ILGPU.IR.Analyses.AllocaKindInformation,System.String,System.String,``0)">
            <summary>
            Setups local or shared allocations.
            </summary>
            <param name="allocas">The allocations to setup.</param>
            <param name="addressSpacePrefix">
            The source address-space prefix (like .local).
            </param>
            <param name="namePrefix">The name prefix.</param>
            <param name="result">The resulting list of allocations.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.SetupAllocations">
            <summary>
            Setups local allocations.
            </summary>
            <returns>A collection of allocations.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.SetupParameters``1(System.Text.StringBuilder,``0@,System.Int32)">
            <summary>
            Setups all method parameters.
            </summary>
            <typeparam name="TSetupLogic">The specific setup logic.</typeparam>
            <param name="targetBuilder">
            The target builder to append the information to.
            </param>
            <param name="logic">The current logic.</param>
            <param name="paramOffset">The intrinsic parameter offset.</param>
            <returns>A list of mapped parameters.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter">
            <summary>
            Emits complex load parameter instructions.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter.IOEmitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter.IOEmitter.ParamName">
            <summary>
            Returns the associated parameter name.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter.IOEmitter.TempRegister">
            <summary>
            Returns the associated temp register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter.IOEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary>
            Emits a new parameter load operation that converts generic address-
            space pointers into a specialized address space.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter.Emitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.LoadParamEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary>
            Emits a new parameter load operation that converts generic address-
            space pointers into a specialized address space.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitLoadParam(System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register)">
            <summary>
            Emits a new set of load param instructions with the appropriate configuration
            that converts pointers from the generic address space into specialized
            target address-spaces.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="register">The source register.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitLoadParam(System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Emits a new set of load param instructions with the appropriate configuration
            that converts pointers from the generic address space into specialized
            target address-spaces.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="register">The source register.</param>
            <param name="tempRegister">
            A temporary hardware register to perform address-space casts based on the
            PTX-specific calling convention.
            </param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter">
            <summary>
            Emits complex store parameter instructions.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter.IOEmitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter.IOEmitter.ParamName">
            <summary>
            Returns the associated parameter name.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter.IOEmitter.TempRegister">
            <summary>
            Returns the associated temp register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter.IOEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary>
            Emits a new parameter store operation that converts non-generic
            address-space pointers into the generic address space.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter.Emitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.StoreParamEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary>
            Emits a new parameter store operation that converts non-generic
            address-space pointers into the generic address space.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitStoreParam(System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register)">
            <summary>
            Emits a new set of store param instructions with the appropriate
            configuration that converts pointers to the generic address space before
            passing them to the target function being called.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="register">The target register.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.BindParameters(System.Collections.Generic.List{ILGPU.Backends.PTX.PTXCodeGenerator.MappedParameter})">
            <summary>
            Binds the given mapped parameters.
            </summary>
            <param name="parameters">A list with mapped parameters.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.BindAllocations(System.Collections.Generic.List{System.ValueTuple{ILGPU.IR.Values.Alloca,System.String}})">
            <summary>
            Binds the given list of allocations.
            </summary>
            <param name="allocations">
            A list associating alloca nodes with their local names.
            </param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateConstantDeclarations">
            <summary>
            Generate global constant declarations.
            </summary>
            <returns>The declared global constants in PTX format.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.AppendParamDeclaration(System.Text.StringBuilder,ILGPU.IR.Types.TypeNode,System.String)">
            <summary>
            Appends parameter information.
            </summary>
            <param name="targetBuilder">
            The target builder to append the information to.
            </param>
            <param name="paramType">The param type.</param>
            <param name="paramName">The name of the param argument.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter">
            <summary>
            Represents a general PTX command emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.#ctor(System.Text.StringBuilder)">
            <summary>
            Constructs a new command emitter using the given target.
            </summary>
            <param name="target">The target builder.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.#ctor(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Constructs a new command emitter using the given target.
            </summary>
            <param name="target">The target builder.</param>
            <param name="argSeparator">The string used to separate arguments.</param>
            <param name="terminator">The string used to end the command.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendNonLocalAddressSpace(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Appends the given non-local address space.
            </summary>
            <param name="addressSpace">The address space.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendAddressSpace(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Appends the given address space
            </summary>
            <param name="addressSpace">The address space.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendRegisterMovementSuffix(ILGPU.BasicValueType)">
            <summary>
            Appends a specialized basic type suffix for mov instructions.
            </summary>
            <param name="basicValueType">The type suffix.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendSuffix(ILGPU.BasicValueType)">
            <summary>
            Appends the given command basic value type suffix.
            </summary>
            <param name="basicValueType">The type suffix.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendSuffix(System.String)">
            <summary>
            Appends the given command postfix.
            </summary>
            <param name="suffix">The postfix.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendVectorSuffix(System.Int32)">
            <summary>
            Appends the given vector length suffix.
            </summary>
            <param name="vectorLength">The vector length.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgument">
            <summary>
            Appends code to finish an appended argument.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgument(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.ConstantRegister)">
            <summary>
            Append the given register argument.
            </summary>
            <param name="argument">The register argument.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgument(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Append the given register argument.
            </summary>
            <param name="argument">The register argument.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgument(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Append the given register argument.
            </summary>
            <param name="argument">The register argument.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendVectorArgument(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary>
            Append the given vector register arguments.
            </summary>
            <param name="arguments">The register arguments.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgumentValue(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Append the value given register argument.
            </summary>
            <param name="argument">The register argument.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendArgumentValue(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister,System.Int32)">
            <summary>
            Append the value given register argument.
            </summary>
            <param name="argument">The register argument.</param>
            <param name="offset">The offset in bytes.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendNull(ILGPU.Backends.PTX.PTXRegisterKind)">
            <summary>
            Appends the constant value 'null' of the given type.
            </summary>
            <param name="kind">The register kind.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendConstant(System.Int64)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendConstant(System.UInt64)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendConstant(System.Single)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendConstant(System.Double)">
            <summary>
            Appends a constant.
            </summary>
            <param name="value">The constant to append.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendOffset(System.Int32)">
            <summary>
            Appends an offset computation.
            </summary>
            <param name="offset">The constant offset in bytes.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendLabel(System.String)">
            <summary>
            Appends a reference to the given label.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendRawValue(System.String)">
            <summary>
            Appends the given raw value.
            </summary>
            <param name="value">The raw value.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendRawValue(System.String,System.Int32)">
            <summary>
            Appends the given raw value.
            </summary>
            <param name="value">The raw value.</param>
            <param name="offset">The offset in bytes.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendRawValueReference(System.String)">
            <summary>
            Appends the given value reference.
            </summary>
            <param name="valueReference">The value reference.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.AppendRawString(System.String)">
            <summary>
            Appends the given string without modification.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration">
            <summary>
            Represents a predicate-register configuration.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration.#ctor(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister,System.Boolean)">
            <summary>
            Constructs a new predicate configuration.
            </summary>
            <param name="predicateRegister">The predicate register to test.</param>
            <param name="isTrue">Branch if the predicate register is true.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration.PredicateRegister">
            <summary>
            The predicate register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration.IsTrue">
            <summary>
            Branch if the predicate register is true.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope">
            <summary>
            Represents a scoped predicate-register allocation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.#ctor(ILGPU.Backends.PTX.PTXRegisterAllocator)">
            <summary>
            Constructs a new predicate scope.
            </summary>
            <param name="registerAllocator">The parent register allocator.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.#ctor(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Constructs a new predicate register.
            </summary>
            <param name="predicateRegister">The underlying predicate register.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.RegisterAllocator">
            <summary>
            The associated register allocator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.PredicateRegister">
            <summary>
            The allocated predicate register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.GetConfiguration(System.Boolean)">
            <summary>
            Resolves a new predicate configuration.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.ConvertToValue(ILGPU.Backends.PTX.PTXCodeGenerator,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Converts the underlying predicate register to a
            default target register.
            </summary>
            <param name="codeGenerator">The target code generator.</param>
            <param name="targetRegister">The target register to write to.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateScope.Dispose">
            <summary>
            Frees the allocated predicate register.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitter">
            <summary>
            Encapsulates a complex command emission process.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitter.AdjustCommand(System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary>
            Adjusts the given command by taking the registers into account.
            </summary>
            <param name="command">The current command.</param>
            <param name="registers">All involved primitive registers.</param>
            <returns>The adjusted command.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary>
            Emits a nested primitive command in the scope of a complex command chain.
            </summary>
            <param name="commandEmitter">The command emitter.</param>
            <param name="registers">All involved primitive registers.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitterWithOffsets">
            <summary>
            Encapsulates a complex command emission process.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IComplexCommandEmitterWithOffsets.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary>
            Emits a nested primitive command in the scope of a complex command chain.
            </summary>
            <param name="codeGenerator">The code generator.</param>
            <param name="command">The current command to emit.</param>
            <param name="primitiveRegister">The involved primitive register.</param>
            <param name="offset">The offset in bytes.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IVectorizedCommandEmitter">
            <summary>
            Encapsulates a complex command emission process.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IVectorizedCommandEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[],System.Int32)">
            <summary>
            Emits a nested primitive command in the scope of a complex command chain.
            </summary>
            <param name="codeGenerator">The code generator.</param>
            <param name="command">The current command to emit.</param>
            <param name="primitiveRegisters">
            The involved primitive registers.
            </param>
            <param name="offset">The offset in bytes.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IIOEmitter`1">
            <summary>
            Emits a sequence of IO instructions.
            </summary>
            <typeparam name="T">The user state type.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IIOEmitter`1.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,`0)">
            <summary>
            Emits a new sequence of primitive IO instructions.
            </summary>
            <param name="codeGenerator">The code generator.</param>
            <param name="command">The current command to emit.</param>
            <param name="primitiveRegister">The involved primitive register.</param>
            <param name="userState">The current user state.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitComplexCommand``1(System.String,``0@,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register[])">
            <summary>
            Emits a complex command that might depend on non-primitive registers.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="command">The generic command to emit.</param>
            <param name="emitter">The current emitter.</param>
            <param name="registers">All involved registers.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitComplexCommandWithOffsets``1(System.String,``0@,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register,System.Int32)">
            <summary>
            A specialized version of <see cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitComplexCommand``1(System.String,``0@,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register[])"/>. This version
            uses a single register and uses internal ABI-specific offset computations
            to resolve the correct offset in bytes within a structure.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="command">The generic command to emit.</param>
            <param name="emitter">The current emitter.</param>
            <param name="register">The involved register.</param>
            <param name="offset">The current offset in bytes.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitVectorizedCommand``1(ILGPU.IR.Value,System.Int32,System.String,``0@,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register)">
            <summary>
            A specialized version of <see cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitComplexCommand``1(System.String,``0@,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register[])"/>. This version
            uses a single register and uses internal ABI-specific offset computations
            to resolve the correct offset in bytes within a structure.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="pointerValue">The pointer to get the alignment for.</param>
            <param name="safeAlignment">The safe minimum alignment in bytes.</param>
            <param name="command">The generic command to emit.</param>
            <param name="emitter">The current emitter.</param>
            <param name="register">The involved register.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ConvertToPredicateScope(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Converts the given register to a predicate register scope.
            </summary>
            <param name="register">The register to convert.</param>
            <returns>The created predicate scope.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ConvertPredicateToValue(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Converts the given predicate register to a default integer register.
            </summary>
            <param name="register">The source register.</param>
            <param name="targetRegister">The target register to write to.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ConvertValueToPredicate(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Converts the given register to a predicate register scope.
            </summary>
            <param name="register">The register to convert.</param>
            <returns>The created predicate scope.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.ConvertValueToPredicate(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Converts the given register to a predicate value in the target register.
            </summary>
            <param name="register">The register to convert.</param>
            <param name="targetRegister">The target register.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitIOLoad``2(``0,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister,``1)">
            <summary>
            Emits a generic IO load operation.
            </summary>
            <typeparam name="TIOEmitter">The type of the load emitter.</typeparam>
            <typeparam name="T">The user state type.</typeparam>
            <param name="emitter">The emitter type.</param>
            <param name="command">The command to emit.</param>
            <param name="register">The register for emission.</param>
            <param name="userState">The user state.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitIOStore``2(``0,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,``1)">
            <summary>
            Emits a generic IO load operation.
            </summary>
            <typeparam name="TIOEmitter">The type of the load emitter.</typeparam>
            <typeparam name="T">The user state type.</typeparam>
            <param name="emitter">The emitter type.</param>
            <param name="command">The command to emit.</param>
            <param name="register">THe register for emission.</param>
            <param name="userState">The user state.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.BeginCommand(System.String,System.Nullable{ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration})">
            <summary>
            Begins a new command.
            </summary>
            <param name="commandString">The command to begin.</param>
            <param name="predicate">
            The predicate under which to execute the command.
            </param>
            <returns>The created command emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Command(System.String,System.Nullable{ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration})">
            <summary>
            Emits the given command.
            </summary>
            <param name="commandString">The command to emit.</param>
            <param name="predicate">
            The predicate under which to execute the command.
            </param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.Move(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister,System.Nullable{ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration})">
            <summary>
            Emits a simple move command.
            </summary>
            <param name="source">The source register.</param>
            <param name="target">The target register.</param>
            <param name="predicate">
            The predicate under which to execute the command.
            </param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.BeginMove(System.Nullable{ILGPU.Backends.PTX.PTXCodeGenerator.PredicateConfiguration})">
            <summary>
            Begins a new move command.
            </summary>
            <param name="predicate">
            The predicate under which to execute the command.
            </param>
            <returns>The created command emitter.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GetIntrinsicRegister(ILGPU.Backends.PTX.PTXRegisterKind,System.Int32)">
            <summary>
            Resolves the desired hardware register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MoveFromIntrinsicRegister(ILGPU.Backends.PTX.PTXRegisterKind,System.Int32)">
            <summary>
            Allocates a new target register and moves the value of the
            specified intrinsic register to the target register.
            </summary>
            <param name="registerKind">The intrinsic register kind.</param>
            <param name="dimension">The register dimension (if any).</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.MoveFromIntrinsicRegister(ILGPU.IR.Value,ILGPU.Backends.PTX.PTXRegisterKind,System.Int32)">
            <summary>
            Allocates a new target register and moves the value of the
            specified intrinsic register to the target register.
            </summary>
            <param name="value">The value.</param>
            <param name="registerKind">The intrinsic register kind.</param>
            <param name="dimension">The register dimension (if any).</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EnsureHardwareRegister(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Ensures that the given primitive register is a hardware register.
            If is a constant register, its value will be moved into a newly allocated
            hardware register.
            </summary>
            <param name="register">The register to put into a hardware register.</param>
            <returns>The hardware register (could be the input register).</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.ReturnTerminator)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.ReturnTerminator)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GeneratePhiBindings(ILGPU.IR.BasicBlock)">
            <summary>
            Generates phi bindings for jumping to a specific target block.
            </summary>
            <param name="current">The current block.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.UnconditionalBranch)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.UnconditionalBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.IfBranch)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IfBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.SwitchBranch)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SwitchBranch)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.MethodCall)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.MethodCall)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.Parameter)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Parameter)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.PhiValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PhiValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.UnaryArithmeticValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.UnaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.BinaryArithmeticValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.BinaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.TernaryArithmeticValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.TernaryArithmeticValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.CompareValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.CompareValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.ConvertValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.ConvertValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsPointerCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsPointerCast)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.PointerAsIntCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PointerAsIntCast)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.PointerCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PointerCast)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.FloatAsIntCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.FloatAsIntCast)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsFloatCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.IntAsFloatCast)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateEmitter">
            <summary>
            Emits complex predicate instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateEmitter.PredicateRegister">
            <summary>
            The current source type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateEmitter.AdjustCommand(System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary>
            Gets the actual select command.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.PredicateEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary>
            Emits nested predicates.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.Predicate)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Predicate)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.GenericAtomic)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GenericAtomic)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.AtomicCAS)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AtomicCAS)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.Alloca)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Alloca)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.MemoryBarrier)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.MemoryBarrier)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter">
            <summary>
            Emits complex load instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter.IOEmitter.SourceType">
            <summary>
            The current source type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter.IOEmitter.AddressRegister">
            <summary>
            Returns the associated address register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter.IOEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary>
            Emits nested loads.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.LoadEmitter.Emitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.Load)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Load)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter">
            <summary>
            Emits complex store instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter.IOEmitter.TargetType">
            <summary>
            The current source type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter.IOEmitter.AddressRegister">
            <summary>
            Returns the associated address register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter.IOEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator,System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,System.Int32)">
            <summary>
            Emits nested stores.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.StoreEmitter.Emitter">
            <summary>
            The underlying IO emitter.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.Store)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Store)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadFieldAddress)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadFieldAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.AlignTo)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AlignTo)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.AsAligned)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AsAligned)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.PrimitiveValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PrimitiveValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.StringValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.StringValue)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.NullEmitter">
            <summary>
            Emits complex null values.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.NullEmitter.AdjustCommand(System.String,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary>
            Returns the same command.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.NullEmitter.Emit(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister[])">
            <summary>
            Emits nested null values.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.NullValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.NullValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.StructureValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.StructureValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.GetField)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GetField)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.SetField)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SetField)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.GridIndexValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GridIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupIndexValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupIndexValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.GridDimensionValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GridDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupDimensionValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.GroupDimensionValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpSizeValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpSizeValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.LaneIdxValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LaneIdxValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.DynamicMemoryLengthValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.DynamicMemoryLengthValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.PredicateBarrier)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.PredicateBarrier)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.Barrier)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Barrier)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.IShuffleEmitter">
            <summary>
            Represents an abstract emitter of warp shuffle masks.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.IShuffleEmitter.EmitWarpMask(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter)">
            <summary>
            Emits a new warp mask.
            </summary>
            <param name="commandEmitter">The current command emitter.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.EmitShuffleOperation``1(ILGPU.IR.Values.ShuffleOperation,``0@)">
            <summary>
            Creates a new shuffle operation.
            </summary>
            <typeparam name="TShuffleEmitter">The emitter type.</typeparam>
            <param name="shuffle">The current shuffle operation.</param>
            <param name="shuffleEmitter">The shuffle emitter.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.Broadcast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.Broadcast)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter">
            <summary>
            Emits warp masks of <see cref="T:ILGPU.IR.Values.WarpShuffle"/> operations.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter.XorDownMask">
            <summary>
            The basic mask that has be combined with an 'or' command
            in case of a <see cref="F:ILGPU.IR.Values.ShuffleKind.Xor"/> or a
            <see cref="F:ILGPU.IR.Values.ShuffleKind.Down"/> shuffle instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter.BaseMaskShiftAmount">
            <summary>
            The amount of bits the basic mask has to be shifted to
            the left.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter.#ctor(ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Constructs a new shuffle emitter.
            </summary>
            <param name="shuffleKind">The current shuffle kind.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter.ShuffleKind">
            <summary>
            The shuffle kind.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.WarpShuffleEmitter.EmitWarpMask(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IShuffleEmitter.EmitWarpMask(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpShuffle)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.WarpShuffle)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCodeGenerator.SubWarpShuffleEmitter">
            <summary>
            Emits warp masks of <see cref="T:ILGPU.IR.Values.SubWarpShuffle"/> operations.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.SubWarpShuffleEmitter.#ctor(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Constructs a new shuffle emitter.
            </summary>
            <param name="warpMaskRegister">The current mask register.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCodeGenerator.SubWarpShuffleEmitter.WarpMaskRegister">
            <summary>
            Returns the current mask register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.SubWarpShuffleEmitter.EmitWarpMask(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter)">
            <summary cref="M:ILGPU.Backends.PTX.PTXCodeGenerator.IShuffleEmitter.EmitWarpMask(ILGPU.Backends.PTX.PTXCodeGenerator.CommandEmitter)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.SubWarpShuffle)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.SubWarpShuffle)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.DebugAssertOperation)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.DebugAssertOperation)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.LanguageEmitValue)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LanguageEmitValue)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadElementAddress)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.LoadElementAddress)"/>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.CreateAddressSpaceCast(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister,ILGPU.IR.MemoryAddressSpace,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates an address-space cast conversion.
            </summary>
            <param name="sourceRegister">The source register.</param>
            <param name="targetRegister">The target register.</param>
            <param name="sourceAddressSpace">The source address space.</param>
            <param name="targetAddressSpace">The target address space.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCodeGenerator.GenerateCode(ILGPU.IR.Values.AddressSpaceCast)">
            <summary cref="M:ILGPU.Backends.IBackendCodeGenerator.GenerateCode(ILGPU.IR.Values.AddressSpaceCast)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXCompiledKernel">
            <summary>
            Represents a compiled kernel in PTX form.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXCompiledKernel.#ctor(ILGPU.Context,ILGPU.Backends.EntryPoints.EntryPoint,ILGPU.Backends.CompiledKernel.KernelInfo,System.String)">
            <summary>
            Constructs a new compiled kernel in PTX form.
            </summary>
            <param name="context">The associated context.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="info">Detailed kernel information.</param>
            <param name="ptxAssembly">The assembly code.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXCompiledKernel.PTXAssembly">
            <summary>
            Returns the PTX assembly code.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXDebugInfoGeneratorScope">
            <summary>
            Represents a debug information scope.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXDebugInfoGeneratorScope.Parent">
            <summary>
            Returns the parent debug information generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXDebugInfoGeneratorScope.Current">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGeneratorScope.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node)">
            <summary>
            Generates debug information for the given node.
            </summary>
            <param name="builder">The target string builder to write to.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGeneratorScope.ResetLocation">
            <summary>
            Reset all location information.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXDebugInfoGenerator">
            <summary>
            A general debug info generator for PTX kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.#ctor">
            <summary>
            Constructs a new generic debug info generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.BeginScope">
            <summary>
            Begins a new debug information scope.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node,ILGPU.IR.FileLocation)">
            <summary>
            Generates debug information for the given node.
            </summary>
            <param name="builder">The target string builder to write to.</param>
            <param name="node">The node.</param>
            <param name="location">The current location.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugInfoGenerator.GenerateDebugSections(System.Text.StringBuilder)">
            <summary>
            Generate required debug-information sections in PTX code.
            </summary>
            <param name="builder">The target string builder to write to.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXNoDebugInfoGenerator">
            <summary>
            Represents an info generator that does not generate anything.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXNoDebugInfoGenerator.Empty">
            <summary>
            An empty debug information generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXNoDebugInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node,ILGPU.IR.FileLocation)">
            <summary>
            Generates no debug information.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXNoDebugInfoGenerator.GenerateDebugSections(System.Text.StringBuilder)">
            <summary>
            Generates no debug information section.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator">
            <summary>
            Generates line-based debug information for PTX kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.#ctor">
            <summary>
            Constructs a debug information generator.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.SyncLock">
            <summary>
            Returns the current synchronization lock.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.RegisterFile(ILGPU.IR.FileLocation)">
            <summary>
            Gets or creates a new file entry.
            </summary>
            <param name="location">The current location.</param>
            <returns>The file index.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.OnRegisterFile(ILGPU.IR.FileLocation)">
            <summary>
            Invoked when a new file mapping entry has been registered.
            </summary>
            <param name="location">The current location.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node,ILGPU.IR.FileLocation)">
            <summary>
            Generates a line-based debug information string.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.GenerateDebugSections(System.Text.StringBuilder)">
            <summary>
            Generates a debug sections header including file information.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugLineInfoGenerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXDebugSourceLineInfoGenerator">
            <summary>
            Generates line-based location information and inserts the referenced
            source lines into the generated PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugSourceLineInfoGenerator.#ctor">
            <summary>
            Constructs a debug information generator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXDebugSourceLineInfoGenerator.GenerateDebugInfo(System.Text.StringBuilder,ILGPU.IR.Node,ILGPU.IR.FileLocation)">
            <summary>
            Generates a line-based debug information string including inline source
            line information.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXFunctionGenerator">
            <summary>
            Represents a function generator for helper device functions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXFunctionGenerator.#ctor(ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Creates a new PTX function generator.
            </summary>
            <param name="args">The generation arguments.</param>
            <param name="method">The current method.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXFunctionGenerator.GenerateHeaderDeclaration(System.Text.StringBuilder)">
            <summary>
            Generates a PTX compatible list of mapped parameters.
            </summary>
            <param name="targetBuilder">
            The target builder to append the information to.
            </param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXFunctionGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXFunctionGenerator.GenerateCode">
            <summary>
            Generates PTX code.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXInstructions">
            <summary>
            Contains general PTX instructions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetLEAMulOperation(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves a LEA operation.
            </summary>
            <param name="pointerType">The pointer type.</param>
            <returns>The resolved LEA operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetSelectValueOperation(ILGPU.BasicValueType)">
            <summary>
            Resolves a select-value operation.
            </summary>
            <param name="type">The basic value type.</param>
            <returns>The resolved select-value operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetCompareOperation(ILGPU.IR.Values.CompareKind,ILGPU.IR.Values.CompareFlags,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves a compare operation.
            </summary>
            <param name="kind">The compare kind.</param>
            <param name="flags">The compare flags.</param>
            <param name="type">The type to compare.</param>
            <returns>The resolved compare operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetConvertOperation(ILGPU.ArithmeticBasicValueType,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves a convert operation.
            </summary>
            <param name="source">The source type to convert from.</param>
            <param name="target">The target type to convert to.</param>
            <returns>The resolved convert operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetArithmeticOperation(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.ArithmeticBasicValueType,ILGPU.Runtime.Cuda.CudaCapabilityContext,System.Boolean)">
            <summary>
            Resolves an unary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="type">The operation type.</param>
            <param name="capabilities">The supported capabilities.</param>
            <param name="fastMath">True, to use a fast-math operation.</param>
            <returns>The resolved arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetArithmeticOperation(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.ArithmeticBasicValueType,ILGPU.Runtime.Cuda.CudaCapabilityContext,System.Boolean)">
            <summary>
            Resolves a binary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="type">The operation type.</param>
            <param name="capabilities">The supported capabilities.</param>
            <param name="fastMath">True, to use a fast-math operation.</param>
            <returns>The resolved arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetArithmeticOperation(ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves a ternary arithmetic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="type">The operation type.</param>
            <returns>The resolved arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetAtomicOperation(ILGPU.IR.Values.AtomicKind,System.Boolean)">
            <summary>
            Resolves an atomic operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="requireResult">True, if the return value is required.</param>
            <returns>The resolved atomic operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetAtomicOperationSuffix(ILGPU.IR.Values.AtomicKind,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves an atomic-operation suffix.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <param name="type">The operation type.</param>
            <returns>The resolved atomic-operation suffix.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetAddressSpaceCast(System.Boolean)">
            <summary>
            Resolves an address-space-cast operation.
            </summary>
            <param name="convertToGeneric">
            True, to convert to the generic address space.
            </param>
            <returns>The resolved address-space-cast operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetAddressSpaceCastSuffix(ILGPU.Backends.Backend)">
            <summary>
            Resolves an address-space-cast suffix.
            </summary>
            <param name="backend">The current backend.</param>
            <returns>The resolved address-space-cast suffix.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetBarrier(ILGPU.IR.Values.BarrierKind)">
            <summary>
            Resolves a barrier operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved barrier operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetPredicateBarrier(ILGPU.IR.Values.PredicateBarrierKind)">
            <summary>
            Resolves a predicate-barrier operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved predicate-barrier operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetMemoryBarrier(ILGPU.IR.Values.MemoryBarrierKind)">
            <summary>
            Resolves a memory-barrier operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved memory-barrier operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetShuffleOperation(ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Resolves a shuffle operation.
            </summary>
            <param name="kind">The barrier kind.</param>
            <returns>The resolved shuffle operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXInstructions.GetVectorOperationSuffix(System.Int32)">
            <summary>
            Resolves a vector operation suffix.
            </summary>
            <param name="numElements">The number of elements.</param>
            <returns>The vector operation suffix.</returns>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.ReturnOperation">
            <summary>
            A return operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.UniformReturnOperation">
            <summary>
            A uniform return operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.MoveOperation">
            <summary>
            A general move operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.LoadOperation">
            <summary>
            A general load operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.LoadParamOperation">
            <summary>
            A general load operation that loads parameter values.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.StoreOperation">
            <summary>
            A general store operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.StoreParamOperation">
            <summary>
            A general store operation that stores parameter values.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.BranchOperation">
            <summary>
            A branch operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.UniformBranchOperation">
            <summary>
            A uniform branch operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.BranchIndexOperation">
            <summary>
            An indexed branch operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.UniformBranchIndexOperation">
            <summary>
            A unified indexed branch operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.BranchIndexRangeComparison">
            <summary>
            An indexed branch range comparison.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.BranchTargetsDeclaration">
            <summary>
            A branch targets declaration prefix.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.IndexFMAOperationLo">
            <summary>
            An index FMA operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.UniformMethodCall">
            <summary>
            A uniform method call.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.MethodCall">
            <summary>
            A method call.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.AtomicCASOperation">
            <summary>
            An atomic CAS operation.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXInstructions.AllThreadsInAWarpMemberMask">
            <summary>
            A warp member mask that considers all threads in a warp.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXIntrinsic">
            <summary>
            Represents a specific handler for user defined code-generation functionality
            that is compatible with the <see cref="T:ILGPU.Backends.PTX.PTXBackend"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXIntrinsic.Handler">
            <summary>
            Represents the handler delegate type of custom code-generation handlers.
            </summary>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Reflection.MethodInfo,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new PTX intrinsic that can handle all architectures.
            </summary>
            <param name="targetMethod">The associated target method.</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Type,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new PTX intrinsic that can handle all architectures.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Type,ILGPU.IR.Intrinsics.IntrinsicImplementationMode,ILGPU.Runtime.Cuda.CudaArchitecture)">
            <summary>
            Constructs a new PTX intrinsic that can handle all architectures
            newer or equal to <paramref name="minArchitecture"/>.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="mode">The code-generation mode.</param>
            <param name="minArchitecture">The target/minimum architecture.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Type,System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new PTX intrinsic.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="methodName">The target method name (or null).</param>
            <param name="mode">The code-generator mode.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Type,System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode,ILGPU.Runtime.Cuda.CudaArchitecture)">
            <summary>
            Constructs a new PTX intrinsic.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="methodName">The target method name (or null).</param>
            <param name="mode">The code-generator mode.</param>
            <param name="minArchitecture">The target/minimum architecture.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.#ctor(System.Type,System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode,System.Nullable{ILGPU.Runtime.Cuda.CudaArchitecture},ILGPU.Runtime.Cuda.CudaArchitecture)">
            <summary>
            Constructs a new PTX intrinsic.
            </summary>
            <param name="handlerType">The associated target handler type.</param>
            <param name="methodName">The target method name (or null).</param>
            <param name="mode">The code-generator mode.</param>
            <param name="minArchitecture">The min architecture (if any).</param>
            <param name="maxArchitecture">The max architecture (exclusive).</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXIntrinsic.MinArchitecture">
            <summary>
            Returns the associated architecture (if any).
            </summary>
            <remarks>
            This intrinsic will be used for any architecture greater than or equal this
            value.
            </remarks>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXIntrinsic.MaxArchitecture">
            <summary>
            Returns the associated architecture (if any).
            </summary>
            <remarks>
            This intrinsic will be used for any architecture less than this value.
            </remarks>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsic.CanHandleBackend(ILGPU.Backends.Backend)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.CanHandleBackend(ILGPU.Backends.Backend)"/>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXIntrinsics">
            <summary>
            Implements and initializes PTX intrinsics.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXIntrinsics.PTXIntrinsicsType">
            <summary>
            The PTXIntrinsics type.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXIntrinsics.HalfType">
            <summary>
            The Half implementation type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.CreateIntrinsic(System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode,System.Nullable{ILGPU.Runtime.Cuda.CudaArchitecture},ILGPU.Runtime.Cuda.CudaArchitecture)">
            <summary>
            Creates a new PTX intrinsic.
            </summary>
            <param name="name">The name of the intrinsic.</param>
            <param name="mode">The implementation mode.</param>
            <param name="minArchitecture">The minimum architecture.</param>
            <param name="maxArchitecture">The maximum architecture.</param>
            <returns>The created intrinsic.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.CreateIntrinsic(System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Creates a new PTX intrinsic.
            </summary>
            <param name="name">The name of the intrinsic.</param>
            <param name="mode">The implementation mode.</param>
            <returns>The created intrinsic.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.CreateFP16Intrinsic(System.String,System.Nullable{ILGPU.Runtime.Cuda.CudaArchitecture})">
            <summary>
            Creates a new FP16 intrinsic.
            </summary>
            <param name="name">The name of the intrinsic.</param>
            <param name="maxArchitecture">The maximum PTX architecture.</param>
            <returns>The created intrinsic.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.Register(ILGPU.IR.Intrinsics.IntrinsicImplementationManager)">
            <summary>
            Registers all PTX intrinsics with the given manager.
            </summary>
            <param name="manager">The target implementation manager.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.RegisterAtomics(ILGPU.IR.Intrinsics.IntrinsicImplementationManager)">
            <summary>
            Registers all atomic intrinsics with the given manager.
            </summary>
            <param name="manager">The target implementation manager.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXIntrinsics.AddDouble">
            <summary>
            Represents an atomic compare-exchange operation of type double.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.AtomicAddF64(System.Double@,System.Double)">
            <summary>
            A software implementation for atomic adds on 64-bit floats.
            </summary>
            <param name="target">The target address.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.RegisterBroadcasts(ILGPU.IR.Intrinsics.IntrinsicImplementationManager)">
            <summary>
            Registers all broadcast intrinsics with the given manager.
            </summary>
            <param name="manager">The target implementation manager.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.GroupBroadcast``1(``0,System.Int32)">
            <summary>
            Implements a single group-broadcast operation.
            </summary>
            <typeparam name="T">The type to broadcast.</typeparam>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpBroadcast``1(``0,System.Int32)">
            <summary>
            Wraps a single warp-broadcast operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.RegisterBitFunctions(ILGPU.IR.Intrinsics.IntrinsicImplementationManager)">
            <summary>
            Registers all unary bit intrinsics with the given manager.
            </summary>
            <param name="manager">The target implementation manager.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.TrailingZeroCountI32(System.Int32)">
            <summary>
            Wraps a CTZ operations.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.TrailingZeroCountI64(System.Int64)">
            <summary>
            Wraps a CTZ operations.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.RegisterWarpShuffles(ILGPU.IR.Intrinsics.IntrinsicImplementationManager)">
            <summary>
            Registers all PTX warp intrinsics with the given manager.
            </summary>
            <param name="manager">The target implementation manager.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleInt64(System.UInt64,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleFloat64(System.Double,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleInt64(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleFloat64(System.Double,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleDownInt64(System.UInt64,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleDownFloat64(System.Double,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleDownInt64(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleDownFloat64(System.Double,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleUpInt64(System.UInt64,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleUpFloat64(System.Double,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleUpInt64(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleUpFloat64(System.Double,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleXorInt64(System.UInt64,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.WarpShuffleXorFloat64(System.Double,System.Int32)">
            <summary>
            Wraps a single warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleXorInt64(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.SubWarpShuffleXorFloat64(System.Double,System.Int32,System.Int32)">
            <summary>
            Wraps a single sub-warp-shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXIntrinsics.RegisterFP16(ILGPU.IR.Intrinsics.IntrinsicImplementationManager)">
            <summary>
            Registers all FP16 intrinsics with the given manager.
            </summary>
            <param name="manager">The target implementation manager.</param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXKernelFunctionGenerator">
            <summary>
            Represents a function generator for main kernel functions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.KernelParameterSetupLogic.EntryPoint">
            <summary>
            Returns the associated entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.KernelParameterSetupLogic.IndexRegister">
            <summary>
            Returns the main index register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.KernelParameterSetupLogic.LengthRegister">
            <summary>
            Returns the length register of implicitly grouped kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.KernelParameterSetupLogic.Parent">
            <summary>
            Returns the associated register allocator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.KernelParameterSetupLogic.HandleIntrinsicParameter(System.Int32,ILGPU.IR.Values.Parameter)">
            <summary>
            Updates index and length registers.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.#ctor(ILGPU.Backends.PTX.PTXCodeGenerator.GeneratorArgs@,ILGPU.IR.Method,ILGPU.IR.Analyses.Allocas)">
            <summary>
            Creates a new PTX kernel generator.
            </summary>
            <param name="args">The generation arguments.</param>
            <param name="method">The current method.</param>
            <param name="allocas">All local allocas.</param>
        </member>
        <member name="P:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.EntryPoint">
            <summary>
            Returns the associated entry point.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Generates a function declaration in PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.GenerateCode">
            <summary>
            Generates PTX code.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.SetupKernelSpecialization(ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Setups kernel specialization hints.
            </summary>
            <param name="specialization">The kernel specialization.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.EmitImplicitKernelIndex(System.Int32,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.PrimitiveRegister)">
            <summary>
            Emits an implicit kernel index computation.
            </summary>
            <param name="dimension">The parameter dimension.</param>
            <param name="targetRegister">
            The primitive target register to write to.
            </param>
            <param name="boundsRegister">The associated bounds register.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXKernelFunctionGenerator.SetupKernelIndex(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register,ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.Register)">
            <summary>
            Setups the current kernel indices.
            </summary>
            <param name="indexRegister">The main kernel index register.</param>
            <param name="lengthRegister">
            The length register of implicitly grouped kernels.
            </param>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXRegisterKind">
            <summary>
            Represents the register kind of a PTX register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Predicate">
            <summary>
            A predicate register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Int16">
            <summary>
            An int16 register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Int32">
            <summary>
            An int32 register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Int64">
            <summary>
            An int64 register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Float32">
            <summary>
            A float32 register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Float64">
            <summary>
            A float64 register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Ctaid">
            <summary>
            The Ctaid register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.Tid">
            <summary>
            The Tid register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.NctaId">
            <summary>
            The NctaId register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.NtId">
            <summary>
            The NtId register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.LaneId">
            <summary>
            The LaneId register.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterKind.DynamicSharedMemorySize">
            <summary>
            The DynamicSharedMemorySize register.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXRegisterAllocator">
            <summary>
            Represents a specialized PTX register allocator.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterAllocator.NumRegisterTypes">
            <summary>
            The number of possible register types.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterAllocator.RegisterTypeMapping">
            <summary>
            Maps basic types to PTX register kinds.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterAllocator.ParameterTypeRemapping">
            <summary>
            Maps basic value types to their PTX-specific parameter-type counterparts.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.PTXRegisterAllocator.RegisterDeclarations">
            <summary>
            Declares all register kinds for which register declarations have to be
            generated.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.GetRegisterKind(ILGPU.BasicValueType)">
            <summary>
            Returns the associated register kind.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The resolved register kind.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.ResolveParameterBasicValueType(ILGPU.BasicValueType)">
            <summary>
            Returns the associated register kind.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The resolved register kind.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.ResolveDeviceConstantValue(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Returns the corresponding device constant string value.
            </summary>
            <param name="register">The primitive register.</param>
            <returns>The corresponding device constant string value.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.GetStringRepresentation(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Returns the string representation of the given hardware register.
            </summary>
            <param name="register">The register.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.#ctor(ILGPU.Backends.PTX.PTXBackend)">
            <summary>
            Constructs a new register allocator.
            </summary>
            <param name="backend">The associated backend.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.AllocatePlatformRegister(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.RegisterDescription@)">
            <summary>
            Allocates a platform-specific register and returns the resulting PTX type
            for the current platform.
            </summary>
            <param name="description">The resolved register.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.ResolveRegisterDescription(ILGPU.BasicValueType)">
            <summary>
            Resolves a register description for the basic value type.
            </summary>
            <param name="basicValueType">The basic value type to resolve.</param>
            <returns>The resolved register description.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.ResolveParameterRegisterDescription(ILGPU.IR.Types.TypeNode)">
            <summary>
            Resolves a register description for the given parameter type.
            </summary>
            <param name="type">The parameter type to resolve.</param>
            <returns>The resolved register description.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.ResolveRegisterDescription(ILGPU.IR.Types.TypeNode)">
            <summary>
            Resolves a new PTX compatible register description.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.FreeRegister(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.HardwareRegister)">
            <summary>
            Frees the given hardware register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.AllocateInt32Register">
            <summary>
            Allocates a new 32bit integer register.
            </summary>
            <returns>The allocated primitive 32bit integer register.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.AllocateRegister(ILGPU.Backends.RegisterAllocator{ILGPU.Backends.PTX.PTXRegisterKind}.RegisterDescription)">
            <summary>
            Allocates a register that is compatible with the given description.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.AppendRegisterDeclaration(System.Text.StringBuilder,System.String,System.String,System.String,ILGPU.Backends.PTX.PTXRegisterKind)">
            <summary>
            Appends register information to the given builder.
            </summary>
            <param name="builder">The builder to append to.</param>
            <param name="prefix">The prefix.</param>
            <param name="typeName">The type name.</param>
            <param name="registerName">The register name.</param>
            <param name="registerKind">The register kind.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXRegisterAllocator.GenerateRegisterInformation(System.String)">
            <summary>
            Generates register allocation information.
            </summary>
            <param name="prefix">The prefix to add.</param>
            <returns>Register allocation information.</returns>
        </member>
        <member name="T:ILGPU.Backends.PTX.Transformations.PTXAcceleratorSpecializer">
            <summary>
            The PTX accelerator specializer.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.Transformations.PTXAcceleratorSpecializer.PrintF(System.String,System.Void*)">
            <summary>
            Represents the intrinsic Cuda printf function.
            </summary>
            <param name="str">The string format.</param>
            <param name="args">A pointer to the argument structure.</param>
            <remarks>
            Both pointers must be in the generic address space.
            </remarks>
        </member>
        <member name="M:ILGPU.Backends.PTX.Transformations.PTXAcceleratorSpecializer.AssertFailed(System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Represents the intrinsic Cuda assertion failed function.
            </summary>
            <remarks>
            All strings must be in the generic address space.
            </remarks>
        </member>
        <member name="F:ILGPU.Backends.PTX.Transformations.PTXAcceleratorSpecializer.PrintFMethod">
            <summary>
            A handle to the <see cref="M:ILGPU.Backends.PTX.Transformations.PTXAcceleratorSpecializer.PrintF(System.String,System.Void*)"/> method.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTX.Transformations.PTXAcceleratorSpecializer.AssertFailedMethod">
            <summary>
            A handle to the <see cref="M:ILGPU.Backends.PTX.Transformations.PTXAcceleratorSpecializer.AssertFailed(System.String,System.String,System.Int32,System.String,System.Int32)"/>
            method.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.Transformations.PTXAcceleratorSpecializer.#ctor(ILGPU.IR.Types.PrimitiveType,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new PTX accelerator specializer.
            </summary>
            <param name="pointerType">The actual pointer type to use.</param>
            <param name="enableAssertions">True, if the assertions are enabled.</param>
            <param name="enableIOOperations">True, if the IO is enabled.</param>
        </member>
        <member name="M:ILGPU.Backends.PTX.Transformations.PTXAcceleratorSpecializer.Implement(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.DebugAssertOperation)">
            <summary>
            Maps internal debug assertions to <see cref="M:ILGPU.Backends.PTX.Transformations.PTXAcceleratorSpecializer.AssertFailed(System.String,System.String,System.Int32,System.String,System.Int32)"/> method calls.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.Transformations.PTXAcceleratorSpecializer.Implement(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.WriteToOutput)">
            <summary>
            Maps internal <see cref="T:ILGPU.IR.Values.WriteToOutput"/> values to
            <see cref="M:ILGPU.Backends.PTX.Transformations.PTXAcceleratorSpecializer.PrintF(System.String,System.Void*)"/> method calls.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.Transformations.PTXAcceleratorSpecializer.Implement(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.AsAligned)">
            <summary>
            Maps internal <see cref="T:ILGPU.IR.Values.AsAligned"/> values to a debug assertion while
            preserving the <see cref="T:ILGPU.IR.Values.AsAligned"/> value.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.Transformations.PTXBlockScheduling">
            <summary>
            Adapts the actual block branch order in a way to avoid negated predicated
            branches and which maximizes the number of implicit block branches.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.Transformations.PTXBlockScheduling.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the PTX-specific block schedule to the given builder.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXLibDeviceMethods">
            <summary>
            Contains methods for matching the signature of the Cuda LibDevice functions when
            compiled to PTX.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTX.PTXLibDeviceNvvm">
            <summary>
            Contains the NVVM fragments for Cuda LibDevice functions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTX.PTXLibDeviceNvvm.GenerateNvvm(System.Int32,System.Collections.Generic.IEnumerable{ILGPU.IR.Method})">
            <summary>
            Generates an NVVM module for the Cuda LibDevice functions (if any).
            </summary>
            <param name="majorIR">The NVVM IR major version.</param>
            <param name="methods">The methods to check.</param>
            <returns>The NVVM module, or an empty string.</returns>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1">
            <summary>
            Represents a generic register allocator.
            </summary>
            <typeparam name="TKind">The register kind.</typeparam>
            <remarks>The members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.RegisterDescription">
            <summary>
            Describes allocation information of a single primitive register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.RegisterDescription.Create(ILGPU.IR.Types.PrimitiveType,`0)">
            <summary>
            Creates a new primitive register description based on the given type.
            </summary>
            <param name="primitiveType">The primitive type to store.</param>
            <param name="kind">The register kind to use.</param>
            <returns>The created register description.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.RegisterDescription.Create(ILGPU.IR.Types.TypeNode,ILGPU.BasicValueType,`0)">
             <summary>
             Creates a new advanced register description based on the given type.
             </summary>
             <param name="typeNode">The underlying type to store.</param>
             <param name="basicValueType">
             The base value type of the stored register.
            </param>
             <param name="kind">The register kind to use.</param>
             <returns>The created register description.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.RegisterDescription.#ctor(ILGPU.IR.Types.TypeNode,ILGPU.BasicValueType,`0)">
            <summary>
            Constructs a new register description.
            </summary>
            <param name="type">The type.</param>
            <param name="basicValueType">
            The representative basic value type.
            </param>
            <param name="kind">The register kind.</param>
            <remarks>
            Notet that the basic value type can differ from type.BasicValueType.
            This is due the fact that more advanced types like views or pointers
            can be represented by a single platform specific integer register,
            for instance. This also holds true for strings or reference types.
            </remarks>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.RegisterDescription.Type">
            <summary>
            Returns the associated type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.RegisterDescription.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.RegisterDescription.Kind">
            <summary>
            Returns the associated register kind.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.Register">
            <summary>
            Represents an abstract register
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Register.#ctor(ILGPU.IR.Types.TypeNode,ILGPU.BasicValueType)">
            <summary>
            Constructs a new abstract register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.Register.Type">
            <summary>
            Returns the associated register type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.Register.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.Register.IsPrimitive">
            <summary>
            Returns true if this register is a primitive register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.Register.IsCompound">
            <summary>
            Returns true if this register is a compound register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Register.FormatErrorMessage(System.String)">
            <summary>
            Returns the input error messages for assertion purposes.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister">
            <summary>
            Represents a primitive register that might consume up to one hardware
            register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister.#ctor(ILGPU.Backends.RegisterAllocator{`0}.RegisterDescription@)">
            <summary>
            Constructs a new constant register.
            </summary>
            <param name="description">The current register description.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister.IsPrimitive">
            <inheritdoc/>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister.Kind">
            <summary>
            Returns the actual register kind.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.PrimitiveRegister.Description">
            <summary>
            Returns the associated register description.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.ConstantRegister">
            <summary>
            A primitive register with a constant value.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.ConstantRegister.#ctor(ILGPU.Backends.RegisterAllocator{`0}.RegisterDescription@,ILGPU.IR.Values.PrimitiveValue)">
            <summary>
            Constructs a new constant register.
            </summary>
            <param name="description">The current register description.</param>
            <param name="value">The primitive value.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.ConstantRegister.Value">
            <summary>
            Returns the associated value.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.ConstantRegister.ToString">
            <summary>
            Returns the string representation of the current register.
            </summary>
            <returns>The string representation of the current register.</returns>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.HardwareRegister">
            <summary>
            Represents a primitive register that represents an actual hardware register.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.HardwareRegister.#ctor(ILGPU.Backends.RegisterAllocator{`0}.RegisterDescription@,System.Int32)">
            <summary>
            Constructs a new hardware register.
            </summary>
            <param name="description">The current register description.</param>
            <param name="registerValue">The associated register value.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.HardwareRegister.RegisterValue">
            <summary>
            Returns the register index value.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.HardwareRegister.ToString">
            <summary>
            Returns the string representation of the current register.
            </summary>
            <returns>The string representation of the current register.</returns>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.CompoundRegister">
            <summary>
            Represents a compound register of a complex type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.#ctor(ILGPU.IR.Types.StructureType,System.Collections.Immutable.ImmutableArray{ILGPU.Backends.RegisterAllocator{`0}.Register})">
            <summary>
            Constructs a new compound register.
            </summary>
            <param name="type">The underlying type node.</param>
            <param name="registers">The child registers.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.IsCompound">
            <inheritdoc/>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.Type">
            <summary>
            Returns the underlying type.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.Children">
            <summary>
            Returns all child registers.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.NumChildren">
            <summary>
            Returns the number of child registers.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.CompoundRegister.SliceAs``1(System.Int32,System.Int32)">
            <summary>
            Slices a subset of registers out of this compound register.
            </summary>
            <typeparam name="T">The target register type.</typeparam>
            <param name="index">The start index.</param>
            <param name="count">The number of registers to slice.</param>
            <returns>The sliced register array.</returns>
        </member>
        <member name="T:ILGPU.Backends.RegisterAllocator`1.RegisterEntry">
            <summary>
            Represents a register mapping entry.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.RegisterEntry.#ctor(ILGPU.Backends.RegisterAllocator{`0}.Register,ILGPU.IR.Value)">
            <summary>
            Constructs a new mapping entry.
            </summary>
            <param name="register">The register.</param>
            <param name="node">The node.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.RegisterEntry.Register">
            <summary>
            Returns the associated register.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.RegisterEntry.Node">
            <summary>
            Returns the associated value.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.#ctor(ILGPU.Backends.Backend)">
            <summary>
            Constructs a new register allocator.
            </summary>
            <param name="backend">The underlying backend.</param>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.Backend">
            <summary>
            Returns the underlying ABI.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.RegisterAllocator`1.TypeContext">
            <summary>
            Returns the parent type context.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.ResolveRegisterDescription(ILGPU.IR.Types.TypeNode)">
            <summary>
            Resolves a register description for the given type.
            </summary>
            <param name="type">The type to convert to.</param>
            <returns>The resolved register description.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.AllocateRegister(ILGPU.Backends.RegisterAllocator{`0}.RegisterDescription)">
            <summary>
            Allocates a new hardware register of the given kind.
            </summary>
            <param name="description">
            The register description used for allocation.
            </param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.AllocateRegister(ILGPU.BasicValueType,`0)">
            <summary>
            Allocates a new hardware register of the given kind.
            </summary>
            <param name="basicValueType">The source type.</param>
            <param name="kind">The register kind.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.FreeRegister(ILGPU.Backends.RegisterAllocator{`0}.HardwareRegister)">
            <summary>
            Frees the given register.
            </summary>
            <param name="hardwareRegister">The register to free.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Allocate(ILGPU.IR.Value,ILGPU.Backends.RegisterAllocator{`0}.RegisterDescription)">
            <summary>
            Allocates a specific register kind for the given node.
            </summary>
            <param name="node">The node to allocate the register for.</param>
            <param name="description">The register description to allocate.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.AllocateHardware(ILGPU.IR.Value)">
            <summary>
            Allocates a specific register kind for the given node.
            </summary>
            <param name="node">The node to allocate the register for.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Allocate(ILGPU.IR.Value)">
            <summary>
            Allocates a specific register kind for the given node.
            </summary>
            <param name="node">The node to allocate the register for.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Bind(ILGPU.IR.Value,ILGPU.Backends.RegisterAllocator{`0}.Register)">
            <summary>
            Binds the given value to the target register.
            </summary>
            <param name="node">The node to bind.</param>
            <param name="targetRegister">The target register to bind to.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.AllocateType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Allocates a new register recursively
            </summary>
            <param name="typeNode">The node type to allocate.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Alias(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Registers a register alias.
            </summary>
            <param name="node">The node.</param>
            <param name="aliasNode">The alias node.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.LoadAs``1(ILGPU.IR.Value)">
            <summary>
            Loads the allocated register of the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Load(ILGPU.IR.Value)">
            <summary>
            Loads the allocated register of the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.LoadPrimitive(ILGPU.IR.Value)">
            <summary>
            Loads the allocated primitive register of the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.LoadHardware(ILGPU.IR.Value)">
            <summary>
            Loads the allocated primitive register of the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The allocated register.</returns>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Free(ILGPU.IR.Value)">
            <summary>
            Frees the given node.
            </summary>
            <param name="node">The node to free.</param>
        </member>
        <member name="M:ILGPU.Backends.RegisterAllocator`1.Free(ILGPU.Backends.RegisterAllocator{`0}.Register)">
            <summary>
            Frees the given register recursively.
            </summary>
            <param name="register">The register to free.</param>
        </member>
        <member name="T:ILGPU.Backends.SeparateViews.ViewArgumentMapper">
            <summary>
            Maps array views to separate view implementations.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.SeparateViews.ViewArgumentMapper.ViewImplementationSource`1">
            <summary>
            Wraps a value source and created a new view instance from value references.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
        </member>
        <member name="P:ILGPU.Backends.SeparateViews.ViewArgumentMapper.ViewImplementationSource`1.Source">
            <summary>
            Returns the parent source.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewArgumentMapper.ViewImplementationSource`1.EmitLoadSource``1(``0@)">
            <summary>
            Emits a new view-value construction.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewArgumentMapper.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new view argument mapper.
            </summary>
            <param name="context">The current context.</param>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewArgumentMapper.MapViewType(System.Type,System.Type)">
            <summary>
            Maps an internal view type to a pointer implementation type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewArgumentMapper.MapViewInstance``3(``0@,System.Type,``1@,``2@)">
            <summary>
            Maps an internal view instance to a pointer instance.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.SeparateViews.ViewImplementation">
            <summary>
            Represents an array view that is not implemented directly
            and relies on separate driver support to map the actual device
            pointers to allocated memory buffers.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.SeparateViews.ViewImplementation.CreateMethod">
            <summary>
            A handle to the <see cref="M:ILGPU.Backends.SeparateViews.ViewImplementation.Create``1(ILGPU.ArrayView{``0})"/> method.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.GetCreateMethod(System.Type)">
            <summary>
            Returns a specialized create method.
            </summary>
            <param name="sourceType">The source array-view type.</param>
            <returns>The resolved creation method.</returns>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.GetNativePtrMethod(System.Type)">
            <summary>
            Gets the native-pointer method for the given element type.
            </summary>
            <param name="elementType">The element type.</param>
            <returns>The instantiated native method.</returns>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.Create``1(ILGPU.ArrayView{``0})">
            <summary>
            Creates a new view implemented using the given array view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view.</param>
            <returns>The created view implementation.</returns>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.GetIndexField(System.Type)">
            <summary>
            Returns the index field of a view implementation.
            </summary>
            <param name="implType">The view implementation type.</param>
            <returns>The resolved field.</returns>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.GetLengthField(System.Type)">
            <summary>
            Returns the length field of a view implementation.
            </summary>
            <param name="implType">The view implementation type.</param>
            <returns>The resolved field.</returns>
        </member>
        <member name="F:ILGPU.Backends.SeparateViews.ViewImplementation.Index">
            <summary>
            The linear index into the view.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.SeparateViews.ViewImplementation.Length">
            <summary>
            The length.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.SeparateViews.ViewImplementation.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructs a new array view implementation.
            </summary>
            <param name="index">The index into the view.</param>
            <param name="length">The length information.</param>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator">
            <summary>
            Represents a generic high-level variable allocator.
            </summary>
            <remarks>The members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.Variable">
            <summary>
            A variable that can be accessed and allocated.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Variable.#ctor(System.Int32)">
            <summary>
            Constructs a new variable.
            </summary>
            <param name="id">The current variable id.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.Variable.Id">
            <summary>
            Returns the unique variable id.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.Variable.VariableName">
            <summary>
            Returns the associated variable name.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Variable.ToString">
            <summary>
            Returns the string representation of this variable.
            </summary>
            <returns>The string representation of this variable.</returns>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.PrimitiveVariable">
            <summary>
            A primitive variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.PrimitiveVariable.#ctor(System.Int32,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Constructs a new primitive variable.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="basicValueType">The basic value type.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.PrimitiveVariable.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.ConstantVariable">
            <summary>
            A constant "variable".
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.ConstantVariable.#ctor(System.Int32,ILGPU.IR.Values.PrimitiveValue)">
            <summary>
            Constructs a new constant register.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="value">The primitive value.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.ConstantVariable.Value">
            <summary>
            Returns the associated value.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.TypedVariable">
            <summary>
            A typed variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.TypedVariable.#ctor(System.Int32,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new typed variable.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.TypedVariable.Type">
            <summary>
            Returns the underlying type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.PointerVariable">
            <summary>
            A pointer variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.PointerVariable.#ctor(System.Int32,ILGPU.IR.Types.PointerType)">
            <summary>
            Constructs a new pointer variable.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="pointerType">The pointer type.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.PointerVariable.Type">
            <summary>
            Returns the represented IR type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.StringVariable">
            <summary>
            A string variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.StringVariable.#ctor(System.Int32,ILGPU.IR.Types.StringType)">
            <summary>
            Constructs a new object variable.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="type">The object type.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.StringVariable.Type">
            <summary>
            Returns the represented IR string type.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.VariableAllocator.ObjectVariable">
            <summary>
            An object variable.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.ObjectVariable.#ctor(System.Int32,ILGPU.IR.Types.ObjectType)">
            <summary>
            Constructs a new object variable.
            </summary>
            <param name="id">The current variable id.</param>
            <param name="type">The object type.</param>
        </member>
        <member name="P:ILGPU.Backends.VariableAllocator.ObjectVariable.Type">
            <summary>
            Returns the represented IR type.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.#ctor">
            <summary>
            Constructs a new variable allocator.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Allocate(ILGPU.IR.Value)">
            <summary>
            Allocates a new variable.
            </summary>
            <param name="value">The value to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Allocate(ILGPU.IR.Value,ILGPU.ArithmeticBasicValueType)">
            <summary>
            Allocates a new variable.
            </summary>
            <param name="value">The value to allocate.</param>
            <param name="basicValueType">The actual type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocateAs``1(ILGPU.IR.Value)">
            <summary>
            Allocates a new variable as type <typeparamref name="T"/>.
            </summary>
            <param name="value">The value to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocateType(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Allocates the given type.
            </summary>
            <param name="basicValueType">The type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocateType(ILGPU.BasicValueType)">
            <summary>
            Allocates the given type.
            </summary>
            <param name="basicValueType">The type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocatePointerType(ILGPU.IR.Types.PointerType)">
            <summary>
            Allocates a pointer type.
            </summary>
            <param name="pointerType">The pointer type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.AllocateType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Allocates the given type.
            </summary>
            <param name="typeNode">The type to allocate.</param>
            <returns>The allocated variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Load(ILGPU.IR.Value)">
            <summary>
            Loads the given value.
            </summary>
            <param name="value">The value to load.</param>
            <returns>The loaded variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.LoadAs``1(ILGPU.IR.Value)">
            <summary>
            Loads the given value as variable type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type to load.</typeparam>
            <param name="value">The value to load.</param>
            <returns>The loaded variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.VariableAllocator.Bind(ILGPU.IR.Value,ILGPU.Backends.VariableAllocator.Variable)">
            <summary>
            Binds the given value to the target variable.
            </summary>
            <param name="node">The node to bind.</param>
            <param name="targetVariable">The target variable to bind to.</param>
        </member>
        <member name="T:ILGPU.BasicValueType">
            <summary>
            Represents a basic value type.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.None">
            <summary>
            Represent a non-basic value type.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int1">
            <summary>
            Represents an 1-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int8">
            <summary>
            Represents an 8-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int16">
            <summary>
            Represents a 16-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int32">
            <summary>
            Represents a 32-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int64">
            <summary>
            Represents a 64-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Float16">
            <summary>
            Represents a 16-bit float.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Float32">
            <summary>
            Represents a 32-bit float.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Float64">
            <summary>
            Represents a 64-bit float.
            </summary>
        </member>
        <member name="T:ILGPU.ArithmeticBasicValueType">
            <summary>
            Represents an arithmetic basic value type.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.None">
            <summary>
            Represent a non-arithmetic value type.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.UInt1">
            <summary>
            Represents an 1-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Int8">
            <summary>
            Represents an 8-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Int16">
            <summary>
            Represents a 16-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Int32">
            <summary>
            Represents a 32-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Int64">
            <summary>
            Represents a 64-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Float16">
            <summary>
            Represents a 16-bit float.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Float32">
            <summary>
            Represents a 32-bit float.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.Float64">
            <summary>
            Represents a 64-bit float.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.UInt8">
            <summary>
            Represents an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.UInt16">
            <summary>
            Represents a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.UInt32">
            <summary>
            Represents a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:ILGPU.ArithmeticBasicValueType.UInt64">
            <summary>
            Represents a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="T:ILGPU.CapabilityNotSupportedException">
            <summary>
            The exception that is thrown when a capability is not supported by an accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.CapabilityNotSupportedException.#ctor">
            <summary>
            Initializes a new instance of the CapabilityNotSupportedException class.
            </summary>
        </member>
        <member name="M:ILGPU.CapabilityNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapabilityNotSupportedException class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ILGPU.CapabilityNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapabilityNotSupportedException class
            with a specified error message and a reference to the inner exception
            that is the cause of this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.
            </param>
        </member>
        <member name="M:ILGPU.CapabilityNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapabilityNotSupportedException class with
            serialized data.
            </summary>
            <param name="serializationInfo">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.
            </param>
            <param name="streamingContext">
            The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.
            </param>
        </member>
        <member name="T:ILGPU.Context">
            <summary>
            Represents the main ILGPU context.
            </summary>
            <remarks>Members of this class are thread-safe.</remarks>
        </member>
        <member name="T:ILGPU.Context.Builder">
            <summary>
            A context builder class.
            </summary>
            <remarks>
            If no accelerators will be added to this builder, the resulting context
            will use the default CPU accelerator
            <see cref="F:ILGPU.Runtime.CPU.CPUDevice.Default"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.Context.Builder.#ctor">
            <summary>
            Constructs a new builder instance.
            </summary>
        </member>
        <member name="P:ILGPU.Context.Builder.DeviceRegistry">
            <summary>
            All accelerator descriptions that have been registered.
            </summary>
        </member>
        <member name="P:ILGPU.Context.Builder.IntrinsicManager">
            <summary>
            Returns the underlying intrinsic manager.
            </summary>
        </member>
        <member name="M:ILGPU.Context.Builder.Default">
            <summary>
            Enables all supported accelerators and puts the context into
            auto-assertion mode via <see cref="M:ILGPU.Context.Builder.AutoAssertions"/> and
            auto-IO-operations mode via <see cref="M:ILGPU.Context.Builder.AutoIOOperations"/>.
            </summary>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.AllAccelerators">
            <summary>
            Enables all supported accelerators.
            </summary>
            <remarks>
            Note that this function calls
            <see cref="M:ILGPU.Runtime.CPU.CPUContextExtensions.DefaultCPU(ILGPU.Context.Builder)"/> only to ensure
            that there is only one CPU accelerator by default.
            </remarks>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.AllAccelerators(System.Predicate{ILGPU.Runtime.Device})">
            <summary>
            Enables all accelerators that fulfill the given predicate.
            </summary>
            <param name="predicate">
            The predicate to include a given accelerator description.
            </param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.Inlining(ILGPU.InliningMode)">
            <summary>
            Specifies the inlining mode.
            </summary>
            <param name="inliningMode">The inlining mode to use.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.DebugSymbols(ILGPU.DebugSymbolsMode)">
            <summary>
            Specifies the debug symbol mode to use.
            </summary>
            <param name="debugSymbolsMode">The symbols mode to use.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.Assertions">
            <summary>
            Turns on all assertion checks (including out-of-bounds checks) for view
            and array accesses.
            </summary>
            <remarks>
            Note that calling this function automatically switches the debug mode
            to at least <see cref="F:ILGPU.DebugSymbolsMode.Basic"/>.
            </remarks>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.IOOperations">
            <summary>
            Turns on all IO operations checks.
            accesses.
            </summary>
            <remarks>
            Note that calling this function automatically switches the debug mode
            to at least <see cref="F:ILGPU.DebugSymbolsMode.Basic"/>.
            </remarks>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.Verify">
            <summary>
            Turns on the internal IR verifier.
            </summary>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.Math(ILGPU.MathMode)">
            <summary>
            Enables fast generation of fast math methods using the math mode provided.
            </summary>
            <param name="mathMode">The math mode to use.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.StaticFields(ILGPU.StaticFieldMode)">
            <summary>
            Specifies how to deal with static fields.
            </summary>
            <param name="fieldMode">The static field mode to use.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.Arrays(ILGPU.ArrayMode)">
            <summary>
            Specifies how to deal with arrays.
            </summary>
            <param name="arrayMode">The array mode to use.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.Caching(ILGPU.CachingMode)">
            <summary>
            Specifies the caching mode for the context instance.
            </summary>
            <param name="cachingMode">The caching mode to use.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.AutoAssertions">
            <summary>
            Automatically enables all assertions as soon as a debugger is attached.
            </summary>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.AutoIOOperations">
            <summary>
            Automatically enables all IO operations as soon as a debugger is attached.
            </summary>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.AutoDebug">
            <summary>
            Automatically switches to <see cref="M:ILGPU.Context.Builder.Debug"/> mode if a debugger is
            attached.
            </summary>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.Debug">
            <summary>
            Sets the optimization level to <see cref="F:ILGPU.OptimizationLevel.Debug"/>,
            calls <see cref="M:ILGPU.Context.Builder.Assertions"/> to turn on all debug assertion checks
            and calls <see cref="M:ILGPU.Context.Builder.IOOperations"/> to turn on all debug outputs.
            </summary>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.Release">
            <summary>
            Sets the optimization level to <see cref="F:ILGPU.OptimizationLevel.Release"/>.
            </summary>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.Optimize(ILGPU.OptimizationLevel)">
            <summary>
            Specifies the optimization level.
            </summary>
            <param name="level">The optimization level to use.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.PageLocking(ILGPU.PageLockingMode)">
            <summary>
            Specifies the page locking mode.
            </summary>
            <param name="mode">The locking mode to use.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.Profiling">
            <summary>
            Turns on profiling of all streams.
            </summary>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.LibDevice">
            <summary>
            Turns on LibDevice support.
            Automatically detects the CUDA SDK location.
            </summary>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.LibDevice(System.String,System.String)">
            <summary>
            Turns on LibDevice support.
            Explicitly specifies the LibDevice location.
            </summary>
            <param name="libNvvmPath">Path to LibNvvm DLL.</param>
            <param name="libDevicePath">Path to LibDevice bitcode.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.ToContext">
            <summary>
            Converts this builder instance into a context instance.
            </summary>
            <returns>The created context instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Builder.SetExtensionProperty``1(System.String,``0)">
            <summary>
            Sets an extension property.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:ILGPU.Context.Create">
            <summary>
            Creates a new builder instance.
            </summary>
            <returns>The builder instance.</returns>
        </member>
        <member name="M:ILGPU.Context.Create(System.Action{ILGPU.Context.Builder})">
            <summary>
            Creates a new context instance.
            </summary>
            <param name="buildingCallback">The user defined builder callback.</param>
            <returns>The created context.</returns>
        </member>
        <member name="M:ILGPU.Context.CreateDefault">
            <summary>
            Creates a default context by invoking the <see cref="M:ILGPU.Context.Builder.Default"/>
            method on the temporary builder instance.
            </summary>
            <returns>The created context.</returns>
        </member>
        <member name="M:ILGPU.Context.CreateDefaultAutoAssertions">
            <summary>
            Creates a default context by invoking the <see cref="M:ILGPU.Context.Builder.Default"/> and
            the <see cref="M:ILGPU.Context.Builder.AutoAssertions"/> methods on the temporary builder
            instance.
            </summary>
            <returns>The created context.</returns>
        </member>
        <member name="M:ILGPU.Context.CreateDefaultAutoDebug">
            <summary>
            Creates a default context by invoking the <see cref="M:ILGPU.Context.Builder.Default"/> and
            the <see cref="M:ILGPU.Context.Builder.AutoDebug"/> methods on the temporary builder
            instance.
            </summary>
            <returns>The created context.</returns>
        </member>
        <member name="F:ILGPU.Context.RuntimeAssemblyName">
            <summary>
            The name of the dynamic runtime assembly.
            </summary>
        </member>
        <member name="F:ILGPU.Context.AssemblyName">
            <summary>
            Represents the general ILGPU assembly name.
            </summary>
        </member>
        <member name="F:ILGPU.Context.FullAssemblyModuleName">
            <summary>
            Represents the general ILGPU assembly module name.
            </summary>
        </member>
        <member name="T:ILGPU.Context.DeviceCollection`1">
            <summary>
            Represents an enumerable collection of all devices of a specific type.
            </summary>
            <typeparam name="TDevice">The device class type.</typeparam>
        </member>
        <member name="T:ILGPU.Context.DeviceCollection`1.Enumerator">
            <summary>
            Returns an enumerator to enumerate all registered devices of the parent
            type.
            </summary>
        </member>
        <member name="M:ILGPU.Context.DeviceCollection`1.Enumerator.#ctor(System.Collections.Generic.List{ILGPU.Runtime.Device})">
            <summary>
            Constructs a new use enumerator.
            </summary>
            <param name="devices">The list of all devices.</param>
        </member>
        <member name="P:ILGPU.Context.DeviceCollection`1.Enumerator.Current">
            <summary>
            Returns the current use.
            </summary>
        </member>
        <member name="M:ILGPU.Context.DeviceCollection`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.Context.DeviceCollection`1.#ctor(System.Collections.Generic.List{ILGPU.Runtime.Device})">
            <summary>
            Constructs a new device collection.
            </summary>
            <param name="deviceList">The list of all devices.</param>
        </member>
        <member name="P:ILGPU.Context.DeviceCollection`1.AcceleratorType">
            <summary>
            Returns the device type of this collection.
            </summary>
        </member>
        <member name="P:ILGPU.Context.DeviceCollection`1.Count">
            <summary>
            Returns the number of registered devices.
            </summary>
        </member>
        <member name="P:ILGPU.Context.DeviceCollection`1.Item(System.Int32)">
            <summary>
            Returns the i-th device.
            </summary>
            <param name="deviceIndex">
            The relative device index of the specific device type. 0 here refers to
            the first device of this type, 1 to the second, etc.
            </param>
            <returns>The i-th device.</returns>
        </member>
        <member name="M:ILGPU.Context.DeviceCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all uses devices.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:ILGPU.Context.Version">
            <summary>
            Returns the current ILGPU version.
            </summary>
        </member>
        <member name="P:ILGPU.Context.InliningAttributeBuilder">
            <summary>
            Represents an aggressive inlining attribute builder.
            </summary>
            <remarks>Note that this attribute will not enforce inlining.</remarks>
        </member>
        <member name="M:ILGPU.Context.#cctor">
            <summary>
            Initializes all static context attributes.
            </summary>
        </member>
        <member name="E:ILGPU.Context.AcceleratorCreated">
            <summary>
            Will be called when a new accelerator has been created.
            </summary>
        </member>
        <member name="F:ILGPU.Context.methodHandleCounter">
            <summary>
            The global counter for all method handles.
            </summary>
        </member>
        <member name="F:ILGPU.Context.codeGenerationSemaphore">
            <summary>
            The synchronization semaphore for frontend workers.
            </summary>
        </member>
        <member name="F:ILGPU.Context.deviceMapping">
            <summary>
            An internal mapping of accelerator types to individual devices.
            </summary>
        </member>
        <member name="M:ILGPU.Context.#ctor(ILGPU.Context.Builder,System.Collections.Immutable.ImmutableArray{ILGPU.Runtime.Device})">
            <summary>
            Constructs a new ILGPU main context
            </summary>
            <param name="builder">The parent builder instance.</param>
            <param name="devices">The array of accelerator descriptions.</param>
        </member>
        <member name="P:ILGPU.Context.CPUAccelerator">
            <summary>
            The "default" CPU accelerator used for all implicitly allocated CPU buffers.
            </summary>
        </member>
        <member name="P:ILGPU.Context.InstanceId">
            <summary>
            Returns the current instance id.
            </summary>
        </member>
        <member name="P:ILGPU.Context.Devices">
            <summary>
            All registered devices.
            </summary>
        </member>
        <member name="P:ILGPU.Context.TargetPlatform">
            <summary>
            Returns the current target platform.
            </summary>
        </member>
        <member name="P:ILGPU.Context.RuntimeSystem">
            <summary>
            Returns the associated runtime system class.
            </summary>
        </member>
        <member name="P:ILGPU.Context.Properties">
            <summary>
            Returns true if this context uses assertion checks.
            </summary>
        </member>
        <member name="P:ILGPU.Context.IRContext">
            <summary>
            Returns the main IR context.
            </summary>
        </member>
        <member name="P:ILGPU.Context.ILFrontend">
            <summary>
            Returns the associated IL frontend.
            </summary>
        </member>
        <member name="P:ILGPU.Context.DefautltILBackend">
            <summary>
            Returns the associated default IL backend.
            </summary>
        </member>
        <member name="P:ILGPU.Context.Verifier">
            <summary>
            Returns the internal verifier instance.
            </summary>
        </member>
        <member name="P:ILGPU.Context.DebugInformationManager">
            <summary>
            Returns the main debug-information manager.
            </summary>
        </member>
        <member name="P:ILGPU.Context.TypeContext">
            <summary>
            Returns the main type context.
            </summary>
        </member>
        <member name="P:ILGPU.Context.ContextTransformer">
            <summary>
            Returns the default context transformer.
            </summary>
        </member>
        <member name="P:ILGPU.Context.IntrinsicManager">
            <summary>
            Returns the underlying intrinsic manager.
            </summary>
        </member>
        <member name="M:ILGPU.Context.GetDevice``1(System.Int32)">
            <summary>
            Gets a specific device of the given type using a relative device index.
            </summary>
            <typeparam name="TDevice">The device class type.</typeparam>
            <param name="deviceIndex">
            The relative device index of the specific device type. 0 here refers to the
            first device of this type, 1 to the second, etc.
            </param>
            <returns>The device instance.</returns>
        </member>
        <member name="M:ILGPU.Context.GetDevices``1">
            <summary>
            Gets all devices of the given type.
            </summary>
            <typeparam name="TDevice">The device class type.</typeparam>
            <returns>All device instances.</returns>
        </member>
        <member name="M:ILGPU.Context.GetPreferredDevice(System.Boolean)">
            <summary>
            Attempts to return the most optimal single device.
            </summary>
            <param name="preferCPU">Always returns CPU device 0.</param>
            <returns>Selected device.</returns>
        </member>
        <member name="M:ILGPU.Context.GetPreferredDevices(System.Boolean,System.Boolean)">
            <summary>
            Attempts to return the most optimal set of devices.
            </summary>
            <param name="preferCPU">Always returns first CPU device.</param>
            <param name="matchingDevicesOnly">Only returns matching devices.</param>
            <returns>Selected devices.</returns>
        </member>
        <member name="M:ILGPU.Context.CreateMethodHandle">
            <summary>
            Creates a new unique method handle.
            </summary>
            <returns>A new unique method handle.</returns>
        </member>
        <member name="M:ILGPU.Context.ReleaseCodeGenerationLock">
            <summary>
            Releases the internal code-generation lock.
            </summary>
        </member>
        <member name="M:ILGPU.Context.BeginCodeGeneration">
            <summary>
            Begins a new code generation phase.
            </summary>
            <returns>The new code generation phase.</returns>
        </member>
        <member name="M:ILGPU.Context.BeginCodeGeneration(ILGPU.IR.IRContext)">
            <summary>
            Begins a new code generation phase.
            </summary>
            <returns>The new code generation phase.</returns>
        </member>
        <member name="M:ILGPU.Context.BeginCodeGenerationAsync">
            <summary>
            Begins a new code generation phase (asynchronous).
            </summary>
            <returns>The new code generation phase.</returns>
        </member>
        <member name="M:ILGPU.Context.BeginCodeGenerationAsync(ILGPU.IR.IRContext)">
            <summary>
            Begins a new code generation phase (asynchronous).
            </summary>
            <returns>The new code generation phase.</returns>
        </member>
        <member name="M:ILGPU.Context.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears internal caches. However, this does not affect individual accelerator
            caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>
            This method is not thread-safe.
            </remarks>
        </member>
        <member name="M:ILGPU.Context.OnAcceleratorCreated(ILGPU.Runtime.Accelerator)">
            <summary>
            Raises the corresponding <see cref="E:ILGPU.Context.AcceleratorCreated"/> event.
            </summary>
            <param name="accelerator">The new accelerator.</param>
        </member>
        <member name="M:ILGPU.Context.GetEnumerator">
            <summary>
            Returns an accelerator description enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.Context.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.ContextExtension">
            <summary>
            Represents an abstract context extensions that can store additional data.
            </summary>
        </member>
        <member name="T:ILGPU.ContextCodeGenerationPhase">
            <summary>
            A single code generation phase.
            </summary>
        </member>
        <member name="M:ILGPU.ContextCodeGenerationPhase.#ctor(ILGPU.Context,ILGPU.IR.IRContext)">
            <summary>
            Constructs a new code generation phase.
            </summary>
            <param name="context">The current context.</param>
            <param name="irContext">The current IR context.</param>
        </member>
        <member name="P:ILGPU.ContextCodeGenerationPhase.Context">
            <summary>
            Returns the main context.
            </summary>
        </member>
        <member name="P:ILGPU.ContextCodeGenerationPhase.IRContext">
            <summary>
            Returns the current IR context.
            </summary>
        </member>
        <member name="P:ILGPU.ContextCodeGenerationPhase.IsFaulted">
            <summary>
            Returns true if the code generation has failed.
            </summary>
        </member>
        <member name="P:ILGPU.ContextCodeGenerationPhase.LastException">
            <summary>
            Returns the exception from code generation failure.
            </summary>
        </member>
        <member name="M:ILGPU.ContextCodeGenerationPhase.BeginFrontendCodeGeneration">
            <summary>
            Starts a new frontend code-generation phase.
            </summary>
            <returns>The frontend code-generation phase.</returns>
        </member>
        <member name="M:ILGPU.ContextCodeGenerationPhase.Optimize">
            <summary>
            Optimizes the IR.
            </summary>
        </member>
        <member name="M:ILGPU.ContextCodeGenerationPhase.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.InliningMode">
            <summary>
            The inlining behavior.
            </summary>
        </member>
        <member name="F:ILGPU.InliningMode.Default">
            <summary>
            All functions will be inlined by default.
            </summary>
            <remarks>
            This is the default setting.
            </remarks>
        </member>
        <member name="F:ILGPU.InliningMode.Aggressive">
            <summary>
            Enables aggressive function inlining that inlines all functions by default.
            </summary>
        </member>
        <member name="F:ILGPU.InliningMode.Conservative">
            <summary>
            Enables basic inlining heuristics and disables aggressive inlining
            behavior to reduce the overall code size.
            </summary>
        </member>
        <member name="F:ILGPU.InliningMode.Disabled">
            <summary>
            No functions will be inlined at all.
            </summary>
        </member>
        <member name="T:ILGPU.DebugSymbolsMode">
            <summary>
            Specifies the debug mode to use.
            </summary>
        </member>
        <member name="F:ILGPU.DebugSymbolsMode.Auto">
            <summary>
            Automatic decision on debug symbols. If a debugger is attached, this mode
            changes to <see cref="F:ILGPU.DebugSymbolsMode.Basic"/>. If not, all debug symbols will be
            <see cref="F:ILGPU.DebugSymbolsMode.Disabled"/>.
            </summary>
            <remarks>
            This is the default setting.
            </remarks>
        </member>
        <member name="F:ILGPU.DebugSymbolsMode.Disabled">
            <summary>
            No debug symbols will be loaded.
            </summary>
        </member>
        <member name="F:ILGPU.DebugSymbolsMode.Basic">
            <summary>
            Debug information loaded from portable PDBs to enhance error messages
            and assertion checks.
            </summary>
        </member>
        <member name="F:ILGPU.DebugSymbolsMode.Kernel">
            <summary>
            Enables debug information in kernels (if available).
            </summary>
        </member>
        <member name="F:ILGPU.DebugSymbolsMode.KernelSourceAnnotations">
            <summary>
            Enabled source-code annotations in generated kernels (implies
            <see cref="F:ILGPU.DebugSymbolsMode.Kernel"/>).
            </summary>
        </member>
        <member name="T:ILGPU.OptimizationLevel">
            <summary>
            Represent an optimization level.
            </summary>
        </member>
        <member name="F:ILGPU.OptimizationLevel.Debug">
            <summary>
            Defaults to O0.
            </summary>
        </member>
        <member name="F:ILGPU.OptimizationLevel.Release">
            <summary>
            Defaults to O1.
            </summary>
            <remarks>
            This is the default setting for new <see cref="T:ILGPU.Context"/> instances.
            </remarks>
        </member>
        <member name="F:ILGPU.OptimizationLevel.O0">
            <summary>
            Lightweight (required) transformations only.
            </summary>
        </member>
        <member name="F:ILGPU.OptimizationLevel.O1">
            <summary>
            Default release mode transformations.
            </summary>
        </member>
        <member name="F:ILGPU.OptimizationLevel.O2">
            <summary>
            Expensive transformations.
            </summary>
        </member>
        <member name="T:ILGPU.MathMode">
            <summary>
            The math precision mode.
            </summary>
        </member>
        <member name="F:ILGPU.MathMode.Default">
            <summary>
            All floating point operations are performed using their intended bitness.
            </summary>
            <remarks>
            This is the default setting.
            </remarks>
        </member>
        <member name="F:ILGPU.MathMode.Fast">
            <summary>
            Use fast math functions that are less precise.
            </summary>
        </member>
        <member name="F:ILGPU.MathMode.Fast32BitOnly">
            <summary>
            Forces the use of 32-bit floats instead of 64-bit floats. This affects
            all math operations (like Math.Sqrt(double)) and all 64-bit float
            conversions. This settings might improve performance dramatically but
            might cause precision loss.
            </summary>
        </member>
        <member name="T:ILGPU.StaticFieldMode">
            <summary>
            Internal flags to specify the behavior in the presence of static fields.
            </summary>
        </member>
        <member name="F:ILGPU.StaticFieldMode.Default">
            <summary>
            Loads from readonly static fields are supported.
            </summary>
            <remarks>
            This is the default setting.
            </remarks>
        </member>
        <member name="F:ILGPU.StaticFieldMode.MutableStaticFields">
            <summary>
            Loads from mutable static fields are rejected by default.
            However, their current values can be inlined during JIT
            compilation. Adding this flags causes values from mutable
            static fields to be inlined instead of rejected.
            </summary>
        </member>
        <member name="F:ILGPU.StaticFieldMode.IgnoreStaticFieldStores">
            <summary>
            Stores to static fields are rejected by default.
            Adding this flag causes stores to static fields
            to be silently ignored instead of rejected.
            </summary>
        </member>
        <member name="T:ILGPU.ArrayMode">
            <summary>
            Internal flags to specify the behavior in the presence of static arrays. Note
            that static array fields are also affected by the <see cref="T:ILGPU.StaticFieldMode"/>
            settings.
            </summary>
        </member>
        <member name="F:ILGPU.ArrayMode.Default">
            <summary>
            Loads from static array values are rejected by default.
            </summary>
        </member>
        <member name="F:ILGPU.ArrayMode.InlineMutableStaticArrays">
            <summary>
            Loads from static arrays are supported and realized by inlining static
            array values.
            </summary>
        </member>
        <member name="T:ILGPU.CachingMode">
            <summary>
            Internal flags to specify the caching behavior.
            </summary>
        </member>
        <member name="F:ILGPU.CachingMode.Default">
            <summary>
            All implicit caches are enabled by default.
            </summary>
            <remarks>
            This is the default setting.
            </remarks>
        </member>
        <member name="F:ILGPU.CachingMode.NoKernelCaching">
            <summary>
            Disables all kernel-loading caches.
            </summary>
            <remarks>
            However, IR nodes, type information and debug information will still
            be cached, since they are used for different kernel compilation operations.
            If you want to clear those caches as well, you will have to clear them
            manually using <see cref="M:ILGPU.Context.ClearCache(ILGPU.ClearCacheMode)"/>.
            </remarks>
        </member>
        <member name="F:ILGPU.CachingMode.NoLaunchCaching">
            <summary>
            Disables the implicit kernel launch cache.
            </summary>
            <remarks>
            However, IR nodes, type information and debug information will still
            be cached, since they are used for different kernel compilation operations.
            If you want to clear those caches as well, you will have to clear them
            manually using <see cref="M:ILGPU.Context.ClearCache(ILGPU.ClearCacheMode)"/>.
            </remarks>
        </member>
        <member name="F:ILGPU.CachingMode.Disabled">
            <summary>
            Disables all caches.
            </summary>
        </member>
        <member name="T:ILGPU.PageLockingMode">
            <summary>
            Internal flags to specificy the behavior of automatic page locking.
            </summary>
        </member>
        <member name="F:ILGPU.PageLockingMode.Default">
            <summary>
            All automatic page-locking allocations are disabled.
            </summary>
            <remarks>
            This is the default setting.
            </remarks>
        </member>
        <member name="F:ILGPU.PageLockingMode.Auto">
            <summary>
            All implicit memory allocations are automatically page locked by default
            during transfer operations. Note that externally allocated buffers need to
            be page-locked explicitly by the user.
            </summary>
        </member>
        <member name="F:ILGPU.PageLockingMode.Aggressive">
            <summary>
            All memory buffers are page-locked automatically during transfer operations.
            This also affects buffers allocated by the user.
            </summary>
        </member>
        <member name="T:ILGPU.ContextProperties">
            <summary>
            Defines global context specific properties.
            </summary>
        </member>
        <member name="F:ILGPU.ContextProperties.extensionProperties">
            <summary>
            Stores all context-specific extension properties.
            </summary>
        </member>
        <member name="M:ILGPU.ContextProperties.#ctor">
            <summary>
            Constructs an empty instance.
            </summary>
        </member>
        <member name="M:ILGPU.ContextProperties.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructs an instance based on the given source properties.
            </summary>
        </member>
        <member name="P:ILGPU.ContextProperties.DebugSymbolsMode">
            <summary>
            Returns the current debug symbols mode.
            </summary>
            <remarks><see cref="F:ILGPU.DebugSymbolsMode.Auto"/> by default.</remarks>
        </member>
        <member name="P:ILGPU.ContextProperties.EnableAssertions">
            <summary>
            Returns true if assertions are enabled.
            </summary>
            <remarks>Disabled by default.</remarks>
        </member>
        <member name="P:ILGPU.ContextProperties.EnableIOOperations">
            <summary>
            Returns true if IO is enabled.
            </summary>
            <remarks>Disabled by default.</remarks>
        </member>
        <member name="P:ILGPU.ContextProperties.EnableKernelInformation">
            <summary>
            Returns true if additional kernel information is enabled.
            </summary>
            <remarks>Disabled by default.</remarks>
        </member>
        <member name="P:ILGPU.ContextProperties.EnableVerifier">
            <summary>
            Returns true if the internal IR verifier is enabled.
            </summary>
            <remarks>Disabled by default.</remarks>
        </member>
        <member name="P:ILGPU.ContextProperties.EnableParallelCodeGenerationInFrontend">
            <summary>
            Returns true if multiple threads should be used to generate code for
            different methods in parallel.
            </summary>
            <remarks>Disabled by default.</remarks>
        </member>
        <member name="P:ILGPU.ContextProperties.OptimizationLevel">
            <summary>
            The current optimization level to use.
            </summary>
            <remarks><see cref="F:ILGPU.OptimizationLevel.Release"/> by default.</remarks>
        </member>
        <member name="P:ILGPU.ContextProperties.InliningMode">
            <summary>
            The current inlining mode to use.
            </summary>
            <remarks><see cref="F:ILGPU.InliningMode.Default"/> by default.</remarks>
        </member>
        <member name="P:ILGPU.ContextProperties.MathMode">
            <summary>
            The current math mode.
            </summary>
            <remarks><see cref="F:ILGPU.MathMode.Default"/> by default.</remarks>
        </member>
        <member name="P:ILGPU.ContextProperties.StaticFieldMode">
            <summary>
            Defines how to deal with static fields.
            </summary>
            <remarks><see cref="F:ILGPU.MathMode.Default"/> by default.</remarks>
        </member>
        <member name="P:ILGPU.ContextProperties.ArrayMode">
            <summary>
            Defines how to deal with arrays.
            </summary>
            <remarks><see cref="F:ILGPU.ArrayMode.Default"/> by default.</remarks>
        </member>
        <member name="P:ILGPU.ContextProperties.CachingMode">
            <summary>
            Defines which functions/kernels/modules should be cached.
            </summary>
            <remarks><see cref="F:ILGPU.CachingMode.Default"/> by default.</remarks>
        </member>
        <member name="P:ILGPU.ContextProperties.PageLockingMode">
            <summary>
            Defines which buffers should be automatically page locked by default.
            </summary>
            <remarks><see cref="F:ILGPU.PageLockingMode.Default"/> by default.</remarks>
        </member>
        <member name="P:ILGPU.ContextProperties.EnableProfiling">
            <summary>
            Returns true if profiling is enabled on all streams.
            </summary>
            <remarks>Disabled by default.</remarks>
        </member>
        <member name="P:ILGPU.ContextProperties.LibNvvmPath">
            <summary>
            Returns the path to LibNVVM DLL.
            </summary>
        </member>
        <member name="P:ILGPU.ContextProperties.LibDevicePath">
            <summary>
            Returns the path to LibDevice bitcode.
            </summary>
        </member>
        <member name="M:ILGPU.ContextProperties.GetExtensionProperty``1(System.String,``0)">
            <summary>
            Gets an extension property.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">
            The default value (if the key could not be found).
            </param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:ILGPU.ContextProperties.SetExtensionProperty``1(System.String,``0)">
            <summary>
            Sets an extension property.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:ILGPU.ContextProperties.InstantiateProperties">
            <summary>
            Instantiates all properties by replacing the automatic detection modes
            with more specific enumeration values.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Block">
            <summary>
            A simple basic block in the scope of an IR code-generation process.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Block.CFGBuilder">
            <summary>
            Constructs CFGs out of disassembled methods.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Block.CFGBuilder.RegisterOffsetMapping">
            <summary>
            Registers instruction offset mappings.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.RegisterOffsetMapping.#ctor(ILGPU.Frontend.Block.CFGBuilder,System.Int32)">
            <summary>
            Constructs a new offset registration mapping.
            </summary>
            <param name="builder">The parent builder instance.</param>
            <param name="instructionIndex">
            The current instruction index to map to.
            </param>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.RegisterOffsetMapping.Builder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.RegisterOffsetMapping.InstructionIndex">
            <summary>
            Returns the parent instruction index.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.RegisterOffsetMapping.Apply(ILGPU.Frontend.ILInstruction,System.Int32)">
            <summary>
            Registers the given instruction offset.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.#ctor(ILGPU.Frontend.CodeGenerator,ILGPU.IR.Method.Builder)">
            <summary>
            Constructs a new CFG builder.
            </summary>
            <param name="codeGenerator">The current code generator.</param>
            <param name="methodBuilder">The current method builder.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.AppendBasicBlock(ILGPU.IR.Location,System.Int32)">
            <summary>
            Appends a basic block with the given target.
            </summary>
            <param name="location">The current location.</param>
            <param name="target">The block target.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.BuildBasicBlocks">
            <summary>
            Build all required basic blocks.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.AddSuccessor(ILGPU.Frontend.Block,ILGPU.Frontend.Block)">
            <summary>
            Adds a new successor to the current block.
            </summary>
            <param name="current">The current block.</param>
            <param name="successor">
            The successor to add to the current block.
            </param>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.SetupBasicBlock(System.Collections.Generic.HashSet{ILGPU.Frontend.Block},ILGPU.Frontend.Block,System.Int32,System.Int32)">
            <summary>
            Setups a single basic block.
            </summary>
            <param name="visited">The set of visited blocks.</param>
            <param name="current">The current block.</param>
            <param name="stackCounter">The current stack counter.</param>
            <param name="target">The target block.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.SetupBasicBlocks(System.Collections.Generic.HashSet{ILGPU.Frontend.Block},ILGPU.Frontend.Block,System.Int32)">
            <summary>
            Setups all basic blocks (fills in the required information).
            </summary>
            <param name="visited">The set of visited blocks.</param>
            <param name="current">The current block.</param>
            <param name="instructionIdx">The starting instruction index.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.CFGBuilder.WireBlocks">
            <summary>
            Wires all terminators and connects all basic blocks.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.CodeGenerator">
            <summary>
            Returns the associated code generator.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.Blocks">
            <summary>
            Returns the associated SSA block collection.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.Builder">
            <summary>
            Returns the internal method builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.CFGBuilder.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Resolves the block for the given basic block.
            </summary>
            <param name="basicBlock">The source basic block.</param>
            <returns>The resolved frontend block.</returns>
        </member>
        <member name="T:ILGPU.Frontend.Block.ArithmeticOperandKind">
            <summary>
            An arithmetic operand type.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Block.ArithmeticOperandKind.Default">
            <summary>
            A default arithmetic type.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Block.ArithmeticOperandKind.Pointer">
            <summary>
            A pointer-based operation.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.#ctor(ILGPU.Frontend.CodeGenerator,ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Constructs a new basic block.
            </summary>
            <param name="codeGenerator">The parent code generator.</param>
            <param name="builder">The current basic block builder.</param>
        </member>
        <member name="P:ILGPU.Frontend.Block.CodeGenerator">
            <summary>
            Returns the code generator.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.Builder">
            <summary>
            Returns the associated IR builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.BasicBlock">
            <summary>
            Returns the underlying basic block.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.Terminator">
            <summary>
            Returns the current terminator.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.StackCounter">
            <summary>
            Returns the current stack counter.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.InstructionOffset">
            <summary>
            Returns the instruction offset of this block.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Block.InstructionCount">
            <summary>
            Returns the number of instructions in this block.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.SetValue(ILGPU.Frontend.VariableRef,ILGPU.IR.Value)">
            <summary>
            Sets the given variable to the given value.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.GetValue(ILGPU.Frontend.VariableRef)">
            <summary>
            Returns the value of the given variable.
            </summary>
            <param name="var">The variable reference.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.GetBuilderTerminator(System.Int32)">
            <summary>
            Resolves the current terminator as builder terminator.
            </summary>
            <param name="count">The number of expected branch targets.</param>
            <returns>The resolved branch targets.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.PeekType(ILGPU.IR.Location)">
            <summary>
            Peeks the basic-value type of the element on the top of the stack.
            </summary>
            <param name="location">The current location.</param>
            <returns>The peeked basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.PeekBasicValueType(ILGPU.IR.Location)">
            <summary>
            Peeks the basic-value type of the element on the top of the stack.
            </summary>
            <param name="location">The current location.</param>
            <returns>The peeked basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.Dup">
            <summary>
            Duplicates the element at the top of the stack.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Block.Pop">
            <summary>
            Pops a value from the execution stack.
            </summary>
            <returns>The popped value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.Pop(ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Pops a value as the required type from the execution stack.
            </summary>
            <param name="targetType">The required target type.</param>
            <param name="flags">The conversion flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.Convert(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Converts a value to the required type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The required target type.</param>
            <param name="flags">The conversion flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.PopInt(ILGPU.IR.Location,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Pops an element as integer from the stack.
            </summary>
            <param name="location">The current location.</param>
            <param name="flags">The conversion flags.</param>
            <returns>The popped element as integer.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.PopMethodArgs(ILGPU.IR.Location,System.Reflection.MethodBase,ILGPU.IR.Value)">
            <summary>
            Pops the required arguments from the stack.
            </summary>
            <param name="location">The current location.</param>
            <param name="methodBase">The method to use for the argument types.</param>
            <param name="instanceValue">The instance value (if available).</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.PopCompareValue(ILGPU.IR.Location,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Pops a value from the stack that can be used in the context of
            compare operations.
            </summary>
            <param name="location">The current location.</param>
            <param name="flags">The conversion flags.</param>
            <returns>
            The popped value from the stack that can be used in the
            context of compare and arithmetic operations.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.PopCompareOrArithmeticValue(ILGPU.IR.Location,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Pops a value from the stack that can be used in the context of
            compare and arithmetic operations.
            </summary>
            <param name="location">The current location.</param>
            <param name="flags">The conversion flags.</param>
            <returns>
            The popped value from the stack that can be used in the
            context of compare and arithmetic operations.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.PopArithmeticArgs(ILGPU.IR.Location,ILGPU.IR.Values.ConvertFlags,ILGPU.IR.Value@,ILGPU.IR.Value@)">
            <summary>
            Pops two compatible arithmetic arguments from the execution stack.
            </summary>
            <param name="location">The current location.</param>
            <param name="flags">The conversion flags.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>True, if this is a default arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Block.Push(ILGPU.IR.Value)">
            <summary>
            Pushes the value of the given type onto the execution stack.
            </summary>
            <param name="value">The value to push.</param>
        </member>
        <member name="M:ILGPU.Frontend.Block.ToString">
            <summary>
            Returns the string representation of this block.
            </summary>
            <returns>The string representation of this block.</returns>
        </member>
        <member name="T:ILGPU.Frontend.CodeGenerator">
            <summary>
            Represents an IR code generator for .Net methods.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.TryGetBasicValueSize(ILGPU.IR.Value,System.Nullable{System.Int32},ILGPU.BasicValueType@)">
            <summary>
            Tries to map the given IR value representing a raw integer-based value size
            to a corresponding <see cref="T:ILGPU.BasicValueType"/> entry.
            </summary>
            <param name="value">The IR to map.</param>
            <param name="shiftValue">The base value for shift operations.</param>
            <param name="valueType">The determined basic-value type (if any).</param>
            <returns>
            True, if the given IR node could be mapped to a basic value type.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.TryConvertIntoLoadElementAddress(ILGPU.IR.Value,ILGPU.IR.Values.BinaryArithmeticValue,ILGPU.IR.Value@)">
            <summary>
            Tries to convert the base address into a valid LEA operation.
            </summary>
            <param name="left">The left operand (the pointer to use).</param>
            <param name="baseAddress">The base address offset.</param>
            <param name="result">The result value (if any).</param>
            <returns>
            True, if the given pattern could be converted into a LEA node.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeArithmetic(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.Frontend.ILInstruction)">
            <summary>
            Realizes an arithmetic operation.
            </summary>
            <param name="kind">The kind of the arithmetic operation.</param>
            <param name="instruction">The current IL instruction.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeArithmetic(ILGPU.IR.Values.UnaryArithmeticKind)">
            <summary>
            Realizes an arithmetic operation.
            </summary>
            <param name="kind">The kind of the arithmetic operation.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeNewArray(System.Type)">
            <summary>
            Realizes an array creation.
            </summary>
            <param name="managedElementType">The element type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateLoadArrayElementAddress(System.Type,ILGPU.IR.Types.TypeNode@)">
            <summary>
            Creates an array element address load.
            </summary>
            <param name="elementType">The element type to load.</param>
            <param name="type">The IR element type to load.</param>
            <returns>The loaded array element address.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadElementAddress(System.Type)">
            <summary>
            Realizes an array load-element operation.
            </summary>
            <param name="elementType">The element type to load.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadElement(System.Type)">
            <summary>
            Realizes an array load-element operation.
            </summary>
            <param name="elementType">The element type to load.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeStoreElement(System.Type)">
            <summary>
            Realizes an array store-element operation.
            </summary>
            <param name="elementType">The element type to store.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadArrayLength">
            <summary>
            Realizes an array length value.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateCall(System.Reflection.MethodBase,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Creates a call instruction to the given method with the given arguments.
            </summary>
            <param name="method">The target method to invoke.</param>
            <param name="arguments">The call arguments.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeCall(ILGPU.Frontend.ILInstruction)">
            <summary>
            Realizes a call instruction.
            </summary>
            <param name="instruction">The instruction to realize.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeCall(System.Reflection.MethodBase)">
            <summary>
            Realizes a call instruction.
            </summary>
            <param name="target">The target method to invoke.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.ResolveVirtualCallTarget(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Resolves the virtual call target of the given virtual (or abstract) method.
            </summary>
            <param name="target">The virtual method to call.</param>
            <param name="constrainedType">
            The constrained type of the virtual call.
            </param>
            <returns>The resolved call target.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeVirtualCall(ILGPU.Frontend.ILInstruction)">
            <summary>
            Realizes a virtual-call instruction.
            </summary>
            <param name="instruction">The current IL instruction.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeVirtualCall(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Realizes a virtual-call instruction.
            </summary>
            <param name="target">The target method to invoke.</param>
            <param name="constrainedType">
            The target type on which to invoke the method.
            </param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeCalli(System.Object)">
            <summary>
            Realizes an indirect call instruction.
            </summary>
            <param name="signature">The target signature.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeJump(System.Reflection.MethodBase)">
            <summary>
            Realizes a jump instruction.
            </summary>
            <param name="target">The target method to invoke.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.#ctor(ILGPU.Frontend.ILFrontend,ILGPU.IR.IRContext,ILGPU.IR.Method.Builder,ILGPU.Frontend.DisassembledMethod,ILGPU.IR.CompilationStackLocation,System.Collections.Generic.Dictionary{System.Reflection.MethodBase,ILGPU.IR.CompilationStackLocation})">
            <summary>
            Constructs a new code generator.
            </summary>
            <param name="frontend">The current frontend instance.</param>
            <param name="context">The parent IR context.</param>
            <param name="methodBuilder">The current method builder.</param>
            <param name="disassembledMethod">
            The corresponding disassembled method.
            </param>
            <param name="compilationStackLocation">The source location.</param>
            <param name="detectedMethods">The set of newly detected methods.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.SetupVariables">
            <summary>
            Setups all parameter and local bindings.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.DetectedMethods">
            <summary>
            Returns the set of detected methods.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Frontend">
            <summary>
            Returns the associated frontend.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Context">
            <summary>
            Returns the current IR context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.TypeContext">
            <summary>
            Returns the current type context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.MethodBuilder">
            <summary>
            Returns the current method builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.DisassembledMethod">
            <summary>
            Returns the current disassembled method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Method">
            <summary>
            Returns the current managed method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.SSABuilder">
            <summary>
            Returns the current SSA builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.CompilationStackLocation">
            <summary>
            Gets or sets the source location.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Block">
            <summary>
            Gets or sets the current block being processing.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Builder">
            <summary>
            Returns the current block builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.Location">
            <summary>
            Gets or sets the current location.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerator.LambdaArgumentOffset">
            <summary>
            Gets or sets the offset for load/store argument instructions in a lambda.
            This is used to shift arguments because of the unused 'this' argument.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.DeclareMethod(System.Reflection.MethodBase)">
            <summary>
            Declares a method.
            </summary>
            <param name="methodBase">The method to declare.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateTempAlloca(ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a temporary alloca for the given type.
            </summary>
            <param name="type">The type to allocate.</param>
            <returns>The created alloca.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.GenerateCode">
            <summary>
            Generates code for the current function.
            </summary>
            <returns>The created top-level function.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.GenerateCodeForBlock">
            <summary>
            Generates code for the given block.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.VerifyNotRuntimeMethod(System.Reflection.MethodBase)">
            <summary>
            Verifies that the given method is not a .Net-runtime-dependent method.
            If it depends on the runtime, this method will throw a
            <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="method">The method to verify.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.VerifyStaticFieldLoad(System.Reflection.FieldInfo)">
            <summary>
            Verifies a static-field load operation.
            </summary>
            <param name="field">The static field to load.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.VerifyStaticFieldStore(System.Reflection.FieldInfo)">
            <summary>
            Verifies a static-field store operation.
            </summary>
            <param name="field">The static field to store to.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeNop">
            <summary>
            Realizes a no-operation instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeTrap">
            <summary>
            Realizes a trap instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.LoadOntoEvaluationStack(ILGPU.IR.Value,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Converts the given value (already loaded) into its corresponding
            evaluation-stack representation.
            </summary>
            <param name="value">The source value to load (already loaded).</param>
            <param name="flags">The conversion flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateLoad(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Realizes an indirect load instruction.
            </summary>
            <param name="address">The source address.</param>
            <param name="type">The target type.</param>
            <param name="flags">The conversion flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateStore(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Realizes an indirect store instruction.
            </summary>
            <param name="address">The target address.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeDup">
            <summary>
            Realizes a duplicate operation.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakePop">
            <summary>
            Realizes a pop operation.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadToken(System.Object)">
            <summary>
            Realizes an internal load-token operation.
            </summary>
            <param name="handleValue">The managed handle object.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeCompare(ILGPU.IR.Values.CompareKind,ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Realizes a compare instruction of the given type.
            </summary>
            <param name="compareKind">The comparison kind.</param>
            <param name="instructionFlags">The instruction flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateCompare(ILGPU.IR.Values.CompareKind,ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Creates a compare instruction of the given type.
            </summary>
            <param name="compareKind">The comparison kind.</param>
            <param name="instructionFlags">The instruction flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateCompare(ILGPU.IR.Values.CompareKind,ILGPU.IR.Values.CompareFlags)">
            <summary>
            Creates a compare instruction of the given type.
            </summary>
            <param name="compareKind">The comparison kind.</param>
            <param name="flags">The comparison flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateCompare(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.CompareKind,ILGPU.IR.Values.CompareFlags)">
            <summary>
            Creates a compare instruction of the given type.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="compareKind">The comparison kind.</param>
            <param name="flags">The comparison flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.Load(System.Int32)">
            <summary>
            Loads an int.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.Load(System.Int64)">
            <summary>
            Loads a long.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.Load(System.Single)">
            <summary>
            Loads a float.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.Load(System.Double)">
            <summary>
            Loads a double.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.LoadString(System.String)">
            <summary>
            Loads a string.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeReturn">
            <summary>
            Realizes a return instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeBranch">
            <summary>
            Realizes an unconditional branch instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeBranch(ILGPU.IR.Values.CompareKind,ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Realizes a conditional branch instruction.
            </summary>
            <param name="compareKind">The comparison type of the condition.</param>
            <param name="instructionFlags">The instruction flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeIntrinsicBranch(ILGPU.IR.Values.CompareKind)">
            <summary>
            Make an intrinsic branch.
            </summary>
            <param name="kind">The current compare kind.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeBranchTrue">
            <summary>
            Make a true branch.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeBranchFalse">
            <summary>
            Make a false branch.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeSwitch(ILGPU.Frontend.ILInstructionBranchTargets)">
            <summary>
            Realizes a switch instruction.
            </summary>
            <param name="branchTargets">All switch branch targets.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeConvert(System.Type,ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Realizes a convert instruction.
            </summary>
            <param name="targetType">The target type.</param>
            <param name="instructionFlags">The instruction flags.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateConversion(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Coverts the given value to the target type.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target type.</param>
            <param name="flags">
            True, if the comparison should be forced to be unsigned.
            </param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.ComputeFieldSpan(ILGPU.IR.Types.TypeNode,System.Reflection.FieldInfo)">
            <summary>
            Helper function to compute field refence for the specified field of a type.
            </summary>
            <param name="type">The type node.</param>
            <param name="field">The field.</param>
            <returns>The target field span.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadField(System.Reflection.FieldInfo)">
            <summary>
            Loads the value of a field specified by the given metadata token.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadFieldAddress(System.Reflection.FieldInfo)">
            <summary>
            Loads the address of a field specified by the given metadata token.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.CreateLoadStaticFieldValue(System.Reflection.FieldInfo)">
            <summary>
            Loads a static field value and returns the created IR node.
            </summary>
            <param name="field">The field.</param>
            <returns>The loaded field value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadStaticField(System.Reflection.FieldInfo)">
            <summary>
            Loads a static field value.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadStaticFieldAddress(System.Reflection.FieldInfo)">
            <summary>
            Loads the address of a static field specified by the given metadata token.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeStoreField(System.Reflection.FieldInfo)">
            <summary>
            Stores a value to a field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeStoreStaticField(System.Reflection.FieldInfo)">
            <summary>
            Stores a value to a static field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeBox">
            <summary>
            Realizes a boxing operation that boxes a value.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeUnbox(System.Type)">
            <summary>
            Realizes an unboxing operation that unboxes a previously boxed value.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeNewObject(System.Reflection.MethodBase)">
            <summary>
            Realizes a new-object operation that creates a new instance of a specified
            type.
            </summary>
            <param name="method">The target method.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeInitObject(System.Type)">
            <summary>
            Realizes a managed-object initialization.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeIsInstance(System.Type)">
            <summary>
            Realizes an is-instance instruction.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeLoadObject(System.Type)">
            <summary>
            Realizes an indirect load instruction.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.MakeStoreObject(System.Type)">
            <summary>
            Realizes an indirect store instruction.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.LoadSizeOf(System.Type)">
            <summary>
            Loads the size of the type (in bytes).
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.LoadVariable(ILGPU.Frontend.VariableRef)">
            <summary>
            Loads a variable. This can be an argument or a local reference.
            </summary>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.LoadVariableAddress(ILGPU.Frontend.VariableRef)">
            <summary>
            Loads a variable address. This can be an argument or a local reference.
            </summary>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerator.StoreVariable(ILGPU.Frontend.VariableRef)">
            <summary>
            Stores a value to the given variable slot.
            </summary>
            <param name="var">The variable reference.</param>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation">
            <summary>
            Represents assembly debug information.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.debugInformation">
            <summary>
            The internal mapping of methods to cached debug information.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.readerProvider">
            <summary>
            The internal reader provider.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.syncLock">
            <summary>
            The internal synchronization object.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.#ctor(System.Reflection.Assembly)">
            <summary>
            Constructs new empty assembly debug information.
            </summary>
            <param name="assembly">The referenced assembly.</param>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.#ctor(System.Reflection.Assembly,System.IO.Stream)">
            <summary>
            Constructs new assembly debug information.
            </summary>
            <param name="assembly">The referenced assembly.</param>
            <param name="pdbStream">
            The associated PDB stream (hast to be kept open).
            </param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.Assembly">
            <summary>
            Returns the associated assembly.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.Modules">
            <summary>
            Returns the associated modules.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.IsValid">
            <summary>
            Returns true if this container holds valid debug information.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.MetadataReader">
            <summary>
            Returns the associated metadata reader.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.ILGPU#Frontend#DebugInformation#IMetadataReaderOperationProvider#BeginOperation">
            <summary>
            Begins a synchronized metadata reader operation.
            </summary>
            <returns>The operation instance.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.TryResolveMethod(System.Int32,System.Reflection.MethodBase@)">
            <summary>
            Tries to resolve the given metadata token to a method.
            </summary>
            <param name="metadataToken">The metadata token to resolve.</param>
            <param name="method">The resolved method (or null).</param>
            <returns>True, if the given token could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.AssemblyDebugInformation.TryLoadDebugInformation(System.Reflection.MethodBase,ILGPU.Frontend.DebugInformation.MethodDebugInformation@)">
            <summary>
            Tries to load debug information for the given method base.
            </summary>
            <param name="methodBase">The method base.</param>
            <param name="methodDebugInformation">
            The loaded debug information (or null).
            </param>
            <returns>True, if the requested debug information could be loaded.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.DebugInformationManager">
            <summary>
            Represents a debug-information manager.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.DebugInformationManager.PDBFileExtensions">
            <summary>
            The PDB file extension (.pdb).
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.DebugInformationManager.PDBFileSearchPattern">
            <summary>
            The PDB file-search extension (*.pdb).
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.DebugInformationManager.ILoader">
            <summary>
            Represents a custom PDB loader.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.ILoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary>
            Executes the actual loader logic.
            </summary>
            <param name="assembly">The current assembly.</param>
            <param name="assemblyDebugInformation">
            The loaded debug-information instance.
            </param>
            <returns>
            True, if the requested debug information could be loaded.
            </returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.DebugInformationManager.FileLoader">
            <summary>
            Represents a file loader for PDB files.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.FileLoader.#ctor(ILGPU.Frontend.DebugInformation.DebugInformationManager,System.String)">
            <summary>
            Constructs a new file loader.
            </summary>
            <param name="parent">The parent manager.</param>
            <param name="pdbFileName">The file name to load.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.DebugInformationManager.FileLoader.Parent">
            <summary>
            Returns the parent debug-information manager.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.DebugInformationManager.FileLoader.PDBFileName">
            <summary>
            Returns the file name to load.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.FileLoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary cref="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.ILoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)"/>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.DebugInformationManager.AutoFileLoader">
            <summary>
            Represents a automatic file loader for PDB files.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.AutoFileLoader.#ctor(ILGPU.Frontend.DebugInformation.DebugInformationManager)">
            <summary>
            Constructs a new automatic file loader.
            </summary>
            <param name="parent">The parent manager.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.DebugInformationManager.AutoFileLoader.Parent">
            <summary>
            Returns the parent debug-information manager.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.AutoFileLoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary cref="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.ILoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)"/>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.DebugInformationManager.StreamLoader">
            <summary>
            Represents a stream loader for PDB files.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.StreamLoader.#ctor(ILGPU.Frontend.DebugInformation.DebugInformationManager,System.IO.Stream)">
            <summary>
            Constructs a new stream loader.
            </summary>
            <param name="parent">The parent manager.</param>
            <param name="pdbStream">
            The stream to load from (must be left open).
            </param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.DebugInformationManager.StreamLoader.Parent">
            <summary>
            Returns the parent debug-information manager.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.DebugInformationManager.StreamLoader.PDBStream">
            <summary>
            Returns the stream to load from.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.StreamLoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary cref="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.ILoader.Load(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)"/>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.#ctor">
            <summary>
            Constructs a new debug-information manager.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryLoadSymbols(System.Reflection.Assembly,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary>
            Tries to load symbols for the given assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="assemblyDebugInformation">
            The loaded debug information (or null).
            </param>
            <returns>True, if the debug information could be loaded.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryLoadSymbols(System.Reflection.Assembly,System.String,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary>
            Tries to load symbols for the given assembly based on the given
            debug-information file.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="pdbFileName">The name of the debug-information file.</param>
            <param name="assemblyDebugInformation">
            The loaded debug information (or null).
            </param>
            <returns>True, if the debug information could be loaded.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryLoadSymbols(System.Reflection.Assembly,System.IO.Stream,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary>
            Tries to load symbols for the given assembly based on the given PDB stream.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="pdbStream">The source PDB stream (must be left open).</param>
            <param name="assemblyDebugInformation">
            The loaded debug information (or null).
            </param>
            <returns>True, if the debug information could be loaded.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryLoadSymbolsInternal``1(System.Reflection.Assembly,``0@,ILGPU.Frontend.DebugInformation.AssemblyDebugInformation@)">
            <summary>
            Tries to load symbols for the given assembly based on the given
            debug-information file.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="loader">The internal loader.</param>
            <param name="assemblyDebugInformation">
            The loaded debug information (or null).
            </param>
            <returns>True, if the debug information could be loaded.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryFindPbdFile(System.String,System.String@)">
            <summary>
            Tries to find a debug-information file with the name
            <paramref name="pdbFileName"/>.
            </summary>
            <param name="pdbFileName">The name of the debug-information file.</param>
            <param name="fileName">The resolved filename (or null).</param>
            <returns>True, if the given debug-information file could be found.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.RegisterLookupDirectory(System.String)">
            <summary>
            Registers the given directory as a source directory for
            debug-information files.
            </summary>
            <param name="directory">The directory to register.</param>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.TryLoadDebugInformation(System.Reflection.MethodBase,ILGPU.Frontend.DebugInformation.MethodDebugInformation@)">
            <summary>
            Tries to load debug information for the given method.
            </summary>
            <param name="methodBase">The method.</param>
            <param name="methodDebugInformation">
            Loaded debug information (or null).
            </param>
            <returns>True, if debug information could be loaded.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.LoadSequencePoints(System.Reflection.MethodBase)">
            <summary>
            Loads the sequence points of the given method.
            </summary>
            <param name="methodBase">The method base.</param>
            <returns>
            A sequence-point enumerator that targets the given method.
            </returns>
            <remarks>
            If no debug information could be loaded for the given method, an empty
            <see cref="T:ILGPU.Frontend.DebugInformation.SequencePointEnumerator"/> will be returned.
            </remarks>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears cached debug information.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.DebugInformationManager.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.IDebugInformationEnumerator`1">
            <summary>
            Represents a debug-information enumerator.
            </summary>
            <typeparam name="T">The enumerator type.</typeparam>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.IDebugInformationEnumerator`1.Current">
            <summary>
            Returns the current object.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.IDebugInformationEnumerator`1.MoveTo(System.Int32)">
            <summary>
            Moves the enumerator forward to the given instruction offset.
            </summary>
            <param name="offset">The instruction offset in bytes.</param>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.LocalVariable">
            <summary>
            Represents a local variable in a scope.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.#ctor(System.Int32,System.String)">
            <summary>
            Constructs a new local variable.
            </summary>
            <param name="index">The variable index.</param>
            <param name="name">The variable name.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.LocalVariable.Index">
            <summary>
            Returns the referenced local-variable index.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.LocalVariable.Name">
            <summary>
            Returns the variable name.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.Equals(ILGPU.Frontend.DebugInformation.LocalVariable)">
            <summary>
            Returns true if the given local variable is equal to the current local
            variable.
            </summary>
            <param name="other">The other local variable.</param>
            <returns>
            True, if the given index is equal to the current local variable.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current local variable.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current local variable.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.ToString">
            <summary>
            Returns the string representation of this local variable.
            </summary>
            <returns>The string representation of this local variable.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.op_Equality(ILGPU.Frontend.DebugInformation.LocalVariable,ILGPU.Frontend.DebugInformation.LocalVariable)">
            <summary>
            Returns true if the first and second local variable are the same.
            </summary>
            <param name="first">The first local variable.</param>
            <param name="second">The second local variable.</param>
            <returns>
            True, if the first and second local variable are the same.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.LocalVariable.op_Inequality(ILGPU.Frontend.DebugInformation.LocalVariable,ILGPU.Frontend.DebugInformation.LocalVariable)">
            <summary>
            Returns true if the first and second local variable are not the same.
            </summary>
            <param name="first">The first local variable.</param>
            <param name="second">The second local variable.</param>
            <returns>
            True, if the first and second local variable are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.IMetadataReaderOperationProvider">
            <summary>
            An abstract provider for synchronized metadata reader operations.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.IMetadataReaderOperationProvider.BeginOperation">
            <summary>
            Begins a synchronized metadata reader operation.
            </summary>
            <returns>The operation instance.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.MetadataReaderOperation">
            <summary>
            Represents a synchronized metadata reader operation.
            </summary>
            <remarks>
            The current implementation of the <see cref="T:System.Reflection.Metadata.MetadataReader"/> seems to be
            thread safe based on the source code. However, this is not 100% safe.
            Wrap all operations using a thread-safe locking to ensure reliable functionality.
            </remarks>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MetadataReaderOperation.#ctor(System.Reflection.Metadata.MetadataReader,System.Object)">
            <summary>
            Constructs a new reader operation.
            </summary>
            <param name="reader">The parent reader.</param>
            <param name="syncLock">The synchronization object.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MetadataReaderOperation.SyncLock">
            <summary>
            Returns the parent synchronization object.
            </summary>
            <remarks>
            Might be required in the future to synchronize accesses.
            </remarks>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MetadataReaderOperation.Reader">
            <summary>
            Returns the parent reader.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MetadataReaderOperation.Dispose">
            <summary>
            Releases the current synchronization lock.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.MethodDebugInformation">
            <summary>
            Represents method debug information.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodDebugInformation.LoadSequencePoints``1(``0,System.Reflection.Metadata.MethodDefinitionHandle)">
            <summary>
            Loads sequence points for the given information handle.
            </summary>
            <param name="readerOperationProvider">The parent reader provider.</param>
            <param name="handle">The source information handle.</param>
            <returns>The array of all sequence points.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodDebugInformation.LoadScopes``1(``0,System.Reflection.Metadata.MethodDefinitionHandle)">
            <summary>
            Loads method scopes for the given information handle.
            </summary>
            <param name="readerOperationProvider">The parent reader provider.</param>
            <param name="handle">The source information handle.</param>
            <returns>The array of all method scopes.</returns>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.MethodDebugInformation.sequencePoints">
            <summary>
            All associated sequence points.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.MethodDebugInformation.methodScopes">
            <summary>
            All associated method scopes.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.MethodDebugInformation.syncLock">
            <summary>
            The internal synchronization object.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodDebugInformation.#ctor(ILGPU.Frontend.DebugInformation.AssemblyDebugInformation,System.Reflection.MethodBase,System.Reflection.Metadata.MethodDefinitionHandle)">
            <summary>
            Constructs method debug information.
            </summary>
            <param name="assemblyDebugInformation">
            The parent assembly debug information
            </param>
            <param name="methodBase">The target method.</param>
            <param name="handle">
            The debug handle of the given method.
            </param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodDebugInformation.AssemblyDebugInformation">
            <summary>
            Returns the associated assembly debug information.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodDebugInformation.MethodBase">
            <summary>
            Returns the associated method base.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodDebugInformation.Handle">
            <summary>
            Returns the associated the method debug-information handle.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodDebugInformation.SequencePoints">
            <summary>
            Returns all sequence points of the current method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodDebugInformation.MethodScopes">
            <summary>
            Returns all method scops of the current method.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodDebugInformation.CreateSequencePointEnumerator">
            <summary>
            Creates a new sequence-point enumerator for the current method.
            </summary>
            <returns>The created sequence-point enumerator.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.MethodScope">
            <summary>
            Represents a default method scope.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.LoadVariables(System.Reflection.Metadata.LocalScope@,System.Reflection.Metadata.MetadataReader)">
            <summary>
            Loads local variables from the given scope.
            </summary>
            <param name="localScope">The parent local scope.</param>
            <param name="reader">The reader to read from.</param>
            <returns>The array of local variables.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.#ctor(System.Reflection.Metadata.LocalScope@,System.Reflection.Metadata.MetadataReader)">
            <summary>
            Constructs a new scope.
            </summary>
            <param name="localScope">The current local scope.</param>
            <param name="reader">The associated metadata reader.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.MetadataReader">
            <summary>
            Returns the associated metadata reader.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.StartOffset">
            <summary>
            Returns the start offset of the current scope.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.EndOffset">
            <summary>
            Returns the end offset of the current scope.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.Length">
            <summary>
            Returns the length of the current scope.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.MethodScope.Variables">
            <summary>
            Returns all local variables.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.GetEnumerator">
            <summary>
            Returns an unboxed variable enumerator.
            </summary>
            <returns>An unboxed variable enumerator.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.Equals(ILGPU.Frontend.DebugInformation.MethodScope)">
            <summary>
            Returns true if the given scope is equal to the current scope.
            </summary>
            <param name="other">The other scope.</param>
            <returns>True, if the given scope is equal to the current scope.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current scope.
            </summary>
            <param name="obj">The other sequence object.</param>
            <returns>True, if the given object is equal to the current scope.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.GetHashCode">
            <summary>
            Returns the hash code of this scope.
            </summary>
            <returns>The hash code of this scope.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.MethodScope.ToString">
            <summary>
            Returns the string representation of this scope.
            </summary>
            <returns>The string representation of this scope.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.SequencePoint">
            <summary>
            Represents a single sequence point of an instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePoint.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new sequence point.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="offset">The byte offset.</param>
            <param name="startColumn">The start column.</param>
            <param name="endColumn">The end column.</param>
            <param name="startLine">The start line.</param>
            <param name="endLine">The end line.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePoint.Offset">
            <summary>
            Returns the associated offset (optional)
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePoint.Merge(ILGPU.IR.FileLocation)">
            <summary>
            Merges this sequence point with the other file location.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePoint.ToString">
            <summary>
            Returns the location information of this sequence point.
            </summary>
            <returns>
            The location information string that represents this sequence point.
            </returns>
        </member>
        <member name="T:ILGPU.Frontend.DebugInformation.SequencePointEnumerator">
            <summary>
            Represents a sequence-point enumerator for methods.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.Empty">
            <summary>
            Represents an empty sequence-point enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.Frontend.DebugInformation.SequencePoint})">
            <summary>
            Constructs an empty sequence-point enumerator.
            </summary>
            <param name="sequencePoints">The wrapped sequence points.</param>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.SequencePoints">
            <summary>
            Returns the associated sequence points.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.IsValid">
            <summary>
            Returns true if the current enumerator state points to a valid sequence
            point.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.Current">
            <summary>
            Returns the current sequence point.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.DebugInformation.SequencePointEnumerator.MoveTo(System.Int32)">
            <summary>
            Tries to move the enumerator to the given offset in bytes.
            </summary>
            <param name="offset">The target instruction offset in bytes.</param>
            <returns>True, is the next sequence point is valid.</returns>
        </member>
        <member name="T:ILGPU.Frontend.DisassembledMethod">
            <summary>
            Represents a disassembled method.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.Method">
            <summary>
            Returns the method that was disassembled.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.FirstInstruction">
            <summary>
            Returns the first disassembled instruction.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.FirstLocation">
            <summary>
            Returns the first location of this function.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.Instructions">
            <summary>
            Returns the disassembled instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.MaxStackSize">
            <summary>
            Returns the maximum stack size.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.Count">
            <summary>
            Returns the number of instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.DisassembledMethod.Item(System.Int32)">
            <summary>
            Returns the instruction at the given index.
            </summary>
            <param name="index">The instruction index.</param>
            <returns>The instruction at the given index.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DisassembledMethod.GetEnumerator">
            <summary>
            Returns an instruction enumerator.
            </summary>
            <returns>An instruction enumerator.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DisassembledMethod.DisassembleAsync(System.Reflection.MethodBase)">
            <summary>
            Disassembles the given method.
            </summary>
            <param name="method">The method to disassemble.</param>
            <returns>The disassembled method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.DisassembledMethod.DisassembleAsync(System.Reflection.MethodBase,ILGPU.Frontend.DebugInformation.SequencePointEnumerator)">
            <summary>
            Disassembles the given method.
            </summary>
            <param name="method">The method to disassemble.</param>
            <param name="sequencePointEnumerator">
            The associated sequence-point enumerator.
            </param>
            <returns>The disassembled method.</returns>
        </member>
        <member name="T:ILGPU.Frontend.Disassembler">
            <summary>
            Represents a disassembler for .Net methods.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.NativePtrType">
            <summary>
            Represents the native pointer type that is used during the
            disassembling process.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.il">
            <summary>
            The current IL byte code.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.ilOffset">
            <summary>
            The current offset within the byte code.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.instructionOffset">
            <summary>
            The current instruction type.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.flags">
            <summary>
            The current flags that are applied to the next instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.flagsArgument">
            <summary>
            The current flags argument.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.instructions">
            <summary>
            Represents the current list of instructions.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.debugInformationEnumerator">
            <summary>
            Represents the associated sequence-point enumerator.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Disassembler.compilationStackLocation">
            <summary>
            Returns the source location.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.#ctor(System.Reflection.MethodBase,ILGPU.Frontend.DebugInformation.SequencePointEnumerator,ILGPU.IR.CompilationStackLocation)">
            <summary>
            Constructs a new disassembler.
            </summary>
            <param name="methodBase">The target method.</param>
            <param name="sequencePointEnumerator">
            The associated sequence-point enumerator.
            </param>
            <param name="compilationStackLocation">The source location (optional).</param>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.MethodBase">
            <summary>
            Returns the current method base.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.MethodBody">
            <summary>
            Returns the current method body.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.DeclaringType">
            <summary>
            Returns the declaring type of the method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.AssociatedModule">
            <summary>
            Returns the associated managed module.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.MethodGenericArguments">
            <summary>
            Returns the generic arguments of the method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.TypeGenericArguments">
            <summary>
            Returns the generic arguments of the declaring type.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Disassembler.CurrentLocation">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ILGPU#IR#ILocation#FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include the current sequence point.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.Disassemble">
            <summary>
            Disassembles the current method and returns a list of
            disassembled instructions.
            </summary>
            <returns>The list of disassembled instructions.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.DisassembleCall(ILGPU.Frontend.ILInstructionType,System.Int32)">
            <summary>
            Disassembles a call to the given method.
            </summary>
            <param name="type">The instruction type.</param>
            <param name="methodToken">The token of the method to be disassembled.</param>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.AddFlags(ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Adds the given flags to the current instruction flags.
            </summary>
            <param name="flagsToAdd">The flags to be added.</param>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.AppendInstruction(ILGPU.Frontend.ILInstructionType,System.UInt16,System.UInt16,System.Object)">
            <summary>
            Appends an instruction to the current instruction list.
            </summary>
            <param name="type">The instruction type.</param>
            <param name="popCount">
            The number of elements to pop from the stack.
            </param>
            <param name="pushCount">
            The number of elements to push onto the stack.
            </param>
            <param name="argument">The argument of the instruction.</param>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.AppendInstructionWithFlags(ILGPU.Frontend.ILInstructionType,System.UInt16,System.UInt16,ILGPU.Frontend.ILInstructionFlags,System.Object)">
            <summary>
            Appends an instruction to the current instruction list.
            </summary>
            <param name="type">The instruction type.</param>
            <param name="popCount">
            The number of elements to pop from the stack.
            </param>
            <param name="pushCount">
            The number of elements to push onto the stack.
            </param>
            <param name="additionalFlags">Additional instruction flags.</param>
            <param name="argument">The argument of the instruction.</param>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ResolveType(System.Int32)">
            <summary>
            Resolves the type for the given token using
            the current generic information.
            </summary>
            <param name="token">The token of the type to resolve.</param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ResolveMethod(System.Int32)">
            <summary>
            Resolves the method for the given token using
            the current generic information.
            </summary>
            <param name="token">The token of the method to resolve.</param>
            <returns>The resolved method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ResolveField(System.Int32)">
            <summary>
            Resolves the field for the given token using
            the current generic information.
            </summary>
            <param name="token">The token of the field to resolve.</param>
            <returns>The resolved field.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadOpCode">
            <summary>
            Reads an op-code from the current instruction data.
            </summary>
            <returns>The decoded op-code.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadShortBranchTarget">
            <summary>
            Reads a short branch target from the current instruction data.
            </summary>
            <returns>The decoded short branch target.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadBranchTarget">
            <summary>
            Reads a branch target from the current instruction data.
            </summary>
            <returns>The decoded branch target.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadByteArg">
            <summary>
            Reads a byte from the current instruction data.
            </summary>
            <returns>The decoded byte.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadTypeArg">
            <summary>
            Reads a type reference from the current instruction data.
            </summary>
            <returns>The decoded type reference.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadFieldArg">
            <summary>
            Reads a field reference from the current instruction data.
            </summary>
            <returns>The decoded field reference.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadSByteArg">
            <summary>
            Reads a sbyte from the current instruction data.
            </summary>
            <returns>The decoded sbyte.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadUShortArg">
            <summary>
            Reads an ushort from the current instruction data.
            </summary>
            <returns>The decoded ushort.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadIntArg">
            <summary>
            Reads an int from the current instruction data.
            </summary>
            <returns>The decoded int.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadUIntArg">
            <summary>
            Reads an uint from the current instruction data.
            </summary>
            <returns>The decoded uint.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadSingleArg">
            <summary>
            Reads a string from the current instruction data.
            </summary>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadLongArg">
            <summary>
            Reads a long from the current instruction data.
            </summary>
            <returns>The decoded long.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Disassembler.ReadDoubleArg">
            <summary>
            Reads a double from the current instruction data.
            </summary>
            <returns>The decoded double.</returns>
        </member>
        <member name="T:ILGPU.Frontend.ExternalAttribute">
            <summary>
            Marks external methods that are opaque in the scope of the ILGPU IR.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ExternalAttribute.#ctor(System.String)">
            <summary>
            Constructs a new external attribute.
            </summary>
            <param name="name">The external name.</param>
        </member>
        <member name="P:ILGPU.Frontend.ExternalAttribute.Name">
            <summary>
            Returns the associated internal function name.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ExternalAttribute.GetName(System.Reflection.MethodInfo)">
            <summary>
            Resolves the actual IR name.
            </summary>
            <param name="method">The source method.</param>
            <returns>The IR name.</returns>
        </member>
        <member name="T:ILGPU.Frontend.ILFrontend">
            <summary>
            The ILGPU MSIL frontend.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.ILFrontend.ProcessingEntry">
            <summary>
            Represents a single processing entry.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.ProcessingEntry.Method">
            <summary>
            Returns the method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.ProcessingEntry.CompilationStackLocation">
            <summary>
            Returns the source location.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.ProcessingEntry.Result">
            <summary>
            Returns the processing future.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.ProcessingEntry.IsExternalRequest">
            <summary>
            Returns true if this is an external processing request.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.ProcessingEntry.SetResult(ILGPU.IR.Method)">
            <summary>
            Signals the future with the given value.
            </summary>
            <param name="irFunction">The function value.</param>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.#ctor(ILGPU.Context,ILGPU.Frontend.DebugInformation.DebugInformationManager)">
            <summary>
            Constructs a new frontend with two threads.
            </summary>
            <param name="context">The context instance.</param>
            <param name="debugInformationManager">
            The associated debug information manager.
            </param>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.#ctor(ILGPU.Context,ILGPU.Frontend.DebugInformation.DebugInformationManager,System.Int32)">
            <summary>
            Constructs a new frontend that uses the given number of
            threads for code generation.
            </summary>
            <param name="context">The context instance.</param>
            <param name="debugInformationManager">
            The associated debug information manager.
            </param>
            <param name="numThreads">The number of threads.</param>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.DebugInformationManager">
            <summary>
            Returns the associated debug information manager (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.IsFaulted">
            <summary>
            Returns true if the code generation has failed.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILFrontend.LastException">
            <summary>
            Returns the exception from code generation failure.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.DoWork">
            <summary>
            The code-generation thread.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.GenerateCode(System.Reflection.MethodBase)">
            <summary>
            Internal method used for code generation.
            </summary>
            <param name="method">The method.</param>
            <returns>The generation future.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.BeginCodeGeneration(ILGPU.IR.IRContext)">
            <summary>
            Starts a code-generation phase.
            </summary>
            <param name="context">The target IR context.</param>
            <returns>The created code-generation phase.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.FinishCodeGeneration(ILGPU.Frontend.CodeGenerationPhase)">
            <summary>
            Finishes the current code-generation phase.
            </summary>
            <param name="phase">The current phase.</param>
        </member>
        <member name="M:ILGPU.Frontend.ILFrontend.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Frontend.CodeGenerationResult">
            <summary>
            Represents a code-generation future.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationResult.#ctor(System.Reflection.MethodBase)">
            <summary>
            Creates a new code generation result.
            </summary>
            <param name="method">The associated method.</param>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationResult.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationResult.Result">
            <summary>
            The associated function result.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationResult.HasResult">
            <summary>
            Returns true if this result has a function value.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationResult.FirstException">
            <summary>
            The first exception during code generation, if any.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.CodeGenerationPhase">
            <summary>
            A single code generation phase.
            Note that only a single phase instance can be created at a time.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.#ctor(ILGPU.Frontend.ILFrontend,ILGPU.IR.IRContext,ILGPU.IR.Verifier)">
            <summary>
            Constructs a new generation phase.
            </summary>
            <param name="frontend">The current frontend instance.</param>
            <param name="context">The target IR context.</param>
            <param name="verifier">The associated verifier.</param>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.Frontend">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.DebugInformationManager">
            <summary>
            Returns the associated debug information manager (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.Verifier">
            <summary>
            Returns the associated verifier instance.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.IsFinished">
            <summary>
            Returns true if the generation phase has been finished.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.HadWorkToDo">
            <summary>
            Returns true if the code generation phase had work to do.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.CodeGenerationPhase.FirstException">
            <summary>
            Returns the first exception recorded during code-generation.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.GenerateCodeInternal(System.Reflection.MethodBase,System.Boolean,ILGPU.IR.CompilationStackLocation,System.Collections.Generic.Dictionary{System.Reflection.MethodBase,ILGPU.IR.CompilationStackLocation},ILGPU.IR.Method@)">
            <summary>
            Performs the actual (asynchronous) code generation.
            </summary>
            <param name="method">The method.</param>
            <param name="isExternalRequest">
            True, if processing of this method was requested by a user.
            </param>
            <param name="compilationStackLocation">The source location.</param>
            <param name="detectedMethods">The set of newly detected methods.</param>
            <param name="generatedMethod">The resolved IR method.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.GenerateCode(System.Reflection.MethodBase)">
            <summary>
            Generates code for the given method.
            </summary>
            <param name="method">The method.</param>
            <returns>A completion future.</returns>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.RecordException(System.Exception)">
            <summary>
            Records an exception during code-generation.
            </summary>
            <param name="exception">The exception to record.</param>
        </member>
        <member name="M:ILGPU.Frontend.CodeGenerationPhase.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Frontend.ILInstructionType">
            <summary>
            Represents an instruction type of a single IL instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Nop">
            
             <summary>Nop</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Break">
            
             <summary>Break</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldarg">
            
             <summary>Ldarg</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldarga">
            
             <summary>Ldarga</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Starg">
            
             <summary>Starg</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldloc">
            
             <summary>Ldloc</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldloca">
            
             <summary>Ldloca</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stloc">
            
             <summary>Stloc</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldnull">
            
             <summary>Ldnull</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.LdI4">
            
             <summary>LdI4</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.LdI8">
            
             <summary>LdI8</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.LdR4">
            
             <summary>LdR4</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.LdR8">
            
             <summary>LdR8</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldstr">
            
             <summary>Ldstr</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Dup">
            
             <summary>Dup</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Pop">
            
             <summary>Pop</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Jmp">
            
             <summary>Jmp</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Call">
            
             <summary>Call</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Calli">
            
             <summary>Calli</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Callvirt">
            
             <summary>Callvirt</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ret">
            
             <summary>Ret</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Br">
            
             <summary>Br</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Brfalse">
            
             <summary>Brfalse</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Brtrue">
            
             <summary>Brtrue</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Beq">
            
             <summary></summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Bne">
            
             <summary>Bne</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Bge">
            
             <summary>Bge</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Bgt">
            
             <summary>Bgt</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ble">
            
             <summary>Ble</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Blt">
            
             <summary>Blt</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Switch">
            
             <summary>Switch</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Add">
            
             <summary>Add</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Sub">
            
             <summary>Sub</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Mul">
            
             <summary>Mul</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Div">
            
             <summary>Div</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Rem">
            
             <summary>Rem</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.And">
            
             <summary>And</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Or">
            
             <summary>Or</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Xor">
            
             <summary>Xor</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Shl">
            
             <summary>Shl</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Shr">
            
             <summary>Shr</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Neg">
            
             <summary>Neg</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Not">
            
             <summary>Not</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Conv">
            
             <summary>Conv</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Initobj">
            
             <summary>Initobj</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Newobj">
            
             <summary>Newobj</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Newarr">
            
             <summary>Newarr</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Castclass">
            
             <summary>Castclass</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Isinst">
            
             <summary>Isinst</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Box">
            
             <summary>Box</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Unbox">
            
             <summary>Unbox</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldfld">
            
             <summary>Ldfld</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldflda">
            
             <summary>Ldflda</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stfld">
            
             <summary>Stfld</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldsfld">
            
             <summary>Ldsfld</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldsflda">
            
             <summary>Ldsflda</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stsfld">
            
             <summary>Stsfld</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldobj">
            
             <summary>Ldobj</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stobj">
            
             <summary>Stobj</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Cpobj">
            
             <summary>Cpobj</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldlen">
            
             <summary>Ldlen</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldelem">
            
             <summary>Ldelem</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldelema">
            
             <summary>Ldelema</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stelem">
            
             <summary>Stelem</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ceq">
            
             <summary>Ceq</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Cgt">
            
             <summary>Cgt</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Clt">
            
             <summary>Clt</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Ldind">
            
             <summary>Ldind</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Stind">
            
             <summary>Stind</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Localloc">
            
             <summary>Localloc</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Cpblk">
            
             <summary>Cpblk</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.Initblk">
            
             <summary>Initblk</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.SizeOf">
            
             <summary>SizeOf</summary>
            
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionType.LdToken">
            
             <summary>LoadToken</summary>
            
        </member>
        <member name="T:ILGPU.Frontend.ILInstructionBranchTargets">
            <summary>
            Represents a collection of branch targets.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionBranchTargets.#ctor(System.Int32[])">
            <summary>
            Constructs a new container for branch targets.
            </summary>
            <param name="targets"></param>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.Count">
            <summary>
            Returns the number of targets
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.Item(System.Int32)">
            <summary>
            Returns the target offset at the given index.
            </summary>
            <param name="index">The index of the target offset.</param>
            <returns>The resolved target offset.</returns>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.UnconditionalBranchTarget">
            <summary>
            Returns the unconditional branch target (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.ConditionalBranchIfTarget">
            <summary>
            Returns the conditional branch if-target (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.ConditionalBranchElseTarget">
            <summary>
            Returns the conditional branch else-target (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionBranchTargets.SwitchDefaultTarget">
            <summary>
            Returns the default switch branch target (if any).
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionBranchTargets.GetTargetOffsets">
            <summary>
            Returns the branch offsets.
            </summary>
            <returns>The branch offsets.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionBranchTargets.ToString">
            <summary>
            Returns the string representation of the branch targets.
            </summary>
            <returns>The string representation of the branch targets.</returns>
        </member>
        <member name="T:ILGPU.Frontend.ILInstructionFlags">
            <summary>
            Represent flags of an IL instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Unsigned">
            <summary>
            Unsigned operation.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Overflow">
            <summary>
            Overflow check requested.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Unchecked">
            <summary>
            Unchecked operation.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Unaligned">
            <summary>
            Unaligned operation.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Volatile">
            <summary>
            Volatile access.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.ReadOnly">
            <summary>
            ReadOnly access.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Tail">
            <summary>
            Tail call.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.ILInstructionFlags.Constrained">
            <summary>
            Constraint virtual-function access.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.ILInstructionFlagsExtensions">
            <summary>
            Contains extension methods for instruction flags.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsExtensions.HasFlags(ILGPU.Frontend.ILInstructionFlags,ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Returns true if given flags have the other flags set;
            </summary>
            <param name="flags">The current flags.</param>
            <param name="otherFlags">The flags to check.</param>
            <returns>True, if given flags have the other flags set.</returns>
        </member>
        <member name="T:ILGPU.Frontend.ILInstructionFlagsContext">
            <summary>
            Represents a context of instruction flags.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.#ctor(ILGPU.Frontend.ILInstructionFlags,System.Object)">
            <summary>
            Constructs a new instruction-flag context.
            </summary>
            <param name="flags">The instruction flags.</param>
            <param name="argument">The flags argument.</param>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionFlagsContext.Flags">
            <summary>
            Returns the flags.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstructionFlagsContext.Argument">
            <summary>
            Returns the flag argument.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.Equals(ILGPU.Frontend.ILInstructionFlagsContext)">
            <summary>
            Returns true if the current object is equal to the given one.
            </summary>
            <param name="other">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.Equals(System.Object)">
            <summary>
            Returns true if the current object is equal to the given one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.GetHashCode">
            <summary>
            Returns the hash code of this flags.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.ToString">
            <summary>
            Returns the string representation of this flags.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.op_Equality(ILGPU.Frontend.ILInstructionFlagsContext,ILGPU.Frontend.ILInstructionFlagsContext)">
            <summary>
            Returns true if the first instruction context is equal to the second one.
            </summary>
            <param name="first">The first instruction context.</param>
            <param name="second">The second instruction context.</param>
            <returns>
            True, if the first instruction is equal to the second one.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstructionFlagsContext.op_Inequality(ILGPU.Frontend.ILInstructionFlagsContext,ILGPU.Frontend.ILInstructionFlagsContext)">
            <summary>
            Returns true if the first instruction context is not equal to the second
            one.
            </summary>
            <param name="first">The first instruction context.</param>
            <param name="second">The second instruction context.</param>
            <returns>
            True, if the first instruction is not equal to the second one.
            </returns>
        </member>
        <member name="T:ILGPU.Frontend.IILInstructionOffsetOperation">
            <summary>
            An abstract operation that can be invoked for any instruction offset.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.IILInstructionOffsetOperation.Apply(ILGPU.Frontend.ILInstruction,System.Int32)">
            <summary>
            Applies the current operation with the given instruction offset.
            </summary>
            <param name="instruction">The parent instruction.</param>
            <param name="offset">An instruction offset of the parent operation.</param>
        </member>
        <member name="T:ILGPU.Frontend.ILInstruction">
            <summary>
            Represents a single IL instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.#ctor(System.Int32,ILGPU.Frontend.ILInstructionType,ILGPU.Frontend.ILInstructionFlagsContext,System.UInt16,System.UInt16,System.Object,ILGPU.IR.Location)">
            <summary>
            Constructs a new IL instruction.
            </summary>
            <param name="offset">The instruction offset in bytes.</param>
            <param name="type">The instruction type.</param>
            <param name="flagsContext">The flags context.</param>
            <param name="popCount">The number of elements to pop from the stack.</param>
            <param name="pushCount">
            The number of elements to push onto the stack.
            </param>
            <param name="argument">The instruction argument.</param>
            <param name="location">The current location.</param>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.Offset">
            <summary>
            Returns the instruction offset in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.InstructionType">
            <summary>
            Returns the instruction type.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.Flags">
            <summary>
            Returns the instruction flags.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.FlagsContext">
            <summary>
            Returns the instruction-flags context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.PopCount">
            <summary>
            Returns the number of elements to pop from the stack.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.PushCount">
            <summary>
            Returns the number of elements to push onto the stack.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.Argument">
            <summary>
            Returns the instruction argument.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.IsCall">
            <summary>
            Returns true if the instruction is a call instruction.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.IsTerminator">
            <summary>
            Returns true if this instruction is a basic block terminator.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.ILInstruction.Location">
            <summary>
            Returns the associated location.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.GetArgumentAs``1">
            <summary>
            Returns the instruction argument as T.
            </summary>
            <typeparam name="T">The target type T.</typeparam>
            <returns>The instruction argument T.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.HasFlags(ILGPU.Frontend.ILInstructionFlags)">
            <summary>
            Returns true if current instruction has the given flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, if current instruction has the given flags.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.ForEachOffset``1(``0)">
            <summary>
            Performs the given operation for each instruction offset.
            </summary>
            <param name="operation">The operation to execute.</param>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.Equals(ILGPU.Frontend.ILInstruction)">
            <summary>
            Returns true if the current object is equal to the given one.
            </summary>
            <param name="other">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.Equals(System.Object)">
            <summary>
            Returns true if the current object is equal to the given one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.GetHashCode">
            <summary>
            Returns the hash code of this instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ILGPU.Frontend.ILInstruction.ToString">
            <summary>
            Returns the string representation of this instruction.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.AcceleratorIntrinsicAttribute">
            <summary>
            Marks accelerator methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.AcceleratorIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.Intrinsics">
            <summary>
            Contains default ILGPU intrinsics.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleAcceleratorOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.AcceleratorIntrinsicAttribute)">
            <summary>
            Handles accelerator operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.IsIntrinsicArrayType(System.Type)">
            <summary>
            Determines whether the given type is an intrinsic array type.
            </summary>
            <param name="type">The type to test.</param>
            <returns>True, if the given type is an intrinsic array type.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleArrays(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Handles array operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateNewArray(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Creates a new nD array instance.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateEmptyArray(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Creates a new empty 1D array instance.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateGetArrayElement(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Gets an array element.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateSetArrayElement(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Sets an array element.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateGetArrayLowerBound(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Gets an array lower bound.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateGetArrayUpperBound(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Gets an array upper bound.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateGetArrayLength(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Gets an array length.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateGetArrayLongLength(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Gets an array long length.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleAtomicOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.AtomicIntrinsicAttribute)">
            <summary>
            Handles atomics.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleCompareOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.CompareIntriniscAttribute)">
            <summary>
            Handles compare operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleConvertOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.ConvertIntriniscAttribute)">
            <summary>
            Handles convert operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleGridOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.GridIntrinsicAttribute)">
            <summary>
            Handles grid operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleGroupOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.GroupIntrinsicAttribute)">
            <summary>
            Handles group operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleInterop(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.InteropIntrinsicAttribute)">
            <summary>
            Handles interop operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateOffsetOf(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Creates a new offset-of computation.
            </summary>
            <param name="context">The current invocation context.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.GetFormatExpression(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Resolves a format expression string.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resolved format expression string.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateWrite(System.String,ILGPU.Frontend.InvocationContext@)">
            <summary>
            Creates a new write instruction to the standard output stream.
            </summary>
            <param name="formatExpression">The format expression string.</param>
            <param name="context">The current invocation context.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateWrite(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Creates a new write instruction to the standard output stream.
            </summary>
            <param name="context">The current invocation context.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateWriteLine(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Creates a new write-line instruction to the standard output stream.
            </summary>
            <param name="context">The current invocation context.</param>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.Intrinsics.DeviceFunctionHandler">
            <summary>
            Represents a basic handler for compiler-specific device functions.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.Intrinsics.DeviceFunctionHandler`1">
            <summary>
            Represents a basic handler for compiler-specific device functions.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Intrinsic.Intrinsics.FunctionHandlers">
            <summary>
            Stores function handlers.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleIntrinsic(ILGPU.Frontend.InvocationContext@,ILGPU.IR.Values.ValueReference@)">
            <summary>
            Tries to handle a specific invocation context. This method
            can generate custom code instead of the default method-invocation
            functionality.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="result">The resulting value of the intrinsic call.</param>
            <returns>True, if this class could handle the call.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleActivator(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Handles activator operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleDebugAndTrace(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Handles debugging operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleRuntimeHelper(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Handles runtime operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.InitializeArray(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Initializes arrays.
            </summary>
            <param name="context">The current invocation context.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleUnsafe(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Handles unsafe runtime operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.ConvertUnsafeAs(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Converts basic reinterpret casts.
            </summary>
            <param name="context">The current invocation context.</param>
        </member>
        <member name="F:ILGPU.Frontend.Intrinsic.Intrinsics.PTXExpressionRegex">
            <summary>
            Regex for parsing PTX assembly instructions.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleLanguageOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.LanguageIntrinsicAttribute)">
            <summary>
            Handles language operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateLanguageEmitPTX(System.String,System.Boolean,ILGPU.Frontend.InvocationContext@)">
            <summary>
            Creates a new inline PTX instruction.
            </summary>
            <param name="ptxExpression">The PTX expression string.</param>
            <param name="usingRefParams">True, if passing parameters by reference.</param>
            <param name="context">The current invocation context.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.CreateLanguageEmitPTX(ILGPU.Frontend.InvocationContext@,System.Boolean)">
            <summary>
            Creates a new inline PTX instruction to the standard output stream.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="usingRefParams">True, if passing parameters by reference.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.GetEmitPTXExpression(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Resolves a PTX expression string.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resolved PTX expression string.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.TryParse(System.String,System.Collections.Immutable.ImmutableArray{ILGPU.Util.FormatString.FormatExpression}@)">
            <summary>
            Parses the given PTX expression into an array of format expressions.
            </summary>
            <param name="ptxExpression">The PTX format expression.</param>
            <param name="expressions">The array of managed format expressions.</param>
            <returns>True, if all expressions could be parsed successfully.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleLocalMemoryOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.LocalMemoryIntrinsicAttribute)">
            <summary>
            Handles local operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleMathOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.MathIntrinsicAttribute)">
            <summary>
            Handles math operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleMemoryBarrierOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.MemoryBarrierIntrinsicAttribute)">
            <summary>
            Handles memory barriers.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleSharedMemoryOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.SharedMemoryIntrinsicAttribute)">
            <summary>
            Handles view operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleUtilityOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.UtilityIntrinsicAttribute)">
            <summary>
            Handles utility functions.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleViewOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.ViewIntrinsicAttribute)">
            <summary>
            Handles shared memory operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.GetViewElementAddress(ILGPU.Frontend.InvocationContext@,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Constructs a new view-element access that is bounds checked in debug mode.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.GetViewLength(ILGPU.Frontend.InvocationContext@,ILGPU.IR.Value)">
            <summary>
            Constructs a new view length that is bounds checked in debug mode.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.Intrinsics.HandleWarpOperation(ILGPU.Frontend.InvocationContext@,ILGPU.Frontend.Intrinsic.WarpIntrinsicAttribute)">
            <summary>
            Handles warp operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="attribute">The intrinsic attribute.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.AtomicIntrinsicAttribute">
            <summary>
            Marks intrinsic atomic methods.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.AtomicIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the associated intrinsic kind.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.AtomicIntrinsicAttribute.IntrinsicFlags">
            <summary>
            Returns the associated intrinsic flags.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.CompareIntriniscAttribute">
            <summary>
            Marks compare intrinsics that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.CompareIntriniscAttribute.IntrinsicKind">
            <summary>
            Returns the associated intrinsic kind.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.CompareIntriniscAttribute.IntrinsicFlags">
            <summary>
            Returns the associated intrinsic flags.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.ConvertIntriniscAttribute">
            <summary>
            Marks compare intrinsics that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.ConvertIntriniscAttribute.IntrinsicFlags">
            <summary>
            Returns the associated intrinsic flags.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.GridIntrinsicAttribute">
            <summary>
            Marks grid methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.GridIntrinsicAttribute.Dimension">
            <summary>
            The associated constant dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.GridIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.GroupIntrinsicAttribute">
            <summary>
            Marks group methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.GroupIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.InteropIntrinsicAttribute">
            <summary>
            Marks intrinsic interop methods.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.InteropIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.IntrinsicAttribute">
            <summary>
            Marks methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.IntrinsicAttribute.Type">
            <summary>
            Returns the type of this intrinsic attribute.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.LanguageIntrinsicAttribute">
            <summary>
            Marks inline language methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.LanguageIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.LocalMemoryIntrinsicAttribute">
            <summary>
            Marks local-memory methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.LocalMemoryIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.MathIntrinsicAttribute">
            <summary>
            Marks math methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.MathIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the associated intrinsic kind.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.MathIntrinsicAttribute.IntrinsicFlags">
            <summary>
            Returns the associated intrinsic flags.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.MemoryBarrierIntrinsicAttribute">
            <summary>
            Marks memory-barrier methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.MemoryBarrierIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.RemappedIntrinsics">
            <summary>
            Contains default remapped ILGPU intrinsics.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.MathType">
            <summary>
            The global <see cref="T:ILGPU.IntrinsicMath"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.CPUMathType">
            <summary>
            The global <see cref="T:ILGPU.IntrinsicMath.CPUOnly"/> type.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.DeviceFunctionRemapper">
            <summary>
            Represents a basic remapper for compiler-specific device functions.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.FunctionRemappers">
            <summary>
            Stores function remappers.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.AddRemapping(System.Type,System.Type,System.String,System.Type[])">
            <summary>
            Registers a mapping for a function from a source type to a target type.
            </summary>
            <param name="sourceType">The source type.</param>
            <param name="targetType">The target type.</param>
            <param name="functionName">
            The name of the function in the scope of sourceType.
            </param>
            <param name="paramTypes">The parameter types of both functions.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.AddRemapping(System.Type,System.Type,System.String,System.Boolean,System.Type[])">
            <summary>
            Registers a mapping for a function from a source type to a target type.
            </summary>
            <param name="sourceType">The source type.</param>
            <param name="targetType">The target type.</param>
            <param name="functionName">
            The name of the function in the scope of sourceType.
            </param>
            <param name="required">Indicates if the mapping is optional.</param>
            <param name="paramTypes">The parameter types of both functions.</param>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.AddRemapping(System.Reflection.MethodInfo,ILGPU.Frontend.Intrinsic.RemappedIntrinsics.DeviceFunctionRemapper)">
            <summary>
            Registers a global remapping for the given method object.
            </summary>
            <param name="methodInfo">The method to remap.</param>
            <param name="remapper">The remapping method.</param>
            <remarks>
            This method is not thread safe.
            </remarks>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.RemapIntrinsic(ILGPU.Frontend.InvocationContext@)">
            <summary>
            Tries to remap the given invocation context.
            </summary>
            <param name="context">The invocation context.</param>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.BitConverter">
            <summary>
            Internal class to handle the signed/unsigned difference between functions
            of <see cref="T:System.BitConverter"/> and <see cref="T:ILGPU.Interop"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.BitConverter.DoubleToInt64Bits(System.Double)">
            <summary cref="M:System.BitConverter.DoubleToInt64Bits(System.Double)"/>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.BitConverter.Int64BitsToDouble(System.Int64)">
            <summary cref="M:System.BitConverter.Int64BitsToDouble(System.Int64)"/>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.BitConverter.SingleToInt32Bits(System.Single)">
            <summary cref="M:System.BitConverter.SingleToInt32Bits(System.Single)"/>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.BitConverter.Int32BitsToSingle(System.Int32)">
            <summary cref="M:System.BitConverter.Int32BitsToSingle(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.RegisterBitConverterRemappings">
            <summary>
            Registers instrinsic mappings for BitConverter functions.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.RemappedIntrinsics.Interlocked">
            <summary>
            Internal class to handle the differences between functions of
            <see cref="T:System.Threading.Interlocked"/> and <see cref="T:ILGPU.Atomic"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.SharedMemoryIntrinsicAttribute">
            <summary>
            Marks shared-memory methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.SharedMemoryIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.UtilityIntrinsicAttribute">
            <summary>
            Marks intrinsic utility methods.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.UtilityIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the associated intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.ViewIntrinsicAttribute">
            <summary>
            Marks view methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.ViewIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.Intrinsic.WarpIntrinsicAttribute">
            <summary>
            Marks warp methods that are built in.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.Intrinsic.WarpIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.InvocationContext">
            <summary>
            Represents an invocation context for compiler-known methods
            that are supported in the scope of ILGPU programs.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.InvocationContext.argumentsRef">
            <summary>
            The internal arguments pointer.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.#ctor(ILGPU.Frontend.CodeGenerator,ILGPU.IR.Location,ILGPU.Frontend.Block,System.Reflection.MethodBase,System.Reflection.MethodBase,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Constructs a new invocation context.
            </summary>
            <param name="codeGenerator">The associated code generator.</param>
            <param name="location">The current location.</param>
            <param name="block">The current block.</param>
            <param name="callerMethod">The caller.</param>
            <param name="method">The called method.</param>
            <param name="arguments">The method arguments.</param>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.CodeGenerator">
            <summary>
            Returns the associated code generator.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Block">
            <summary>
            Return the current basic block.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Context">
            <summary>
            Returns the current IR context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Properties">
            <summary>
            Returns the current context properties.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.TypeContext">
            <summary>
            Returns the current type context.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Builder">
            <summary>
            Returns the current IR builder.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.CallerMethod">
            <summary>
            Represents the caller method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Method">
            <summary>
            Represents the targeted method.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Module">
            <summary>
            Returns the associated module.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Arguments">
            <summary>
            Returns the call arguments.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.NumArguments">
            <summary>
            Returns the number of arguments.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.InvocationContext.Item(System.Int32)">
            <summary>
            Returns the argument with the given index.
            </summary>
            <param name="index">The argument index.</param>
            <returns>The argument with the given index.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific exception information.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.GetMethodGenericArguments">
            <summary>
            Returns the generic arguments of the used method.
            </summary>
            <returns>The generic arguments of the used method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.GetTypeGenericArguments">
            <summary>
            Returns the generic arguments of the used method.
            </summary>
            <returns>The generic arguments of the used method.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.DeclareMethod(System.Reflection.MethodBase)">
            <summary>
            Declares a (potentially new) method.
            </summary>
            <param name="methodBase">The method to declare.</param>
            <returns>The declared method reference.</returns>
        </member>
        <member name="M:ILGPU.Frontend.InvocationContext.ToString">
            <summary>
            Returns the string representation of this invocation context.
            </summary>
            <returns>The string representation of this invocation context.</returns>
        </member>
        <member name="T:ILGPU.Frontend.VariableRefType">
            <summary>
            The type of a single variable reference.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.VariableRefType.Argument">
            <summary>
            Represents a reference to a function argument.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.VariableRefType.Local">
            <summary>
            Represents a reference to a local variable.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.VariableRefType.Stack">
            <summary>
            Represents a reference to a stack slot.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.VariableRefType.Memory">
            <summary>
            Represents an abstract memory monad.
            </summary>
        </member>
        <member name="T:ILGPU.Frontend.VariableRef">
            <summary>
            Represents a single variable.
            </summary>
        </member>
        <member name="F:ILGPU.Frontend.VariableRef.Memory">
            <summary>
            Represents a reference to a memory monad.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.#ctor(System.Int32,ILGPU.Frontend.VariableRefType)">
            <summary>
            Constructs a new variable entry. 
            </summary>
            <param name="index">Index of the variable.</param>
            <param name="refType">Type of this variable reference.</param>
        </member>
        <member name="P:ILGPU.Frontend.VariableRef.Index">
            <summary>
            Returns the index of the variable.
            </summary>
        </member>
        <member name="P:ILGPU.Frontend.VariableRef.RefType">
            <summary>
            Returns the variable-reference type.
            </summary>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.Equals(ILGPU.Frontend.VariableRef)">
            <summary>
            Returns true if the given variable ref is equal to the current one.
            </summary>
            <param name="other">The other variable reference.</param>
            <returns>
            True, if the given variable ref is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given variable ref is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.GetHashCode">
            <summary>
            Returns the hash code of this variable reference.
            </summary>
            <returns>The hash code of this variable reference.</returns>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.ToString">
            <summary>
            Returns the string representation of this variable.
            </summary>
            <returns>The string representation of this variable.</returns>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.op_Equality(ILGPU.Frontend.VariableRef,ILGPU.Frontend.VariableRef)">
            <summary>
            Returns true if both variable references represent the same variable.
            </summary>
            <param name="first">The first reference.</param>
            <param name="second">The second reference.</param>
            <returns>
            True, if both variable references represent the same variable.
            </returns>
        </member>
        <member name="M:ILGPU.Frontend.VariableRef.op_Inequality(ILGPU.Frontend.VariableRef,ILGPU.Frontend.VariableRef)">
            <summary>
            Returns true if both variable references do not represent the same variable.
            </summary>
            <param name="first">The first reference.</param>
            <param name="second">The second reference.</param>
            <returns>
            True, if both variable references do not represent the same variable.
            </returns>
        </member>
        <member name="T:ILGPU.Grid">
            <summary>
            Contains general grid functions.
            </summary>
        </member>
        <member name="P:ILGPU.Grid.IdxX">
            <summary>
            Returns the X index withing the scheduled thread grid.
            </summary>
            <returns>The X grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.IdxY">
            <summary>
            Returns the Y index withing the scheduled thread grid.
            </summary>
            <returns>The Y grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.IdxZ">
            <summary>
            Returns the Z index withing the scheduled thread grid.
            </summary>
            <returns>The Z grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.Index">
            <summary>
            Returns the index within the scheduled thread grid.
            </summary>
            <returns>The grid index.</returns>
        </member>
        <member name="P:ILGPU.Grid.DimX">
            <summary>
            Returns the X dimension of the scheduled thread grid.
            </summary>
            <returns>The X grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.DimY">
            <summary>
            Returns the Y dimension of the scheduled thread grid.
            </summary>
            <returns>The Y grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.DimZ">
            <summary>
            Returns the Z dimension of the scheduled thread grid.
            </summary>
            <returns>The Z grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.Dimension">
            <summary>
            Returns the dimension of the scheduled thread grid.
            </summary>
            <returns>The grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Grid.LinearIndex">
            <summary>
            Returns the linear grid index of the current group within the current
            thread grid.
            </summary>
        </member>
        <member name="P:ILGPU.Grid.GlobalIndex">
            <summary>
            Returns the global index.
            </summary>
        </member>
        <member name="P:ILGPU.Grid.LongGlobalIndex">
            <summary>
            Returns the global index using 64-bit integers.
            </summary>
        </member>
        <member name="P:ILGPU.Grid.GlobalLinearIndex">
            <summary>
            Returns the linear thread index of the current thread within the current
            thread grid.
            </summary>
        </member>
        <member name="M:ILGPU.Grid.ComputeGlobalIndex(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Computes the global index of a given gridIdx and a groupIdx.
            </summary>
            <param name="gridIdx">The grid index.</param>
            <param name="groupIdx">The group index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.Grid.ComputeGlobalIndex(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Computes the global index of a given gridIdx and a groupIdx.
            </summary>
            <param name="gridIdx">The grid index.</param>
            <param name="groupIdx">The group index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.Grid.ComputeGlobalIndex(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Computes the global index of a given gridIdx and a groupIdx.
            </summary>
            <param name="gridIdx">The grid index.</param>
            <param name="groupIdx">The group index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.Grid.ComputeLongGlobalIndex(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Computes the global index of a given gridIdx and a groupIdx.
            </summary>
            <param name="gridIdx">The grid index.</param>
            <param name="groupIdx">The group index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.Grid.ComputeLongGlobalIndex(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Computes the global index of a given gridIdx and a groupIdx.
            </summary>
            <param name="gridIdx">The grid index.</param>
            <param name="groupIdx">The group index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.Grid.ComputeLongGlobalIndex(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Computes the global index of a given gridIdx and a groupIdx.
            </summary>
            <param name="gridIdx">The grid index.</param>
            <param name="groupIdx">The group index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="T:ILGPU.Group">
            <summary>
            Contains general grid functions.
            </summary>
        </member>
        <member name="P:ILGPU.Group.IdxX">
            <summary>
            Returns the X index withing the scheduled thread group.
            </summary>
            <returns>The X grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Group.IdxY">
            <summary>
            Returns the Y index withing the scheduled thread group.
            </summary>
            <returns>The Y grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Group.IdxZ">
            <summary>
            Returns the Z index withing the scheduled thread group.
            </summary>
            <returns>The Z grid dimension.</returns>
        </member>
        <member name="P:ILGPU.Group.Index">
            <summary>
            Returns the group index within the scheduled thread group.
            </summary>
            <returns>The grid index.</returns>
        </member>
        <member name="P:ILGPU.Group.DimX">
            <summary>
            Returns X the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The X thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.DimY">
            <summary>
            Returns Y the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The Y thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.DimZ">
            <summary>
            Returns Z the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The Z thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.Dimension">
            <summary>
            Returns the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The thread dimension for a single group.</returns>
        </member>
        <member name="P:ILGPU.Group.LinearIndex">
            <summary>
            Returns the linear thread index of the current thread within the current
            thread group.
            </summary>
        </member>
        <member name="P:ILGPU.Group.IsFirstThread">
            <summary>
            Returns true if the current thread is the first in the group.
            </summary>
        </member>
        <member name="P:ILGPU.Group.IsLastThread">
            <summary>
            Returns true if the current thread is the last in the group.
            </summary>
        </member>
        <member name="M:ILGPU.Group.Barrier">
            <summary>
            Executes a thread barrier.
            </summary>
        </member>
        <member name="M:ILGPU.Group.BarrierPopCount(System.Boolean)">
            <summary>
            Executes a thread barrier and returns the number of threads for which
            the predicate evaluated to true.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>
            The number of threads for which the predicate evaluated to true.
            </returns>
        </member>
        <member name="M:ILGPU.Group.BarrierAnd(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true if all threads in a block
            fulfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, if all threads in a block fulfills the predicate.</returns>
        </member>
        <member name="M:ILGPU.Group.BarrierOr(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true if any thread in a block
            fulfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, if any thread in a block fulfills the predicate.</returns>
        </member>
        <member name="M:ILGPU.Group.Broadcast``1(``0,System.Int32)">
            <summary>
            Performs a broadcast operation that broadcasts the given value
            from the specified thread to all other threads in the group.
            </summary>
            <param name="value">The value to broadcast.</param>
            <param name="groupIndex">The source thread index within the group.</param>
            <remarks>
            Note that the group index must be the same for all threads in the group.
            </remarks>
        </member>
        <member name="T:ILGPU.Half">
            <summary>
            A half precision floating point value with 16 bit precision.
            </summary>
        </member>
        <member name="M:ILGPU.Half.Abs(ILGPU.Half)">
            <summary>
            Returns the absolute value of the given half value.
            </summary>
            <param name="half">The half value.</param>
            <returns>The absolute value.</returns>
        </member>
        <member name="M:ILGPU.Half.IsNaN(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents a NaN value.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half represents a NaN value.</returns>
        </member>
        <member name="M:ILGPU.Half.IsZero(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents 0.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half represents 0.</returns>
        </member>
        <member name="M:ILGPU.Half.IsPositiveInfinity(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents +infinity.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half value represents +infinity.</returns>
        </member>
        <member name="M:ILGPU.Half.IsNegativeInfinity(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents -infinity.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half value represents -infinity.</returns>
        </member>
        <member name="M:ILGPU.Half.IsInfinity(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents infinity.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half value represents infinity.</returns>
        </member>
        <member name="M:ILGPU.Half.IsFinite(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents a finite number.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half value represents a finite number.</returns>
        </member>
        <member name="M:ILGPU.Half.#ctor(System.UInt16)">
            <summary>
            Constructs a new half value.
            </summary>
            <param name="rawValue">The underlying raw value.</param>
        </member>
        <member name="P:ILGPU.Half.RawValue">
            <summary>
            Represents the raw value.
            </summary>
        </member>
        <member name="M:ILGPU.Half.Equals(ILGPU.Half)">
            <summary>
            Returns true if the given half is equal to the current half.
            </summary>
            <param name="other">The other half.</param>
            <returns>True, if the given half is equal to the current half.</returns>
        </member>
        <member name="M:ILGPU.Half.CompareTo(ILGPU.Half)">
            <summary>
            Compares this half value to the given half.
            </summary>
            <param name="other">The other half.</param>
            <returns>The result of the half comparison.</returns>
        </member>
        <member name="M:ILGPU.Half.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current half.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current half.</returns>
        </member>
        <member name="M:ILGPU.Half.GetHashCode">
            <summary>
            Returns the hash code of this half.
            </summary>
            <returns>The hash code of this half.</returns>
        </member>
        <member name="M:ILGPU.Half.ToString">
            <summary>
            Returns the string representation of this half.
            </summary>
            <returns>The string representation of this half.</returns>
        </member>
        <member name="M:ILGPU.Half.op_UnaryNegation(ILGPU.Half)">
            <summary>
            Negates the given half value.
            </summary>
            <param name="halfValue">The half value to negate.</param>
            <returns>The negated half value.</returns>
        </member>
        <member name="M:ILGPU.Half.op_Addition(ILGPU.Half,ILGPU.Half)">
            <summary>
            Adds two half values.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.Half.op_Subtraction(ILGPU.Half,ILGPU.Half)">
            <summary>
            Subtracts two half values.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.Half.op_Multiply(ILGPU.Half,ILGPU.Half)">
            <summary>
            Multiplies two half values.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.Half.op_Division(ILGPU.Half,ILGPU.Half)">
            <summary>
            Divides two half values.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.Half.op_Equality(ILGPU.Half,ILGPU.Half)">
            <summary>
            Returns true if the first and second half represent the same value.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>True, if the first and second half are the same.</returns>
        </member>
        <member name="M:ILGPU.Half.op_Inequality(ILGPU.Half,ILGPU.Half)">
            <summary>
            Returns true if the first and second half represent not the same value.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>True, if the first and second half are not the same.</returns>
        </member>
        <member name="M:ILGPU.Half.op_LessThan(ILGPU.Half,ILGPU.Half)">
            <summary>
            Returns true if the first half is smaller than the second half.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>True, if the first half is smaller than the second half.</returns>
        </member>
        <member name="M:ILGPU.Half.op_LessThanOrEqual(ILGPU.Half,ILGPU.Half)">
            <summary>
            Returns true if the first half is smaller than or equal to the half index.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>
            True, if the first half is smaller than or equal to the second half.
            </returns>
        </member>
        <member name="M:ILGPU.Half.op_GreaterThan(ILGPU.Half,ILGPU.Half)">
            <summary>
            Returns true if the first half is greater than the second half.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>True, if the first half is greater than the second half.</returns>
        </member>
        <member name="M:ILGPU.Half.op_GreaterThanOrEqual(ILGPU.Half,ILGPU.Half)">
            <summary>
            Returns true if the first half is greater than or equal to the second half.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>
            True, if the first index is greater than or equal to the second index.
            </returns>
        </member>
        <member name="M:ILGPU.Half.op_Implicit(ILGPU.Half)~System.Single">
            <summary>
            Implicitly converts a half to an float.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Implicit(ILGPU.Half)~System.Double">
            <summary>
            Implicitly converts a half to an double.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.Single)~ILGPU.Half">
            <summary>
            Explicitly converts a float to a half.
            </summary>
            <param name="floatValue">The float to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.Double)~ILGPU.Half">
            <summary>
            Explicitly converts a double to a half.
            </summary>
            <param name="doubleValue">The double to convert.</param>
        </member>
        <member name="F:ILGPU.Half.Epsilon">
            <summary>
            Represents the smallest positive <see cref="T:ILGPU.Half"/> value that is greater
            than zero.
            </summary>
        </member>
        <member name="F:ILGPU.Half.MaxValue">
            <summary>
            Represents the largest possible <see cref="T:ILGPU.Half"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.Half.MinValue">
            <summary>
            Represents the smallest possible <see cref="T:ILGPU.Half"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.Half.NaN">
            <summary>
            Represents not a number (NaN).
            </summary>
        </member>
        <member name="F:ILGPU.Half.PositiveInfinity">
            <summary>
            Represents positive infinity.
            </summary>
        </member>
        <member name="F:ILGPU.Half.NegativeInfinity">
            <summary>
            Represents negative infinity.
            </summary>
        </member>
        <member name="F:ILGPU.Half.Zero">
            <summary>
            Represents a positive zero <see cref="T:ILGPU.Half"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.Half.One">
            <summary>
            Represents a positive zero <see cref="T:ILGPU.Half"/> value.
            </summary>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.SByte">
            <summary>
            Implicitly converts a half to type Int8.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.SByte)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type Int8 to a half.
            </summary>
            <param name="sbyteValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.Int16">
            <summary>
            Implicitly converts a half to type Int16.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.Int16)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type Int16 to a half.
            </summary>
            <param name="shortValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.Int32">
            <summary>
            Implicitly converts a half to type Int32.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.Int32)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type Int32 to a half.
            </summary>
            <param name="intValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.Int64">
            <summary>
            Implicitly converts a half to type Int64.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.Int64)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type Int64 to a half.
            </summary>
            <param name="longValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.Byte">
            <summary>
            Implicitly converts a half to type UInt8.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.Byte)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type UInt8 to a half.
            </summary>
            <param name="byteValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.UInt16">
            <summary>
            Implicitly converts a half to type UInt16.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.UInt16)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type UInt16 to a half.
            </summary>
            <param name="ushortValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.UInt32">
            <summary>
            Implicitly converts a half to type UInt32.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.UInt32)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type UInt32 to a half.
            </summary>
            <param name="uintValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(ILGPU.Half)~System.UInt64">
            <summary>
            Implicitly converts a half to type UInt64.
            </summary>
            <param name="halfValue">The half to convert.</param>
        </member>
        <member name="M:ILGPU.Half.op_Explicit(System.UInt64)~ILGPU.Half">
            <summary>
            Explicitly converts an instance of type UInt64 to a half.
            </summary>
            <param name="ulongValue">The value to convert.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.Neg(ILGPU.Half)">
            <summary>
            Negates the given half value.
            </summary>
            <param name="halfValue">The half value to negate.</param>
            <returns>The negated half value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.Abs(ILGPU.Half)">
            <summary>
            Returns the absolute value of the given half value.
            </summary>
            <param name="half">The half value.</param>
            <returns>The absolute value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.IsNaN(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents a NaN value.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half represents a NaN value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.IsZero(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents 0.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half represents 0.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.IsPositiveInfinity(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents +infinity.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half value represents +infinity.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.IsNegativeInfinity(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents -infinity.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half value represents -infinity.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.IsInfinity(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents infinity.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half value represents infinity.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.IsFinite(ILGPU.Half)">
            <summary>
            Returns true if the given half value represents a finite number.
            </summary>
            <param name="half">The half value.</param>
            <returns>True, if the given half value represents a finite number.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.AddFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            Implements a FP16 addition using FP32.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.SubFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            Implements a FP16 subtraction using FP32.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.MulFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            Implements a FP16 multiplication using FP32.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.DivFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            Implements a FP16 division using FP32.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.FmaFP32(ILGPU.Half,ILGPU.Half,ILGPU.Half)">
            <summary>
            Implements a FP16 division using FP32.
            </summary>
            <param name="first">The first half.</param>
            <param name="second">The second half.</param>
            <param name="third">The third half.</param>
            <returns>The resulting half value.</returns>
        </member>
        <member name="F:ILGPU.HalfExtensions.SignBitMask">
            <summary>
            The bit mask of the sign bit.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.ExponentMask">
            <summary>
            The bit mask of the exponent.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.MantissaMask">
            <summary>
            The bit mask of the mantissa.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.ExponentMantissaMask">
            <summary>
            The bit mask of the exponent and the mantissa.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.OffsetTable">
            <summary>
            The underlying offset table for van der Zijp's algorithm.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.MantissaTable">
            <summary>
            The underlying mantissa table for van der Zijp's algorithm.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.ExponentTable">
            <summary>
            The underlying exponent table for van der Zijp's algorithm.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.BaseTable">
            <summary>
            The underlying base table for van der Zijp's algorithm.
            </summary>
        </member>
        <member name="F:ILGPU.HalfExtensions.ShiftTable">
            <summary>
            The underlying shift table for van der Zijp's algorithm.
            </summary>
        </member>
        <member name="M:ILGPU.HalfExtensions.ConvertHalfToFloat(ILGPU.Half)">
            <summary>
            Converts a half value to a float value by using van der Zijp's algorithm.
            </summary>
            <param name="halfValue">The value to convert.</param>
            <returns>The converted float value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.ConvertFloatToHalf(System.Single)">
            <summary>
            Converts a float value to a half value by using van der Zijp's algorithm.
            </summary>
            <param name="floatValue">The value to convert.</param>
            <returns>The converted half value.</returns>
        </member>
        <member name="M:ILGPU.HalfExtensions.RcpFP32(ILGPU.Half)">
            <summary>
            The reciprocal operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.SqrtFP32(ILGPU.Half)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.RsqrtFP32(ILGPU.Half)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.AsinFP32(ILGPU.Half)">
            <summary>
            Computes asin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.SinFP32(ILGPU.Half)">
            <summary>
            Computes sin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.SinhFP32(ILGPU.Half)">
            <summary>
            Computes sinh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.AcosFP32(ILGPU.Half)">
            <summary>
            Computes acos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.CosFP32(ILGPU.Half)">
            <summary>
            Computes cos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.CoshFP32(ILGPU.Half)">
            <summary>
            Computes cosh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.TanFP32(ILGPU.Half)">
            <summary>
            Computes tan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.TanhFP32(ILGPU.Half)">
            <summary>
            Computes tanh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.AtanFP32(ILGPU.Half)">
            <summary>
            Computes atan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.ExpFP32(ILGPU.Half)">
            <summary>
            Computes exp(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.Exp2FP32(ILGPU.Half)">
            <summary>
            Computes 2^x.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.FloorFP32(ILGPU.Half)">
            <summary>
            Computes floor(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.CeilingFP32(ILGPU.Half)">
            <summary>
            Computes ceil(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.LogFP32(ILGPU.Half)">
            <summary>
            Computes log(x) to base e.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.Log2FP32(ILGPU.Half)">
            <summary>
            Computes log(x) to base 2.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.Log10FP32(ILGPU.Half)">
            <summary>
            Computes log(x) to base 10.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.RemFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            The % operation.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.MinFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            The min operation.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.MaxFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            The max operation.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.Atan2FP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            The atan2 operation.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.PowFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            The pow operation.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
        </member>
        <member name="M:ILGPU.HalfExtensions.LogFP32(ILGPU.Half,ILGPU.Half)">
            <summary>
            The binary log operation.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
        </member>
        <member name="T:ILGPU.ClearCacheMode">
            <summary>
            Specifies which resources should be removed from the cache.
            </summary>
        </member>
        <member name="F:ILGPU.ClearCacheMode.Default">
            <summary>
            Removes all non-ILGPU objects form the caches.
            </summary>
        </member>
        <member name="F:ILGPU.ClearCacheMode.Everything">
            <summary>
            Removes everything from the caches.
            </summary>
        </member>
        <member name="T:ILGPU.ICache">
            <summary>
            Represents an object that contains internal caches.
            </summary>
        </member>
        <member name="M:ILGPU.ICache.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>
            Implementations of this method are not guaranteed to be thread-safe.
            </remarks>
        </member>
        <member name="T:ILGPU.IndexType">
            <summary>
            Represents the type of index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.None">
            <summary>
            Represents no compatible index type.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.Index1D">
            <summary>
            Represents a 1D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.Index2D">
            <summary>
            Represents a 2D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.Index3D">
            <summary>
            Represents a 3D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.LongIndex1D">
            <summary>
            Represents a 1D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.LongIndex2D">
            <summary>
            Represents a 2D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.LongIndex3D">
            <summary>
            Represents a 3D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.KernelConfig">
            <summary>
            Represents a generic kernel config.
            </summary>
        </member>
        <member name="T:ILGPU.IndexTypeAttribute">
            <summary>
            An internal attribute to specify the index type of a custom structure.
            </summary>
        </member>
        <member name="M:ILGPU.IndexTypeAttribute.#ctor(ILGPU.IndexType)">
            <summary>
            Constructs a new attribute instance.
            </summary>
            <param name="indexType">The index type.</param>
        </member>
        <member name="P:ILGPU.IndexTypeAttribute.IndexType">
            <summary>
            Returns the associated index type.
            </summary>
        </member>
        <member name="T:ILGPU.IndexTypeExtensions">
            <summary>
            Contains utility functions for handling index types.
            </summary>
        </member>
        <member name="F:ILGPU.IndexTypeExtensions.ManagedIndexTypes">
            <summary>
            An internal mapping of the <see cref="T:ILGPU.IndexType"/> values to managed types.
            </summary>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.AssertIntIndex(System.Int64)">
            <summary>
            Asserts that the given long range can be accessed using a 32-bit integer.
            </summary>
            <param name="index">The long value range.</param>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.AssertIntIndexRange(System.Int64)">
            <summary>
            Asserts that the given long range can be expressed by using a 32-bit integer.
            </summary>
            <param name="range">The long value range.</param>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.GetIntSize``1(``0)">
            <summary>
            Returns a 32-bit integer size of the given index.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="index">The index type instance.</param>
            <returns>The 32-bit integer size of the given index.</returns>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.GetManagedIndexType(ILGPU.IndexType)">
            <summary>
            Resolves the managed type of an index for a given index type.
            </summary>
            <param name="indexType">The index type.</param>
            <returns>The resolved managed index type..</returns>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.GetIndexType(System.Type)">
            <summary>
            Tries to resolve an index type based on the given .Net type.
            </summary>
            <param name="indexType">The managed .Net index type.</param>
            <returns>The resolved index type or none.</returns>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.IsLongIndex(System.Type)">
            <summary>
            Returns true if the given type is a 64-bit index type.
            </summary>
            <param name="type">The managed .Net index type.</param>
            <returns>True, if the given index type is a 64-bit index type.</returns>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.IsLongIndex``1">
            <summary>
            Returns true if the given type is a 64-bit index type.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <returns>True, if the given index type is a 64-bit index type.</returns>
        </member>
        <member name="T:ILGPU.IIndex">
            <summary>
            Represents a basic index type.
            </summary>
        </member>
        <member name="P:ILGPU.IIndex.Size">
            <summary>
            Returns the size represented by this index (e.g. x, x * y or x * y * z).
            </summary>
        </member>
        <member name="T:ILGPU.IIntIndex">
            <summary>
            Represents a 32-bit index.
            </summary>
        </member>
        <member name="P:ILGPU.IIntIndex.Size">
            <summary>
            Returns the size represented by this index (e.g. x, x * y or x * y * z).
            </summary>
        </member>
        <member name="T:ILGPU.IIntrinsicIndex">
            <summary>
            Represents an intrinsic index type.
            </summary>
        </member>
        <member name="P:ILGPU.IIntrinsicIndex.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="T:ILGPU.IGenericIndex`1">
            <summary>
            Represents a generic index type.
            </summary>
            <typeparam name="TIndex">The type of the generic index.</typeparam>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.InBounds(`0)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.InBoundsInclusive(`0)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.Add(`0)">
            <summary>
            Computes this + right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.Subtract(`0)">
            <summary>
            Computes this - right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="T:ILGPU.IIntIndex`2">
            <summary>
            An integer register.
            </summary>
            <typeparam name="TIndex">The integer type.</typeparam>
            <typeparam name="TLongIndex">The long integer type.</typeparam>
        </member>
        <member name="M:ILGPU.IIntIndex`2.ToLongIndex">
            <summary>
            Converts this index to a long integer index.
            </summary>
            <returns>The resulting long integer representation.</returns>
        </member>
        <member name="T:ILGPU.ILongIndex`2">
            <summary>
            A long integer register.
            </summary>
            <typeparam name="TLongIndex">The long integer type.</typeparam>
            <typeparam name="TIndex">The integer type.</typeparam>
        </member>
        <member name="M:ILGPU.ILongIndex`2.ToIntIndex">
            <summary>
            Converts this index to an integer index.
            </summary>
            <returns>The resulting integer representation.</returns>
        </member>
        <member name="T:ILGPU.Index3D">
            <summary>
            Represents a 3D index.
            </summary>
        </member>
        <member name="M:ILGPU.Index3D.#ctor(ILGPU.Index2D,System.Int32)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="xy">The x and y values.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="M:ILGPU.Index3D.#ctor(System.Int32,ILGPU.Index2D)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
            <param name="yz">The x and y values.</param>
        </member>
        <member name="P:ILGPU.Index3D.XY">
            <summary>
            Returns the XY components.
            </summary>
        </member>
        <member name="P:ILGPU.Index3D.YZ">
            <summary>
            Returns the YZ components.
            </summary>
        </member>
        <member name="F:ILGPU.Index3D.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.Index3D.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.Index3D.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="F:ILGPU.Index3D.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.Index3D.Min(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index3D.Max(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index3D.Clamp(ILGPU.Index3D,ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Index3D.#ctor(System.Int32)">
            <summary>
            Constructs a new index using a single value for each component.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Index3D.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="P:ILGPU.Index3D.X">
            <summary>
            Returns the X index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3D.Y">
            <summary>
            Returns the Y index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3D.Z">
            <summary>
            Returns the Z index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3D.IsFirst">
            <summary>
            Returns true if this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3D.Size">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3D.LongSize">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3D.ILGPU#IIndex#Size">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3D.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="M:ILGPU.Index3D.ToLongIndex">
            <summary>
            Converts this index to a long integer index.
            </summary>
            <returns>The resulting long integer representation.</returns>
        </member>
        <member name="M:ILGPU.Index3D.InBounds(ILGPU.Index3D)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.Index3D.InBoundsInclusive(ILGPU.Index3D)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.Index3D.Add(ILGPU.Index3D)">
            <summary>
            Computes this + right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index3D.Subtract(ILGPU.Index3D)">
            <summary>
            Computes this - right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index3D.ToValueTuple">
            <summary>
            Returns a value tuple that stores all dimensions.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Index3D.Deconstruct(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Deconstructs the current instance into a tuple.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="M:ILGPU.Index3D.Equals(ILGPU.Index3D)">
            <summary>
            Returns true if the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, if the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index3D.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index3D.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Index3D.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.Index3D.op_Implicit(ILGPU.Index3D)~ILGPU.LongIndex3D">
            <summary>
            Converts this index to a long integer index.
            </summary>
            <param name="index">The index to convert.</param>
            <returns>The resulting long integer representation.</returns>
        </member>
        <member name="M:ILGPU.Index3D.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32})~ILGPU.Index3D">
            <summary>
            Converts the given value tuple into an equivalent <see cref="T:ILGPU.Index3D"/>.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:ILGPU.Index3D.Add(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index3D.op_Addition(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index3D.Subtract(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index3D.op_Subtraction(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index3D.Multiply(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index3D.op_Multiply(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index3D.Divide(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index3D.op_Division(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index3D.op_Equality(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Returns true if the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.Index3D.op_Inequality(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Returns true if the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are not the same.</returns>
        </member>
        <member name="T:ILGPU.LongIndex3D">
            <summary>
            Represents a 3D index.
            </summary>
        </member>
        <member name="M:ILGPU.LongIndex3D.#ctor(ILGPU.LongIndex2D,System.Int64)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="xy">The x and y values.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="M:ILGPU.LongIndex3D.#ctor(System.Int64,ILGPU.LongIndex2D)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
            <param name="yz">The x and y values.</param>
        </member>
        <member name="P:ILGPU.LongIndex3D.XY">
            <summary>
            Returns the XY components.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex3D.YZ">
            <summary>
            Returns the YZ components.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex3D.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex3D.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex3D.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex3D.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.LongIndex3D.Min(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.Max(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.Clamp(ILGPU.LongIndex3D,ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.#ctor(System.Int64)">
            <summary>
            Constructs a new index using a single value for each component.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.LongIndex3D.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="P:ILGPU.LongIndex3D.X">
            <summary>
            Returns the X index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex3D.Y">
            <summary>
            Returns the Y index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex3D.Z">
            <summary>
            Returns the Z index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex3D.IsFirst">
            <summary>
            Returns true if this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex3D.Size">
            <summary>
            Returns the size represented by this index.
            </summary>
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex3D.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="M:ILGPU.LongIndex3D.ToIntIndex">
            <summary>
            Converts this index to an integer index.
            </summary>
            <returns>The resulting integer representation.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.InBounds(ILGPU.LongIndex3D)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.InBoundsInclusive(ILGPU.LongIndex3D)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.Add(ILGPU.LongIndex3D)">
            <summary>
            Computes this + right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.Subtract(ILGPU.LongIndex3D)">
            <summary>
            Computes this - right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.ToValueTuple">
            <summary>
            Returns a value tuple that stores all dimensions.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.Deconstruct(System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Deconstructs the current instance into a tuple.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="M:ILGPU.LongIndex3D.Equals(ILGPU.LongIndex3D)">
            <summary>
            Returns true if the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, if the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.op_Explicit(ILGPU.LongIndex3D)~ILGPU.Index3D">
            <summary>
            Converts this index to an integer index.
            </summary>
            <param name="index">The index to convert.</param>
            <returns>The resulting integer representation.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.op_Implicit(System.ValueTuple{System.Int64,System.Int64,System.Int64})~ILGPU.LongIndex3D">
            <summary>
            Converts the given value tuple into an equivalent <see cref="T:ILGPU.LongIndex3D"/>.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:ILGPU.LongIndex3D.Add(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.op_Addition(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.Subtract(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.op_Subtraction(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.Multiply(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.op_Multiply(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.Divide(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.op_Division(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.op_Equality(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Returns true if the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.LongIndex3D.op_Inequality(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Returns true if the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are not the same.</returns>
        </member>
        <member name="T:ILGPU.InstanceId.Comparer">
            <summary>
            Compares instance id.
            </summary>
        </member>
        <member name="M:ILGPU.InstanceId.Comparer.Equals(ILGPU.InstanceId,ILGPU.InstanceId)">
            <summary>
            Returns true if both instance ids represent the same value.
            </summary>
        </member>
        <member name="M:ILGPU.InstanceId.Comparer.GetHashCode(ILGPU.InstanceId)">
            <summary>
            Returns the hash code of the given instance id.
            </summary>
        </member>
        <member name="F:ILGPU.InstanceId.Empty">
            <summary>
            Represents the empty instance id.
            </summary>
        </member>
        <member name="F:ILGPU.InstanceId.instanceIdCounter">
            <summary>
            A shared static instance id counter.
            </summary>
        </member>
        <member name="M:ILGPU.InstanceId.CreateNew">
            <summary>
            Creates a new unique instance id.
            </summary>
            <returns>The unique instance id.</returns>
        </member>
        <member name="M:ILGPU.InstanceId.#ctor(System.Int64)">
            <summary>
            Constructs a new instance id.
            </summary>
            <param name="id">The raw id.</param>
        </member>
        <member name="P:ILGPU.InstanceId.Value">
            <summary>
            Returns the underlying raw id.
            </summary>
        </member>
        <member name="M:ILGPU.InstanceId.Equals(ILGPU.InstanceId)">
            <summary>
            Returns true if the given id is equal to this id.
            </summary>
            <param name="other">The other id.</param>
            <returns>True, if the given id is equal to this id.</returns>
        </member>
        <member name="M:ILGPU.InstanceId.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this id.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to this id.</returns>
        </member>
        <member name="M:ILGPU.InstanceId.GetHashCode">
            <summary>
            Returns the hash code of this id.
            </summary>
            <returns>The hash code of this id.</returns>
        </member>
        <member name="M:ILGPU.InstanceId.ToString">
            <summary>
            Returns the string representation of the <see cref="P:ILGPU.InstanceId.Value"/> property.
            </summary>
            <returns>
            The string representation of the <see cref="P:ILGPU.InstanceId.Value"/> property.
            </returns>
        </member>
        <member name="M:ILGPU.InstanceId.op_Implicit(ILGPU.InstanceId)~System.Int64">
            <summary>
            Converts the given instance id into its underlying long value.
            </summary>
            <param name="id">The instance id.</param>
        </member>
        <member name="M:ILGPU.InstanceId.op_Equality(ILGPU.InstanceId,ILGPU.InstanceId)">
            <summary>
            Returns true if the first and the second id are the same.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, if the first and the second id are the same.</returns>
        </member>
        <member name="M:ILGPU.InstanceId.op_Inequality(ILGPU.InstanceId,ILGPU.InstanceId)">
            <summary>
            Returns true if the first and the second id are not the same.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, if the first and the second id are not the same.</returns>
        </member>
        <member name="T:ILGPU.InternalCompilerException">
            <summary>
            The exception that is thrown when an internal compiler error has been detected.
            </summary>
        </member>
        <member name="M:ILGPU.InternalCompilerException.#ctor">
            <summary>
            Initializes a new instance of the InternalCompilerException class.
            </summary>
        </member>
        <member name="M:ILGPU.InternalCompilerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InternalCompilerException class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ILGPU.InternalCompilerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InternalCompilerException class
            with a specified error message and a reference to the inner exception
            that is the cause of this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.
            </param>
        </member>
        <member name="M:ILGPU.InternalCompilerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InternalCompilerException class with
            serialized data.
            </summary>
            <param name="serializationInfo">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.
            </param>
            <param name="streamingContext">
            The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.
            </param>
        </member>
        <member name="T:ILGPU.Interop">
            <summary>
            Contains general interop functions.
            </summary>
        </member>
        <member name="M:ILGPU.Interop.ComputeAlignmentOffset(System.Int64,System.Int32)">
            <summary>
            Returns an aligned offset that has to be added to the given pointer in order
            to compute a new pointer value that is aligned according to the given
            alignment specification in bytes.
            </summary>
            <param name="ptr">The raw integer pointer value.</param>
            <param name="alignmentInBytes">The alignment in bytes.</param>
            <returns>The pointer offset in bytes to add to the given pointer.</returns>
        </member>
        <member name="M:ILGPU.Interop.Align(System.Int64,System.Int64,System.Int32)">
            <summary>
            Returns a properly aligned pointer for the given alignment in bytes.
            </summary>
            <param name="ptr">The raw integer pointer value.</param>
            <param name="length">The maximum buffer length in bytes.</param>
            <param name="alignmentInBytes">The alignment in bytes.</param>
            <returns>The aligned pointer.</returns>
        </member>
        <member name="M:ILGPU.Interop.ComputeEffectiveAddress(System.Byte@,System.Int64,System.Int32)">
            <summary>
            Computes the effective address for the given pointer/index combination.
            </summary>
            <param name="nativePtr">The source pointer.</param>
            <param name="index">The element index.</param>
            <param name="elementSize">The element size.</param>
            <returns>The computed pointer.</returns>
        </member>
        <member name="M:ILGPU.Interop.SizeOf``1">
            <summary>
            Computes the size of the given type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
        </member>
        <member name="M:ILGPU.Interop.SizeOf``1(``0)">
            <summary>
            Computes the size of the given type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
        </member>
        <member name="M:ILGPU.Interop.SizeOf(System.Type)">
            <summary>
            Computes the size of the given type.
            </summary>
            <param name="type">The target type</param>
            <remarks>Only supports unmanaged types.</remarks>
        </member>
        <member name="M:ILGPU.Interop.ComputeRelativeSizeOf``2(System.Int64)">
            <summary>
            Computes number of elements of type <typeparamref name="TFirst"/>
            that are required to store a type <typeparamref name="TSecond"/> in
            unmanaged memory.
            </summary>
            <typeparam name="TFirst">
            The type that should represent type <typeparamref name="TSecond"/>.
            </typeparam>
            <typeparam name="TSecond">
            The base type that should be represented with <typeparamref name="TFirst"/>.
            </typeparam>
            <param name="numSecondElements">
            The number of <typeparamref name="TSecond"/> elements to be stored.
            </param>
            <returns>
            The number of required <typeparamref name="TFirst"/> instances to store
            <paramref name="numSecondElements"/>
            instances of type <typeparamref name="TSecond"/>.
            </returns>
        </member>
        <member name="M:ILGPU.Interop.OffsetOf``1(System.String)">
            <summary>
            Computes the unsigned offset of the given field in bytes.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="fieldName">The name of the target field.</param>
        </member>
        <member name="M:ILGPU.Interop.FloatAsInt(ILGPU.Half)">
            <summary>
            Casts the given float to an int via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The int value.</returns>
        </member>
        <member name="M:ILGPU.Interop.FloatAsInt(System.Single)">
            <summary>
            Casts the given float to an int via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The int value.</returns>
        </member>
        <member name="M:ILGPU.Interop.FloatAsInt(System.Double)">
            <summary>
            Casts the given float to an int via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The int value.</returns>
        </member>
        <member name="M:ILGPU.Interop.IntAsFloat(System.UInt16)">
            <summary>
            Casts the given int to a float via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The float value.</returns>
        </member>
        <member name="M:ILGPU.Interop.IntAsFloat(System.UInt32)">
            <summary>
            Casts the given int to a float via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The float value.</returns>
        </member>
        <member name="M:ILGPU.Interop.IntAsFloat(System.UInt64)">
            <summary>
            Casts the given int to a float via a reinterpret cast.
            </summary>
            <param name="value">The value to cast.</param>
            <returns>The float value.</returns>
        </member>
        <member name="M:ILGPU.Interop.GetWriteLineFormat(System.String)">
            <summary>
            Ensures that the given format is not null and has a proper line ending.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:ILGPU.Interop.WriteImplementation(System.String,System.String[])">
            <summary>
            Writes the given format to the device output.
            </summary>
            <param name="format">The expression format to write.</param>
            <param name="elements">All elements to write in string format.</param>
        </member>
        <member name="M:ILGPU.Interop.Write(System.String)">
            <summary>
            Writes the given expression to the device output.
            </summary>
            <param name="expression">The expression to write.</param>
            <remarks>
            Note that the expression must be a compile-time constant.
            </remarks>
        </member>
        <member name="M:ILGPU.Interop.WriteLine(System.String)">
            <summary>
            Writes the given expression to the device output.
            </summary>
            <param name="expression">The expression to write.</param>
            <remarks>
            Note that the expression must be a compile-time constant.
            </remarks>
        </member>
        <member name="M:ILGPU.Interop.Write``1(System.String,``0)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.WriteLine``1(System.String,``0)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.Write``2(System.String,``0,``1)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.WriteLine``2(System.String,``0,``1)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.Write``3(System.String,``0,``1,``2)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.WriteLine``3(System.String,``0,``1,``2)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.Write``4(System.String,``0,``1,``2,``3)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.WriteLine``4(System.String,``0,``1,``2,``3)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.Write``5(System.String,``0,``1,``2,``3,``4)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.WriteLine``5(System.String,``0,``1,``2,``3,``4)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.Write``6(System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.WriteLine``6(System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.Write``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.WriteLine``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.Write``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
            <param name="arg8">Argument 8 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.WriteLine``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
            <param name="arg8">Argument 8 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.Write``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
            <param name="arg8">Argument 8 to format.</param>
            <param name="arg9">Argument 9 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.WriteLine``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
            <param name="arg8">Argument 8 to format.</param>
            <param name="arg9">Argument 9 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.Write``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
            <param name="arg8">Argument 8 to format.</param>
            <param name="arg9">Argument 9 to format.</param>
            <param name="arg10">Argument 10 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.WriteLine``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
            <param name="arg8">Argument 8 to format.</param>
            <param name="arg9">Argument 9 to format.</param>
            <param name="arg10">Argument 10 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.Write``11(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
            <param name="arg8">Argument 8 to format.</param>
            <param name="arg9">Argument 9 to format.</param>
            <param name="arg10">Argument 10 to format.</param>
            <param name="arg11">Argument 11 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.WriteLine``11(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
            <param name="arg8">Argument 8 to format.</param>
            <param name="arg9">Argument 9 to format.</param>
            <param name="arg10">Argument 10 to format.</param>
            <param name="arg11">Argument 11 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.Write``12(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
            <param name="arg8">Argument 8 to format.</param>
            <param name="arg9">Argument 9 to format.</param>
            <param name="arg10">Argument 10 to format.</param>
            <param name="arg11">Argument 11 to format.</param>
            <param name="arg12">Argument 12 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.WriteLine``12(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
            <param name="arg8">Argument 8 to format.</param>
            <param name="arg9">Argument 9 to format.</param>
            <param name="arg10">Argument 10 to format.</param>
            <param name="arg11">Argument 11 to format.</param>
            <param name="arg12">Argument 12 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.Write``13(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
            <param name="arg8">Argument 8 to format.</param>
            <param name="arg9">Argument 9 to format.</param>
            <param name="arg10">Argument 10 to format.</param>
            <param name="arg11">Argument 11 to format.</param>
            <param name="arg12">Argument 12 to format.</param>
            <param name="arg13">Argument 13 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.WriteLine``13(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
            <param name="arg8">Argument 8 to format.</param>
            <param name="arg9">Argument 9 to format.</param>
            <param name="arg10">Argument 10 to format.</param>
            <param name="arg11">Argument 11 to format.</param>
            <param name="arg12">Argument 12 to format.</param>
            <param name="arg13">Argument 13 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.Write``14(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
            <param name="arg8">Argument 8 to format.</param>
            <param name="arg9">Argument 9 to format.</param>
            <param name="arg10">Argument 10 to format.</param>
            <param name="arg11">Argument 11 to format.</param>
            <param name="arg12">Argument 12 to format.</param>
            <param name="arg13">Argument 13 to format.</param>
            <param name="arg14">Argument 14 to format.</param>
        </member>
        <member name="M:ILGPU.Interop.WriteLine``14(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Writes the given arguments using the format provided.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="format">The format expression.</param>
            <param name="arg1">Argument 1 to format.</param>
            <param name="arg2">Argument 2 to format.</param>
            <param name="arg3">Argument 3 to format.</param>
            <param name="arg4">Argument 4 to format.</param>
            <param name="arg5">Argument 5 to format.</param>
            <param name="arg6">Argument 6 to format.</param>
            <param name="arg7">Argument 7 to format.</param>
            <param name="arg8">Argument 8 to format.</param>
            <param name="arg9">Argument 9 to format.</param>
            <param name="arg10">Argument 10 to format.</param>
            <param name="arg11">Argument 11 to format.</param>
            <param name="arg12">Argument 12 to format.</param>
            <param name="arg13">Argument 13 to format.</param>
            <param name="arg14">Argument 14 to format.</param>
        </member>
        <member name="T:ILGPU.IntrinsicMath">
            <summary>
            Represents basic intrinsic math helpers for general
            math operations that are supported on the CPU and the GPU.
            </summary>
            <remarks>
            For more advanced math functions refer to the algorithms library.
            </remarks>
        </member>
        <member name="T:ILGPU.IntrinsicMath.BitOperations">
            <summary>
            Contains software implementation for additional bit-magic basic functions.
            </summary>
        </member>
        <member name="M:ILGPU.IntrinsicMath.BitOperations.PopCount(System.Int32)">
            <summary>
            Computes the number of one bits in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of one bits.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.BitOperations.PopCount(System.UInt32)">
            <summary>
            Computes the number of one bits in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of one bits.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.BitOperations.PopCount(System.Int64)">
            <summary>
            Computes the number of one bits in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of one bits.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.BitOperations.PopCount(System.UInt64)">
            <summary>
            Computes the number of one bits in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of one bits.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.BitOperations.LeadingZeroCount(System.Int32)">
            <summary>
            Returns the number of leading zeros in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of leading zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.BitOperations.LeadingZeroCount(System.UInt32)">
            <summary>
            Returns the number of leading zeros in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of leading zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.BitOperations.LeadingZeroCount(System.Int64)">
            <summary>
            Returns the number of leading zeros in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of leading zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.BitOperations.LeadingZeroCount(System.UInt64)">
            <summary>
            Returns the number of leading zeros in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of leading zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.BitOperations.TrailingZeroCount(System.UInt32)">
            <summary>
            Returns the number of trailing zeros in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of trailing zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.BitOperations.TrailingZeroCount(System.Int32)">
            <summary>
            Returns the number of trailing zeros in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of trailing zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.BitOperations.TrailingZeroCount(System.UInt64)">
            <summary>
            Returns the number of trailing zeros in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of trailing zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.BitOperations.TrailingZeroCount(System.Int64)">
            <summary>
            Returns the number of trailing zeros in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of trailing zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.Double)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.Single)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(ILGPU.Half)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.SByte)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.Int16)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.Int32)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Abs(System.Int64)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Double,System.Double)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Single,System.Single)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.SByte,System.SByte)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Int16,System.Int16)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Int32,System.Int32)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Int64,System.Int64)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.Byte,System.Byte)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.UInt16,System.UInt16)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.UInt32,System.UInt32)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Min(System.UInt64,System.UInt64)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Double,System.Double)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Single,System.Single)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.SByte,System.SByte)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Int16,System.Int16)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Int32,System.Int32)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Int64,System.Int64)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.Byte,System.Byte)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.UInt16,System.UInt16)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.UInt32,System.UInt32)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Max(System.UInt64,System.UInt64)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.SByte,System.SByte,System.SByte)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.PopCount(System.Int32)">
            <summary>
            Computes the number of one bits in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of one bits.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.PopCount(System.UInt32)">
            <summary>
            Computes the number of one bits in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of one bits.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.PopCount(System.Int64)">
            <summary>
            Computes the number of one bits in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of one bits.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.PopCount(System.UInt64)">
            <summary>
            Computes the number of one bits in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of one bits.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.LeadingZeroCount(System.Int32)">
            <summary>
            Returns the number of leading zeros in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of leading zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.LeadingZeroCount(System.UInt32)">
            <summary>
            Returns the number of leading zeros in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of leading zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.LeadingZeroCount(System.Int64)">
            <summary>
            Returns the number of leading zeros in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of leading zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.LeadingZeroCount(System.UInt64)">
            <summary>
            Returns the number of leading zeros in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of leading zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.TrailingZeroCount(System.Int32)">
            <summary>
            Returns the number of trailing zeros in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of trailing zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.TrailingZeroCount(System.UInt32)">
            <summary>
            Returns the number of trailing zeros in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of trailing zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.TrailingZeroCount(System.Int64)">
            <summary>
            Returns the number of trailing zeros in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of trailing zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.TrailingZeroCount(System.UInt64)">
            <summary>
            Returns the number of trailing zeros in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of trailing zeros.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.DivRoundDown(System.Int32,System.Int32)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            down to zero.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded to zero.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.DivRoundUp(System.Int32,System.Int32)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            up (away from zero).
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>
            The numerator divided by the denominator rounded up (away from zero).
            </returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.DivRoundDown(System.Int64,System.Int64)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            down to zero.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded to zero.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.DivRoundUp(System.Int64,System.Int64)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            up (away from zero).
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>
            The numerator divided by the denominator rounded up (away from zero).
            </returns>
        </member>
        <member name="T:ILGPU.IntrinsicMath.IntegerParts">
            <summary>
            Represents integer parts of an 64 bit integer.
            </summary>
        </member>
        <member name="M:ILGPU.IntrinsicMath.IntegerParts.#ctor(System.UInt64)">
            <summary>
            Converts the given value into lower and upper parts.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.IntegerParts.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Stores the given lower and upper parts.
            </summary>
            <param name="lower">The lower part.</param>
            <param name="upper">The upper part.</param>
        </member>
        <member name="P:ILGPU.IntrinsicMath.IntegerParts.Lower">
            <summary>
            The lower 32 bits.
            </summary>
        </member>
        <member name="P:ILGPU.IntrinsicMath.IntegerParts.Upper">
            <summary>
            The upper 32 bits.
            </summary>
        </member>
        <member name="M:ILGPU.IntrinsicMath.IntegerParts.ToULong">
            <summary>
            Converts the parts into a single ulong value.
            </summary>
            <returns>The resolved ulong value.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Decompose(System.Int64)">
            <summary>
            Decomposes the given integer value into a lower and an upper part.
            </summary>
            <param name="value">The value to decompose.</param>
            <returns>The lower and upper part.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.Decompose(System.UInt64)">
            <summary>
            Decomposes the given integer value into a lower and an upper part.
            </summary>
            <param name="value">The value to decompose.</param>
            <returns>The lower and upper part.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.ComposeULong(ILGPU.IntrinsicMath.IntegerParts)">
            <summary>
            Composes an integer from the given lower and upper parts.
            </summary>
            <param name="parts">The lower and upper parts.</param>
            <returns>The composed integer.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.ComposeLong(ILGPU.IntrinsicMath.IntegerParts)">
            <summary>
            Composes an integer from the given lower and upper parts.
            </summary>
            <param name="parts">The lower and upper parts.</param>
            <returns>The composed integer.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CopySign(System.Double,System.Double)">
            <summary>
            Returns a value with the magnitude of x and the sign of y.
            </summary>
            <param name="x">A number whose magnitude is used in the result.</param>
            <param name="y">A number whose sign is the used in the result.</param>
            <returns>A value with the magnitude of x and the sign of y.</returns>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CopySign(System.Single,System.Single)">
            <summary>
            Returns a value with the magnitude of x and the sign of y.
            </summary>
            <param name="x">A number whose magnitude is used in the result.</param>
            <param name="y">A number whose sign is the used in the result.</param>
            <returns>A value with the magnitude of x and the sign of y.</returns>
        </member>
        <member name="T:ILGPU.IntrinsicMath.CPUOnly">
            <summary>
            Contains CPU-only math functions that are automatically mapped to IR nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rcp(System.Double)">
            <summary>
            The reciprocal operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsNaN(System.Double)">
            <summary>
            The is-not-a-number operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsInfinity(System.Double)">
            <summary>
            The is-infinity operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsFinite(System.Double)">
            <summary>
            The is-finite operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sqrt(System.Double)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rsqrt(System.Double)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Asin(System.Double)">
            <summary>
            Computes asin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sin(System.Double)">
            <summary>
            Computes sin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sinh(System.Double)">
            <summary>
            Computes sinh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Acos(System.Double)">
            <summary>
            Computes acos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cos(System.Double)">
            <summary>
            Computes cos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cosh(System.Double)">
            <summary>
            Computes cosh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tan(System.Double)">
            <summary>
            Computes tan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tanh(System.Double)">
            <summary>
            Computes tanh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan(System.Double)">
            <summary>
            Computes atan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp(System.Double)">
            <summary>
            Computes exp(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp2(System.Double)">
            <summary>
            Computes 2^x.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Floor(System.Double)">
            <summary>
            Computes floor(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Ceiling(System.Double)">
            <summary>
            Computes ceil(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(System.Double)">
            <summary>
            Computes log(x) to base e.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log2(System.Double)">
            <summary>
            Computes log(x) to base 2.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log10(System.Double)">
            <summary>
            Computes log(x) to base 10.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rem(System.Double,System.Double)">
            <summary>
            The % operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Min(System.Double,System.Double)">
            <summary>
            The min operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Max(System.Double,System.Double)">
            <summary>
            The max operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan2(System.Double,System.Double)">
            <summary>
            The atan2 operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Pow(System.Double,System.Double)">
            <summary>
            The pow operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(System.Double,System.Double)">
            <summary>
            The binary log operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rcp(System.Single)">
            <summary>
            The reciprocal operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsNaN(System.Single)">
            <summary>
            The is-not-a-number operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsInfinity(System.Single)">
            <summary>
            The is-infinity operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsFinite(System.Single)">
            <summary>
            The is-finite operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sqrt(System.Single)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rsqrt(System.Single)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Asin(System.Single)">
            <summary>
            Computes asin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sin(System.Single)">
            <summary>
            Computes sin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sinh(System.Single)">
            <summary>
            Computes sinh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Acos(System.Single)">
            <summary>
            Computes acos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cos(System.Single)">
            <summary>
            Computes cos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cosh(System.Single)">
            <summary>
            Computes cosh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tan(System.Single)">
            <summary>
            Computes tan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tanh(System.Single)">
            <summary>
            Computes tanh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan(System.Single)">
            <summary>
            Computes atan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp(System.Single)">
            <summary>
            Computes exp(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp2(System.Single)">
            <summary>
            Computes 2^x.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Floor(System.Single)">
            <summary>
            Computes floor(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Ceiling(System.Single)">
            <summary>
            Computes ceil(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(System.Single)">
            <summary>
            Computes log(x) to base e.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log2(System.Single)">
            <summary>
            Computes log(x) to base 2.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log10(System.Single)">
            <summary>
            Computes log(x) to base 10.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rem(System.Single,System.Single)">
            <summary>
            The % operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Min(System.Single,System.Single)">
            <summary>
            The min operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Max(System.Single,System.Single)">
            <summary>
            The max operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan2(System.Single,System.Single)">
            <summary>
            The atan2 operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Pow(System.Single,System.Single)">
            <summary>
            The pow operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(System.Single,System.Single)">
            <summary>
            The binary log operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rcp(ILGPU.Half)">
            <summary>
            The reciprocal operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsNaN(ILGPU.Half)">
            <summary>
            The is-not-a-number operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsInfinity(ILGPU.Half)">
            <summary>
            The is-infinity operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.IsFinite(ILGPU.Half)">
            <summary>
            The is-finite operation.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sqrt(ILGPU.Half)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rsqrt(ILGPU.Half)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Asin(ILGPU.Half)">
            <summary>
            Computes asin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sin(ILGPU.Half)">
            <summary>
            Computes sin(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Sinh(ILGPU.Half)">
            <summary>
            Computes sinh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Acos(ILGPU.Half)">
            <summary>
            Computes acos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cos(ILGPU.Half)">
            <summary>
            Computes cos(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Cosh(ILGPU.Half)">
            <summary>
            Computes cosh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tan(ILGPU.Half)">
            <summary>
            Computes tan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Tanh(ILGPU.Half)">
            <summary>
            Computes tanh(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan(ILGPU.Half)">
            <summary>
            Computes atan(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp(ILGPU.Half)">
            <summary>
            Computes exp(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Exp2(ILGPU.Half)">
            <summary>
            Computes 2^x.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Floor(ILGPU.Half)">
            <summary>
            Computes floor(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Ceiling(ILGPU.Half)">
            <summary>
            Computes ceil(x).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(ILGPU.Half)">
            <summary>
            Computes log(x) to base e.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log2(ILGPU.Half)">
            <summary>
            Computes log(x) to base 2.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log10(ILGPU.Half)">
            <summary>
            Computes log(x) to base 10.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Rem(ILGPU.Half,ILGPU.Half)">
            <summary>
            The % operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Min(ILGPU.Half,ILGPU.Half)">
            <summary>
            The min operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Max(ILGPU.Half,ILGPU.Half)">
            <summary>
            The max operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Atan2(ILGPU.Half,ILGPU.Half)">
            <summary>
            The atan2 operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Pow(ILGPU.Half,ILGPU.Half)">
            <summary>
            The pow operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:ILGPU.IntrinsicMath.CPUOnly.Log(ILGPU.Half,ILGPU.Half)">
            <summary>
            The binary log operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="T:ILGPU.InvalidKernelOperationException">
            <summary>
            An exception that is thrown when an ILGPU kernel method is called from the
            managed CPU side instead of a kernel.
            </summary>
        </member>
        <member name="M:ILGPU.InvalidKernelOperationException.#ctor">
            <summary>
            Constructs a new exception.
            </summary>
        </member>
        <member name="M:ILGPU.InvalidKernelOperationException.#ctor(System.String)">
            <summary cref="M:System.Exception.#ctor(System.String)"/>
        </member>
        <member name="M:ILGPU.InvalidKernelOperationException.#ctor(System.String,System.Exception)">
            <summary cref="M:System.Exception.#ctor(System.String,System.Exception)"/>
        </member>
        <member name="T:ILGPU.IR.MemoryAddressSpace">
            <summary>
            Represents an address space.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MemoryAddressSpace.Generic">
            <summary>
            The generic address space (any space).
            </summary>
        </member>
        <member name="F:ILGPU.IR.MemoryAddressSpace.Global">
            <summary>
            Represents the global address space.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MemoryAddressSpace.Shared">
            <summary>
            Represents the shared address space.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MemoryAddressSpace.Local">
            <summary>
            Represents the local address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.IAddressSpace">
            <summary>
            Represents the base interface for all address spaces.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaceAttribute">
            <summary>
            Represents an address-space annotation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.AddressSpaceAttribute.#ctor(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new address-space attribute.
            </summary>
            <param name="addressSpace">The target address space.</param>
        </member>
        <member name="P:ILGPU.IR.AddressSpaceAttribute.AddressSpace">
            <summary>
            Returns the associated address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaces">
            <summary>
            Extensions to encode ILGPU address space information in the .Net type
            system environment.
            </summary>
        </member>
        <member name="F:ILGPU.IR.AddressSpaces.Spaces">
            <summary>
            A readonly array of all address spaces.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaces.Generic">
            <summary>
            Represents the generic address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaces.Global">
            <summary>
            Represents the global address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaces.Shared">
            <summary>
            Represents the shared address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.AddressSpaces.Local">
            <summary>
            Represents the local address space.
            </summary>
        </member>
        <member name="M:ILGPU.IR.AddressSpaces.GetManagedType(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Resolves the managed type for the given address space.
            </summary>
            <param name="space">The address space.</param>
            <returns>The .Net representation of the given address space.</returns>
        </member>
        <member name="M:ILGPU.IR.AddressSpaces.GetAddressSpaceType(System.Type)">
            <summary>
            Resolves the address-space type for the given .Net type.
            </summary>
            <param name="type">The type.</param>
            <returns>The resolved address space.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.AllocaInformation">
            <summary>
            Represents information about an alloca node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaInformation.#ctor(System.Int32,ILGPU.IR.Values.Alloca)">
            <summary>
            Constructs new alloca information.
            </summary>
            <param name="index">The allocation index.</param>
            <param name="alloca">The alloca node.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.Index">
            <summary>
            Returns the allocation index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.Alloca">
            <summary>
            Returns the alloca node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.IsArray">
            <summary>
            Returns true if this is an array.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.IsDynamicArray">
            <summary>
            Returns true if this is an array with dynamic length.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.ArraySize">
            <summary>
            Returns the number of array elements.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.ElementSize">
            <summary>
            Returns the element size in bytes of a single element.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.ElementAlignment">
            <summary>
            Returns the element alignment in bytes of a single element.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.TotalSize">
            <summary>
            Returns the total size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaInformation.ElementType">
            <summary>
            Returns the element type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.AllocaKindInformation">
            <summary>
            Represents information about a whole category of alloca nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaKindInformation.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AllocaInformation},System.Int32)">
            <summary>
            Constructs new alloca information.
            </summary>
            <param name="allocas">The alloca nodes.</param>
            <param name="totalSize">The total size.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaKindInformation.Allocas">
            <summary>
            Returns the alloca nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaKindInformation.Item(System.Int32)">
            <summary>
            Returns the i-th allocations.
            </summary>
            <param name="index">The index.</param>
            <returns>The resolved alloca information.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaKindInformation.Length">
            <summary>
            Returns the number of allocations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AllocaKindInformation.TotalSize">
            <summary>
            Returns the element size in bytes of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaKindInformation.Contains(ILGPU.IR.Values.Alloca)">
            <summary>
            Returns true if the given alloca is contained in this collection.
            </summary>
            <param name="alloca">The alloca.</param>
            <returns>True, if the given alloca is contained in this collection.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaKindInformation.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all allocas.
            </summary>
            <returns>An enumerator to enumerate all allocas.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Allocas">
            <summary>
            Implements an alloca analysis to resolve information
            about alloca nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Allocas.Create``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Creates an alloca analysis.
            </summary>
            <typeparam name="TOrder">The traversal order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="collection">The block collection.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Allocas.#ctor(ILGPU.IR.Analyses.AllocaKindInformation@,ILGPU.IR.Analyses.AllocaKindInformation@,ILGPU.IR.Analyses.AllocaKindInformation@)">
            <summary>
            Constructs a new analysis.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Allocas.AddAllocation(ILGPU.IR.Values.Alloca,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AllocaInformation}.Builder,System.Int32@,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AllocaInformation}.Builder)">
            <summary>
            Creates and adds a new allocation to the given list.
            </summary>
            <param name="alloca">The current alloca.</param>
            <param name="builder">The target builder.</param>
            <param name="memorySize">The current memory size.</param>
            <param name="dynamicBuilder">
            The target builder for dynamic allocations.
            </param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Allocas.LocalAllocations">
            <summary>
            Returns all location allocations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Allocas.SharedAllocations">
            <summary>
            Returns all shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Allocas.DynamicSharedAllocations">
            <summary>
            Returns all dynamic shared allocations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Allocas.LocalMemorySize">
            <summary>
            Returns the total local memory size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Allocas.SharedMemorySize">
            <summary>
            Returns the total shared memory size in bytes.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.AllocaAlignments">
            <summary>
            Represents a lightweight analysis to determine alignment
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaAlignments.GetInitialAlignment(ILGPU.IR.Values.Alloca)">
            <summary>
            Determines the initial alloca alignment based on the type of the allocation.
            </summary>
            <param name="alloca">
            The alloca to determine to alignment information for.
            </param>
            <returns>The initial alignment in bytes.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaAlignments.GetAllocaTypeAlignment(ILGPU.IR.Types.TypeNode)">
            <summary>
            Determines the allocation alignment information based on the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The compatible allocation alignment in bytes.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaAlignments.TryGetAnalysisType(ILGPU.IR.Value)">
            <summary>
            Tries to determine type information that can be used to compute a compatible
            allocation type alignment using
            <see cref="M:ILGPU.IR.Analyses.AllocaAlignments.GetAllocaTypeAlignment(ILGPU.IR.Types.TypeNode)"/>.
            </summary>
            <param name="value">The value to get the type information for.</param>
            <returns>The type, if the value is supported, null otherwise.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaAlignments.Create">
            <summary>
            Creates a new allocation alignments analysis using a default stack processing
            capacity of 16 elements.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaAlignments.Create(System.Int32)">
            <summary>
            Creates a new allocation alignments analysis.
            </summary>
            <param name="capacity">The initial stack processing capacity.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaAlignments.#ctor(System.Int32)">
            <summary>
            Constructs a new alloca alignment analysis.
            </summary>
            <param name="capacity">The initial stack capacity.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.AllocaAlignments.ComputeAllocaAlignment(ILGPU.IR.Values.Alloca)">
            <summary>
            Computes detailed allocation alignment information using all aliases.
            </summary>
            <returns>The maximum alignment of the allocation.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.IAnalysisValueSourceContext`1">
            <summary>
            An abstract analysis value context.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Analyses.IAnalysisValueSourceContext`1.Item(ILGPU.IR.Value)">
            <summary>
            Returns the analysis value associated with the given value.
            </summary>
            <param name="value">The source value to lookup.</param>
            <returns>The parent value.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.ConstAnalysisValueSourceContext`1">
            <summary>
            A default implementation of an <see cref="T:ILGPU.IR.Analyses.IAnalysisValueSourceContext`1"/>
            that always returns a specific constant value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.ConstAnalysisValueSourceContext`1.#ctor(`0)">
            <summary>
            Constructs a new source context.
            </summary>
            <param name="value">The constant value to use for all nodes.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.ConstAnalysisValueSourceContext`1.Value">
            <summary>
            Returns the constant value to use for all nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.ConstAnalysisValueSourceContext`1.Item(ILGPU.IR.Value)">
            <summary>
            Returns the value of <see cref="P:ILGPU.IR.Analyses.ConstAnalysisValueSourceContext`1.Value"/> for all input nodes.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.IAnalysisValueContext`1">
            <summary>
            An abstract analysis value context.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Analyses.IAnalysisValueContext`1.Item(ILGPU.IR.Method)">
            <summary>
            Returns the analysis value associated with the given the method.
            </summary>
            <param name="method">The source method to lookup.</param>
            <returns>The parent value.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.AnalysisValue`1">
            <summary>
            An analysis value to encapsulate static program analysis values.
            </summary>
            <typeparam name="T">The underlying element type.</typeparam>
            <remarks>
            This type encapsulates a general <see cref="P:ILGPU.IR.Analyses.AnalysisValue`1.Data"/> element that represents
            accumulated analysis information for the whole object. Furthermore, it stores
            additional fine-grained information about each child element in the case of
            structure values. This improves the overall program analysis precision.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.#ctor(`0)">
            <summary>
            Constructs a new analysis value with the given data value.
            </summary>
            <param name="data">The accumulated data value.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.#ctor(`0,`0[])">
            <summary>
            Constructs a new analysis value with different data values for each child.
            </summary>
            <param name="data">The accumulated data value.</param>
            <param name="childArray">All child data values.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.AnalysisValue`1.Data">
            <summary>
            Returns the underlying data value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AnalysisValue`1.NumFields">
            <summary>
            Returns the number of child elements.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.AnalysisValue`1.Item(System.Int32)">
            <summary>
            Returns the i-th child data element.
            </summary>
            <param name="index">The child index.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.CloneChildData">
            <summary>
            Clones the internal child-data array into a new one.
            </summary>
            <returns>The cloned child-data array.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.Equals(ILGPU.IR.Analyses.AnalysisValue{`0})">
            <summary>
            Returns true if the given value is equal to the current one.
            </summary>
            <param name="other">The other value.</param>
            <returns>True, if the given value is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current value.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.GetHashCode">
            <summary>
            Returns the hash code of this value.
            </summary>
            <returns>The hash code of this value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.ToString">
            <summary>
            Returns the string representation of this value.
            </summary>
            <returns>The string representation of this value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.op_Equality(ILGPU.IR.Analyses.AnalysisValue{`0},ILGPU.IR.Analyses.AnalysisValue{`0})">
            <summary>
            Returns true if the first and second value are the same.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>True, if the first and second value are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue`1.op_Inequality(ILGPU.IR.Analyses.AnalysisValue{`0},ILGPU.IR.Analyses.AnalysisValue{`0})">
            <summary>
            Returns true if the first and second value are not the same.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>True, if the first and second value are not the same.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.AnalysisValue">
            <summary>
            Helper methods for the structure <see cref="T:ILGPU.IR.Analyses.AnalysisValue`1"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValue.Create``1(``0,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a new analysis value for the given type node.
            </summary>
            <param name="data">The data value.</param>
            <param name="type">The type node.</param>
            <returns>The created analysis value.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.AnalysisValueMapping`1">
            <summary>
            Maps <see cref="T:ILGPU.IR.Value"/> instances to <see cref="T:ILGPU.IR.Analyses.AnalysisValue`1"/> instances
            specialized using the user-defined type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target mapping type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValueMapping`1.#ctor(System.Collections.Generic.Dictionary{ILGPU.IR.Value,ILGPU.IR.Analyses.AnalysisValue{`0}})">
            <summary>
            Constructs a new value mapping using the given dictionary.
            </summary>
            <param name="data">The underlying dictionary to use.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.AnalysisValueMapping`1.Item(ILGPU.IR.Value)">
            <summary>
            Lookups the given key in this map.
            </summary>
            <param name="key">The key to lookup.</param>
            <returns>The resolved analysis value.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.AnalysisValueMapping`1.Count">
            <summary>
            Returns the number of elements in this mapping.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValueMapping`1.ContainsKey(ILGPU.IR.Value)">
            <summary>
            Returns true if the given key is contained in this map.
            </summary>
            <param name="key">The key to lookup.</param>
            <returns>True, if the given key is contained in this map.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValueMapping`1.TryGetValue(ILGPU.IR.Value,ILGPU.IR.Analyses.AnalysisValue{`0}@)">
            <summary>
            Tries to get map the given key to a stored value.
            </summary>
            <param name="key">The key to lookup.</param>
            <param name="value">The resolved value (if any).</param>
            <returns>True, if the given key could be found.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValueMapping`1.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all items in this mapping.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.AnalysisReturnValueMapping`1">
            <summary>
            Maps <see cref="T:ILGPU.IR.Method"/> instances to <see cref="T:ILGPU.IR.Analyses.AnalysisValue`1"/> instances
            specialized using the user-defined type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target mapping type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisReturnValueMapping`1.#ctor(System.Collections.Generic.Dictionary{ILGPU.IR.Method,ILGPU.IR.Analyses.AnalysisValue{`0}})">
            <summary>
            Constructs a new value mapping using the given dictionary.
            </summary>
            <param name="data">The underlying dictionary to use.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.AnalysisReturnValueMapping`1.Item(ILGPU.IR.Method)">
            <summary>
            Lookups the given key in this map.
            </summary>
            <param name="key">The key to lookup.</param>
            <returns>The resolved analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisReturnValueMapping`1.TryGetValue(ILGPU.IR.Method,ILGPU.IR.Analyses.AnalysisValue{`0}@)">
            <summary>
            Tries to get map the given key to a stored value.
            </summary>
            <param name="key">The key to lookup.</param>
            <param name="value">The resolved value (if any).</param>
            <returns>True, if the given key could be found.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.AnalysisValueMapping">
            <summary>
            Helper methods for the structure <see cref="T:ILGPU.IR.Analyses.AnalysisValueMapping`1"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisValueMapping.Create``1">
            <summary>
            Creates a new analysis mapping instance.
            </summary>
            <typeparam name="T">The target mapping type.</typeparam>
            <returns>The initialized analysis mapping instance.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.AnalysisReturnValueMapping">
            <summary>
            Helper methods for the structure <see cref="T:ILGPU.IR.Analyses.AnalysisReturnValueMapping`1"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.AnalysisReturnValueMapping.Create``1">
            <summary>
            Creates a new analysis return mapping instance.
            </summary>
            <typeparam name="T">The target mapping type.</typeparam>
            <returns>The initialized analysis mapping instance.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.ICFGNode">
            <summary>
            Represents an abstract interface for all CFG nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.ICFGNode.Block">
            <summary>
            Returns the associated function value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.ICFGNode.TraversalIndex">
            <summary>
            Returns the zero-based node index that can be used
            for fast lookups using arrays.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG`2">
            <summary>
            Represents a control-flow graph (CFG).
            </summary>
            <typeparam name="TOrder">The underlying block order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG`2.Node">
            <summary>
            Represents a single node in the scope of a control-flow graph.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG`2.Node.Enumerator">
            <summary>
            Enumerates all CFG nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.Enumerator.CFG">
            <summary>
            Returns the parent graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.Enumerator.Current">
            <summary>
            Returns the current CFG node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.Enumerator.MoveNext">
            <summary>
            Moves the enumerator to the next node.
            </summary>
            <returns>True, if the enumerator could be moved.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG`2.Node.NodeCollection">
            <summary>
            Represents a node collection of attached nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.NodeCollection.CFG">
            <summary>
            Returns the parent graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.NodeCollection.Count">
            <summary>
            Returns the number of nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.NodeCollection.Item(System.Int32)">
            <summary>
            Returns the i-th node.
            </summary>
            <param name="index">The relative node index.</param>
            <returns>The resolved node.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.NodeCollection.GetEnumerator">
            <summary>
            Returns a node enumerator to iterate over all attached nodes.
            </summary>
            <returns>The resulting node enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.#ctor(ILGPU.IR.Analyses.CFG{`0,`1},ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Constructs a new node.
            </summary>
            <param name="cfg">The parent graph.</param>
            <param name="block">The associated block.</param>
            <param name="traversalIndex">The traversal index.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.CFG">
            <summary>
            Returns the parent graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.Block">
            <summary>
            Returns the associated block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.TraversalIndex">
            <summary>
            Returns the zero-based traversal index that has been assigned during
            traversal of all input blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.Predecessors">
            <summary>
            Returns the predecessors of this node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.Successors">
            <summary>
            Returns the successors of this node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.NumPredecessors">
            <summary>
            Returns the number of predecessors.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Node.NumSuccessors">
            <summary>
            Returns the number of successors.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific exception information.
            </summary>
            <param name="message">The source error message.</param>
            <returns>The formatted error message.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.GetPredecessors">
            <summary>
            Determines the actual predecessors based on the current direction.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.GetSuccessors">
            <summary>
            Determines the actual successors based on the current direction.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.ToString">
            <summary>
            Returns the string representation of this CFG node.
            </summary>
            <returns>The string representation of this CFG node.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Node.op_Implicit(ILGPU.IR.Analyses.CFG{`0,`1}.Node)~ILGPU.IR.BasicBlock">
            <summary>
            Converts the given node implicitly to its underlying basic block.
            </summary>
            <param name="node">The node to convert.</param>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG`2.Enumerator`1">
            <summary>
            Enumerates all CFG nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Enumerator`1.CFG">
            <summary>
            Returns the parent graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Enumerator`1.Current">
            <summary>
            Returns the current CFG node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Enumerator`1.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Enumerator`1.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Enumerator`1.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG`2.TraversalIndexProvider">
            <summary>
            Provides traversal indices.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.TraversalIndexProvider.GetValue(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Returns the current traversal index.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.Create(ILGPU.IR.BasicBlockCollection{`0,`1}@)">
            <summary>
            Creates a new CFG.
            </summary>
            <param name="blocks">The block collection.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.#ctor(ILGPU.IR.BasicBlockCollection{`0,`1}@)">
            <summary>
            Constructs a new CFG.
            </summary>
            <param name="blocks">The block collection.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Blocks">
            <summary>
            Returns the underlying blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Count">
            <summary>
            Returns the number of nodes in the graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Root">
            <summary>
            Returns the root node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.CFG`2.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Resolves the CFG node for the given basic block.
            </summary>
            <param name="block">The basic block to resolve.</param>
            <returns>The resolved basic block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.GetEnumerator">
            <summary>
            Returns a node enumerator to iterate over all nodes stored in this graph
            using the current order.
            </summary>
            <returns>The resulting node enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.System#Collections#Generic#IEnumerable{ILGPU#IR#Analyses#CFG{TOrder,TDirection}#Node}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG`2.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.CFG">
            <summary>
            Helper utility for the class <see cref="T:ILGPU.IR.Analyses.CFG`2"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.CFG.CreateCFG``2(ILGPU.IR.BasicBlockCollection{``0,``1})">
            <summary>
            Creates a new CFG based on the given blocks.
            </summary>
            <typeparam name="TOrder">The underlying block order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="blocks">The block collection.</param>
            <returns>The created CFG.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.ControlFlowDirection.IControlFlowAnalysisSource`1">
            <summary>
            Defines an abstract control flow-analysis source that has an entry block and
            the ability to find a unique exit block.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Analyses.ControlFlowDirection.IControlFlowAnalysisSource`1.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.ControlFlowDirection.IControlFlowAnalysisSource`1.FindExitBlock">
            <summary>
            Computes the exit block.
            </summary>
            <returns>The exit block.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.ControlFlowDirection.IControlFlowDirection">
            <summary>
            Defines a control-flow direction.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.ControlFlowDirection.IControlFlowDirection.IsForwards">
            <summary>
            Returns true if this is a forwards direction.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.ControlFlowDirection.IControlFlowDirection.GetEntryBlock``2(``0@)">
            <summary>
            Returns the entry block for a given source.
            </summary>
            <typeparam name="TSource">The source base.</typeparam>
            <typeparam name="TDirection">The current direction.</typeparam>
            <param name="source">The source.</param>
            <returns>The entry block.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.ControlFlowDirection.Forwards">
            <summary>
            Defines the default forward control-flow direction.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.ControlFlowDirection.Forwards.IsForwards">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.ControlFlowDirection.Forwards.GetEntryBlock``2(``0@)">
            <summary>
            Returns the entry in case of a forwards source, the exit block otherwise.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.ControlFlowDirection.Backwards">
            <summary>
            Defines the backwards control-flow direction in which predecessors are considered
            to be successors and vice versa.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.ControlFlowDirection.Backwards.IsForwards">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.ControlFlowDirection.Backwards.GetEntryBlock``2(``0@)">
            <summary>
            Returns the entry in case of a backwards source, the exit block otherwise.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Dominators`1">
            <summary>
            Implements a dominator analysis.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.Create(ILGPU.IR.Analyses.CFG{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,`0})">
            <summary>
            Creates a new dominator analysis.
            </summary>
            <param name="cfg">The parent graph.</param>
            <returns>The created dominator analysis.</returns>
        </member>
        <member name="F:ILGPU.IR.Analyses.Dominators`1.idomsInRPO">
            <summary>
            Stores all idoms in RPO.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.Dominators`1.nodesInRPO">
            <summary>
            Stores all blocks in RPO.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.#ctor(ILGPU.IR.Analyses.CFG{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,`0})">
            <summary>
            Constructs the dominators for the given control-flow graph.
            </summary>
            <param name="cfg">The parent graph.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.Intersect(System.Int32,System.Int32)">
            <summary>
            Intersects two RPO numbers in  order to find the associated idom.
            </summary>
            <returns>The resulting LCA node.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.Dominators`1.CFG">
            <summary>
            Returns the underlying graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Dominators`1.Root">
            <summary>
            Returns the root block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.IsDominatedBy(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given <paramref name="block"/> is dominated by the
            <paramref name="dominator"/>.
            </summary>
            <param name="block">The block.</param>
            <param name="dominator">The potential dominator.</param>
            <returns>True, if the given block is dominated by the dominator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.Dominates(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given <paramref name="dominator"/> is dominating the
            <paramref name="block"/>.
            </summary>
            <param name="dominator">The potential dominator.</param>
            <param name="block">The other block.</param>
            <returns>True, if the given block is dominating the other block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.GetImmediateDominator(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the first dominator of the given block. This might be the block
            itself if there are no other dominators.
            </summary>
            <param name="block">The block.</param>
            <returns>The first dominator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.GetImmediateCommonDominator(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Returns the immediate common dominator of both blocks.
            </summary>
            <param name="first">The first block.</param>
            <param name="second">The second block.</param>
            <returns>The immediate common dominator of both blocks.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.GetImmediateCommonDominator(System.ReadOnlySpan{ILGPU.IR.BasicBlock})">
            <summary>
            Returns the immediate common dominator of all blocks.
            </summary>
            <param name="blocks">The list of block.</param>
            <returns>The immediate common dominator of all blocks.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.GetPhiParent(ILGPU.IR.BasicBlock,ILGPU.IR.Values.UseCollection)">
            <summary>
            Determines a dominator block of all phi-value uses.
            </summary>
            <param name="dominatorBlock">The current dominator block.</param>
            <param name="uses">The collection of all uses.</param>
            <returns>The dominator block given by all phi-value uses.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators`1.GetImmediateCommonDominatorOfUses(ILGPU.IR.BasicBlock,ILGPU.IR.Values.UseCollection)">
            <summary>
            Gets the immediate common dominator of all given uses.
            </summary>
            <param name="dominatorBlock">The initial dominator block.</param>
            <param name="uses">The uses to get the common dominator for.</param>
            <returns>The common dominator block of all uses.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Dominators">
            <summary>
            Helper utility for the class <see cref="T:ILGPU.IR.Analyses.Dominators`1"/>
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators.CreateDominators``1(ILGPU.IR.Analyses.CFG{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,``0})">
            <summary>
            Creates a new dominator analysis.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="cfg">The parent graph.</param>
            <returns>The created dominator analysis.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators.CreateDominators``1(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,``0})">
            <summary>
            Creates a new dominator analysis.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="blocks">The source blocks.</param>
            <returns>The created dominator analysis.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Dominators.CreatePostDominators(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards})">
            <summary>
            Creates a new post dominator analysis.
            </summary>
            <param name="blocks">The source blocks.</param>
            <returns>The created post dominator analysis.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.IFixPointAnalysisContext`2">
            <summary>
            An analysis context that manages data in the scope of a fix point analysis.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <typeparam name="TNode">The node type.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Analyses.IFixPointAnalysisContext`2.Item(`1)">
            <summary>
            Returns the associated data value of the given node.
            </summary>
            <param name="node">The IR node.</param>
            <returns>The associated data value.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.FixPointAnalysis`3">
            <summary>
            An abstract fix point analysis to compute static invariants.
            </summary>
            <typeparam name="TData">The underlying data type of the analysis.</typeparam>
            <typeparam name="TNode">The node type.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.FixPointAnalysis`3.BaseAnalysisContext">
            <summary>
            An internal context implementation for block-based analyses.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.FixPointAnalysis`3.BaseAnalysisContext.#ctor(ILGPU.IR.BasicBlockSet)">
            <summary>
            Constructs an abstract analysis context.
            </summary>
            <param name="onStack">The block set.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.FixPointAnalysis`3.BaseAnalysisContext.OnStack">
            <summary>
            Returns the current stack set.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.FixPointAnalysis`3.BaseAnalysisContext.Stack">
            <summary>
            Returns the current stack.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.FixPointAnalysis`3.BaseAnalysisContext.TryPop(ILGPU.IR.BasicBlock@)">
            <summary>
            Tries to pop one block from the stack.
            </summary>
            <param name="block">The popped block (if any).</param>
            <returns>True, if a value could be popped from the stack.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.FixPointAnalysis`3.BaseAnalysisContext.Push(ILGPU.IR.BasicBlock)">
            <summary>
            Pushes the given block into the stack.
            </summary>
            <param name="block">The block to push.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.FixPointAnalysis`3.CreateData(ILGPU.IR.Method)">
            <summary>
            Creates an initial data value for the method.
            </summary>
            <param name="method">The source IR method.</param>
            <returns>The created data value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.FixPointAnalysis`3.CreateData(`1)">
            <summary>
            Creates an initial data value for the given node.
            </summary>
            <param name="node">The source IR node.</param>
            <returns>The created data value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.FixPointAnalysis`3.Update``1(`1,``0)">
            <summary>
            Updates the given value with the latest analysis insights.
            </summary>
            <typeparam name="TContext">The analysis value context.</typeparam>
            <param name="node">The source IR node.</param>
            <param name="context">The current analysis context.</param>
            <returns>
            True, if the analysis has changed the internal data values.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.BlockFixPointAnalysis`2">
            <summary>
            A fix point analysis to compute static invariants across blocks.
            </summary>
            <typeparam name="TData">The underlying data type of the analysis.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.BlockFixPointAnalysis`2.BlockAnalysisContext">
            <summary>
            An internal context implementation for block-based analyses.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.BlockFixPointAnalysis`2.BlockAnalysisContext.#ctor(ILGPU.IR.BasicBlockMap{`0},ILGPU.IR.BasicBlockSet)">
            <summary>
            Constructs a new block analysis context.
            </summary>
            <param name="dataMapping">The block mapping.</param>
            <param name="onStack">The internal block set.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.BlockFixPointAnalysis`2.BlockAnalysisContext.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the data of the given block.
            </summary>
            <param name="block">The block.</param>
            <returns>The associated value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.BlockFixPointAnalysis`2.Analyze``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Executes a fix point analysis working on blocks.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TBlockDirection">The control-flow direction.</typeparam>
            <param name="blocks">The list of blocks.</param>
            <returns>The created analysis mapping from blocks to data elements.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.ValueFixPointAnalysis`2">
            <summary>
            A fix point analysis to compute static invariants across blocks.
            </summary>
            <typeparam name="T">The underlying data type of the analysis.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.ValueAnalysisContext">
            <summary>
            An internal context implementation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.ValueAnalysisContext.mapping">
            <summary>
            Returns the current value mapping.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.ValueAnalysisContext.#ctor(ILGPU.IR.Analyses.ValueFixPointAnalysis{`0,`1},ILGPU.IR.Analyses.AnalysisValueMapping{`0},ILGPU.IR.Analyses.AnalysisReturnValueMapping{`0},ILGPU.IR.BasicBlockSet)">
            <summary>
            Constructs a new analysis context.
            </summary>
            <param name="parent">The parent analysis.</param>
            <param name="valueMapping">The parent value mapping.</param>
            <param name="returnValueMapping">The parent return value mapping.</param>
            <param name="onStack">The internal block set.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.ValueAnalysisContext.Item(ILGPU.IR.Value)">
            <summary>
            Returns the data of the given node.
            </summary>
            <param name="valueNode">The value node.</param>
            <returns>The associated value.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.ValueAnalysisContext.Item(ILGPU.IR.Method)">
            <summary>
            Returns the analysis value associated with the given the method.
            </summary>
            <param name="method">The source method to lookup.</param>
            <returns>The parent value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.#ctor(`0)">
            <summary>
            Constructs a new fix point analysis.
            </summary>
            <param name="defaultValue">
            The default analysis value for generic IR nodes.
            </param>
        </member>
        <member name="P:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.DefaultValue">
            <summary>
            Returns the default analysis value for generic IR nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.Update``1(ILGPU.IR.Value,``0)">
            <summary>
            Updates the given value with the latest analysis insights.
            </summary>
            <typeparam name="TContext">The analysis value context.</typeparam>
            <param name="node">The source IR node.</param>
            <param name="context">The current analysis context.</param>
            <returns>
            True, if the analysis has changed the internal data values.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.CreateData(ILGPU.IR.Method)">
            <summary>
            Creates a default analysis value based on the <see cref="P:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.DefaultValue"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.AnalyzeMethod``1(ILGPU.IR.Method,``0)">
            <summary>
            Executes a fix point analysis working on values on the given method.
            </summary>
            <typeparam name="TContext">
            The analysis value context to use for each parameter.
            </typeparam>
            <param name="method">The current method.</param>
            <param name="context">The initial value context.</param>
            <returns>The created analysis mapping from values to data elements.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.Analyze``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Executes a fix point analysis working on values.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TBlockDirection">The control-flow direction.</typeparam>
            <param name="blocks">The list of blocks.</param>
            <returns>The created analysis mapping from values to data elements.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.Analyze``2(ILGPU.IR.BasicBlockCollection{``0,``1}@,ILGPU.IR.Analyses.AnalysisValueMapping{`0},ILGPU.IR.Analyses.AnalysisReturnValueMapping{`0})">
            <summary>
            Executes a fix point analysis working on values.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TBlockDirection">The control-flow direction.</typeparam>
            <param name="blocks">The list of blocks.</param>
            <param name="valueMapping">The pre-defined map of input values.</param>
            <param name="returnMapping">
            The pre-defined map of method return values.
            </param>
            <returns>The created analysis mapping from values to data elements.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.TryProvide(ILGPU.IR.Types.TypeNode)">
            <summary>
            Tries to provide an analysis value for the given type.
            </summary>
            <param name="typeNode">The type node.</param>
            <returns>The provided analysis value (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.TryMerge``1(ILGPU.IR.Value,``0)">
            <summary>
            Tries to merge the given IR value.
            </summary>
            <typeparam name="TContext">The current value context.</typeparam>
            <param name="value">The IR value.</param>
            <param name="context">The current analysis value context.</param>
            <returns>A merged value in the case of a successful merge.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.Merge(`0,`0)">
            <summary>
            Merges the given intermediate values.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>The merged value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.Merge(ILGPU.IR.Analyses.AnalysisValue{`0},ILGPU.IR.Analyses.AnalysisValue{`0})">
            <summary>
            Merges the given intermediate values.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>The merged value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.CreateValue(`0,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a new analysis value for the given type node.
            </summary>
            <param name="data">The data value.</param>
            <param name="type">The type node.</param>
            <returns>The created analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.CreateValue(ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates an initial analysis value.
            </summary>
            <param name="type">The type node.</param>
            <returns>The created analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.Merge``1(ILGPU.IR.Analyses.AnalysisValue{`0}@,ILGPU.IR.Value,``0)">
            <summary>
            Merges the given IR value into the current analysis value.
            </summary>
            <typeparam name="TContext">The value analysis context.</typeparam>
            <param name="source">The source value to merge.</param>
            <param name="value">The IR value to merge with.</param>
            <param name="context">The current value context.</param>
            <returns>The merged analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.GetField``1(ILGPU.IR.Analyses.AnalysisValue{`0}@,ILGPU.IR.Values.GetField,``0)">
            <summary>
            Merges a <see cref="T:ILGPU.IR.Values.GetField"/> IR value into this analysis value.
            </summary>
            <typeparam name="TContext">The value analysis context.</typeparam>
            <param name="source">The source value to merge.</param>
            <param name="getField">The IR value to merge with.</param>
            <param name="context">The current value context.</param>
            <returns>The merged analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.SetField``1(ILGPU.IR.Analyses.AnalysisValue{`0}@,ILGPU.IR.Values.SetField,``0)">
            <summary>
            Merges a <see cref="T:ILGPU.IR.Values.SetField"/> into this analysis value.
            </summary>
            <typeparam name="TContext">The value analysis context.</typeparam>
            <param name="source">The source value to merge.</param>
            <param name="setField">The IR value to merge with.</param>
            <param name="context">The current value context.</param>
            <returns>The merged analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.StructureValue``1(ILGPU.IR.Analyses.AnalysisValue{`0}@,ILGPU.IR.Values.StructureValue,``0)">
            <summary>
            Merges a <see cref="T:ILGPU.IR.Values.StructureValue"/> into this analysis value.
            </summary>
            <typeparam name="TContext">The value analysis context.</typeparam>
            <param name="source">The source value to merge.</param>
            <param name="structureValue">The IR structure value to merge with.</param>
            <param name="context">The current value context.</param>
            <returns>The merged analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.PhiLikeValue``1(ILGPU.IR.Analyses.AnalysisValue{`0}@,ILGPU.IR.Value,System.ReadOnlySpan{ILGPU.IR.Values.ValueReference},``0)">
            <summary>
            Merges a <see cref="T:ILGPU.IR.Values.PhiValue"/> or a <see cref="T:ILGPU.IR.Values.Predicate"/>
            value into this analysis value.
            </summary>
            <typeparam name="TContext">The value analysis context.</typeparam>
            <param name="source">The source value to merge.</param>
            <param name="phi">The IR phi/predicate value to merge with.</param>
            <param name="values">The values to merge with.</param>
            <param name="context">The current value context.</param>
            <returns>The merged analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.MethodCall``1(ILGPU.IR.Analyses.AnalysisValue{`0}@,ILGPU.IR.Values.MethodCall,``0)">
            <summary>
            Merges a <see cref="T:ILGPU.IR.Values.MethodCall"/> into this analysis value.
            </summary>
            <typeparam name="TContext">The value analysis context.</typeparam>
            <param name="source">The source value to merge.</param>
            <param name="methodCall">The IR call value to merge with.</param>
            <param name="context">The current value context.</param>
            <returns>The merged analysis value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.ValueFixPointAnalysis`2.GenericValue``1(ILGPU.IR.Analyses.AnalysisValue{`0},ILGPU.IR.Value,``0)">
            <summary>
            Merges a generic IR value into this analysis value.
            </summary>
            <typeparam name="TContext">The value analysis context.</typeparam>
            <param name="source">The source value to merge.</param>
            <param name="value">The IR value to merge with.</param>
            <param name="context">The current value context.</param>
            <returns>The merged analysis value.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.IGlobalFixPointAnalysisContext`2">
            <summary>
            An abstract global fix point analysis to compute static invariants across
            different method calls.
            </summary>
            <typeparam name="TMethodData">
            The underlying method data type of the analysis.
            </typeparam>
            <typeparam name="T">
            The underlying value data type of the analysis.
            </typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.GlobalAnalysisResult`2">
            <summary>
            An analysis result of a global value analysis.
            </summary>
            <typeparam name="T">The element value type of the analysis.</typeparam>
            <typeparam name="TMethodData">
            The method data that has been stored for each method.
            </typeparam>
        </member>
        <member name="F:ILGPU.IR.Analyses.GlobalAnalysisResult`2.Empty">
            <summary>
            An empty result.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalAnalysisResult`2.#ctor(System.Collections.Generic.Dictionary{ILGPU.IR.Method,`1},System.Collections.Generic.Dictionary{ILGPU.IR.Method,ILGPU.IR.Analyses.AnalysisValue{`0}})">
            <summary>
            Constructs a new analysis result.
            </summary>
            <param name="mapping">The method data mapping.</param>
            <param name="returnMapping">The return-value mapping.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalAnalysisResult`2.Mapping">
            <summary>
            Returns the current mapping dictionary that maps methods to their individual
            analysis-data instance.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalAnalysisResult`2.ReturnMapping">
            <summary>
            Returns the current mapping dictionary that maps methods to their individual
            return-value information.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalAnalysisResult`2.IsEmpty">
            <summary>
            Returns true if this result information object is empty.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalAnalysisResult`2.TryGetReturnData(ILGPU.IR.Method,ILGPU.IR.Analyses.AnalysisValue{`0}@)">
            <summary>
            Tries to get return data for the return value of the given method.
            </summary>
            <param name="method">The method to query information for.</param>
            <param name="result">The result value (if any).</param>
            <returns>True, if return data could be determined.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalAnalysisResult`2.TryGetData(ILGPU.IR.Method,`1@)">
            <summary>
            Tries to get value data for the given method.
            </summary>
            <param name="method">The method to query information for.</param>
            <param name="result">The result data (if any).</param>
            <returns>True, if return data could be determined.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3">
            <summary>
            An abstract global fix point analysis to compute static invariants across
            different method calls.
            </summary>
            <typeparam name="TMethodData">
            The underlying method data type of the analysis.
            </typeparam>
            <typeparam name="T">
            The underlying value data type of the analysis.
            </typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1">
            <summary>
            Represents an internal analysis entry.
            </summary>
            <typeparam name="TValue">The value type to track.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.#ctor(ILGPU.IR.Method,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AnalysisValue{`3}})">
            <summary>
            Constructs an internal analysis entry.
            </summary>
            <param name="method">The associated method.</param>
            <param name="arguments">The argument bindings.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.Method">
            <summary>
            Returns the current method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.Arguments">
            <summary>
            Returns all call argument data.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.Equals(ILGPU.IR.Analyses.GlobalFixPointAnalysis{`0,`1,`2}.GlobalAnalysisEntry{`3})">
            <summary>
            Returns true if the given entry is equal to the current one.
            </summary>
            <param name="other">The other value.</param>
            <returns>True, if the given entry is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current entry.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current entry.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.GetHashCode">
            <summary>
            Returns the hash code of this entry.
            </summary>
            <returns>The hash code of this entry.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.ToString">
            <summary>
            Returns the string representation of this entry.
            </summary>
            <returns>The string representation of this entry.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.op_Equality(ILGPU.IR.Analyses.GlobalFixPointAnalysis{`0,`1,`2}.GlobalAnalysisEntry{`3},ILGPU.IR.Analyses.GlobalFixPointAnalysis{`0,`1,`2}.GlobalAnalysisEntry{`3})">
            <summary>
            Returns true if the left and right entries are the same.
            </summary>
            <param name="left">The left entry.</param>
            <param name="right">The right entry.</param>
            <returns>True, if the left and right entries are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisEntry`1.op_Inequality(ILGPU.IR.Analyses.GlobalFixPointAnalysis{`0,`1,`2}.GlobalAnalysisEntry{`3},ILGPU.IR.Analyses.GlobalFixPointAnalysis{`0,`1,`2}.GlobalAnalysisEntry{`3})">
            <summary>
            Returns true if the left and right entries are not the same.
            </summary>
            <param name="left">The left entry.</param>
            <param name="right">The right entry.</param>
            <returns>True, if the left and right entries are not the same.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext">
            <summary>
            Implements a global analysis context.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.#ctor(System.Collections.Generic.Dictionary{ILGPU.IR.Method,`0})">
            <summary>
            Constructs a new global analysis context.
            </summary>
            <param name="mapping">The basic data mapping.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.Mapping">
            <summary>
            Returns the current method mapping.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.ValueMapping">
            <summary>
            Returns the current value mapping.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.Visited">
            <summary>
            Returns the set of visited configurations.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.Stack">
            <summary>
            Returns the current stack.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.GetMethodData(ILGPU.IR.Method)">
            <summary>
            Returns the method data of the given method.
            </summary>
            <param name="method">The method.</param>
            <returns>The associated method data.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.Item(ILGPU.IR.Value)">
            <summary>
            Returns the data of the given node.
            </summary>
            <param name="valueNode">The value node.</param>
            <returns>The associated data.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.Item(ILGPU.IR.Method)">
            <summary>
            Returns the data of the given method.
            </summary>
            <param name="method">The method.</param>
            <returns>The associated data.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.TryPop(ILGPU.IR.Analyses.GlobalFixPointAnalysis{`0,`1,`2}.GlobalAnalysisEntry{`1}@)">
            <summary>
            Tries to pop one method from the stack.
            </summary>
            <param name="entry">The popped method (if any).</param>
            <returns>True, if a method could be popped from the stack.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.GlobalAnalysisContext.Push(ILGPU.IR.Analyses.GlobalFixPointAnalysis{`0,`1,`2}.GlobalAnalysisEntry{`1}@)">
            <summary>
            Pushes the given entry into the stack.
            </summary>
            <param name="entry">The entry to push.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.#ctor(`1)">
            <summary>
            Constructs a new global fix point analysis.
            </summary>
            <param name="defaultValue">
            The default analysis value for generic IR nodes.
            </param>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.CreateMethodData(ILGPU.IR.Method)">
            <summary>
            Creates an initial data value for the given method.
            </summary>
            <param name="method">The source method.</param>
            <returns>The created method data value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.UpdateMethod``1(ILGPU.IR.Method,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AnalysisValue{`1}},ILGPU.IR.Analyses.AnalysisValueMapping{`1},ILGPU.IR.Analyses.AnalysisReturnValueMapping{`1},``0)">
            <summary>
            </summary>
            <typeparam name="TContext">The analysis value context.</typeparam>
            <param name="method">The source method.</param>
            <param name="arguments">The call arguments.</param>
            <param name="valueMapping">The current value mapping.</param>
            <param name="returnValueMapping">The current return value mapping.</param>
            <param name="context">The current analysis context.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`3.AnalyzeGlobal(ILGPU.IR.Method,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AnalysisValue{`1}})">
            <summary>
            Executes a fix point analysis working on values.
            </summary>
            <param name="rootMethod">The root method.</param>
            <param name="arguments">The initial parameter-argument bindings.</param>
            <returns>
            The created analysis mapping from methods to data elements.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.GlobalAnalysisValueResult`1">
            <summary>
            Represents the result of a global value analysis.
            </summary>
            <typeparam name="T">The value analysis type.</typeparam>
        </member>
        <member name="F:ILGPU.IR.Analyses.GlobalAnalysisValueResult`1.Empty">
            <summary>
            An empty value result.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalAnalysisValueResult`1.#ctor(ILGPU.IR.Analyses.GlobalAnalysisResult{`0,ILGPU.IR.Analyses.AnalysisValueMapping{`0}})">
            <summary>
            Constructs a new wrapped analysis result.
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalAnalysisValueResult`1.Result">
            <summary>
            Return the underlying analysis result.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.GlobalAnalysisValueResult`1.IsEmpty">
            <summary>
            Returns true if this result information object is empty.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalAnalysisValueResult`1.TryGetReturnData(ILGPU.IR.Method,ILGPU.IR.Analyses.AnalysisValue{`0}@)">
            <summary>
            Tries to get return data for the return value of the given method.
            </summary>
            <param name="method">The method to query information for.</param>
            <param name="result">The result value (if any).</param>
            <returns>True, if return data could be determined.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalAnalysisValueResult`1.TryGetData(ILGPU.IR.Method,ILGPU.IR.Analyses.AnalysisValueMapping{`0}@)">
            <summary>
            Tries to get value data for the given method.
            </summary>
            <param name="method">The method to query information for.</param>
            <param name="result">The result data (if any).</param>
            <returns>True, if return data could be determined.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalAnalysisValueResult`1.TryGetData(ILGPU.IR.Value,ILGPU.IR.Analyses.AnalysisValue{`0}@)">
            <summary>
            Tries to get value data for the value.
            </summary>
            <param name="value">The value to query information for.</param>
            <param name="data">The result data (if any).</param>
            <returns>True, if return data could be determined.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.GlobalFixPointAnalysis`2">
            <summary>
            An abstract global fix point analysis to compute static invariants across
            different method calls.
            </summary>
            <typeparam name="T">
            The underlying value data type of the analysis.
            </typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`2.#ctor(`0)">
            <summary>
            Constructs a new global fix point analysis.
            </summary>
            <param name="defaultValue">
            The default analysis value for generic IR nodes.
            </param>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`2.CreateMethodData(ILGPU.IR.Method)">
            <summary>
            Creates an initial data value for the given method.
            </summary>
            <param name="method">The source method.</param>
            <returns>The created method data value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`2.UpdateMethod``1(ILGPU.IR.Method,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Analyses.AnalysisValue{`0}},ILGPU.IR.Analyses.AnalysisValueMapping{`0},ILGPU.IR.Analyses.AnalysisReturnValueMapping{`0},``0)">
            <summary>
            Merges previous value bindings with the latest argument value updates.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`2.AnalyzeGlobalMethod(ILGPU.IR.Method,`0)">
            <summary>
            Executes a fix point analysis working on values.
            </summary>
            <param name="rootMethod">The root method.</param>
            <param name="data">The initial value data for each parameter.</param>
            <returns>
            The created analysis mapping from methods to data elements.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.GlobalFixPointAnalysis`2.AnalyzeGlobalMethod``1(ILGPU.IR.Method,``0)">
            <summary>
            Executes a fix point analysis working on values.
            </summary>
            <typeparam name="TContext">
            The analysis value context to use for each parameter.
            </typeparam>
            <param name="rootMethod">The root method.</param>
            <param name="context">The initial value context.</param>
            <returns>
            The created analysis mapping from methods to data elements.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape`1">
            <summary>
            Represents the structure of multiple <see cref="T:ILGPU.IR.Method"/> objects.
            This includes the call graph, function size and dependency information.
            </summary>
            <typeparam name="T">Custom information type per entry.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape`1.Entry">
            <summary>
            Represents a landscape entry.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.Landscape`1.Entry.Comparison">
            <summary>
            Compares two entries according to their associated method's id.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.Data">
            <summary>
            Returns custom information.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.NumBlocks">
            <summary>
            Returns the number of basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.NumUses">
            <summary>
            Returns the number of uses.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.HasReferences">
            <summary>
            Returns true if this function has references.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Entry.References">
            <summary>
            Returns all method references to other methods.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Entry.IsUsedBy(ILGPU.IR.Method)">
            <summary>
            Registers all resolved uses (backward edges).
            </summary>
            <param name="method">The method.</param>
            <returns>True, if this method is used by the given one.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Entry.AddUse(ILGPU.IR.Method)">
            <summary>
            Registers the given method use.
            </summary>
            <param name="method">The method to register.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Entry.FinishUses">
            <summary>
            Finishes the adding of use nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Entry.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all method entries that
            depend on this one (backward edges).
            </summary>
            <returns>
            An enumerator to enumerate all depending method entries.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Entry.ToString">
            <summary>
            Returns the string representation of this entry.
            </summary>
            <returns>The string representation of this entry.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape`1.IDataProvider">
            <summary>
            An abstract data provider per node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.IDataProvider.GetData(ILGPU.IR.Method,ILGPU.IR.Analyses.References)">
            <summary>
            Resolves custom entry information for the given node.
            </summary>
            <param name="method">The current method.</param>
            <param name="methodReferences">
            All references to other methods.
            </param>
            <returns>The resolved custom data.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape`1.Enumerator">
            <summary>
            Enumerates all functions in the call graph scope in post order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Enumerator.#ctor(ILGPU.IR.Analyses.Landscape{`0})">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="landscape">The parent landscape.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Enumerator.Landscape">
            <summary>
            Returns the parent scope;
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Enumerator.Current">
            <summary>
            Returns the current function entry.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current" />
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext" />
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset" />
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose" />
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Create``1(ILGPU.IR.MethodCollection@,``0@)">
            <summary>
            Creates a function structure instance.
            </summary>
            <typeparam name="TDataProvider">The custom data provider type.</typeparam>
            <param name="methods">The source methods.</param>
            <param name="dataProvider">A custom data provider.</param>
            <returns>The created function structure object.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.#ctor">
            <summary>
            Constructs a new structure instance.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Item(ILGPU.IR.Method)">
            <summary>
            Returns the landscape entry of the given method.
            </summary>
            <param name="method">The source method.</param>
            <returns>The resolved landscape entry.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.Landscape`1.Count">
            <summary>
            Returns the number of function entries.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.TryGetEntry(ILGPU.IR.Method,ILGPU.IR.Analyses.Landscape{`0}.Entry@)">
            <summary>
            Tries to resolve the landscape entry of the given method.
            </summary>
            <param name="method">The method.</param>
            <param name="entry">The resolved entry.</param>
            <returns>True, if the entry could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.Init``1(ILGPU.IR.MethodCollection@,``0@)">
            <summary>
            Computes all entries.
            </summary>
            <param name="methods">The source methods.</param>
            <param name="dataProvider">A custom data provider.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.ComputeOrder">
            <summary>
            Computes the post order of the nested call graph.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all functions in the call graph in
            post order.
            </summary>
            <returns>
            An enumerator that enumerates all functions in the call graph.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape">
            <summary>
            Represents the structure of multiple <see cref="T:ILGPU.IR.Method"/> objects.
            This includes the call graph, function size and dependency information.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Landscape.DataProvider">
            <summary>
            The default data provider.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape.DataProvider.GetData(ILGPU.IR.Method,ILGPU.IR.Analyses.References)">
            <summary cref="M:ILGPU.IR.Analyses.Landscape`1.IDataProvider.GetData(ILGPU.IR.Method,ILGPU.IR.Analyses.References)"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape.Create(ILGPU.IR.MethodCollection@)">
            <summary>
            Creates a function structure instance.
            </summary>
            <param name="methods">The source methods.</param>
            <returns>The created function structure object.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape.Create``2(ILGPU.IR.MethodCollection@,``1@)">
            <summary>
            Creates a function structure instance.
            </summary>
            <typeparam name="T">The custom information type.</typeparam>
            <typeparam name="TDataProvider">The custom data provider type.</typeparam>
            <param name="methods">The source methods.</param>
            <param name="dataProvider">A custom data provider.</param>
            <returns>The created function structure object.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Landscape.#ctor">
            <summary>
            Constructs a new function structure instance.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.LoopInfo`2">
            <summary>
            A simple loop info object.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.LoopInfo`2.ExitSuccessorProvider">
            <summary>
            A specialized successor provider for loop regions that exclude the exit
            block of a particular loop. This emulates a return exit block without any
            successors.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.ExitSuccessorProvider.#ctor(ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new successor provider.
            </summary>
            <param name="exitBlock">The exit block.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.ExitSuccessorProvider.ExitBlock">
            <summary>
            Returns the unique exit block (the first block that does not belong to
            the loop).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.ExitSuccessorProvider.GetSuccessors(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the successors of the given basic block that do not contain the
            loop's exit block.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.LoopInfo`2.ExitAndHeaderSuccessorProvider">
            <summary>
            A specialized successor provider for loop regions that exclude the exit and
            the header blocks of a particular loop. This emulates a return exit block
            without any successors.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.ExitAndHeaderSuccessorProvider.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new successor provider.
            </summary>
            <param name="exitBlock">The exit block.</param>
            <param name="headerBlock">The header block.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.ExitAndHeaderSuccessorProvider.HeaderBlock">
            <summary>
            Returns the unique header block (the first block that belongs to the
            loop).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.ExitAndHeaderSuccessorProvider.GetSuccessors(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the successors of the given basic block that do not contain the
            loop's exit block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.Create(ILGPU.IR.Analyses.Loops{`0,`1}.Node)">
            <summary>
            Creates a new loop info instance from the given SCC while checking for
            unique entry and exit blocks.
            </summary>
            <param name="loop">The SCC.</param>
            <returns>The resolved loop info instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.TryCreate(ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.IR.Analyses.LoopInfo{`0,`1}@)">
            <summary>
            Tries to create a new loop info instance from the given SCC while checking
            for unique entry and exit blocks.
            </summary>
            <param name="loop">The SCC.</param>
            <param name="loopInfo">The resolved loop info object (if any).</param>
            <returns>True, if the resulting loop info object could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.TryGetLoopBody(ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.IR.BasicBlock@,System.Boolean@)">
            <summary>
            Tries to determine a unique body start block.
            </summary>
            <param name="loop">The parent loop.</param>
            <param name="body">The loop body (if any).</param>
            <param name="isDoWhileLoop">
            True, if the body is executed in all cases.
            </param>
            <returns>True, if the given loop body could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.TryGetPhis(ILGPU.IR.Analyses.Loops{`0,`1}.Node,System.Boolean,ILGPU.Util.InlineList{ILGPU.IR.Analyses.InductionVariable}@,ILGPU.Util.InlineList{System.ValueTuple{ILGPU.IR.Values.PhiValue,ILGPU.IR.Value}}@)">
            <summary>
            Tries to get all induction variables and supported phi values of the given
            loop object.
            </summary>
            <param name="loop">The parent loop.</param>
            <param name="isDoWhileLoop">
            True, if the body is executed in all cases.
            </param>
            <param name="inductionVariables">The list of induction variables.</param>
            <param name="phiValues">The list of phi values.</param>
            <returns>True, if the given loop has supported phi values.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.TryGetPhiOperands(ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.IR.Values.PhiValue,ILGPU.IR.Value@,ILGPU.IR.Value@)">
            <summary>
            Tries to determine the inside and outside operands of the given phi value.
            </summary>
            <param name="loop">The parent loop.</param>
            <param name="phiValue">The phi value.</param>
            <param name="insideOperand">The inside operand (if any).</param>
            <param name="outsideOperand">The outside operand (if any).</param>
            <returns>True, if both operands could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.IsInductionVariable(ILGPU.IR.Value,ILGPU.IR.Values.PhiValue@)">
            <summary>
            Returns true if the given value is an induction variable.
            </summary>
            <param name="value">The value to test.</param>
            <param name="phiValue">The resolved induction-variable phi (if any)..</param>
            <returns>True, if the given node is an induction-variable branch.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.IsInductionVariableModifiedOnce(ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.IR.Values.PhiValue,ILGPU.IR.Value,System.Collections.Generic.HashSet{ILGPU.IR.Value})">
            <summary>
            Checks whether an induction variable is modified in more than one place. If
            this is the case, this function returns false.
            </summary>
            <param name="loop">The parent loop.</param>
            <param name="phiValue">The current phi value to check.</param>
            <param name="current">The current value to check.</param>
            <param name="visited">The set of all visited values.</param>
            <returns>
            True, if the induction variable is not "modified" in multiple places.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.IsInductionVariableModifiedOnceRecursive(ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.IR.Values.PhiValue,ILGPU.IR.Value,System.Collections.Generic.HashSet{ILGPU.IR.Value})">
            <summary>
            Checks whether an induction variable is modified in more than one place. If
            this is the case, this function returns false. It is implemented using
            recursion to traverse through all attached values.
            </summary>
            <param name="loop">The parent loop.</param>
            <param name="phiValue">The current phi value to check.</param>
            <param name="current">The current value to check.</param>
            <param name="visited">The set of all visited values.</param>
            <returns>
            True, if the induction variable is not "modified" in multiple places.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.#ctor(ILGPU.IR.Analyses.Loops{`0,`1}.Node@,ILGPU.IR.BasicBlock,System.Boolean,ILGPU.Util.InlineList{ILGPU.IR.Analyses.InductionVariable}@,ILGPU.Util.InlineList{System.ValueTuple{ILGPU.IR.Values.PhiValue,ILGPU.IR.Value}}@)">
            <summary>
            Constructs a new loop info instance.
            </summary>
            <param name="loop">The parent loop.</param>
            <param name="body">The start loop-body block.</param>
            <param name="isDoWhileLoop">
            True, if the body is executed in all cases.
            </param>
            <param name="variables">All induction variables.</param>
            <param name="values">All affected phi values.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.Loop">
            <summary>
            Returns the associated loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.Entry">
            <summary>
            Returns the unique predecessor that does not belong to the loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.Header">
            <summary>
            Returns the unique loop header that belongs to the loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.Body">
            <summary>
            Returns the body entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.IsDoWhileLoop">
            <summary>
            Returns true if the body is executed in all cases.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.Exit">
            <summary>
            Returns the unique exit block that does not belong to the loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.BackEdge">
            <summary>
            Returns the unique back-edge block that jumps to the loop header.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.InductionVariables">
            <summary>
            Returns all underlying induction variables.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfo`2.PhiValues">
            <summary>
            Returns all phi values that are referenced outside of this loop.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.Contains(ILGPU.IR.BasicBlock)">
            <summary>
            Checks whether the given block belongs to the associated SCC.
            </summary>
            <param name="block">The block to map to an SCC.</param>
            <returns>True, if the node belongs to the associated SCC.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.ComputeOrderedBlocks``1(ILGPU.IR.BasicBlock,``0@)">
            <summary>
            Computes an ordered collection of all blocks in this loop starting with the
            entry point.
            </summary>
            <typeparam name="TProvider">The provider implementation.</typeparam>
            <param name="entryPoint">The current entry point.</param>
            <param name="provider">The provider instance.</param>
            <returns>The computed block collection.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.ComputeOrderedBlocks">
            <summary>
            Computes a block ordering of all blocks in this loop.
            </summary>
            <returns>The computed block ordering.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfo`2.ComputeOrderedBodyBlocks">
            <summary>
            Computes a block ordering of all blocks in this loop.
            </summary>
            <returns>The computed block ordering.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.LoopInfos`2">
            <summary>
            Encapsulates <see cref="T:ILGPU.IR.Analyses.LoopInfo`2"/> instances.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos`2.Create(ILGPU.IR.Analyses.Loops{`0,`1})">
            <summary>
            Creates a new loop information container.
            </summary>
            <param name="loops">The source loops to use.</param>
            <returns>The created loop information container.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos`2.#ctor(ILGPU.IR.Analyses.Loops{`0,`1})">
            <summary>
            Constructs a new information instance.
            </summary>
            <param name="loops">The source loops.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.LoopInfos`2.Count">
            <summary>
            Returns the number of loop information objects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos`2.TryGetInfo(ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.IR.Analyses.LoopInfo{`0,`1}@)">
            <summary>
            Tries to get previously computed loop information for the given loop.
            </summary>
            <param name="loop">The loop to get the loop information for.</param>
            <param name="value">The resolved loop information (if any).</param>
            <returns>True, if a loop information instance could be found.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.LoopInfos">
            <summary>
            Helper utility for the class <see cref="T:ILGPU.IR.Analyses.LoopInfo`2"/> and the
            structure <see cref="T:ILGPU.IR.Analyses.LoopInfos`2"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos.TryGetLoopInfo``2(ILGPU.IR.Analyses.Loops{``0,``1}.Node,ILGPU.IR.Analyses.LoopInfo{``0,``1}@)">
            <summary>
            Creates a new loop analysis instance based on the given CFG.
            </summary>
            <typeparam name="TOrder">The underlying block order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="loop">The underlying loop entry.</param>
            <param name="loopInfo">The resolved loop information (if any).</param>
            <returns>The created loop analysis.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.LoopInfos.CreateLoopInfos``2(ILGPU.IR.Analyses.Loops{``0,``1})">
            <summary>
            Creates a new aggregated structure containing precomputed loop information.
            </summary>
            <typeparam name="TOrder">The underlying block order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="loops">The source loops to use.</param>
            <returns>The created loop information object.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.InductionVariableOperation`1">
            <summary>
            Represents an operation that works on an induction variable.
            </summary>
            <typeparam name="T">The operation kind.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableOperation`1.Index">
            <summary>
            Returns the operand index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableOperation`1.Value">
            <summary>
            Returns the associated constant value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableOperation`1.Kind">
            <summary>
            Returns the kind of the operation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableOperation`1.IsLeft">
            <summary>
            Returns true if the constant operand value is on the left.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.InductionVariableBounds">
            <summary>
            Represents variable bounds of an induction variable.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.InductionVariableBounds.UpdateOperationKind">
            <summary>
            The kind of an update operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.InductionVariableBounds.UpdateOperationKind.None">
            <summary>
            No known kind.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.InductionVariableBounds.UpdateOperationKind.Down">
            <summary>
            A subtract operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.InductionVariableBounds.UpdateOperationKind.Up">
            <summary>
            An add operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.InductionVariableBounds.UpdateOperationKind.DownMultiplied">
            <summary>
            A divide operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.InductionVariableBounds.UpdateOperationKind.UpMultiplied">
            <summary>
            A multiply operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.InductionVariableBounds.UpdateOperationKind.DownMultiplied2">
            <summary>
            A shift-right operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.InductionVariableBounds.UpdateOperationKind.UpMultiplied2">
            <summary>
            A shift-left operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariableBounds.TryGetIntegerBound(ILGPU.IR.Value)">
            <summary>
            Tries to map a loop variable to an integer constant.
            </summary>
            <param name="value">The value to map to an integer bound.</param>
            <returns>The mapped integer (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariableBounds.#ctor(ILGPU.IR.Value,ILGPU.IR.Analyses.InductionVariableOperation{ILGPU.IR.Values.BinaryArithmeticKind},ILGPU.IR.Analyses.InductionVariableOperation{ILGPU.IR.Values.CompareKind},System.Boolean)">
            <summary>
            Constructs a new induction-variable bounds.
            </summary>
            <param name="init">The initialization value.</param>
            <param name="updateOperation">The update operation.</param>
            <param name="breakOperation">The break operation.</param>
            <param name="isDoWhileLoop">
            True, if the current loop is a do-while loop.
            </param>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.Init">
            <summary>
            The initialization value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.UpdateValue">
            <summary>
            Returns the update value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.BreakValue">
            <summary>
            Returns the break value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.IsDoWhileLoop">
            <summary>
            Returns true if the current loop is a do-while loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.UpdateOperation">
            <summary>
            The update kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.UpdateKind">
            <summary>
            Returns the kind of the update operation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariableBounds.BreakOperation">
            <summary>
            The break kind.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariableBounds.GetIntegerBounds">
            <summary>
            Tries to get integer bounds for all loop variables.
            </summary>
            <returns>The determined integer-based loop bounds.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariableBounds.IsWhileLoopEntered(System.Int32,System.Int32)">
            <summary>
            Returns true if the current loop is entered using the initial and break
            values provided while assuming it is while loop.
            </summary>
            <param name="initVal">The initial value.</param>
            <param name="breakVal">The break-condition value.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariableBounds.TryGetTripCount(System.ValueTuple{System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32}}@)">
            <summary>
            Tries to compute the trip count of the loop.
            </summary>
            <param name="intBounds"></param>
            <returns></returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.InductionVariable">
            <summary>
            A single induction variable.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariable.#ctor(System.Int32,ILGPU.IR.Values.PhiValue,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.ConditionalBranch,System.Boolean)">
            <summary>
            Constructs a new induction variable.
            </summary>
            <param name="index">The variable index.</param>
            <param name="phi">The phi node.</param>
            <param name="init">The init value.</param>
            <param name="update">The update value.</param>
            <param name="breakBranch">The branch that breaks the loop.</param>
            <param name="isDoWhileLoop">
            True, if the current loop is a do-while loop.
            </param>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.Index">
            <summary>
            Returns the variable index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.Phi">
            <summary>
            Returns the associated phi value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.Init">
            <summary>
            Returns a link to the init expression.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.Update">
            <summary>
            Returns a link to the update expression.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.BreakCondition">
            <summary>
            Returns a link to the break-condition expression.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.BreakBranch">
            <summary>
            Returns the branch that actually breaks the loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.InductionVariable.IsDoWhileLoop">
            <summary>
            Returns true if the current loop is a do-while loop.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariable.TryResolveUpdateOperation(ILGPU.IR.Analyses.InductionVariableOperation{ILGPU.IR.Values.BinaryArithmeticKind}@)">
            <summary>
            Tries to resolve a known update operation.
            </summary>
            <param name="updateOperation">The resolved update operation.</param>
            <returns>True, if a known operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariable.TryResolveBreakOperation(ILGPU.IR.Analyses.InductionVariableOperation{ILGPU.IR.Values.CompareKind}@)">
            <summary>
            Tries to resolve a known break operation.
            </summary>
            <param name="breakOperation">The resolved break operation.</param>
            <returns>True, if a known operation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.InductionVariable.TryResolveBounds(ILGPU.IR.Analyses.InductionVariableBounds@)">
            <summary>
            Tries to resolve the related loop bounds.
            </summary>
            <param name="bounds">The resolved loop bounds (if any).</param>
            <returns>True, if the bounds could be resoled.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2">
            <summary>
            An analysis to detect strongly-connected components.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2.ILoopProcessor">
            <summary>
            Represents an abstract loop processor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.ILoopProcessor.Process(ILGPU.IR.Analyses.Loops{`0,`1}.Node)">
            <summary>
            Processes the given loop.
            </summary>
            <param name="node">The current loop node.</param>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2.MembersSuccessorProvider`1">
            <summary>
            A specialized successor provider for loop members that exclude all exit
            blocks of an associated loop.
            </summary>
            <typeparam name="TOtherDirection">The target direction.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.MembersSuccessorProvider`1.#ctor(ILGPU.IR.Analyses.Loops{`0,`1}.Node)">
            <summary>
            Constructs a new successor provider.
            </summary>
            <param name="node">The loop node.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.MembersSuccessorProvider`1.Node">
            <summary>
            Returns the associated loop node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.MembersSuccessorProvider`1.GetSuccessors(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the successors of the given basic block that do not contain any
            of the associated loop exit blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.MembersSuccessorProvider`1.AdjustEntrySuccessors(System.ReadOnlySpan{ILGPU.IR.BasicBlock})">
            <summary>
            Helper function to adjust the header span of the current successors.
            </summary>
            <param name="currentSuccessors">The current successors.</param>
            <returns>The adjusted span that contains header blocks only.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.MembersSuccessorProvider`1.AdjustExitSuccessors(System.ReadOnlySpan{ILGPU.IR.BasicBlock})">
            <summary>
            Helper function to adjust the exit span of the current successors.
            </summary>
            <param name="currentSuccessors">The current successors.</param>
            <returns>The adjusted span without any exit block.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2.Node">
            <summary>
            Represents a single strongly-connected component.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.Loops`2.Node.children">
            <summary>
            All child nodes (if any).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.#ctor(ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@,ILGPU.IR.BasicBlockSetList@,System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock},System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock})">
            <summary>
            Constructs a new loop node.
            </summary>
            <param name="parent">The parent loop.</param>
            <param name="headerBlocks">All loop headers.</param>
            <param name="breakerBlocks">All blocks that can break the loop.</param>
            <param name="backEdgeBlocks">All blocks with back edges.</param>
            <param name="members">All blocks in the scope of this loop.</param>
            <param name="entries">All entry block that jump into this loop.</param>
            <param name="exits">All exit block that this loop can jump to.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Count">
            <summary>
            Returns the number of members.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.BackEdges">
            <summary>
            Returns the block containing the associated back edge.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Headers">
            <summary>
            Returns all loop headers.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Breakers">
            <summary>
            Returns all loop breakers that contain branches to exit the loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Entries">
            <summary>
            All entry blocks that jump into the loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Exits">
            <summary>
            All exit blocks that are reachable by all breakers from the loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Parent">
            <summary>
            Returns the parent loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.Children">
            <summary>
            Returns all child loops.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.IsNestedLoop">
            <summary>
            Returns true if this is a nested loop
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.IsInnermostLoop">
            <summary>
            Returns true if this is an innermost loop.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Node.AllMembers">
            <summary>
            Returns the set list of all members.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.Contains(ILGPU.IR.BasicBlock)">
            <summary>
            Checks whether the given block belongs to this loop.
            </summary>
            <param name="block">The block to map to an loop.</param>
            <returns>True, if the node belongs to this loop.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.ContainsExclusively(ILGPU.IR.BasicBlock)">
            <summary>
            Checks whether the given block belongs to this loop and not to a
            (potentially) nested child loop.
            </summary>
            <param name="block">The block to map to an loop.</param>
            <returns>
            True, if the node belongs to this loop and not a potentially nested child
            node.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.ComputePhis">
            <summary>
            Resolves all <see cref="T:ILGPU.IR.Values.PhiValue"/>s that are contained in this loop and
            in no other potentially nested child loop.
            </summary>
            <returns>The list of resolved phi values.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.ContainsBackedgeBlock(System.ReadOnlySpan{ILGPU.IR.BasicBlock})">
            <summary>
            Returns true if the given blocks contain at least one backedge block.
            </summary>
            <param name="blocks">The blocks to test.</param>
            <returns>
            True, if the given block contain at least one backedge block.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.ConsistsOfBodyBlocks(System.ReadOnlySpan{ILGPU.IR.BasicBlock})">
            <summary>
            Returns true if the given blocks consists of exclusive body blocks only.
            </summary>
            <param name="blocks">The blocks to test.</param>
            <returns>
            True, if the given blocks consists of exclusive body blocks only.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.AddChild(ILGPU.IR.Analyses.Loops{`0,`1}.Node)">
            <summary>
            Adds the given child node.
            </summary>
            <param name="child">The child node to add.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.ComputeOrderedBlocks(System.Int32)">
            <summary>
            Computes a block ordering of all blocks in this loop using the current
            order and control-flow direction.
            </summary>
            <returns>The computed block ordering.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Node.ComputeOrderedBlocks``2(System.Int32)">
            <summary>
            Computes a block ordering of all blocks in this loop.
            </summary>
            <typeparam name="TOtherOrder">The other order.</typeparam>
            <typeparam name="TOtherDirection">The target direction.</typeparam>
            <returns>The computed block ordering.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2.Enumerator">
            <summary>
            An enumerator to iterate over all loops.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Enumerator.#ctor(System.Collections.Generic.List{ILGPU.IR.Analyses.Loops{`0,`1}.Node})">
            <summary>
            Constructs a new node enumerator.
            </summary>
            <param name="nodes">The nodes to iterate over.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Enumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2.NodeData">
            <summary>
            Represents node data that is required for Tarjan's algorithm.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.NodeData.Pop(System.Collections.Generic.List{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData})">
            <summary>
            Pops a new data element.
            </summary>
            <param name="stack">The source stack to pop from.</param>
            <returns>The popped node data.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.NodeData.#ctor(ILGPU.IR.Analyses.CFG{`0,`1}.Node@)">
            <summary>
            Constructs a new data instance.
            </summary>
            <param name="node">The CFG node.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeData.Node">
            <summary>
            Returns the associated node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeData.Index">
            <summary>
            The associated loop index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeData.LowLink">
            <summary>
            The associated loop low link.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeData.OnStack">
            <summary>
            Return true if the associated node is on the stack.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeData.IsInSCC">
            <summary>
            Returns true if the current block is a header.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeData.IsHeader">
            <summary>
            Returns true if the current block is a header.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeData.HasIndex">
            <summary>
            Returns true if the index has been initialized.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.NodeData.Clear">
            <summary>
            Clears all internal links.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.NodeData.Push(System.Collections.Generic.List{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData},System.Int32@)">
            <summary>
            Pushes the current node onto the processing stack.
            </summary>
            <param name="stack">The processing stack.</param>
            <param name="index">The current traversal index.</param>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2.NodeListProvider">
            <summary>
            Provides new intermediate <see cref="T:ILGPU.IR.Analyses.Loops`2.NodeData"/> list instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.NodeListProvider.GetValue(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Creates a new <see cref="T:ILGPU.IR.Analyses.Loops`2.NodeData"/> instance.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops`2.NodeDataProvider">
            <summary>
            Provides new intermediate <see cref="T:ILGPU.IR.Analyses.Loops`2.NodeData"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.NodeDataProvider.#ctor(ILGPU.IR.Analyses.CFG{`0,`1})">
            <summary>
            Constructs a new data provider.
            </summary>
            <param name="cfg">The underlying CFG.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.NodeDataProvider.CFG">
            <summary>
            Returns the underlying CFG.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.NodeDataProvider.GetValue(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Creates a new <see cref="T:ILGPU.IR.Analyses.Loops`2.NodeData"/> instance.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.IsLoop(System.Collections.Generic.List{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData},ILGPU.IR.BasicBlockMap{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData},ILGPU.IR.Analyses.Loops{`0,`1}.NodeData,System.Int32@)">
            <summary>
            Returns true if this is a loop.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.Create(ILGPU.IR.Analyses.CFG{`0,`1})">
            <summary>
            Creates a new loop analysis.
            </summary>
            <param name="cfg">The underlying source CFG.</param>
            <returns>The created loop analysis.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.#ctor(ILGPU.IR.Analyses.CFG{`0,`1})">
            <summary>
            Constructs a new collection of loops.
            </summary>
            <param name="cfg">The source CFG.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.CFG">
            <summary>
            Returns the underlying CFG.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Blocks">
            <summary>
            Returns all underlying blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Count">
            <summary>
            Returns the number of loops.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Item(System.Int32)">
            <summary>
            Returns the i-th loop.
            </summary>
            <param name="index">The index of the i-th loop.</param>
            <returns>The resolved loop.</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.Loops`2.Headers">
            <summary>
            Returns all loop headers.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.StrongConnect(System.Collections.Generic.List{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData},ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.IR.BasicBlockMap{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData}@,ILGPU.IR.Analyses.Loops{`0,`1}.NodeData,System.Int32@)">
            <summary>
            The modified heart of Tarjan's SCC algorithm.
            </summary>
            <param name="stack">The current processing stack.</param>
            <param name="parent">The parent loop.</param>
            <param name="nodeMapping">The current node mapping.</param>
            <param name="v">The current node.</param>
            <param name="index">The current index value.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.RegisterLoop(System.Collections.Generic.List{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData},ILGPU.IR.Analyses.Loops{`0,`1}.Node,ILGPU.IR.BasicBlockMap{ILGPU.IR.Analyses.Loops{`0,`1}.NodeData}@,ILGPU.IR.Analyses.Loops{`0,`1}.NodeData)">
            <summary>
            Registers a new loop entry (if possible).
            </summary>
            <param name="stack">The current processing stack.</param>
            <param name="parent">The parent loop.</param>
            <param name="nodeMapping">The current node mapping.</param>
            <param name="v">The current node.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.TryGetLoops(ILGPU.IR.BasicBlock,ILGPU.IR.Analyses.Loops{`0,`1}.Node@)">
            <summary>
            Tries to resolve the given block to an associated innermost loop.
            </summary>
            <param name="block">The block to map to a loop.</param>
            <param name="loop">The resulting loop.</param>
            <returns>True, if the node could be resolved to a loop.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.ProcessLoops``1(``0)">
            <summary>
            Processes all loops starting with the innermost loops.
            </summary>
            <typeparam name="TProcessor">The processor type.</typeparam>
            <param name="processor">The processor instance.</param>
            <returns>The resulting processor instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.ProcessLoopsRecursive``1(ILGPU.IR.Analyses.Loops{`0,`1}.Node,``0@)">
            <summary>
            Unrolls loops in a recursive way by unrolling the innermost loops first.
            </summary>
            <typeparam name="TProcessor">The processor type.</typeparam>
            <param name="loop">The current loop node.</param>
            <param name="processor">The processor instance.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over all loops.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Loops">
            <summary>
            Utility methods for the <see cref="T:ILGPU.IR.Analyses.Loops`2"/> analysis.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Loops.CreateLoops``2(ILGPU.IR.Analyses.CFG{``0,``1})">
            <summary>
            Creates a new loops analysis instance based on the given CFG.
            </summary>
            <typeparam name="TOrder">The underlying block order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="cfg">The underlying CFG.</param>
            <returns>The created loops analysis.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.IMovementScope">
            <summary>
            Represents a scope in which values can be moved around.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.IMovementScope.TryFindFirstValueOf``1(ILGPU.IR.BasicBlock,System.Predicate{``0},System.ValueTuple{System.Int32,``0}@)">
            <summary>
            Tries to find the first value of the given type that fulfills the given
            predicate in the given block.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="basicBlock">The basic block to look into.</param>
            <param name="predicate">The predicate.</param>
            <param name="entry">
            The result pair consisting of a value index and the matched value itself.
            </param>
            <returns>True, if a value could be matched.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Movement`1">
            <summary>
            Tracks and validates potential movement of values with side effects to different
            blocks. Reasoning about movement of side effect values makes several program
            analyses significantly smarter and more aggressive.
            </summary>
            <typeparam name="TScope">
            The movement scope in which values can be moved around.
            </typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.Movement`1.CanSkipAddressSpace(ILGPU.IR.MemoryAddressSpace,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Returns true if a value operating on the current address space can skip a
            different value operating on the different address space.
            </summary>
            <param name="currentAddressSpace">
            The address space the current value operates on.
            </param>
            <param name="addressSpaceToSkip">
            The address space the other value operates on.
            </param>
            <returns>
            True, if the other value can be skipped based on the address space.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Movement`1.CanSkip(ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Values.MemoryValue)">
            <summary>
            Returns true if an operation working on the current address space can skip
            the given memory value.
            </summary>
            <param name="currentAddressSpace">
            The address space the current value operates on.
            </param>
            <param name="toSkip">The memory value to skip.</param>
            <returns>
            True, if the value to skip can be skipped without breaking the semantics of
            the program.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Movement`1.CanSkip(ILGPU.IR.Values.MemoryValue,ILGPU.IR.Values.MemoryValue)">
            <summary>
            Returns true if the current memory value can skip the value passed in
            <paramref name="toSkip"/>.
            </summary>
            <param name="memoryValue">The memory value to move.</param>
            <param name="toSkip">The value to skip.</param>
            <returns>
            True, if the current value can skip the other memory value without breaking
            the semantics of the program.
            </returns>
        </member>
        <member name="F:ILGPU.IR.Analyses.Movement`1.valueBlocks">
            <summary>
            Maps side effect values to their original source blocks in which they
            have been defined
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.Movement`1.values">
            <summary>
            Stores all memory values according to the reverse post order.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.Movement`1.valueIndices">
            <summary>
            Maps all memory values to their global indices in the <see cref="F:ILGPU.IR.Analyses.Movement`1.values"/>
            list determined by a reverse-post-order search.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.Movement`1.blockRanges">
            <summary>
            Stores all end indices of all blocks pointing to offsets in the
            <see cref="F:ILGPU.IR.Analyses.Movement`1.values"/> list.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Movement`1.#ctor(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,`0)">
            <summary>
            Constructs a new movement analysis.
            </summary>
            <param name="blocks">The source blocks.</param>
            <param name="scope">The parent scope.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Movement`1.Scope">
            <summary>
            Returns the underlying movement scope.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Movement`1.Method">
            <summary>
            Returns the current method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Movement`1.Dominators">
            <summary>
            Returns the dominators of the current method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Movement`1.PostDominators">
            <summary>
            Returns the post dominators of the current method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Movement`1.CanMoveGenericValue(ILGPU.IR.Value)">
            <summary>
            Returns true if the given generic value can be moved within the method.
            </summary>
            <param name="value">The value to test.</param>
            <returns>
            True, if the given value can be moved to a different block.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Movement`1.CanMoveSideEffectValue(ILGPU.IR.Values.SideEffectValue,ILGPU.IR.BasicBlock)">
            <summary>
            Tests whether the given value (with side effects) can be moved to the
            specified target block.
            </summary>
            <param name="value">The value to move to the target block.</param>
            <param name="targetBlock">The target block to move the value to.</param>
            <returns>True, if we can move the value to the target block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Movement`1.CanMoveTo(ILGPU.IR.Value,ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given value can be moved to a different block. This is
            the case if we reach a node without side effects or phi values that
            belongs to the same method. Alternatively, this might be a value with
            side effects. In this case, we validate if this can change the current
            program semantics.
            </summary>
            <param name="value">The value to be moved to the target block.</param>
            <param name="targetBlock">The target movement block.</param>
            <returns>
            True, if the given value can be moved to the target block given by the
            placement entry.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Phis">
            <summary>
            Gathers all phis in a basic block.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Phis.Builder">
            <summary>
            The builder class for the <see cref="T:ILGPU.IR.Analyses.Phis"/> analysis.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Builder.#ctor(ILGPU.IR.Method)">
            <summary>
            Constructs a new internal builder.
            </summary>
            <param name="method">The parent method.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Phis.Builder.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Builder.Add(ILGPU.IR.Values.PhiValue)">
            <summary>
            Adds the given phi value to the list.
            </summary>
            <param name="phiValue">The phi value to add.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Builder.Add(ILGPU.IR.BasicBlock)">
            <summary>
            Adds all phi values in the given block.
            </summary>
            <param name="block">The block to analyze.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Builder.Add``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Adds all phi values in the given block collection.
            </summary>
            <param name="blocks">The blocks to analyze.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Builder.Seal">
            <summary>
            Seals the current builder and creates a <see cref="T:ILGPU.IR.Analyses.Phis"/> instance.
            </summary>
            <returns>The created <see cref="T:ILGPU.IR.Analyses.Phis"/> instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.CreateBuilder(ILGPU.IR.Method)">
            <summary>
            Creates a new builder.
            </summary>
            <param name="method">The parent method to use.</param>
            <returns>The created analysis builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Create``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Resolves all phi values in the given block collection.
            </summary>
            <param name="blocks">The blocks to analyze.</param>
            <returns>The resolved phis.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.Create(ILGPU.IR.BasicBlock)">
            <summary>
            Resolves all phi values in the given block.
            </summary>
            <param name="block">The source block.</param>
            <returns>The resolved phis.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.#ctor(ILGPU.IR.Method,System.ReadOnlySpan{ILGPU.IR.Values.PhiValue})">
            <summary>
            Constructs a new Phis instance.
            </summary>
            <param name="method">The parent method.</param>
            <param name="phiValues">All detected phi values.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Phis.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Phis.Values">
            <summary>
            Returns all phi values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Phis.Count">
            <summary>
            Returns the number of phi values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Phis.Item(System.Int32)">
            <summary>
            Returns the i-th phi value.
            </summary>
            <param name="index">The phi value index.</param>
            <returns>The resolved phi value.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.GetEnumerator">
            <summary>
            Returns a phi-value enumerator.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Phis.op_Implicit(ILGPU.IR.Analyses.Phis)~System.ReadOnlySpan{ILGPU.IR.Values.PhiValue}">
            <summary>
            Implicitly converts the given instance into a span.
            </summary>
            <param name="phis">The phi anlysis instance to convert.</param>
        </member>
        <member name="T:ILGPU.IR.Analyses.PhiValueExtensions">
            <summary>
            Analysis extensions for <see cref="T:ILGPU.IR.Values.PhiValue"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PhiValueExtensions.ComputePhiSources``2(ILGPU.IR.BasicBlockCollection{``0,``1})">
            <summary>
            Gathers all phi source blocks.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="blocks">The blocks to use.</param>
            <returns>All phi value source blocks.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAddressSpaces">
            <summary>
            An analysis to determine safe address-space information for all values.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAddressSpaces.AnalysisFlags">
            <summary>
            The analysis flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAddressSpaces.AnalysisFlags.None">
            <summary>
            Performs a conservative analysis.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAddressSpaces.AnalysisFlags.IgnoreGenericAddressSpace">
            <summary>
            Ignores generic address-space types during the analysis.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags">
            <summary>
            Represents different address spaces that can coexist via flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags.None">
            <summary>
            No specific address spaces.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags.Generic">
            <summary cref="F:ILGPU.IR.MemoryAddressSpace.Generic"/>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags.Global">
            <summary cref="F:ILGPU.IR.MemoryAddressSpace.Global"/>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags.Shared">
            <summary cref="F:ILGPU.IR.MemoryAddressSpace.Shared"/>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags.Local">
            <summary cref="F:ILGPU.IR.MemoryAddressSpace.Local"/>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo">
            <summary>
            An internal address-space information object used to manage
            <see cref="T:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags"/> flags.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Enumerator">
            <summary>
            Iterates over all internally stored address spaces.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Enumerator.Info">
            <summary>
            Returns the parent flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Enumerator.Current">
            <summary>
            Returns the current address space.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.FromType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Determines an address-space information instance based on type
            information.
            </summary>
            <param name="type">The source type.</param>
            <returns>
            The resolved address-space information for the given type.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.AnalysisValueFromType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates an <see cref="T:ILGPU.IR.Analyses.AnalysisValue`1"/> instance based on the given
            type information.
            information.
            </summary>
            <param name="type">The source type.</param>
            <returns>
            The resolved analysis value holding detailed address-space information
            for the given type.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Merge(ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo,ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo)">
            <summary>
            Merges two information objects.
            </summary>
            <param name="first">The first info object.</param>
            <param name="second">The second info object.</param>
            <returns>
            Merged address space information based on both operands.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.#ctor(ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags)">
            <summary>
            Constructs a new address-space information object.
            </summary>
            <param name="flags">The associated flags.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Flags">
            <summary>
            Returns the underlying address-space flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.UnifiedAddressSpace">
            <summary>
            Returns the most generic address space that is compatible with all
            internally gathered address spaces.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.HasFlags(ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceFlags)">
            <summary>
            Returns true if the given flags are set.
            </summary>
            <param name="flags">The flags to test.</param>
            <returns>True, if the given flags are set.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.HasAddressSpace(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Returns true if the current instance is associated with the given
            address space.
            </summary>
            <param name="addressSpace">The address space to test.</param>
            <returns>
            True, if the current instance is associated with the given address space.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Equals(ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo)">
            <summary>
            Returns true if the given info object is equal to the current instance.
            </summary>
            <param name="other">The other info object.</param>
            <returns>
            True, if the given info object is equal to the current instance.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.GetEnumerator">
            <summary>
            Returns an enumerator to iterate over all address spaces.
            </summary>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current instance.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current instance.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.GetHashCode">
            <summary>
            Returns the hash code of this instance.
            </summary>
            <returns>The hash code of this instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.op_Implicit(System.Nullable{ILGPU.IR.MemoryAddressSpace})~ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo">
            <summary>
            Converts nullable <see cref="T:ILGPU.IR.MemoryAddressSpace"/> values to information
            instances.
            </summary>
            <param name="addressSpace">The address space to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.op_Equality(ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo,ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo)">
            <summary>
            Returns true if the first and second information instances are the same.
            </summary>
            <param name="first">The first instance.</param>
            <param name="second">The second instance.</param>
            <returns>True, if the first and second instances are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo.op_Inequality(ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo,ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo)">
            <summary>
            Returns true if the first and second information instances are not the
            same.
            </summary>
            <param name="first">The first instance.</param>
            <param name="second">The second instance.</param>
            <returns>
            True, if the first and second instances are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAddressSpaces.ConstParameterValueContext">
            <summary>
            An implementation of an <see cref="T:ILGPU.IR.Analyses.IAnalysisValueSourceContext`1"/> that
            provides initial <see cref="T:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo"/> information for each
            parameter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.ConstParameterValueContext.#ctor(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new parameter value context.
            </summary>
            <param name="addressSpace">
            The target address space to use for each parameter.
            </param>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAddressSpaces.ConstParameterValueContext.AddressSpace">
            <summary>
            Returns the target address space to use for each parameter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.ConstParameterValueContext.GetInitialAddressSpace(ILGPU.IR.Value)">
            <summary>
            Returns the initial <see cref="T:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo"/> for the given value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAddressSpaces.ConstParameterValueContext.Item(ILGPU.IR.Value)">
            <summary>
            Returns address-space information based on <see cref="P:ILGPU.IR.Analyses.PointerAddressSpaces.ConstParameterValueContext.AddressSpace"/>
            in the case of a parameter.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAddressSpaces.AutomaticParameterValueContext">
            <summary>
            An implementation of an <see cref="T:ILGPU.IR.Analyses.IAnalysisValueSourceContext`1"/> that
            provides initial <see cref="T:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo"/> information for each
            parameter using an automated deduction phase.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAddressSpaces.AutomaticParameterValueContext.Item(ILGPU.IR.Value)">
            <summary>
            Returns <see cref="T:ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo"/> instances based on the
            automatically determined address-space type information from each
            parameter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.Create">
            <summary>
            Creates a new pointer analysis instance using the default analysis flags.
            </summary>
            <returns>The created analysis instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.Create(ILGPU.IR.Analyses.PointerAddressSpaces.AnalysisFlags)">
            <summary>
            Creates a new pointer analysis instance.
            </summary>
            <param name="flags">The analysis flags.</param>
            <returns>The created analysis instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.#ctor(ILGPU.IR.Analyses.PointerAddressSpaces.AnalysisFlags)">
            <summary>
            Constructs a new analysis implementation.
            </summary>
            <param name="flags">The analysis flags.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAddressSpaces.Flags">
            <summary>
            Returns the current analysis flags.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.HasFlags(ILGPU.IR.Analyses.PointerAddressSpaces.AnalysisFlags)">
            <summary>
            Returns true if the analysis has the given flags.
            </summary>
            <param name="flags">The flags.</param>
            <returns>True, if the analysis has the given flags.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.GetInitialInfo(ILGPU.IR.Value)">
            <summary>
            Returns initial and address space information.
            </summary>
            <param name="node">The IR node.</param>
            <returns>The initial address space information.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.CreateData(ILGPU.IR.Value)">
            <summary>
            Creates initial analysis data.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.Merge(ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo,ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo)">
            <summary>
            Returns the unified address-space flags.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.TryMerge``1(ILGPU.IR.Value,``0)">
            <summary>
            Returns no analysis value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAddressSpaces.TryProvide(ILGPU.IR.Types.TypeNode)">
            <summary>
            Tries to convert the given type into an <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>
            and returns the determined address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAlignments">
            <summary>
            An analysis to determine safe alignment information for all pointer values.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.PointerAlignments.AlignmentInfo">
            <summary>
            Stores alignment information of an alignment analysis run.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.PointerAlignments.AlignmentInfo.Empty">
            <summary>
            Empty allocation information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.AlignmentInfo.#ctor(ILGPU.IR.Analyses.GlobalAnalysisValueResult{System.Int32})">
            <summary>
            Constructs a new alignment analysis.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAlignments.AlignmentInfo.AnalysisResult">
            <summary>
            Stores a method value-alignment mapping.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAlignments.AlignmentInfo.Item(ILGPU.IR.Value)">
            <summary>
            Returns pointer alignment information for the given value.
            </summary>
            <param name="value">The value to get alignment information for.</param>
            <returns>Pointer alignment in bytes (can be 1 byte).</returns>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAlignments.AlignmentInfo.IsEmpty">
            <summary>
            Returns true if this alignment information object is empty.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.AlignmentInfo.GetAllocaAlignment(ILGPU.IR.Values.Alloca)">
            <summary>
            Returns the alignment information determined and used for the given
            alloca.
            </summary>
            <param name="alloca">
            The alloca to get the alignment information for.
            </param>
            <returns>The determined and used alignment in bytes.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.AlignmentInfo.GetAlignment(ILGPU.IR.Value,System.Int32)">
            <summary>
            Returns safe alignment information.
            </summary>
            <param name="value">
            The value for which to compute the alignment for.
            </param>
            <param name="safeMinAlignment">
            The safe minimum alignment in bytes.
            </param>
            <returns>The computed alignment.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.AlignmentInfo.GetAlignment(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode)">
            <summary>
            Returns safe alignment information.
            </summary>
            <param name="value">
            The value for which to compute the alignment for.
            </param>
            <param name="safeMinTypeAlignment">
            The safe minimum type alignment.
            </param>
            <returns>The computed alignment.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.Create(System.Int32)">
            <summary>
            Creates a new alignment analysis.
            </summary>
            <param name="globalAlignment">
            The initial alignment information of all pointers and views of the root
            method.
            </param>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.Apply(ILGPU.IR.Method,System.Int32)">
            <summary>
            Applies a new alignment analysis to the given root method.
            </summary>
            <param name="rootMethod">The root (entry) method.</param>
            <param name="globalAlignment">
            The initial alignment information of all pointers and views of the root
            method.
            </param>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.TryGetPowerOf2(ILGPU.IR.Values.UnaryArithmeticValue)">
            <summary>
            Tries to determine power of 2 information for the given unary operation.
            </summary>
            <param name="unary">The unary operation to analyze.</param>
            <returns>The power of 2 value (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.TryGetPowerOf2(ILGPU.IR.Values.BinaryArithmeticValue)">
            <summary>
            Tries to determine power of 2 information for the given binary operation.
            </summary>
            <param name="binary">The binary operation to analyze.</param>
            <returns>The power of 2 value (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.TryGetPowerOf2(ILGPU.IR.Value)">
            <summary>
            Tries to determine a power of 2 for the given value (if any could be
            determined).
            </summary>
            <param name="value">The value to analyze.</param>
            <returns>The power of 2 value (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.#ctor(System.Int32)">
            <summary>
            Constructs a new analysis implementation.
            </summary>
            <param name="globalAlignment">The global alignment information.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.PointerAlignments.GlobalAlignment">
            <summary>
            Returns the global alignment in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.GetInitialAlignment(ILGPU.IR.Value)">
            <summary>
            Returns initial and unconstrained alignment information.
            </summary>
            <param name="node">The IR node.</param>
            <returns>The initial alignment information.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.CreateData(ILGPU.IR.Value)">
            <summary>
            Creates initial analysis data.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.Merge(System.Int32,System.Int32)">
            <summary>
            Returns the minimum of the first and the second value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.TryProvide(ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates alignment information for global pointer and view types.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.MergeAlignmentValue``1(ILGPU.IR.Values.BaseAlignOperationValue,``0)">
            <summary>
            Computes merged alignment information of the given
            <see cref="T:ILGPU.IR.Values.BaseAlignOperationValue"/> node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.MergeLoadFieldAddress``1(ILGPU.IR.Values.LoadFieldAddress,``0)">
            <summary>
            Computes merged alignment information of the given
            <see cref="T:ILGPU.IR.Values.LoadFieldAddress"/> node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.MergeLoadElementAddress``1(ILGPU.IR.Values.LoadElementAddress,``0)">
            <summary>
            Computes merged alignment information of the given
            <see cref="T:ILGPU.IR.Values.LoadElementAddress"/> node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.PointerAlignments.TryMerge``1(ILGPU.IR.Value,``0)">
            <summary>
            Returns merged information about <see cref="T:ILGPU.IR.Values.LoadFieldAddress"/>,
            <see cref="T:ILGPU.IR.Values.LoadElementAddress"/> and <see cref="T:ILGPU.IR.Values.BaseAlignOperationValue"/> IR
            nodes.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.References">
            <summary>
            Represents references to other methods.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.References.Enumerator">
            <summary>
            Enumerates all references.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Enumerator.#ctor(ILGPU.IR.Analyses.References@)">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="references">The source references.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.Enumerator.Current">
            <summary>
            Returns the current function reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current" />
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext" />
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset" />
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose" />
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Create``1(ILGPU.IR.Method,``0@)">
            <summary>
            Computes all direct method references to all called methods.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <param name="method">The method.</param>
            <param name="predicate">The current predicate.</param>
            <returns>A references instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.Create``3(ILGPU.IR.BasicBlockCollection{``0,``1}@,``2)">
            <summary>
            Computes all direct method references to all called methods.
            </summary>
            <typeparam name="TOrder">The order collection.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <param name="collection">The block collection.</param>
            <param name="predicate">The current predicate.</param>
            <returns>A references instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.CreateRecursive``1(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards},``0)">
            <summary>
            Computes all direct and indirect method references to all called methods.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <param name="collection">The block collection.</param>
            <param name="predicate">The current predicate.</param>
            <returns>A references instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.#ctor(ILGPU.IR.Method,System.Collections.Generic.HashSet{ILGPU.IR.Method},System.Collections.Generic.List{ILGPU.IR.Method})">
            <summary>
            Constructs a references instance.
            </summary>
            <param name="method">The source method.</param>
            <param name="referenceSet">The set of all method references.</param>
            <param name="referenceList">The list of all method references.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.SourceMethod">
            <summary>
            Returns the associated source function.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.Count">
            <summary>
            Returns the number of function references.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.References.IsEmpty">
            <summary>
            Returns true if the number of function references is zero.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.HasReferenceTo(ILGPU.IR.Method)">
            <summary>
            Returns true if the given method is referenced.
            </summary>
            <param name="method">The method to test.</param>
            <returns>True, if the given method is referenced.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.References.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all method references.
            </summary>
            <returns>An enumerator to enumerate all method references.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState">
            <summary>
            A enumeration state of a generic traversal.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState.Index">
            <summary>
            The current enumeration index.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.ITraversalSuccessorsProvider`1">
            <summary>
            Provides successors for a given basic block.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ITraversalSuccessorsProvider`1.GetSuccessors(ILGPU.IR.BasicBlock)">
            <summary>
            Returns or computes successors of the given basic block.
            </summary>
            <param name="basicBlock">The source basic block.</param>
            <returns>The returned successor collection.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.ITraversalVisitor">
            <summary>
            A general traversal visitor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ITraversalVisitor.Visit(ILGPU.IR.BasicBlock)">
            <summary>
            Visits the given block.
            </summary>
            <param name="block">The block to visit.</param>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.TraversalCollectionVisitor`1">
            <summary>
            A generic collection visitor.
            </summary>
            <typeparam name="TCollection">The collection type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.TraversalCollectionVisitor`1.#ctor(`0)">
            <summary>
            Constructs a new collection visitor.
            </summary>
            <param name="collection">The target collection.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.TraversalOrders.TraversalCollectionVisitor`1.Collection">
            <summary>
            Returns the target collection to add the elements to.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.TraversalCollectionVisitor`1.Visit(ILGPU.IR.BasicBlock)">
            <summary>
            Adds the given block to the target collection.
            </summary>
            <param name="block">The block to add.</param>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.ITraversalOrder">
            <summary>
            A generic traversal order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ITraversalOrder.Init``1(``0)">
            <summary>
            Initializes a new enumeration state.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ITraversalOrder.MoveNext``1(``0,ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState@)">
            <summary>
            Tries to move the state to the next block.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
            <param name="state">The current enumeration state.</param>
            <returns>True, if there is a next block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ITraversalOrder.Traverse``3(ILGPU.IR.BasicBlock,``0@,``1@)">
            <summary>
            Computes a traversal using the current order.
            </summary>
            <typeparam name="TVisitor">The visitor type.</typeparam>
            <typeparam name="TSuccessorProvider">The successor provider.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="entryBlock">The entry block.</param>
            <param name="visitor">The visitor instance.</param>
            <param name="successorProvider">The successor provider.</param>
            <returns>The created traversal.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.ICompatibleTraversalOrder`1">
            <summary>
            Another view that is compatible with the current type without requiring a new
            computation.
            </summary>
            <typeparam name="TOther">The other view.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.TraversalOrder">
            <summary>
            A helper class for traversal.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.TraversalOrders.TraversalOrder.InitStackSize">
            <summary>
            Specifies the default initial stack size.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.TraversalOrder.ForwardsInit">
            <summary>
            Initializes a forwards enumeration state.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.TraversalOrder.ForwardsMoveNext``1(``0,ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState@)">
            <summary>
            Tries to move a forwards state to the next block.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
            <param name="state">The current enumeration state.</param>
            <returns>True, if there is a next block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.TraversalOrder.BackwardsInit``1(``0)">
            <summary>
            Initializes a backwards enumeration state.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.TraversalOrder.BackwardsMoveNext(ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState@)">
            <summary>
            Tries to move a backwards state to the next block.
            </summary>
            <param name="state">The current enumeration state.</param>
            <returns>True, if there is a next block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.TraversalOrder.TraverseToCollection``3(``0,System.Int32,ILGPU.IR.BasicBlock,``1@)">
            <summary>
            Computes a traversal using the current order.
            </summary>
            <typeparam name="TOrder">The current order type.</typeparam>
            <typeparam name="TSuccessorProvider">The successor provider.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="order">The current order instance.</param>
            <param name="entryBlock">The entry block.</param>
            <param name="count">The number of elements.</param>
            <param name="successorProvider">The successor provider.</param>
            <returns>The created traversal.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.PreOrder">
            <summary>
            Enumerates all basic blocks in pre order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.PreOrder.Init``1(``0)">
            <summary>
            Initializes a new enumeration state.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.PreOrder.MoveNext``1(``0,ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState@)">
            <summary>
            Tries to move the state to the next block.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
            <param name="state">The current enumeration state.</param>
            <returns>True, if there is a next block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.PreOrder.Traverse``3(ILGPU.IR.BasicBlock,``0@,``1@)">
            <summary>
            Computes a traversal using the current order.
            </summary>
            <typeparam name="TVisitor">The visitor type.</typeparam>
            <typeparam name="TSuccessorProvider">The successor provider.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="entryBlock">The entry block.</param>
            <param name="visitor">The visitor instance.</param>
            <param name="successorProvider">The successor provider.</param>
            <returns>The created traversal.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.ReversePreOrder">
            <summary>
            Enumerates all basic blocks in reverse pre order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ReversePreOrder.Init``1(``0)">
            <summary>
            Initializes a new enumeration state.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ReversePreOrder.MoveNext``1(``0,ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState@)">
            <summary>
            Tries to move the state to the next block.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
            <param name="state">The current enumeration state.</param>
            <returns>True, if there is a next block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ReversePreOrder.Traverse``3(ILGPU.IR.BasicBlock,``0@,``1@)">
            <summary>
            Computes a traversal using the current order.
            </summary>
            <typeparam name="TVisitor">The visitor type.</typeparam>
            <typeparam name="TSuccessorProvider">The successor provider.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="entryBlock">The entry block.</param>
            <param name="successorProvider">The successor provider.</param>
            <param name="visitor">The visitor instance.</param>
            <returns>The created traversal.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.PostOrder">
            <summary>
            Enumerates all basic blocks in post order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.PostOrder.Init``1(``0)">
            <summary>
            Initializes a new enumeration state.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.PostOrder.MoveNext``1(``0,ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState@)">
            <summary>
            Tries to move the state to the next block.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
            <param name="state">The current enumeration state.</param>
            <returns>True, if there is a next block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.PostOrder.Traverse``3(ILGPU.IR.BasicBlock,``0@,``1@)">
            <summary>
            Computes a traversal using the current order.
            </summary>
            <typeparam name="TVisitor">The visitor type.</typeparam>
            <typeparam name="TSuccessorProvider">The successor provider.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="entryBlock">The entry block.</param>
            <param name="visitor">The visitor instance.</param>
            <param name="successorProvider">The successor provider.</param>
            <returns>The created traversal.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder">
            <summary>
            Enumerates all basic blocks in reverse post order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder.Init``1(``0)">
            <summary>
            Initializes a new enumeration state.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder.MoveNext``1(``0,ILGPU.IR.Analyses.TraversalOrders.TraversalEnumerationState@)">
            <summary>
            Tries to move the state to the next block.
            </summary>
            <param name="blocks">The list of blocks to enumerate.</param>
            <param name="state">The current enumeration state.</param>
            <returns>True, if there is a next block.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder.Traverse``3(ILGPU.IR.BasicBlock,``0@,``1@)">
            <summary>
            Computes a traversal using the current order.
            </summary>
            <typeparam name="TVisitor">The visitor type.</typeparam>
            <typeparam name="TSuccessorProvider">The successor provider.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="entryBlock">The entry block.</param>
            <param name="visitor">The visitor instance.</param>
            <param name="successorProvider">The successor provider.</param>
            <returns>The created traversal.</returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Uniforms">
            <summary>
            An analysis to determine whether values and terminators can be considered uniform.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Uniforms.UniformKind">
            <summary>
            The state of a value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.Uniforms.UniformKind.Unknown">
            <summary>
            No or insufficient information is available for the value attached.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.Uniforms.UniformKind.Uniform">
            <summary>
            The associated value can be considered uniform.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.Uniforms.UniformKind.Divergent">
            <summary>
            The associated value has to be considered divergent.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Analyses.Uniforms.ValueInfo">
            <summary>
            Information carried per value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.ValueInfo.#ctor(ILGPU.IR.Analyses.Uniforms.UniformKind)">
            <summary>
            Constructs a new value information instance.
            </summary>
            <param name="kind">The associated value kind.</param>
        </member>
        <member name="P:ILGPU.IR.Analyses.Uniforms.ValueInfo.Kind">
            <summary>
            Returns the current kind of the current uniform information instance.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.ValueInfo.Equals(ILGPU.IR.Analyses.Uniforms.ValueInfo)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.ValueInfo.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current instance.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current instance.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.ValueInfo.GetHashCode">
            <summary>
            Returns the hash code of this instance.
            </summary>
            <returns>The hash code of this instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.ValueInfo.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.ValueInfo.op_Implicit(ILGPU.IR.Analyses.Uniforms.UniformKind)~ILGPU.IR.Analyses.Uniforms.ValueInfo">
            <summary>
            Converts a value of type <see cref="T:ILGPU.IR.Analyses.Uniforms.UniformKind"/> into a
            <see cref="T:ILGPU.IR.Analyses.Uniforms.ValueInfo"/> instance.
            </summary>
            <param name="kind">The kind to convert to.</param>
            <returns>The created value information instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.ValueInfo.op_Equality(ILGPU.IR.Analyses.Uniforms.ValueInfo,ILGPU.IR.Analyses.Uniforms.ValueInfo)">
            <summary>
            Returns true if the first and second information instances are the same.
            </summary>
            <param name="first">The first instance.</param>
            <param name="second">The second instance.</param>
            <returns>True, if the first and second instances are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.ValueInfo.op_Inequality(ILGPU.IR.Analyses.Uniforms.ValueInfo,ILGPU.IR.Analyses.Uniforms.ValueInfo)">
            <summary>
            Returns true if the first and second information instances are not the
            same.
            </summary>
            <param name="first">The first instance.</param>
            <param name="second">The second instance.</param>
            <returns>
            True, if the first and second instances are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Analyses.Uniforms.Info">
            <summary>
            Stores information of a uniform analysis run.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Analyses.Uniforms.Info.Empty">
            <summary>
            Empty allocation information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.Info.#ctor(ILGPU.IR.Analyses.GlobalAnalysisValueResult{ILGPU.IR.Analyses.Uniforms.ValueInfo})">
            <summary>
            Constructs a new alignment analysis.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Uniforms.Info.AnalysisResult">
            <summary>
            Stores a method value-alignment mapping.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Analyses.Uniforms.Info.Item(ILGPU.IR.Value)">
            <summary>
            Returns pointer alignment information for the given value.
            </summary>
            <param name="value">The value to get alignment information for.</param>
            <returns>Pointer alignment in bytes (can be 1 byte).</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.Info.IsUniform(ILGPU.IR.Value)">
            <summary>
            Returns true if the given value can be considered to be uniformly
            distributed across all threads in the current group. However, it
            pessimistically assumes that <see cref="F:ILGPU.IR.Analyses.Uniforms.UniformKind.Unknown"/> refers
            to a divergent value.
            </summary>
            <param name="value">The value to test.</param>
            <returns>True, if the given value can be considered uniform.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.Create(ILGPU.IR.Method)">
            <summary>
            Creates a new uniforms analysis.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.Apply(ILGPU.IR.Method)">
            <summary>
            Applies a new alignment analysis to the given root method.
            </summary>
            <param name="entryPoint">The root (entry) method.</param>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.#ctor">
            <summary>
            Constructs a new analysis implementation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.IsUniformByDefinition(ILGPU.IR.Value)">
            <summary>
            Returns initial and unconstrained information about whether the given value
            can be considered uniform.
            </summary>
            <param name="node">The IR node.</param>
            <returns>The uniform state of the given node.</returns>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.CreateData(ILGPU.IR.Value)">
            <summary>
            Creates initial analysis data using <see cref="M:ILGPU.IR.Analyses.Uniforms.IsUniformByDefinition(ILGPU.IR.Value)"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.Merge(ILGPU.IR.Analyses.Uniforms.ValueInfo,ILGPU.IR.Analyses.Uniforms.ValueInfo)">
            <summary>
            Returns the maximum of the first and the second kind.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.TryProvide(ILGPU.IR.Types.TypeNode)">
            <summary>
            Returns no type-based information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Analyses.Uniforms.TryMerge``1(ILGPU.IR.Value,``0)">
            <summary>
            Merges information about terminators.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlock">
            <summary>
            Represents a single basic block.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.ToReferenceFormatter">
            <summary>
            A block reference formatter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ToReferenceFormatter.ILGPU#Util#InlineList#IFormatter{ILGPU#IR#BasicBlock}#Format(ILGPU.IR.BasicBlock)">
            <summary>
            Formats a block by returning reference string.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.Comparer">
            <summary>
            An equality comparer for basic blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Comparer.Equals(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if both blocks represent the same block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Comparer.GetHashCode(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if both blocks represent the same block.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.IsInCollectionPredicate">
            <summary>
            Helper class for <see cref="T:ILGPU.IR.BasicBlock.IsInCollectionPredicate`1"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.IsInCollectionPredicate.ToPredicate``1(``0)">
            <summary>
            Converts the collection into a collection predicate.
            </summary>
            <typeparam name="TCollection">The collection type.</typeparam>
            <param name="collection">The collection instance.</param>
            <returns>The collection predicate.</returns>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.IsInCollectionPredicate`1">
            <summary>
            An equality comparer for basic blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.IsInCollectionPredicate`1.#ctor(`0)">
            <summary>
            Constructs a new collection predicate.
            </summary>
            <param name="collection">The source collection.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.IsInCollectionPredicate`1.Collection">
            <summary>
            Returns the collection of all blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.IsInCollectionPredicate`1.Apply(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if both blocks represent the same block.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.ValueVisitor`1">
            <summary>
            Represents a visitor for values.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="value">The value to visit.</param>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.ValueEntry">
            <summary>
            Represents a value reference within a single basic block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ValueEntry.#ctor(System.Int32,ILGPU.IR.Values.ValueReference)">
            <summary>
            Converts a new value entry.
            </summary>
            <param name="index">The index within the block.</param>
            <param name="valueReference">The actual value reference.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.ValueEntry.Index">
            <summary>
            The current index of the associated value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.ValueEntry.ValueReference">
            <summary>
            The actual value reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.ValueEntry.Value">
            <summary>
            The resolved value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.ValueEntry.DirectTarget">
            <summary>
            The direct target.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.ValueEntry.BasicBlock">
            <summary>
            Returns the associated basic block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ValueEntry.Accept``1(``0)">
            <summary>
            Accepts a value visitor.
            </summary>
            <typeparam name="T">The type of the visitor.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ValueEntry.ToValue">
            <summary>
            Implicitly converts the current value entry to its associated value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ValueEntry.ToString">
            <summary>
            Returns the string representation of the underlying value.
            </summary>
            <returns>The string representation of the underlying value.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ValueEntry.op_Implicit(ILGPU.IR.BasicBlock.ValueEntry)~ILGPU.IR.Value">
            <summary>
            Implicitly converts the given value entry to its associated value.
            </summary>
            <param name="valueEntry">The value entry to convert.</param>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.Enumerator">
            <summary>
            An enumerator for values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Enumerator.#ctor(ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new node enumerator.
            </summary>
            <param name="basicBlock">The basic block to iterate over.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Enumerator.BasicBlock">
            <summary>
            Returns the parent basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Enumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.TerminatorSuccessorsProvider">
            <summary>
            A provider that uses terminators to determine the successors of a block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.TerminatorSuccessorsProvider.GetSuccessors(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the terminator targets.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.SuccessorsProvider`1">
            <summary>
            A provider that uses registered successors and predecessors of a block.
            </summary>
            <typeparam name="TDirection"></typeparam>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.SuccessorsProvider`1.GetSuccessors(ILGPU.IR.BasicBlock)">
            <summary>
            Returns registered successors or predecessors of a block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.#ctor(ILGPU.IR.Method,ILGPU.IR.Location,System.String)">
            <summary>
            Constructs a new basic block.
            </summary>
            <param name="method">The parent method.</param>
            <param name="location">The current location.</param>
            <param name="name">The name of the block (or null).</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.IsBasicBlock">
            <inheritdoc/>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Method">
            <summary>
            Returns the parent IR method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Name">
            <summary>
            Returns the (meaningless) name.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Predecessors">
            <summary>
            The list of predecessors (see <see cref="T:ILGPU.IR.Analyses.ControlFlowDirection.Backwards"/>).
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Successors">
            <summary>
            The list of successors (see <see cref="T:ILGPU.IR.Analyses.ControlFlowDirection.Forwards"/>).
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Terminator">
            <summary>
            Returns the current terminator.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.CurrentSuccessors">
            <summary>
            The current list of successor blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Count">
            <summary>
            Returns the number of values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Item(System.Int32)">
            <summary>
            Returns the i-th value.
            </summary>
            <param name="index">The value index.</param>
            <returns>The resolved value reference.</returns>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.BlockIndex">
            <summary>
            Returns the associated block index that is updated during traversal and can
            be used to map blocks to values using fast array lookups.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.AssertNoControlFlowUpdate">
            <summary>
            Asserts that no control-flow update has happened and the predecessor
            and successor relations are still up to date.
            </summary>
            <remarks>
            This operation is only available in debug mode.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GetPredecessors``1">
            <summary>
            Determines the actual predecessors based on the specified direction.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GetSuccessors``1">
            <summary>
            Determines the actual successors based on the specified direction.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.BeginControlFlowUpdate(System.Int32)">
            <summary>
            Setups the internal block index.
            </summary>
            <param name="index">The new block index.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.PropagateSuccessors">
            <summary>
            Propagate terminator targets as successors to all child nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.HasSideEffects">
            <summary>
            Checks whether this block has side effects.
            </summary>
            <returns>True, if this block has side effects.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GetTerminatorAs``1">
            <summary>
            Returns the terminator converted to the given type.
            </summary>
            <typeparam name="T">The target terminator type.</typeparam>
            <returns>The converted terminator value.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GetOrCreateBuilder(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock.Builder@)">
            <summary>
            Resolves the current builder or creates a new one.
            </summary>
            <param name="functionBuilder">The current function builder.</param>
            <param name="resolvedBuilder">The resolved bloc builder.</param>
            <returns>True, if the builder was created.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ReleaseBuilder(ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Releases the given builder.
            </summary>
            <param name="otherBuilder">The builder to release.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.CompactTerminator">
            <summary>
            Compacts the terminator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Dump(System.IO.TextWriter)">
            <summary>
            Dumps this block to the given text writer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GC">
            <summary>
            Performs a GC run on this block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ForEachValue``1(ILGPU.IR.BasicBlock.ValueVisitor{``0})">
            <summary>
            Executes the given visitor for each value in this scope.
            </summary>
            <typeparam name="TValue">The value to match.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.GetEnumerator">
            <summary>
            Returns a value enumerator.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock#ValueEntry}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.BasicBlock.Builder">
            <summary>
            Represents a basic block builder.
            </summary>
        </member>
        <member name="F:ILGPU.IR.BasicBlock.Builder.values">
            <summary>
            A local cache of the value list.
            </summary>
        </member>
        <member name="F:ILGPU.IR.BasicBlock.Builder.toRemove">
            <summary>
            A collection of values to remove
            </summary>
        </member>
        <member name="F:ILGPU.IR.BasicBlock.Builder.insertPosition">
            <summary>
            The current insert position for new instructions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.#ctor(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new builder.
            </summary>
            <param name="methodBuilder">The parent method builder.</param>
            <param name="block">The parent block.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Builder.MethodBuilder">
            <summary>
            Returns the parent function builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Builder.Terminator">
            <summary>
            Gets or sets the current terminator.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Builder.Count">
            <summary>
            Returns the number of attached values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Builder.Values">
            <summary>
            Gets or sets the current value list.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlock.Builder.InsertPosition">
            <summary>
            Gets or sets the current insert position for new instructions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SetupInsertPosition(ILGPU.IR.BasicBlock.ValueEntry)">
            <summary>
            Sets the insert position to the index stored in the given value entry.
            </summary>
            <param name="valueEntry">The value entry.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SetupInsertPositionToStart">
            <summary>
            Sets the insert position to the start of the current value list.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SetupInsertPositionToEnd">
            <summary>
            Sets the insert position to the end of the current value list.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SetupInsertPosition(ILGPU.IR.Value)">
            <summary>
            Sets the insert position to the index stored in the given value entry.
            </summary>
            <param name="value">The value entry.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.InsertAtBeginning(ILGPU.IR.Value)">
            <summary>
            Inserts the given value at the beginning of this block.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given value to this block.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.AddFromOtherBlock(ILGPU.IR.Value)">
            <summary>
            Adds the given value from another block to this block.
            </summary>
            <param name="value">The value to add</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Clear">
            <summary>
            Removes all operations of this block (including the terminator).
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.ClearLists">
            <summary>
            Clears all attached values (except the terminator).
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Remove(ILGPU.IR.Value)">
            <summary>
            Schedules the given value for removal.
            </summary>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.PerformRemoval">
            <summary>
            Applies all scheduled removal operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.PerformRemoval``1(``0)">
            <summary>
            Applies all scheduled removal operations by adding them to
            the given <paramref name="targetCollection"/>.
            </summary>
            <param name="targetCollection">
            The target collection to which all elements will be appended.
            </param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.RemapPhiArguments``1(``0)">
            <summary>
            Updates phi values in the current block to point to the new blocks
            instead.
            </summary>
            <typeparam name="TArgumentRemapper">The argument mapper type.</typeparam>
            <param name="remapper">The remapper to use.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.RemapPhiArguments``1(System.ReadOnlySpan{ILGPU.IR.BasicBlock},``0)">
            <summary>
            Updates phi values in the supplied blocks to point to the new blocks
            instead.
            </summary>
            <typeparam name="TArgumentRemapper">The argument mapper type.</typeparam>
            <param name="blocks">
            The blocks containing phi values to be updated.
            </param>
            <param name="remapper">The remapper to use.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.UpdatePhiType``1(ILGPU.IR.Values.PhiValue,``0)">
            <summary>
            Updates the type of the given phi value.
            </summary>
            <typeparam name="TTypeConverter">The type converter.</typeparam>
            <param name="phiValue">The phi value.</param>
            <param name="typeConverter">The type converter instance.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SpecializeCall(ILGPU.IR.Values.MethodCall)">
            <summary>
            Specializes a function call.
            </summary>
            <param name="call">The call to specialize.</param>
            <returns>The created target block.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.SplitBlock(ILGPU.IR.Value)">
            <summary>
            Splits the current block at the given value.
            </summary>
            <param name="splitPoint">The split point.</param>
            <returns>The created temporary block.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.MergeBlock(ILGPU.IR.BasicBlock)">
            <summary>
            Merges the given block into the current one.
            </summary>
            <param name="other">The other block to merge.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.ReplaceWithCall(ILGPU.IR.Value,ILGPU.IR.Method)">
            <summary>
            Replaces the given value with a call to the provided function.
            </summary>
            <param name="value">The value to replace.</param>
            <param name="implementationMethod">
            The target implementation method.
            </param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.TryFindFirstValueOf``1(System.Predicate{``0},System.ValueTuple{System.Int32,``0}@)">
            <summary>
            Tries to find the first value of the given type that fulfills the given
            predicate in this block.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="predicate">The predicate.</param>
            <param name="entry">
            The result pair consisting of a value index and the matched value itself.
            </param>
            <returns>True, if a value could be matched.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.CreateTerminator``1(``0)">
            <summary cref="M:ILGPU.IR.Construction.IRBuilder.CreateTerminator``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.CreatePhiValue(ILGPU.IR.Values.PhiValue)">
            <summary cref="M:ILGPU.IR.Construction.IRBuilder.CreatePhiValue(ILGPU.IR.Values.PhiValue)"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Append``1(``0)">
            <summary cref="M:ILGPU.IR.Construction.IRBuilder.Append``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.ToBasicBlock">
            <summary>
            Implicitly converts the current builder into its associated basic block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the underlying method to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.op_Implicit(ILGPU.IR.BasicBlock.Builder)~ILGPU.IR.BasicBlock">
            <summary>
            Implicitly converts the given builder into its associated basic block.
            </summary>
            <param name="builder">The builder to convert.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.GetEnumerator">
            <summary>
            Returns a value enumerator.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock#ValueEntry}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlock.Builder.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.IR.IBasicBlockCollection`1">
            <summary>
            An abstract block collection with a particular control-flow direction.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="P:ILGPU.IR.IBasicBlockCollection`1.Count">
            <summary>
            Returns the number of blocks.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlockCollection`2">
            <summary>
            A collection of basic blocks following a particular order.
            </summary>
            <typeparam name="TOrder">The current order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
        </member>
        <member name="T:ILGPU.IR.BasicBlockCollection`2.Enumerator">
            <summary>
            Enumerates all basic blocks in the underlying default order.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.Enumerator.Current">
            <summary>
            Returns the current basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.BasicBlockCollection`2.ValueCollection">
            <summary>
            An abstract view on all values.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlockCollection`2.ValueCollection.Enumerator">
            <summary>
            Enumerates all nodes in all blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.Enumerator.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.BasicBlock})">
            <summary>
            Constructs a new basic block enumerator.
            </summary>
            <param name="blocks">The parent blocks.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.ValueCollection.Enumerator.Current">
            <summary>
            Returns the current value and its parent basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="F:ILGPU.IR.BasicBlockCollection`2.ValueCollection.blocks">
            <summary>
            The list of all blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.#ctor(ILGPU.IR.BasicBlockCollection{`0,`1}@)">
            <summary>
            Constructs a new value collection.
            </summary>
            <param name="blockCollection">The parent blocks.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.GetEnumerator">
            <summary>
            Returns a value enumerator.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock#ValueEntry}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.#ctor(ILGPU.IR.BasicBlock,System.Collections.Immutable.ImmutableArray{ILGPU.IR.BasicBlock})">
            <summary>
            Constructs a new block collection.
            </summary>
            <param name="entryBlock">The entry block.</param>
            <param name="blockReferences">The source blocks.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.BaseContext">
            <summary>
            Returns the parent base context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.Count">
            <summary>
            Returns the number of blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockCollection`2.Values">
            <summary>
            Returns an abstract view on all values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.AssertUniqueExitBlock">
            <summary>
            Asserts that there is a unique exit block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.FindExitBlock">
            <summary>
            Computes the exit block.
            </summary>
            <returns>The exit block.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ForEachTerminator``1(ILGPU.IR.BasicBlock.ValueVisitor{``0})">
            <summary>
            Executes the given visitor for each terminator is this collection.
            </summary>
            <typeparam name="TTerminatorValue">The terminator value to match.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ForEachValue``1(ILGPU.IR.BasicBlock.ValueVisitor{``0})">
            <summary>
            Executes the given visitor for each value in this collection.
            </summary>
            <typeparam name="TValue">The value to match.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.AsImmutable">
            <summary>
            Returns the underlying immutable block array.
            </summary>
            <returns>The underlying block array.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ToSet">
            <summary>
            Converts this collection into a hash set.
            </summary>
            <returns>The created set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ToSet``1(``0)">
            <summary>
            Converts this collection into a hash set that contains all elements for
            which the given predicate evaluates to true.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <param name="predicate">The predicate instance.</param>
            <returns>The created set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.AsOrder``1">
            <summary>
            Changes the order of this collection.
            </summary>
            <typeparam name="TOtherOrder">The collection order.</typeparam>
            <returns>The newly ordered collection.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ChangeDirection``1">
            <summary>
            Changes the direction of this collection.
            </summary>
            <typeparam name="TOtherDirection">The other direction.</typeparam>
            <returns>The newly ordered collection.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.ChangeOrder``2">
            <summary>
            Changes the order of this collection.
            </summary>
            <typeparam name="TOtherOrder">The collection order.</typeparam>
            <typeparam name="TOtherDirection">The control-flow direction.</typeparam>
            <remarks>
            Note that this function uses successor/predecessor links on all basic blocks.
            </remarks>
            <returns>The newly ordered collection.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.Traverse``3(``2)">
            <summary>
            Traverses this collection using the new order and direction.
            </summary>
            <typeparam name="TOtherOrder">The collection order.</typeparam>
            <typeparam name="TOtherDirection">The control-flow direction.</typeparam>
            <typeparam name="TSuccessorProvider">The successor provider.</typeparam>
            <remarks>
            Note that this function uses successor/predecessor links on all basic blocks.
            </remarks>
            <returns>The newly ordered collection.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.CreateSet">
            <summary>
            Constructs a new block set.
            </summary>
            <returns>The created block set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.CreateSetList">
            <summary>
            Constructs a new block set list.
            </summary>
            <returns>The created block set list.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.CreateMap``1">
            <summary>
            Constructs a new block map.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <returns>The created block map.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.CreateMap``1(ILGPU.IR.IBasicBlockMapValueProvider{``0})">
            <summary>
            Constructs a new block map.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="valueProvider">The initial value provider.</param>
            <returns>The created block map.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.Dump(System.IO.TextWriter)">
            <summary>
            Dumps all blocks in this collection to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all attached blocks.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.BasicBlockSet">
            <summary>
            Represents a set of basic blocks.
            </summary>
        </member>
        <member name="F:ILGPU.IR.BasicBlockSet.NumElementsPerBucket">
            <summary>
            The number of elements per bucket.
            </summary>
        </member>
        <member name="F:ILGPU.IR.BasicBlockSet.NumDefaultElements">
            <summary>
            The number of default elements.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.Create``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Creates a new block set.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <typeparam name="TOrder">The traversal order.</typeparam>
            <param name="blocks">The block collection.</param>
            <returns>The created block set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.Create(ILGPU.IR.BasicBlock)">
            <summary>
            Creates a new block set.
            </summary>
            <param name="entryBlock">The entry block.</param>
            <returns>The created block set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.ComputeBucketIndex(System.Int32,System.UInt64@)">
            <summary>
            Computes the bucket index and the bit mask.
            </summary>
            <param name="index">The block index.</param>
            <param name="bitMask">The resulting bit mask.</param>
            <returns>The bucket index.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.#ctor(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Constructs a new block set.
            </summary>
            <param name="entryBlock">The entry block.</param>
            <param name="numBlocks">The initial number of blocks.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlockSet.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockSet.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockSet.HasAny">
            <summary>
            Returns true if this set has at least one element.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.Add(ILGPU.IR.BasicBlock)">
            <summary>
            Adds the given block to this set.
            </summary>
            <param name="block">The block to add.</param>
            <returns>True, if the block has been added.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.Contains(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given block is contained in this set.
            </summary>
            <param name="block">The block to test.</param>
            <returns>True, if the given block is contained in this set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.Remove(ILGPU.IR.BasicBlock)">
            <summary>
            Removes the given block from this set and returns true if the block has been
            removed.
            </summary>
            <param name="block">The basic block.</param>
            <returns>True, whether the block has been removed.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSet.Clear">
            <summary>
            Removes all elements from this set.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlockSetList">
            <summary>
            Represents a set list of basic blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSetList.Create``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Creates a new block set.
            </summary>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <typeparam name="TOrder">The traversal order.</typeparam>
            <param name="blocks">The block collection.</param>
            <returns>The created block set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSetList.#ctor(ILGPU.IR.BasicBlockSet@,System.Int32)">
            <summary>
            Constructs a new block set.
            </summary>
            <param name="blockSet">The block set.</param>
            <param name="numBlocks">The initial number of blocks.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlockSetList.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockSetList.Count">
            <summary>
            Returns the number of elements in this set.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockSetList.Item(System.Int32)">
            <summary>
            Returns the i-th basic block.
            </summary>
            <param name="index">The block index.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSetList.Add(ILGPU.IR.BasicBlock)">
            <summary>
            Adds the given block to this set.
            </summary>
            <param name="block">The block to add.</param>
            <returns>True, if the block has been added.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSetList.Contains(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given block is contained in this set.
            </summary>
            <param name="block">The block to test.</param>
            <returns>True, if the given block is contained in this set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSetList.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all attached blocks.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSetList.System#Collections#Generic#IEnumerable{ILGPU#IR#BasicBlock}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockSetList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.IBasicBlockMapValueProvider`1">
            <summary>
            A value provider for each block in a collection.
            </summary>
            <typeparam name="T">The map value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.IBasicBlockMapValueProvider`1.GetValue(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Extracts the value from the given block.
            </summary>
            <param name="block">The source block.</param>
            <param name="traversalIndex">The current traversal index.</param>
            <returns>The extracted value.</returns>
        </member>
        <member name="T:ILGPU.IR.BasicBlockMapTraversalIndexProvider">
            <summary>
            A map provider that returns the traversal index of each block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMapTraversalIndexProvider.GetValue(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Returns the value of <paramref name="traversalIndex"/>.
            </summary>
        </member>
        <member name="T:ILGPU.IR.BasicBlockMap`1">
            <summary>
            A mapping of basic block to values.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.BasicBlockMap`1.Enumerator">
            <summary>
            Enumerates all block value pairs.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockMap`1.Enumerator.Count">
            <summary>
            The number of elements in the collection.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockMap`1.Enumerator.Current">
            <summary>
            Returns the current basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockMap`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Create``2(ILGPU.IR.BasicBlockCollection{``0,``1}@)">
            <summary>
            Constructs a new block map.
            </summary>
            <typeparam name="TOrder">The traversal order.</typeparam>
            <typeparam name="TDirection">The control-flow direction.</typeparam>
            <param name="blocks">The block collection.</param>
            <returns>The created block map.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Create(ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new block map.
            </summary>
            <param name="entryBlock">The entry block.</param>
            <returns>The created block map.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.#ctor(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Constructs a new block map.
            </summary>
            <param name="entryBlock">The entry block.</param>
            <param name="numBlocks">The number of blocks.</param>
        </member>
        <member name="P:ILGPU.IR.BasicBlockMap`1.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockMap`1.EntryBlock">
            <summary>
            Returns the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockMap`1.Count">
            <summary>
            Returns the number of elements in this set.
            </summary>
        </member>
        <member name="P:ILGPU.IR.BasicBlockMap`1.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the value associated to the given block.
            </summary>
            <param name="block">The block.</param>
            <returns>The value associated to the given block.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.GetItemRef(ILGPU.IR.BasicBlock)">
            <summary>
            Returns an immutable reference to the associated value.
            </summary>
            <param name="block">The basic block.</param>
            <returns>The reference to the associated value.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.UpdateValueMap(ILGPU.IR.BasicBlock)">
            <summary>
            Updates the value map to store the given block.
            </summary>
            <param name="block">The block to store in this map.</param>
            <returns>The block index.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Add(ILGPU.IR.BasicBlock,`0)">
            <summary>
            Adds the given block to this set.
            </summary>
            <param name="block">The block to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.TryAdd(ILGPU.IR.BasicBlock,`0)">
            <summary>
            Adds the given block to this set.
            </summary>
            <param name="block">The block to add.</param>
            <param name="value">The value to add.</param>
            <returns>True, if the block has been added.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.TryGetValue(ILGPU.IR.BasicBlock,`0@)">
            <summary>
            Tries to get a stored value for the given block.
            </summary>
            <param name="block">The block to lookup.</param>
            <param name="value">The stored value (if any).</param>
            <returns>True, if the block could be found.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Contains(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given block is contained in this set.
            </summary>
            <param name="block">The block to test.</param>
            <returns>True, if the given block is contained in this set.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Remap``1(System.Func{`0,``0})">
            <summary>
            Remaps the current values to other values.
            </summary>
            <typeparam name="TOther">The other element type.</typeparam>
            <param name="valueProvider">The value provider to map the values.</param>
            <returns>The created block mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.Clear">
            <summary>
            Clears this map by removing all elements.
            </summary>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all attached blocks.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.System#Collections#Generic#IEnumerable{(ILGPU#IR#BasicBlock,T)}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.BasicBlockMap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.Construction.IRBuilder">
            <summary>
            An IR builder that can construct IR nodes.
            </summary>
            <remarks>Members of this class are thread safe.</remarks>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAlignTo(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Creates a node that aligns the given view or pointer to a given number of
            bytes.
            </summary>
            <param name="location">The current location.</param>
            <param name="viewOrPointer">The source view or pointer.</param>
            <param name="alignmentInBytes">The alignment in bytes.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAsAligned(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Creates a node that treats the given view or pointer as an aligned
            view/pointer that is aligned to a given number of bytes.
            </summary>
            <param name="location">The current location.</param>
            <param name="viewOrPointer">The source view or pointer.</param>
            <param name="alignmentInBytes">The alignment in bytes.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Values.UnaryArithmeticKind)">
            <summary>
            Creates a unary arithmetic operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Creates a unary arithmetic operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">Operation flags.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.InvertBinaryArithmetic(ILGPU.IR.Location,ILGPU.IR.Values.BinaryArithmeticValue)">
            <summary>
            Inverts a binary arithmetic value.
            </summary>
            <param name="location">The current location.</param>
            <param name="binary">The binary operation to invert.</param>
            <returns>The inverted binary operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.InvertCompareValue(ILGPU.IR.Location,ILGPU.IR.Values.CompareValue)">
            <summary>
            Inverts a compare value.
            </summary>
            <param name="location">The current location.</param>
            <param name="compareValue">The compare operation to invert.</param>
            <returns>The inverted compare value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.BinaryArithmeticKind)">
            <summary>
            Creates a binary arithmetic operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Creates a binary arithmetic operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">Operation flags.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.GetDivMulShiftAmount(ILGPU.IR.Location,ILGPU.IR.Values.PrimitiveValue)">
            <summary>
            Determines a div/mul shift amount to convert div and mul operations into
            logical shift operations to improve performance.
            </summary>
            <param name="location">The current location.</param>
            <param name="primitiveValue">The primitive value.</param>
            <returns>The converted shift amount.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.TernaryArithmeticKind)">
            <summary>
            Creates a ternary arithmetic operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <param name="third">The second operand.</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArithmetic(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Creates a ternary arithmetic operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <param name="third">The second operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">Operation flags.</param>
            <returns>A node that represents the arithmetic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAtomic(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.AtomicKind,ILGPU.IR.Values.AtomicFlags)">
            <summary>
            Creates a new atomic operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="target">The target address.</param>
            <param name="value">The target value.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
            <returns>A node that represents the atomic operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAtomicCAS(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.AtomicFlags)">
            <summary>
            Creates a new atomic compare-and-swap operation
            </summary>
            <param name="location">The current location.</param>
            <param name="target">The parent memory operation.</param>
            <param name="value">The target value.</param>
            <param name="compareValue">The comparison value.</param>
            <param name="flags">The operation flags.</param>
            <returns>
            A node that represents the atomic compare-and-swap operation.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateIntAsPointerCast(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a cast operation that casts an integer value to a raw pointer.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePointerAsIntCast(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.BasicValueType)">
            <summary>
            Creates a cast operation that casts a pointer into an integer.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="targetType">The target integer type.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePointerCast(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a cast operation that casts the element type of a pointer
            but does not change its address space.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="targetElementType">The target element type.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAddressSpaceCast(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates an address-space cast.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="targetAddressSpace">The target address space.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateViewCast(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a view cast.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="targetElementType">The target element type.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArrayToViewCast(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates an array to a view cast.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value to cast into a view.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateFloatAsIntCast(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a float as int reinterpret bit cast.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateIntAsFloatCast(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates an int as float reinterpret bit cast.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <returns>A node that represents the cast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateCompare(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.CompareKind)">
            <summary>
            Creates a compare operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the compare operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateCompare(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.CompareKind,ILGPU.IR.Values.CompareFlags)">
            <summary>
            Creates a compare operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">Operation flags.</param>
            <returns>A node that represents the compare operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateConvertToInt32(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a convert operation to a 32bit integer.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <returns>A node that represents the convert operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateConvertToInt64(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a convert operation to a 64bit integer.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <returns>A node that represents the convert operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateConvert(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.BasicValueType)">
            <summary>
            Creates a convert operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="basicValueType">The target basic value type.</param>
            <returns>A node that represents the convert operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateConvert(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a convert operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="targetType">The target type.</param>
            <returns>A node that represents the convert operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateConvert(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Creates a convert operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="node">The operand.</param>
            <param name="targetType">The target type.</param>
            <param name="flags">Operation flags.</param>
            <returns>A node that represents the convert operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDebugAssert(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Creates a new failed debug assertion.
            </summary>
            <param name="location">The current location.</param>
            <param name="condition">The debug assert condition.</param>
            <param name="message">The assertion message.</param>
            <returns>A node that represents the debug assertion.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateWriteToOutput(ILGPU.IR.Location,System.Collections.Immutable.ImmutableArray{ILGPU.Util.FormatString.FormatExpression},ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Creates a <see cref="M:System.Console.Write(System.String,System.Object[])"/>-like output
            operation using typed expression formats.
            </summary>
            <param name="location">The current location.</param>
            <param name="expressions">The list of all format expressions.</param>
            <param name="arguments">The arguments to format.</param>
            <returns>A node that represents the output operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.#ctor(ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new IR builder.
            </summary>
            <param name="basicBlock">The current basic block.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.BaseContext">
            <summary>
            Returns a wrapped context reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.BasicBlock">
            <summary>
            Returns the associated basic block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific exception information.
            </summary>
            <param name="message">The source error message.</param>
            <returns>The formatted error message.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.GetInitializer(ILGPU.IR.Location)">
            <summary>
            Creates a new initializer that is bound to the current block.
            </summary>
            <returns>The created value initializer.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAcceleratorTypeValue(ILGPU.IR.Location)">
            <summary>
            Creates a node that represents an <see cref="P:ILGPU.Runtime.Accelerator.CurrentType"/>
            property.
            </summary>
            <param name="location">The current location.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateWarpSizeValue(ILGPU.IR.Location)">
            <summary>
            Creates a node that represents a <see cref="P:ILGPU.Warp.WarpSize"/> property.
            </summary>
            <param name="location">The current location.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLaneIdxValue(ILGPU.IR.Location)">
            <summary>
            Creates a node that represents a <see cref="P:ILGPU.Warp.LaneIdx"/> property.
            </summary>
            <param name="location">The current location.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDynamicMemoryLengthValue(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a node that represents the length of dynamic memory.
            </summary>
            <param name="location">The current location.</param>
            <param name="elementType">The element type.</param>
            <param name="addressSpace">The target address space.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGridIndexValue(ILGPU.IR.Location,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Creates a node that represents a <see cref="P:ILGPU.Grid.Index"/> property.
            </summary>
            <param name="location">The current location.</param>
            <param name="dimension">The constant dimension.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGroupIndexValue(ILGPU.IR.Location,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Creates a node that represents a <see cref="P:ILGPU.Group.Index"/> property.
            </summary>
            <param name="location">The current location.</param>
            <param name="dimension">The constant dimension.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGridDimensionValue(ILGPU.IR.Location,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Creates a node that represents a <see cref="P:ILGPU.Grid.Dimension"/> property.
            </summary>
            <param name="location">The current location.</param>
            <param name="dimension">The constant dimension.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGroupDimensionValue(ILGPU.IR.Location,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Creates a node that represents of a <see cref="P:ILGPU.Group.Dimension"/> property.
            </summary>
            <param name="location">The current location.</param>
            <param name="dimension">The constant dimension.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSizeOf(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a node that represents the native size of the given type.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The type.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLongSizeOf(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a node that represents the native size of the given type.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The type.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateOffsetOf(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a node that represents the native offset of the specified field
            index.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The type.</param>
            <param name="fieldIndex">The field index.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateUndefined">
            <summary>
            Creates a node that represents an undefined value.
            </summary>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateRuntimeHandle(ILGPU.IR.Location,System.Object)">
            <summary>
            Creates a node that represents a managed runtime handle.
            </summary>
            <param name="location">The current location.</param>
            <param name="handle">The runtime handle.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateIndex(ILGPU.IR.Location,ILGPU.IR.Values.ValueReference)">
            <summary>
            Creates a new index structure instance.
            </summary>
            <param name="location">The current location.</param>
            <param name="dimension">The dimension value.</param>
            <returns>The created index type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePhiValue(ILGPU.IR.Values.PhiValue)">
            <summary>
            Creates an instantiated phi value.
            </summary>
            <param name="phiValue">The phi value to create.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateTerminator``1(``0)">
            <summary>
            Creates an instantiated terminator.
            </summary>
            <typeparam name="T">The terminator value type.</typeparam>
            <param name="node">The terminator to create.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.Append``1(``0)">
            <summary>
            Append a new value.
            </summary>
            <typeparam name="T">The node type.</typeparam>
            <param name="node">The node to create.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLanguageEmitPTX(ILGPU.IR.Location,System.Boolean,System.Collections.Immutable.ImmutableArray{ILGPU.Util.FormatString.FormatExpression},System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.CudaEmitParameterDirection},ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Creates an inline language output operation using typed expression formats.
            </summary>
            <param name="location">The current location.</param>
            <param name="usingRefParams">True, if passing parameters by reference.</param>
            <param name="expressions">The list of all format expressions.</param>
            <param name="directions">Indicates the direction of the arguments.</param>
            <param name="arguments">The arguments to format.</param>
            <returns>A node that represents the language emit operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAlloca(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a local allocation.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The type of the allocation.</param>
            <param name="addressSpace">The target address space.</param>
            <returns>A node that represents the alloca operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateStaticAllocaArray(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates an array based local allocation.
            </summary>
            <param name="location">The current location.</param>
            <param name="arrayLength">
            The array length (number of elements to allocate).
            </param>
            <param name="type">The type of the allocation.</param>
            <param name="addressSpace">The target address space.</param>
            <returns>A node that represents the alloca operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDynamicAllocaArray(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a dynamic local memory allocation.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The type of the allocation.</param>
            <param name="addressSpace">The target address space.</param>
            <returns>A node that represents the alloca operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateAlloca(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Value)">
            <summary>
            Creates a local allocation.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The type of the allocation.</param>
            <param name="addressSpace">The target address space.</param>
            <param name="arrayLength">
            The array length (number of elements to allocate or undefined).
            </param>
            <returns>A node that represents the alloca operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLoad(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a load operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="source">The source address.</param>
            <returns>A node that represents the load operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateStore(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Creates a store operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="target">The target address.</param>
            <param name="value">The value to store.</param>
            <returns>A node that represents the store operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateMemoryBarrier(ILGPU.IR.Location,ILGPU.IR.Values.MemoryBarrierKind)">
            <summary>
            Creates a memory barrier.
            </summary>
            <param name="location">The current location.</param>
            <param name="kind">The type of the memory barrier.</param>
            <returns>A node that represents the memory barrier.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSubViewValue(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Computes a new sub view from a given view.
            </summary>
            <param name="location">The current location.</param>
            <param name="source">The source.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>A node that represents the new sub view.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLoadElementAddress(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Computes the address of a single element in the scope of a view or a pointer.
            </summary>
            <param name="location">The current location.</param>
            <param name="source">The source view.</param>
            <param name="elementIndex">The element index to load.</param>
            <returns>A node that represents the element address.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLoadFieldAddress(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Computes the address of a single field.
            </summary>
            <param name="location">The current location.</param>
            <param name="source">The source.</param>
            <param name="fieldSpan">The associated field span (if any).</param>
            <returns>A node that represents the field address.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateCall(ILGPU.IR.Location,ILGPU.IR.Method)">
            <summary>
            Creates a new call node builder.
            </summary>
            <param name="location">The current location.</param>
            <param name="target">The jump target.</param>
            <returns>A call builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateCall(ILGPU.IR.Location,ILGPU.IR.Method,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Creates a new method call.
            </summary>
            <param name="location">The current location.</param>
            <param name="target">The method target.</param>
            <param name="values">The argument values.</param>
            <returns>The created method call value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePhi(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a new phi node builder.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The given node type.</param>
            <returns>The created phi builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePhi(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new phi node builder.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The given node type.</param>
            <param name="capacity">The initial capacity.</param>
            <returns>The created phi builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePredicate(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Creates a conditional if predicate.
            </summary>
            <param name="location">The current location.</param>
            <param name="condition">The condition.</param>
            <param name="trueValue">The true value.</param>
            <param name="falseValue">The false value.</param>
            <returns>A node that represents the predicate operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateObjectValue(ILGPU.IR.Location,System.Object)">
            <summary>
            Creates a new object value.
            </summary>
            <param name="location">The current location.</param>
            <param name="instance">The object value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArrayValue(ILGPU.IR.Location,System.Array,System.Type,System.Boolean)">
            <summary>
            Create an intrinsic .Net array from a managed array instance.
            </summary>
            <param name="location">The current location.</param>
            <param name="array">The managed array instance.</param>
            <param name="managedElementType">
            The managed element type of the array.
            </param>
            <param name="force">
            True, if you want to ignore safety checks for (potentially) modifiable array
            values.
            </param>
            <returns>The created array value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateImmutableArrayValue(ILGPU.IR.Location,System.Object,System.Type,System.Type)">
            <summary>
            Creates an instance of a managed <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="instance">The instance value.</param>
            <param name="managedType">The managed instance type.</param>
            <param name="managedElementType">
            The managed element type of the array.
            </param>
            <returns>The created value array.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.AddPaddingFields(ILGPU.IR.Values.StructureValue.Builder@,ILGPU.IR.Location,System.Object,System.Int32,System.Int32)">
            <summary>
            Copies the remaining bytes to fill the structure fields.
            </summary>
            <param name="instanceBuilder">The current structure builder.</param>
            <param name="location">The current location.</param>
            <param name="rawFieldValue">The field of the structure to copy.</param>
            <param name="initialBytes">The starting offset in bytes.</param>
            <param name="numBytes">The size of the structure in bytes.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateStructure(ILGPU.IR.Location,ILGPU.IR.Types.StructureType)">
            <summary>
            Creates a new structure instance builder.
            </summary>
            <param name="location">The current location.</param>
            <param name="structureType">The structure type.</param>
            <returns>The created structure instance builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDynamicStructure(ILGPU.IR.Location)">
            <summary>
            Creates a new dynamic structure instance builder.
            </summary>
            <param name="location">The current location.</param>
            <returns>The created structure instance builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDynamicStructure(ILGPU.IR.Location,System.Int32)">
            <summary>
            Creates a new dynamic structure instance builder.
            </summary>
            <param name="location">The current location.</param>
            <param name="capacity">The initial capacity.</param>
            <returns>The created structure instance builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDynamicStructure(ILGPU.IR.Location,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Creates a new dynamic structure instance.
            </summary>
            <param name="location">The current location.</param>
            <param name="values">The initial values.</param>
            <returns>The created structure instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDynamicStructure(ILGPU.IR.Location,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Creates a new dynamic structure instance.
            </summary>
            <param name="location">The current location.</param>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
            <returns>The created structure instance value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDynamicStructure(ILGPU.IR.Location,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Creates a new dynamic structure instance.
            </summary>
            <param name="location">The current location.</param>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
            <param name="item3">The third item.</param>
            <returns>The created structure instance value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateDynamicStructure``1(ILGPU.IR.Location,``0)">
            <summary>
            Creates a new dynamic structure instance.
            </summary>
            <param name="location">The current location.</param>
            <param name="values">The list of all values to add.</param>
            <returns>The created structure instance value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.FinishStructureBuilder``1(``0@)">
            <summary>
            Creates a new structure instance value.
            </summary>
            <param name="builder">The structure instance builder.</param>
            <returns>The created structure instance value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetField(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Creates a load operation of an object field.
            </summary>
            <param name="location">The current location.</param>
            <param name="objectValue">The object value.</param>
            <param name="fieldSpan">The field span.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSetField(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Values.FieldSpan,ILGPU.IR.Value)">
            <summary>
            Creates a store operation of an object field using the given field access.
            </summary>
            <param name="location">The current location.</param>
            <param name="objectValue">The object value.</param>
            <param name="fieldSpan">The field span.</param>
            <param name="value">The field value to store.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateNewArray(ILGPU.IR.Location,ILGPU.IR.Types.ArrayType)">
            <summary>
            Creates a new array value builder.
            </summary>
            <param name="location">The current location.</param>
            <param name="arrayType">The parent array type of this array.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateEmptyArray(ILGPU.IR.Location,ILGPU.IR.Types.ArrayType)">
            <summary>
            Creates a new empty array value.
            </summary>
            <param name="location">The current location.</param>
            <param name="arrayType">The parent array type of this array.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.FinishNewArray(ILGPU.IR.Location,ILGPU.IR.Types.ArrayType,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Creates a new array value with the given length in each dimension.
            </summary>
            <param name="location">The current location.</param>
            <param name="arrayType">The parent array type of this array.</param>
            <param name="dimensions">The list of all array dimension lengths.</param>
            <returns>The created array value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetArrayLength(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a value representing the total 32-bit length of the given array.
            </summary>
            <param name="location">The current location.</param>
            <param name="array">The array instance.</param>
            <returns>A reference representing the total 32-bit array length.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetArrayLength(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Creates a value to determine the length of an array with respect to a
            specific dimension.
            </summary>
            <param name="location">The current location.</param>
            <param name="array">The array instance.</param>
            <param name="dimension">The desired array dimension.</param>
            <returns>The target array element address.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateLoadArrayElementAddress(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a builder to compute an array element address.
            </summary>
            <param name="location">The current location.</param>
            <param name="array">The array instance.</param>
            <returns>The target array element address.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.FinishLoadArrayElementAddress(ILGPU.IR.Location,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Creates a laea value.
            </summary>
            <param name="location">The current location.</param>
            <param name="values">
            The array value and a single value index for each array dimension.
            </param>
            <returns>The array element address.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateReturn(ILGPU.IR.Location)">
            <summary>
            Creates a new return terminator.
            </summary>
            <param name="location">The current location.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateReturn(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a new return terminator.
            </summary>
            <param name="location">The current location.</param>
            <param name="returnValue">The return value.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBranch(ILGPU.IR.Location,ILGPU.IR.BasicBlock)">
            <summary>
            Creates a new unconditional branch.
            </summary>
            <param name="location">The current location.</param>
            <param name="target">The target block.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateIfBranch(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Creates a new conditional branch using no specific flags.
            </summary>
            <param name="location">The current location.</param>
            <param name="condition">The branch condition.</param>
            <param name="trueTarget">The true target block.</param>
            <param name="falseTarget">The false target block.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateIfBranch(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock,ILGPU.IR.Values.IfBranchFlags)">
            <summary>
            Creates a new conditional branch using the given flags.
            </summary>
            <param name="location">The current location.</param>
            <param name="condition">The branch condition.</param>
            <param name="trueTarget">The true target block.</param>
            <param name="falseTarget">The false target block.</param>
            <param name="flags">The branch flags.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSwitchBranch(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a switch terminator builder.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The selection value.</param>
            <returns>The created switch builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSwitchBranch(ILGPU.IR.Location,ILGPU.IR.Value,System.Int32)">
            <summary>
            Creates a switch terminator builder.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The selection value.</param>
            <param name="capacity">The expected number of cases to append.</param>
            <returns>The created switch builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateSwitchBranch(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Creates a switch terminator.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The selection value.</param>
            <param name="targets">The list of target blocks.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBuilderTerminator(System.Int32)">
            <summary>
            Creates a temporary builder terminator.
            </summary>
            <param name="capacity">The expected number of branch targets.</param>
            <returns>The created terminator builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBuilderTerminator(ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Creates a temporary builder terminator.
            </summary>
            <param name="targets">All branch targets.</param>
            <returns>The created terminator.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBarrier(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Values.PredicateBarrierKind)">
            <summary>
            Creates a new predicated barrier.
            </summary>
            <param name="location">The current location.</param>
            <param name="predicate">The barrier predicate.</param>
            <param name="kind">The barrier kind.</param>
            <returns>A node that represents the barrier.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBarrier(ILGPU.IR.Location,ILGPU.IR.Values.BarrierKind)">
            <summary>
            Creates a new barrier.
            </summary>
            <param name="location">The current location.</param>
            <param name="kind">The barrier kind.</param>
            <returns>A node that represents the barrier.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.IsShuffleOrBroadcastConstant(ILGPU.IR.Value)">
            <summary>
            Returns true if the given variable is a constant with respect to a broadcast
            or shuffle value operating on the warp or the group level.
            </summary>
            <param name="variable">The variable to test.</param>
            <returns>
            True, if the given variable is a constant in the parent broadcast or shuffle
            context.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateBroadcast(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.BroadcastKind)">
            <summary>
            Creates a new broadcast operation.
            </summary>
            <param name="location">The current location.</param>
            <param name="variable">The variable.</param>
            <param name="origin">
            The broadcast origin (thread index within a group or a warp).
            </param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the broadcast operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateShuffle(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Creates a new shuffle operation involving all lanes of a warp.
            </summary>
            <param name="location">The current location.</param>
            <param name="variable">The variable.</param>
            <param name="origin">The shuffle origin (depends on the operation).</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the shuffle operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateShuffle(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Creates a new sub-warp shuffle operation that operates
            on sub-groups of a warp.
            </summary>
            <param name="location">The current location.</param>
            <param name="variable">The variable.</param>
            <param name="origin">The shuffle origin (depends on the operation).</param>
            <param name="width">The sub-warp width.</param>
            <param name="kind">The operation kind.</param>
            <returns>A node that represents the sub shuffle operation.</returns>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.TypeContext">
            <summary>
            Returns the associated type context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.VoidType">
            <summary>
            Returns the void type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRBuilder.StringType">
            <summary>
            Returns the string type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.GetPrimitiveType(ILGPU.BasicValueType)">
            <summary>
            Creates a primitive type.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The created primitive type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePointerType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a pointer type.
            </summary>
            <param name="elementType">The pointer element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created pointer type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a view type.
            </summary>
            <param name="elementType">The view element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateArrayType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new array type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="dimensions">The number of array dimensions.</param>
            <returns>The created array type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateStructureType(System.Int32)">
            <summary>
            Creates a new structure type builder with the given capacity.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <returns>The created structure builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateType(System.Type)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateType(System.Type,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <param name="addressSpace">The address space for pointer types.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.SpecializeAddressSpaceType(ILGPU.IR.Types.AddressSpaceType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Specializes the address space of the given <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.
            </summary>
            <param name="addressSpaceType">The source type.</param>
            <param name="addressSpace">The new address space.</param>
            <returns>The created specialized <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.TrySpecializeAddressSpaceType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Types.TypeNode@)">
            <summary>
            Tries to specialize a view or a pointer address space.
            </summary>
            <param name="type">The pointer or view type.</param>
            <param name="addressSpace">The target address space.</param>
            <param name="specializedType">The specialized type.</param>
            <returns>True, if the type could be specialized.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateNull(ILGPU.IR.Location,ILGPU.IR.Types.TypeNode)">
            <summary>
            Creates a null value for the given type.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The target type.</param>
            <returns>The null reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateEnumValue(ILGPU.IR.Location,System.Object)">
            <summary>
            Creates a new primitive <see cref="T:System.Enum"/> constant.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The object value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Object)">
            <summary>
            Creates a new primitive constant.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The object value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.String)">
            <summary>
            Creates a new string constant.
            </summary>
            <param name="location">The current location.</param>
            <param name="string">The string value.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.String,System.Text.Encoding)">
            <summary>
            Creates a new string constant.
            </summary>
            <param name="location">The current location.</param>
            <param name="string">The string value.</param>
            <param name="encoding">The specific encoding.</param>
            <returns>A reference to the requested value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Boolean)">
            <summary>
            Creates a primitive <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.SByte)">
            <summary>
            Creates a primitive <see cref="T:System.SByte"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Byte)">
            <summary>
            Creates a primitive <see cref="T:System.Byte"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Int16)">
            <summary>
            Creates a primitive <see cref="T:System.Int16"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.UInt16)">
            <summary>
            Creates a primitive <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Int32)">
            <summary>
            Creates a primitive <see cref="T:System.Int32"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.UInt32)">
            <summary>
            Creates a primitive <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Int64)">
            <summary>
            Creates a primitive <see cref="T:System.Int64"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.UInt64)">
            <summary>
            Creates a primitive <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,ILGPU.Half)">
            <summary>
            Creates a primitive <see cref="T:ILGPU.Half"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Single)">
            <summary>
            Creates a primitive <see cref="T:System.Single"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,System.Double)">
            <summary>
            Creates a primitive <see cref="T:System.Double"/> value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreatePrimitiveValue(ILGPU.IR.Location,ILGPU.BasicValueType,System.Int64)">
            <summary>
            Creates a primitive value.
            </summary>
            <param name="location">The current location.</param>
            <param name="type">The value type.</param>
            <param name="rawValue">The raw value (sign-extended to long).</param>
            <returns>The created primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateValue(ILGPU.IR.Location,System.Object,System.Type)">
            <summary>
            Creates a generic value.
            </summary>
            <param name="location">The current location.</param>
            <param name="value">The value.</param>
            <param name="type">The value type.</param>
            <returns>The created value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateNewView(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Constructs a new view from a pointer and a length.
            </summary>
            <param name="location">The current location.</param>
            <param name="pointer">The source pointer.</param>
            <param name="length">The length.</param>
            <returns>A node that represents the created view.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetViewLength(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a node that resolves the length of the given view.
            </summary>
            <param name="location">The current location.</param>
            <param name="view">The source view.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetViewLongLength(ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Creates a node that resolves the length of the given view.
            </summary>
            <param name="location">The current location.</param>
            <param name="view">The source view.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetViewLength(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.BasicValueType)">
            <summary>
            Creates a node that resolves the length of the given view.
            </summary>
            <param name="location">The current location.</param>
            <param name="view">The source view.</param>
            <param name="lengthType">The length type.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.CreateGetViewStride(ILGPU.IR.Location)">
            <summary>
            Creates a node that gets the stride of an intrinsic array view.
            </summary>
            <param name="location">The current location.</param>
            <returns>The created node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.BinaryArithmeticSimplify_LHS(ILGPU.IR.Location,ILGPU.IR.Values.PrimitiveValue,ILGPU.IR.Value,ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Simplifies the LHS of a binary expression.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.BinaryArithmeticSimplify_RHS(ILGPU.IR.Location,ILGPU.IR.Value,ILGPU.IR.Values.PrimitiveValue,ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Simplifies the RHS of a binary expression.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.BinaryArithmeticSimplify_LHS(ILGPU.IR.Location,ILGPU.IR.Values.BinaryArithmeticValue,ILGPU.IR.Values.PrimitiveValue,ILGPU.IR.Values.PrimitiveValue,ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Simplifies the LHS of a binary expression.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRBuilder.BinaryArithmeticSimplify_RHS(ILGPU.IR.Location,ILGPU.IR.Values.BinaryArithmeticValue,ILGPU.IR.Values.PrimitiveValue,ILGPU.IR.Values.PrimitiveValue,ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Simplifies the RHS of a binary expression.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Construction.IRRebuilder">
            <summary>
            Represents an IR rebuilder to rebuild parts of the IR.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Construction.IRRebuilder.IMode">
            <summary>
            An abstract rebuilder mode.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.IMode.InitMapping``1(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,``0@,ILGPU.IR.BasicBlockMap{ILGPU.IR.BasicBlock.Builder}@)">
            <summary>
            Initializes a new block mapping.
            </summary>
            <typeparam name="TRemapper">The custom remapper type.</typeparam>
            <param name="builder">The parent builder.</param>
            <param name="blocks">The block collection.</param>
            <param name="remapper">The custom block remapper.</param>
            <param name="mapping">The mapping to initialize.</param>
        </member>
        <member name="T:ILGPU.IR.Construction.IRRebuilder.CloneMode">
            <summary>
            The clone mode for rebuilding methods into a stub.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.CloneMode.InitMapping``1(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,``0@,ILGPU.IR.BasicBlockMap{ILGPU.IR.BasicBlock.Builder}@)">
            <summary>
            Initializes a new mapping that maps each block to a new block except
            the init block which will be rewired.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Construction.IRRebuilder.InlineMode">
            <summary>
            The inlining mode for rebuilding a method into a set of new blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.InlineMode.Register``1(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock,``0@,ILGPU.IR.BasicBlockMap{ILGPU.IR.BasicBlock.Builder}@)">
            <summary>
            Registers an internal block.
            </summary>
            <typeparam name="TRemapper">The user-defined remapper type.</typeparam>
            <param name="builder">The parent builder.</param>
            <param name="block">The current block to register.</param>
            <param name="remapper">The custom block remapper.</param>
            <param name="mapping">The mapping to initialize.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.InlineMode.InitMapping``1(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,``0@,ILGPU.IR.BasicBlockMap{ILGPU.IR.BasicBlock.Builder}@)">
            <summary>
            Initializes a new mapping that maps each block to a new block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Create``1(ILGPU.IR.Method.Builder,ILGPU.IR.Method.ParameterMapping,ILGPU.IR.Method.MethodMapping,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Creates a new rebuilder.
            </summary>
            <typeparam name="TMode">The rebuilder mode.</typeparam>
            <param name="builder">The parent builder.</param>
            <param name="parameterMapping">The used parameter remapping.</param>
            <param name="methodRemapping">The used method remapping.</param>
            <param name="blocks">The block collection.</param>
            <returns>The created rebuilder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Create``2(ILGPU.IR.Method.Builder,ILGPU.IR.Method.ParameterMapping,ILGPU.IR.Method.MethodMapping,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,``1@)">
            <summary>
            Creates a new rebuilder.
            </summary>
            <typeparam name="TMode">The rebuilder mode.</typeparam>
            <typeparam name="TRemapper">The custom remapper type.</typeparam>
            <param name="builder">The parent builder.</param>
            <param name="parameterMapping">The used parameter remapping.</param>
            <param name="methodRemapping">The used method remapping.</param>
            <param name="blocks">The block collection.</param>
            <param name="remapper">The custom block remapper.</param>
            <returns>The created rebuilder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Create(ILGPU.IR.Method.Builder,System.Collections.Generic.Dictionary{ILGPU.IR.Value,ILGPU.IR.Value},ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Creates a new rebuilder.
            </summary>
            <param name="builder">The parent builder.</param>
            <param name="valueRemapping">The value remapping to use.</param>
            <param name="blocks">The block collection.</param>
            <returns>The created rebuilder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Create``1(ILGPU.IR.Method.Builder,System.Collections.Generic.Dictionary{ILGPU.IR.Value,ILGPU.IR.Value},ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,``0@)">
            <summary>
            Creates a new rebuilder.
            </summary>
            <typeparam name="TRemapper">The custom remapper type.</typeparam>
            <param name="builder">The parent builder.</param>
            <param name="valueRemapping">The value remapping to use.</param>
            <param name="blocks">The block collection.</param>
            <param name="remapper">The custom block remapper.</param>
            <returns>The created rebuilder.</returns>
        </member>
        <member name="F:ILGPU.IR.Construction.IRRebuilder.methodMapping">
            <summary>
            Maps source methods to target methods.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.IRRebuilder.blockMapping">
            <summary>
            Maps old blocks to new block builders.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.IRRebuilder.phiMapping">
            <summary>
            Maps old phi nodes to new phi builders.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.IRRebuilder.valueMapping">
            <summary>
            Maps old nodes to new nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.#ctor(ILGPU.IR.Method.Builder,ILGPU.IR.Method.ParameterMapping,ILGPU.IR.Method.MethodMapping,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.BasicBlockMap{ILGPU.IR.BasicBlock.Builder}@)">
            <summary>
            Constructs a new IR rebuilder.
            </summary>
            <param name="builder">The parent builder.</param>
            <param name="parameterMapping">The used parameter remapping.</param>
            <param name="blocks">The block collection.</param>
            <param name="methodRemapping">The used method remapping.</param>
            <param name="blockRemapping">The internal block remapping.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.#ctor(ILGPU.IR.Method.Builder,System.Collections.Generic.Dictionary{ILGPU.IR.Value,ILGPU.IR.Value},ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.BasicBlockMap{ILGPU.IR.BasicBlock.Builder}@)">
            <summary>
            Constructs a new IR rebuilder.
            </summary>
            <param name="builder">The parent builder.</param>
            <param name="valueRemapping">The values to remap.</param>
            <param name="blocks">The block collection.</param>
            <param name="blockRemapping">The internal block remapping.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.InitPhiValues(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Initializes all phi values.
            </summary>
            <param name="blocks">The source block collection.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.Builder">
            <summary>
            Returns the associated method builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.Blocks">
            <summary>
            Returns the associated collection.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.EntryBlock">
            <summary>
            Returns the target entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.CurrentBlock">
            <summary>
            Gets or sets the current block builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Lookups the given block in the internal rebuilder remapping.
            </summary>
            <param name="block">The block to lookup.</param>
            <returns>The mapped block builder representing the new block.</returns>
        </member>
        <member name="P:ILGPU.IR.Construction.IRRebuilder.Item(ILGPU.IR.Value)">
            <summary>
            Lookups the given value in the internal rebuilder remapping.
            </summary>
            <param name="value">The value to lookup.</param>
            <returns>The mapped block builder representing the new block.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Rebuild">
            <summary>
            Rebuilds all values.
            </summary>
            <returns>The exit block and the associated return value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.TryGetNewNode(ILGPU.IR.Value,ILGPU.IR.Value@)">
            <summary>
            Tries to lookup the new node representation of the given old node.
            </summary>
            <param name="oldNode">The old node.</param>
            <param name="newNode">The new node.</param>
            <returns>True, if a corresponding new node could be found.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Map(ILGPU.IR.Value,ILGPU.IR.Value)">
            <summary>
            Maps the old node to the new node.
            </summary>
            <param name="oldNode">The old node.</param>
            <param name="newNode">The new node.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.ExportNodeMapping``1(``0)">
            <summary>
            Exports the internal node mapping to the given target dictionary.
            </summary>
            <typeparam name="TDictionary">The dictionary type.</typeparam>
            <param name="target">The target dictionary.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.LookupCallTarget(ILGPU.IR.Method)">
            <summary>
            Resolves a method for the given old method
            </summary>
            <param name="oldTarget">The old method.</param>
            <returns>The resolved method.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.LookupTarget(ILGPU.IR.BasicBlock)">
            <summary>
            Resolves a basic block builder for the given old block.
            </summary>
            <param name="oldTarget">The old basic block.</param>
            <returns>The resolved block builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.RebuildTo(System.ReadOnlySpan{ILGPU.IR.Values.ValueReference},ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Rebuilds the given values as span into the <paramref name="rebuilt"/> list.
            </summary>
            <param name="values">The values to rebuild.</param>
            <param name="rebuilt">The target list to insert all elements into.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Rebuild(System.ReadOnlySpan{ILGPU.IR.Values.ValueReference})">
            <summary>
            Rebuilds the given values as span and returns the rebuilt value list.
            </summary>
            <param name="values">The values to rebuild.</param>
            <returns>The new nodes.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.Rebuild(ILGPU.IR.Value)">
            <summary>
            Rebuilds to given source node using lookup tables.
            </summary>
            <param name="source">The source node.</param>
            <returns>The new node.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.IRRebuilder.RebuildAs``1(ILGPU.IR.Value)">
            <summary>
            Rebuilds to given source node using lookup tables and
            returns the resolved casted to a specific type.
            </summary>
            <typeparam name="T">The target type to cast the new node to.</typeparam>
            <param name="source">The source node.</param>
            <returns>The new node.</returns>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1">
            <summary>
            Constructs IR nodes that are in SSA form.
            </summary>
            <typeparam name="TVariable">The variable type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1.Enumerator">
            <summary>
            A successor or predecessor enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Enumerator.#ctor(System.Collections.Generic.HashSet{ILGPU.IR.Construction.SSABuilder{`0}.ValueContainer})">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="values">The values to enumerate.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.Enumerator.Current">
            <summary>
            Returns the current value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Enumerator.Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1.MarkerProvider">
            <summary>
            Provides marker values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.MarkerProvider.#ctor(System.Int32)">
            <summary>
            Constructs a new marker provider.
            </summary>
            <param name="markerValue">The current marker value.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.MarkerProvider.MarkerValue">
            <summary>
            Returns the current marker value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.MarkerProvider.CreateMarker">
            <summary>
            Creates a new marker value.
            </summary>
            <returns>The created marker value.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.MarkerProvider.Apply(System.Int32@)">
            <summary>
            Applies the internal marker value to the given target.
            </summary>
            <param name="targetMarkerValue">
            The target marker value reference.
            </param>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1.ValueContainer">
            <summary>
            Represents a basic block during cps construction.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi">
            <summary>
            Represents an incomplete phi parameter that has to be
            completed by adding its required operands later on.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi.#ctor(`0,ILGPU.IR.Values.PhiValue.Builder)">
            <summary>
            Constructs an incomplete phi.
            </summary>
            <param name="variableRef">The referenced variable.</param>
            <param name="phiBuilder">The phi builder.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi.VariableRef">
            <summary>
            Returns the associated variable ref.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi.PhiBuilder">
            <summary>
            Returns the associated phi builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi.PhiType">
            <summary>
            Returns the type of the underlying phi node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IncompletePhi.Location">
            <summary>
            Returns the location of the phi node.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.markerValue">
            <summary>
            Represents the internal marker value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.blockBuilder">
            <summary>
            Represents the current block builder.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.values">
            <summary>
            Value cache for SSA GetValue and SetValue functionality.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.incompletePhis">
            <summary>
            Container for incomplete "phis" that have to be wired during block
            sealing.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.#ctor(ILGPU.IR.Construction.SSABuilder{`0},ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new SSA block.
            </summary>
            <param name="parent">The associated parent builder.</param>
            <param name="block">The current block.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.Parent">
            <summary>
            Returns the parent SSA builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.Block">
            <summary>
            Returns the associated basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.Builder">
            <summary>
            Returns the associated block builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IsSealed">
            <summary>
            Returns True if this block is sealed.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.CanSeal">
            <summary>
            Returns true if this block can be sealed.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.IsProcessed">
            <summary>
            Returns true if this block has been processed.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.Mark(System.Int32)">
            <summary>
            Marks the current block with the new marker value.
            </summary>
            <param name="newMarker">The new value to apply.</param>
            <returns>
            True, if the old marker was not equal to the new marker
            (the block was not marked with the new marker value).
            </returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.SetValue(`0,ILGPU.IR.Value)">
            <summary>
            Sets the given variable to the given value.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.GetValue(`0,ILGPU.IR.Construction.SSABuilder{`0}.MarkerProvider@)">
            <summary>
            Returns the value of the given variable.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="markerProvider">A provider of new marker values.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.RemoveValue(`0)">
            <summary>
            Removes the value of the given variable.
            </summary>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.PeekValue(`0,System.Int32)">
            <summary>
            Peeks a value recursively. This method only retrieves a value
            from a predecessor but does not build any phi nodes.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="marker">The current marker to break cycles.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.GetValueRecursive(`0,ILGPU.IR.Construction.SSABuilder{`0}.MarkerProvider@)">
            <summary>
            Returns the value of the given variable by asking the predecessors.
            This method recursively constructs required phi nodes to break cycles.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="markerProvider">A provider of new marker values.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.SetupPhiArguments(ILGPU.IR.Construction.SSABuilder{`0}.ValueContainer.IncompletePhi,ILGPU.IR.Construction.SSABuilder{`0}.MarkerProvider@)">
            <summary>
            Setups phi arguments for the given variable reference and the given
            phi parameter. This method is invoked for sealed blocks during CPS
            construction or during the sealing process in the last step.
            </summary>
            <param name="incompletePhi">An incomplete phi node to complete.</param>
            <param name="markerProvider">A provider of new marker values.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.Seal(ILGPU.IR.Construction.SSABuilder{`0}.MarkerProvider@)">
            <summary>
            Seals this block (called when all predecessors have been seen) and
            wires all (previously unwired) phi nodes.
            </summary>
            <param name="markerProvider">A provider of new marker values.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.TrySealSuccessors(ILGPU.IR.Construction.SSABuilder{`0}.MarkerProvider@)">
            <summary>
            Tries to seal all successor blocks of this one.
            </summary>
            <param name="markerProvider">A provider of new marker values.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainer.ToString">
            <summary>
            Returns the string representation of this block.
            </summary>
            <returns>The string representation of this block.</returns>
        </member>
        <member name="T:ILGPU.IR.Construction.SSABuilder`1.ValueContainerProvider">
            <summary>
            Provides <see cref="T:ILGPU.IR.Construction.SSABuilder`1.ValueContainer"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainerProvider.#ctor(ILGPU.IR.Construction.SSABuilder{`0})">
            <summary>
            Constructs a new container provider.
            </summary>
            <param name="parent">The parent SSA builder.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.ValueContainerProvider.Parent">
            <summary>
            Returns the parent SSA builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ValueContainerProvider.GetValue(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Creates a new <see cref="T:ILGPU.IR.Construction.SSABuilder`1.ValueContainer"/> instance.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Create(ILGPU.IR.Method.Builder)">
            <summary>
            Creates a new SSA builder.
            </summary>
            <param name="methodBuilder">The current method builder.</param>
            <returns>The created SSA builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Create(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Creates a new SSA builder.
            </summary>
            <param name="methodBuilder">The current method builder.</param>
            <param name="blockCollection">The block collection.</param>
            <returns>The created SSA builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.#ctor(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Constructs a new SSA builder.
            </summary>
            <param name="methodBuilder">The current method builder.</param>
            <param name="blockCollection">The block collection.</param>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.MethodBuilder">
            <summary>
            Returns the associated method builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.Blocks">
            <summary>
            Returns the underlying list of blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Construction.SSABuilder`1.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the internal value container for the given block.
            </summary>
            <param name="block">The basic block.</param>
            <returns>The resolved value container.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.SetValue(ILGPU.IR.BasicBlock,`0,ILGPU.IR.Value)">
            <summary>
            Sets the given variable to the given value.
            </summary>
            <param name="block">The target block.</param>
            <param name="var">The variable reference.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.GetValue(ILGPU.IR.BasicBlock,`0)">
            <summary>
            Returns the value of the given variable.
            </summary>
            <param name="block">The target block.</param>
            <param name="var">The variable reference.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.RemoveValue(ILGPU.IR.BasicBlock,`0)">
            <summary>
            Removes the value of the given variable.
            </summary>
            <param name="block">The target block.</param>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Process(ILGPU.IR.BasicBlock)">
            <summary>
            Tries to process the associated block.
            </summary>
            <param name="block">The target block.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Seal(ILGPU.IR.Construction.SSABuilder{`0}.ValueContainer)">
            <summary>
            Tries to seals the associated block.
            </summary>
            <param name="container">The container to seal.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.Seal(ILGPU.IR.BasicBlock)">
            <summary>
            Tries to seals the associated node.
            </summary>
            <param name="block">The target block.</param>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.ProcessAndSeal(ILGPU.IR.BasicBlock)">
            <summary>
            Tries to process the given node while always trying to seal the given node.
            </summary>
            <param name="block">The basic block.</param>
            <returns>True, if the node has not been processed.</returns>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.TrySealSuccessors(ILGPU.IR.BasicBlock)">
            <summary>
            Tries to seal all successors of the given block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.SealRemainingBlocks">
            <summary>
            Seals all remaining blocks in the appropriate order.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Construction.SSABuilder`1.AssertAllSealed">
            <summary>
            Asserts that all blocks have been sealed.
            </summary>
            <remarks>
            This operation is only available in debug mode.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Method">
            <summary>
            Represents a method node within the IR.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Method.Builder">
            <summary>
            A builder to build methods.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Method.Builder.ExitBlockVisitor">
            <summary>
            An exit block visitor to gather exit blocks.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Method.Builder.ExitBlockVisitor.exitBlock">
            <summary>
            The exit block in case of a single one.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.ExitBlockVisitor.HasMultipleExitBlocks">
            <summary>
            Returns true if there is more than one exit block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.ExitBlockVisitor.ExitBlocks">
            <summary>
            Returns the list of exit blocks in the case of multiple exit blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.ExitBlockVisitor.Visit(ILGPU.IR.BasicBlock)">
            <summary>
            Checks whether the given block is an exit block and collects this
            block if it turns out to be an exit block.
            </summary>
            <param name="block">The block to add.</param>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.RequiresControlFlowUpdate(ILGPU.IR.Values.TerminatorValue,ILGPU.IR.Values.TerminatorValue)">
            <summary>
            Checks whether we have to update the control-flow structure.
            </summary>
            <param name="oldTerminator">The old terminator (if any).</param>
            <param name="newTerminator">The new terminator.</param>
            <returns>
            True, if we have to update the control-flow structure.
            </returns>
        </member>
        <member name="F:ILGPU.IR.Method.Builder.builderCompleted">
            <summary>
            Indicates if the builder completed successfully. If not, skip some of the
            processing that occurs during disposal.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Method.Builder.basicBlockBuilders">
            <summary>
            All created basic block builders.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.#ctor(ILGPU.IR.Method)">
            <summary>
            Constructs a new method builder.
            </summary>
            <param name="method">The parent method.</param>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.BaseContext">
            <summary>
            Returns the associated IR base context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.TypeContext">
            <summary>
            Returns the associated type context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Location">
            <summary>
            Returns the location of the underlying method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.EntryBlock">
            <summary>
            Gets the current entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.EntryBlockBuilder">
            <summary>
            Returns the builder of the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Handle">
            <summary>
            Returns the associated function handle.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Source">
            <summary>
            Returns the original source method (may be null).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.SourceBlocks">
            <summary>
            Returns all blocks of the source method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Item(System.Int32)">
            <summary>
            Returns the parameter with the given index.
            </summary>
            <param name="index">The parameter index.</param>
            <returns>The resolved parameter.</returns>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.Item(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the associated basic block builder.
            </summary>
            <param name="basicBlock">
            The basic block to resolve the builder for.
            </param>
            <returns>The resolved basic block builder.</returns>
        </member>
        <member name="P:ILGPU.IR.Method.Builder.NumParams">
            <summary>
            Returns the number of parameters.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.ScheduleControlFlowUpdate">
            <summary>
            Schedules control-flow updates.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.ScheduleControlFlowUpdate(ILGPU.IR.Values.TerminatorValue,ILGPU.IR.Values.TerminatorValue)">
            <summary>
            Schedules control-flow updates if the successor relation has been
            changed by setting a new terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.AcceptControlFlowUpdates(System.Boolean)">
            <summary>
            Accepts or rejects control-flow updates in case of control-flow changes.
            </summary>
            <param name="accept">True, if all changes will be accepted.</param>
            <remarks>
            This operation is only available in debug mode.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.AssertNoControlFlowUpdate">
            <summary>
            Asserts that no control-flow update has happened and the predecessor
            and successor relations are still up to date.
            </summary>
            <remarks>
            This operation is only available in debug mode.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include the current debug information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.UpdateReturnType``1(``0)">
            <summary>
            Converts the return type.
            </summary>
            <typeparam name="TTypeConverter">The type converter.</typeparam>
            <param name="typeConverter">The type converter instance.</param>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.UpdateParameterTypes``1(``0)">
            <summary>
            Converts all parameter types.
            </summary>
            <typeparam name="TTypeConverter">The type converter.</typeparam>
            <param name="typeConverter">The type converter instance.</param>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateRebuilder``1(ILGPU.IR.Method.ParameterMapping,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Creates a new rebuilder that works on the given scope.
            </summary>
            <typeparam name="TMode">The rebuilder mode.</typeparam>
            <param name="parameterMapping">
            The target value of every parameter.
            </param>
            <param name="blocks">The block collection.</param>
            <returns>The created rebuilder.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateRebuilder``1(ILGPU.IR.Method.ParameterMapping,ILGPU.IR.Method.MethodMapping,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Creates a new rebuilder that works on the given scope.
            </summary>
            <typeparam name="TMode">The rebuilder mode.</typeparam>
            <param name="parameterMapping">
            The target value of every parameter.
            </param>
            <param name="methodMapping">The method mapping.</param>
            <param name="blocks">The block collection.</param>
            <returns>The created rebuilder.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.AddParameter(ILGPU.IR.Types.TypeNode)">
            <summary>
            Adds a new parameter to the encapsulated function.
            </summary>
            <param name="type">The parameter type.</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.AddParameter(ILGPU.IR.Types.TypeNode,System.String)">
            <summary>
            Adds a new parameter to the encapsulated function.
            </summary>
            <param name="type">The parameter type.</param>
            <param name="name">The parameter name (for debugging purposes).</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.InsertParameter(ILGPU.IR.Types.TypeNode)">
            <summary>
            Inserts a new parameter to the encapsulated function at the beginning.
            </summary>
            <param name="type">The parameter type.</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.InsertParameter(ILGPU.IR.Types.TypeNode,System.String)">
            <summary>
            Inserts a new parameter to the encapsulated function at the beginning.
            </summary>
            <param name="type">The parameter type.</param>
            <param name="name">The parameter name (for debugging purposes).</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateParam(ILGPU.IR.Types.TypeNode,System.String)">
            <summary>
            Creates a parameter with the given index and type information.
            </summary>
            <param name="type">The parameter type.</param>
            <param name="name">The parameter name (for debugging purposes).</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateBasicBlock(ILGPU.IR.Location)">
            <summary>
            Creates a new basic block.
            </summary>
            <param name="location">The current location.</param>
            <returns>The created basic block.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.CreateBasicBlock(ILGPU.IR.Location,System.String)">
            <summary>
            Creates a new basic block.
            </summary>
            <param name="location">The current location.</param>
            <param name="name">The block name.</param>
            <returns>The created basic block.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.ILGPU#IR#Analyses#IMovementScope#TryFindFirstValueOf``1(ILGPU.IR.BasicBlock,System.Predicate{``0},System.ValueTuple{System.Int32,``0}@)">
            <summary>
            Implements the first value index search using all internally stored
            basic block builders.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.ComputeBlockCollection``1">
            <summary>
            Computes an updated block collection using the latest terminator
            information.
            </summary>
            <typeparam name="TOrder">The collection order.</typeparam>
            <returns>The newly ordered collection.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the underlying method to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.EnsureUniqueExitBlock">
            <summary>
            Ensures that there is only one exit block.
            </summary>
            <remarks>
            CAUTION: This function changes the control flow.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.Complete">
            <summary>
            Marks this builder as completed.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.UpdateParameters">
            <summary>
            Updates all parameter bindings.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.UpdateControlFlow">
            <summary>
            Updates the whole control-flow information of all blocks.
            </summary>
            <remarks>
            CAUTION: Applying a control-flow update to all blocks will cause all
            block instances to be modified.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="M:ILGPU.IR.Method.Builder.ToString">
            <summary>
            Returns the string representation of the underlying function.
            </summary>
            <returns>The string representation of the underlying function.</returns>
        </member>
        <member name="T:ILGPU.IR.Method.ParameterCollection">
            <summary>
            Represents a readonly view on all parameters.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Method.ParameterCollection.Enumerator">
            <summary>
            Enumerates all actual (not replaced) parameters.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.Enumerator.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.Parameter})">
            <summary>
            Constructs a new parameter enumerator.
            </summary>
            <param name="arguments">The parent source array.</param>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterCollection.Enumerator.Current">
            <summary>
            Returns the current parameter.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.Parameter})">
            <summary>
            Constructs a new parameter collection.
            </summary>
            <param name="nodeReferences">The source parameters.</param>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterCollection.Count">
            <summary>
            Returns the number of attached parameters.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterCollection.Item(System.Int32)">
            <summary>
            Returns the i-th parameter.
            </summary>
            <param name="index">The parameter index.</param>
            <returns>The resolved parameter.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.System#Collections#Generic#IEnumerable{ILGPU#IR#Values#Parameter}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerator all actual (not replaced) parameters.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.Method.ParameterMapping">
            <summary>
            Represents a parameter mapping.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.ParameterMapping.#ctor(ILGPU.IR.Method,System.ReadOnlySpan{ILGPU.IR.Values.ValueReference})">
            <summary>
            Constructs a new parameter mapping.
            </summary>
            <param name="method">The associated method.</param>
            <param name="arguments">The parameter arguments.</param>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterMapping.Method">
            <summary>
            Returns the associated method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterMapping.Arguments">
            <summary>
            Returns the associated arguments.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.ParameterMapping.Item(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the value that is assigned to the given parameter.
            </summary>
            <param name="parameter">The parameter to map to a value.</param>
            <returns>The mapped value.</returns>
        </member>
        <member name="T:ILGPU.IR.Method.MethodMapping">
            <summary>
            Represents a method mapping.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.MethodMapping.#ctor(System.Collections.Generic.Dictionary{ILGPU.IR.Method,ILGPU.IR.Method})">
            <summary>
            Constructs a new method mapping.
            </summary>
            <param name="methodMapping">The method mapping.</param>
        </member>
        <member name="P:ILGPU.IR.Method.MethodMapping.Item(ILGPU.IR.Method)">
            <summary>
            Resolve the source method to a remapped target method.
            </summary>
            <param name="source">The source method.</param>
            <returns>The resolved target method.</returns>
        </member>
        <member name="T:ILGPU.IR.Method.MethodLocation">
            <summary>
            Represents a location that is bound to a managed method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.MethodLocation.#ctor(System.Reflection.MethodBase)">
            <summary>
            Constructs a new method location.
            </summary>
            <param name="method">The target method (if any).</param>
        </member>
        <member name="P:ILGPU.IR.Method.MethodLocation.Method">
            <summary>
            Returns the managed method (if any).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.MethodLocation.FormatErrorMessage(System.String)">
            <summary>
            Tries to include managed method information if possible.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Method.Comparison">
            <summary>
            Compares two methods according to their id.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.ResolveMethodFlags(System.Reflection.MethodBase)">
            <summary>
            Resolves <see cref="T:ILGPU.IR.MethodFlags"/> that represents properties of the
            given method base.
            </summary>
            <param name="methodBase">The method base.</param>
            <returns>The resolved method flags.</returns>
        </member>
        <member name="F:ILGPU.IR.Method.transformationFlags">
            <summary>
            Stores internal transformation flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Method.blocks">
            <summary>
            Stores all blocks.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Method.parameters">
            <summary>
            Stores all parameters.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.#ctor(ILGPU.IR.IRBaseContext,ILGPU.IR.MethodDeclaration@,ILGPU.IR.Location)">
            <summary>
            Creates a new method instance.
            </summary>
            <param name="baseContext">The context this method belongs to.</param>
            <param name="declaration">The associated declaration.</param>
            <param name="location">The current location.</param>
        </member>
        <member name="P:ILGPU.IR.Method.IsMethod">
            <inheritdoc/>
        </member>
        <member name="P:ILGPU.IR.Method.BaseContext">
            <summary>
            Returns the associated IR context reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Name">
            <summary>
            Returns the associated method name.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Flags">
            <summary>
            Returns the associated method flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Declaration">
            <summary>
            Returns the associated method declaration.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Handle">
            <summary>
            Returns the associated method handle.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Source">
            <summary>
            Returns the original source method (may be null).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.HasSource">
            <summary>
            Returns true if the associated source method is not null.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.ReturnType">
            <summary>
            Returns the return-type of the method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.IsVoid">
            <summary>
            Returns true if the return type of the method is void.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.HasImplementation">
            <summary>
            Returns true if this method has an implementation
            (no intrinsic or external method).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.TransformationFlags">
            <summary>
            Returns the current transformation flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Parameters">
            <summary>
            Returns all attached parameters.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.NumParameters">
            <summary>
            Returns the number of attached parameters.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.EntryBlock">
            <summary>
            Returns the associated entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Blocks">
            <summary>
            Returns all attached blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.Values">
            <summary>
            Returns all attached values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Method.MethodBuilder">
            <summary>
            Returns the current builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.FindExitBlock">
            <summary>
            Computes the exit block.
            </summary>
            <returns>The exit block.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.GC">
            <summary>
            Performs an internal GC run.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Method.CreateParameterMapping(System.ReadOnlySpan{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Creates a new parameter mapping.
            </summary>
            <param name="arguments">The argument values.</param>
            <returns>The created parameter mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.Dump(System.IO.TextWriter)">
            <summary>
            Dumps this method to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.Method.SealParameters(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.Parameter})">
            <summary>
            Seals the current parameters.
            </summary>
            <param name="parameterArray">The new parameters.</param>
        </member>
        <member name="M:ILGPU.IR.Method.CreateBuilder">
            <summary>
            Creates a new builder for this method.
            </summary>
            <returns>The created builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.ReleaseBuilder(ILGPU.IR.Method.Builder)">
            <summary>
            Releases the given builder.
            </summary>
            <param name="oldBuilder">The builder to release.</param>
        </member>
        <member name="M:ILGPU.IR.Method.ExtractToContext(ILGPU.IR.Method@)">
            <summary>
            Extracts the current method and all of its dependencies into a separate
            context instance.
            </summary>
            <param name="method">The extracted method reference.</param>
            <returns>The created context instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.HasFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Returns true if this method has the given method flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, if this method has the given method flags.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.AddFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Adds the given flags to this method.
            </summary>
            <param name="flags">The flags to add.</param>
        </member>
        <member name="M:ILGPU.IR.Method.RemoveFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Removes the given flags from this method.
            </summary>
            <param name="flags">The flags to remove.</param>
        </member>
        <member name="M:ILGPU.IR.Method.HasTransformationFlags(ILGPU.IR.MethodTransformationFlags)">
            <summary>
            Returns true if this method has the given transformation flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, if this method has the given transformation flags.</returns>
        </member>
        <member name="M:ILGPU.IR.Method.AddTransformationFlags(ILGPU.IR.MethodTransformationFlags)">
            <summary>
            Adds the given flags to this method.
            </summary>
            <param name="flags">The flags to add.</param>
        </member>
        <member name="M:ILGPU.IR.Method.RemoveTransformationFlags(ILGPU.IR.MethodTransformationFlags)">
            <summary>
            Removes the given flags from this method.
            </summary>
            <param name="flags">The flags to remove.</param>
        </member>
        <member name="M:ILGPU.IR.Method.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.IDumpable">
            <summary>
            A dumpable IR object for debugging purposes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IDumpable.Dump(System.IO.TextWriter)">
            <summary>
            Dumps this object to the given text writer.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Dumpable">
            <summary>
            Helper methods for <see cref="T:ILGPU.IR.IDumpable"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Dumpable.DumpToConsole(ILGPU.IR.IDumpable)">
            <summary>
            Dumps the IR object to the console output.
            </summary>
            <param name="dumpable">The IR object to dump.</param>
        </member>
        <member name="M:ILGPU.IR.Dumpable.DumpToError(ILGPU.IR.IDumpable)">
            <summary>
            Dumps the IR object to the console error output.
            </summary>
            <param name="dumpable">The IR object to dump.</param>
        </member>
        <member name="M:ILGPU.IR.Dumpable.DumpToFile(ILGPU.IR.IDumpable,System.String)">
            <summary>
            Dumps the IR object to a file.
            </summary>
            <param name="dumpable">The IR object to dump.</param>
            <param name="fileName">The target file name to write to.</param>
        </member>
        <member name="T:ILGPU.IR.ILocation">
            <summary>
            Represents an abstract location.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ILocation.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific location information.
            </summary>
            <param name="message">The source error message.</param>
            <returns>The formatted error message.</returns>
        </member>
        <member name="T:ILGPU.IR.Locations">
            <summary>
            Extension methods for <see cref="T:ILGPU.IR.ILocation"/> implementations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Locations.GetException(ILGPU.IR.ILocation,System.Exception)">
            <summary>
            Constructs a new exception of the given type based on the given
            message, the formatting arguments and the current sequence point.
            information.
            </summary>
            <param name="location">The current location.</param>
            <param name="exception">The inner exception.</param>
            <returns>
            A new <see cref="T:ILGPU.InternalCompilerException"/> with an inner exception of
            <paramref name="exception"/>. Includes detailed origin information about
            the current source location at which this exception has been created.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Locations.GetArgumentException(ILGPU.IR.ILocation,System.String)">
            <summary>
            Constructs a new <see cref="T:System.ArgumentOutOfRangeException"/> based on the given
            message, the formatting arguments and the current sequence point.
            </summary>
            <param name="location">The current location.</param>
            <param name="paramName">The parameter name.</param>
            <returns>
            A new <see cref="T:ILGPU.InternalCompilerException"/> with an inner exception of
            <see cref="T:System.ArgumentOutOfRangeException"/>.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Locations.GetArgumentNullException(ILGPU.IR.ILocation,System.String)">
            <summary>
            Constructs a new <see cref="T:System.ArgumentException"/> based on the given
            message, the formatting arguments and the current sequence point.
            </summary>
            <param name="location">The current location.</param>
            <param name="paramName">The parameter name.</param>
            <returns>
            A new <see cref="T:ILGPU.InternalCompilerException"/> with an inner exception of
            <see cref="T:System.ArgumentNullException"/>.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Locations.GetNotSupportedException(ILGPU.IR.ILocation,System.String,System.Object[])">
            <summary>
            Constructs a new <see cref="T:System.NotSupportedException"/> based on the given
            message, the formatting arguments and the current sequence point.
            </summary>
            <param name="location">The current location.</param>
            <param name="message">The main contents of the error message.</param>
            <param name="args">The formatting arguments.</param>
            <returns>
            A new <see cref="T:ILGPU.InternalCompilerException"/> with an inner exception of
            <see cref="T:System.NotSupportedException"/>.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Locations.GetInvalidOperationException(ILGPU.IR.ILocation)">
            <summary>
            Constructs a new <see cref="T:System.InvalidOperationException"/> that refers to an
            invalid compiler state.
            </summary>
            <param name="location">The current location.</param>
            <returns>
            A new <see cref="T:ILGPU.InternalCompilerException"/> with an inner exception of
            <see cref="T:System.InvalidOperationException"/>.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Locations.GetInvalidOperationException(ILGPU.IR.ILocation,System.String)">
            <summary>
            Constructs a new <see cref="T:System.InvalidOperationException"/> that refers to an
            invalid compiler state.
            </summary>
            <param name="location">The current location.</param>
            <param name="message">The main content of the error message.</param>
            <returns>
            A new <see cref="T:ILGPU.InternalCompilerException"/> with an inner exception of
            <see cref="T:System.InvalidOperationException"/>.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Locations.AssertNotNull``1(ILGPU.IR.ILocation,``0)">
            <summary>
            Ensures that a certain reference value is not null.
            </summary>
            <remarks>
            This assertion method implementation will not be present in release modes.
            </remarks>
            <param name="location">The current location.</param>
            <param name="value">The value to be not null.</param>
        </member>
        <member name="M:ILGPU.IR.Locations.Assert(ILGPU.IR.ILocation,System.Boolean)">
            <summary>
            Ensures a certain compiler-internal assertion to hold. In contrast to
            <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)"/>, this method creates an exception
            that is easy to capture and recognize in the scope of test suites.
            </summary>
            <remarks>
            This assertion method implementation will not be present in release modes.
            </remarks>
            <param name="location">The current location.</param>
            <param name="condition">The condition to hold.</param>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationMode">
            <summary>
            Represents the handler mode of a custom handler routine.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Intrinsics.IntrinsicImplementationMode.Redirect">
            <summary>
            Indicates whether the associated method should be replaced by a
            different method.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Intrinsics.IntrinsicImplementationMode.GenerateCode">
            <summary>
            Indicates whether the associated method has a custom code-generation
            module is invoked during code generation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementation">
            <summary>
            Represents an abstract intrinsic implementation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.#ctor(ILGPU.Backends.BackendType,System.Reflection.MethodInfo,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new implementation.
            </summary>
            <param name="backendType">The main backend type.</param>
            <param name="targetMethod">The associated target method.</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.#ctor(ILGPU.Backends.BackendType,System.Type,System.String,ILGPU.IR.Intrinsics.IntrinsicImplementationMode)">
            <summary>
            Constructs a new implementation.
            </summary>
            <param name="backendType">The main backend type.</param>
            <param name="handlerType">The associated target handler type.</param>
            <param name="methodName">The target method name (or null).</param>
            <param name="mode">The code-generation mode.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementation.BackendType">
            <summary>
            Returns the associated backend type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementation.Mode">
            <summary>
            Returns the associated code-generator mode.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementation.TargetMethod">
            <summary>
            Returns the user-defined target method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.CanHandle(ILGPU.Backends.Backend)">
            <summary>
            Determines whether the attribute is compatible with the given backend.
            </summary>
            <param name="backend">The current backend.</param>
            <returns>
            True, if the attribute is compatible with the given backend.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.CanHandleBackend(ILGPU.Backends.Backend)">
            <summary>
            Determines whether the attribute is compatible with the given backend.
            </summary>
            <param name="backend">The current backend.</param>
            <returns>
            True, if the attribute is compatible with the given backend.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.ResolveMapping``1">
            <summary>
            Resolves an intrinsic implementation for the current attribute.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <returns>The resolved intrinsic implementation.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationAttribute">
            <summary>
            Marks methods that rely on an intrinsic-implementation provider during backend
            specialization.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IIntrinsicImplementationManager">
            <summary>
            Represents an abstract intrinsic manager that caches intrinsic methods.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IIntrinsicImplementationManager.CreateProvider``1(ILGPU.Backends.Backend)">
            <summary>
            Creates a specialized and typed intrinsic provider for the given backend.
            </summary>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
            <param name="backend">The backend.</param>
            <returns>The created implementation provider.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationManager">
            <summary>
            Represents an intrinsic manager that caches intrinsic methods.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry">
            <summary>
            Represents a single entry that is associated with a matcher.
            It stores several possible intrinsic implementations for specific backends.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator">
            <summary>
            An enumerator to enumerate all implementations in the scope of an entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.#ctor(System.Collections.Generic.List{ILGPU.IR.Intrinsics.IntrinsicImplementation})">
            <summary>
            Constructs a new implementation enumerator.
            </summary>
            <param name="implementationSet">The implementations.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.Current">
            <summary>
            Returns the current implementation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.Register(ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given implementation with the current entry.
            </summary>
            <param name="implementation">The implementation to register.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.GetEnumerator">
            <summary>
            Returns a new enumerator to iterate over all implementations.
            </summary>
            <returns>The resolved enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.System#Collections#Generic#IEnumerable{ILGPU#IR#Intrinsics#IntrinsicImplementation}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.BackendContainer">
            <summary>
            Represents a mapping of matchers to backend-type specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.BackendContainer.Create">
            <summary>
            Creates a new backend container.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.BackendContainer.Item(ILGPU.IR.Intrinsics.IntrinsicMatcher.MatcherKind)">
            <summary>
            Returns the associated intrinsic matcher.
            </summary>
            <param name="kind">The matcher kind.</param>
            <returns>The resolved intrinsic matcher.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.BackendContainer.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0}[])">
            <summary>
            Transforms all internal entries using the transformation provided.
            </summary>
            <typeparam name="TOther">The other matcher type.</typeparam>
            <typeparam name="TTransformer">The transformer type to use.</typeparam>
            <param name="transformer">The transformer instance.</param>
            <param name="otherMatchers">The other matchers (target array).</param>
        </member>
        <member name="F:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.containers">
            <summary>
            Stores all intrinsic containers.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.#ctor">
            <summary>
            Constructs a new empty implementation manager.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.Item(ILGPU.Backends.BackendType)">
            <summary>
            Resolves the associated intrinsic container for the given backend type.
            </summary>
            <param name="backendType">The backend type.</param>
            <returns>The resolved intrinsic container.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ResolveMatcher``1(ILGPU.IR.Intrinsics.IntrinsicMatcher.MatcherKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Resolves an intrinsic matcher.
            </summary>
            <typeparam name="TMatcher">The matcher type.</typeparam>
            <param name="kind">The matcher kind.</param>
            <param name="implementation">The implementation to use.</param>
            <returns>The resolved matcher.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterMethod(System.Reflection.MethodInfo,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="method">The method information.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.CreateProvider``1(ILGPU.Backends.Backend)">
            <summary>
            Creates a specialized and typed intrinsic provider for the given backend.
            </summary>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
            <param name="backend">The backend.</param>
            <returns>The created implementation provider.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterBroadcast(ILGPU.IR.Values.BroadcastKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterBroadcast(ILGPU.IR.Values.BroadcastKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterPredicateBarrier(ILGPU.IR.Values.PredicateBarrierKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterPredicateBarrier(ILGPU.IR.Values.PredicateBarrierKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterWarpShuffle(ILGPU.IR.Values.ShuffleKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterWarpShuffle(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterSubWarpShuffle(ILGPU.IR.Values.ShuffleKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterSubWarpShuffle(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterUnaryArithmetic(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterUnaryArithmetic(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterBinaryArithmetic(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterBinaryArithmetic(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterTernaryArithmetic(ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterTernaryArithmetic(ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterGenericAtomic(ILGPU.IR.Values.AtomicKind,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationManager.RegisterGenericAtomic(ILGPU.IR.Values.AtomicKind,ILGPU.BasicValueType,ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Registers the given intrinsic implementation.
            </summary>
            <param name="kind">The kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1">
            <summary>
            Represents an intrinsic provider that caches intrinsic remappings and
            implementations.
            </summary>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationTransformer">
            <summary>
            Represents an implementation transformer to convert high-level intrinsic
            values into instantiated intrinsic mappings.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationTransformer.Backend">
            <summary>
            Returns the associated backend.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationTransformer.Transform(ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry)">
            <summary cref="M:ILGPU.IR.Intrinsics.IIntrinsicImplementationTransformer`2.Transform(`0)"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationTransformer.CheckImplementations(ILGPU.Backends.Backend,ILGPU.IR.Intrinsics.IntrinsicImplementationManager.ImplementationEntry,ILGPU.IR.Intrinsics.IntrinsicImplementation@)">
            <summary>
            Checks the given intrinsic implementations.
            </summary>
            <param name="backend">The current backend.</param>
            <param name="implementations">
            The available intrinsic implementations.
            </param>
            <param name="mainImplementation">
            The resolved main implementation.
            </param>
            <returns>
            True, if at least a single implementation could be resolved.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry">
            <summary>
            Represents a mapping entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry.#ctor(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey,ILGPU.Frontend.CodeGenerationResult)">
            <summary>
            Constructs a new mapping entry.
            </summary>
            <param name="mapping">The parent mapping.</param>
            <param name="mappingKey">The current mapping key.</param>
            <param name="codeGenerationResult">
            The intermediate code-generation result.
            </param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry.Mapping">
            <summary>
            The associated mapping.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry.MappingKey">
            <summary>
            The associated method mapping key.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry.CodeGenerationResult">
            <summary>
            The code-generation result from the IL frontend.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.MappingEntry.Apply">
            <summary>
            Applies the code-generation result to the underlying mapping.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase">
            <summary>
            Represents a code generation phase for intrinsic methods.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase.Provider">
            <summary>
            Returns the associated provider.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase.TryRegisterIntrinsic``1(``0,ILGPU.IR.Intrinsics.IntrinsicMapping{`0})">
            <summary>
            Internal method to register an intrinsic.
            </summary>
            <typeparam name="TResolver">
            The generic argument resolver type.
            </typeparam>
            <param name="resolver">The argument resolver.</param>
            <param name="mapping">The current mapping instance.</param>
            <returns>True, if the intrinsic could be registered.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase.RegisterIntrinsic(ILGPU.IR.Method)">
            <summary>
            Tries to register an intrinsic for the given method.
            </summary>
            <param name="method">The method to register.</param>
            <returns>True, if an intrinsic mapping could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase.RegisterIntrinsic(ILGPU.IR.Value)">
            <summary>
            Tries to register an intrinsic for the given value.
            </summary>
            <param name="value">The value to register.</param>
            <returns>True, if an intrinsic mapping could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IRSpecializationPhase.Dispose">
            <summary>
            Ends the current specialization phase.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1">
            <summary>
            Represents an abstract data provider. It can be used in combination
            with the <see cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetData``2(ILGPU.IR.Value,``0@)"/> method.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.Mode">
            <summary>
            Returns the compatible implementation mode.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.GetData``1(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},``0)">
            <summary>
            Gets data from the given intrinsic mapping.
            </summary>
            <typeparam name="TResolver">The resolver type.</typeparam>
            <param name="mapping">The mapping instance.</param>
            <param name="resolver">The resolver instance.</param>
            <returns>The resolved result.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationProvider">
            <summary>
            Resolves IR implementations from mappings.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationProvider.Mode">
            <summary cref="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.Mode"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ImplementationProvider.GetData``1(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},``0)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.GetData``1(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},``0)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.CodeGeneratorProvider">
            <summary>
            Resolves code generators from mappings.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.CodeGeneratorProvider.Mode">
            <summary cref="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.Mode"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.CodeGeneratorProvider.GetData``1(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},``0)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.IDataProvider`1.GetData``1(ILGPU.IR.Intrinsics.IntrinsicMapping{`0},``0)"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.#ctor(ILGPU.IR.Intrinsics.IntrinsicImplementationManager.BackendContainer,ILGPU.Backends.Backend)">
            <summary>
            Constructs a new intrinsic implementation mapping.
            </summary>
            <param name="container">The source intrinsic container.</param>
            <param name="backend">The associated backend.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.BeginIRSpecialization">
            <summary>
            Begins a new specialization phase.
            </summary>
            <returns>The specialization context.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetMapping(ILGPU.IR.Method,ILGPU.IR.Intrinsics.IntrinsicMapping{`0}@)">
            <summary>
            Resolves the intrinsic mapping for the given method.
            </summary>
            <param name="method">The method to resolve an implementation for.</param>
            <param name="mapping">The resolved mapping.</param>
            <returns>True, if the given method could be resolved to a mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetMapping(ILGPU.IR.Method,System.Reflection.MethodInfo@,ILGPU.IR.Intrinsics.IntrinsicMapping{`0}@)">
            <summary>
            Resolves the intrinsic mapping for the given method.
            </summary>
            <param name="method">The method to resolve an implementation for.</param>
            <param name="methodInfo">
            The resolved method information object (if any).
            </param>
            <param name="mapping">The resolved mapping.</param>
            <returns>True, if the given method could be resolved to a mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetMapping(System.Reflection.MethodInfo,ILGPU.IR.Intrinsics.IntrinsicMapping{`0}@)">
            <summary>
            Resolves the intrinsic mapping for the given method.
            </summary>
            <param name="method">The method to resolve an implementation for.</param>
            <param name="mapping">The resolved mapping.</param>
            <returns>True, if the given method could be resolved to a mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetMapping(ILGPU.IR.Value,ILGPU.IR.Intrinsics.IntrinsicMapping{`0}@)">
            <summary>
            Resolves the intrinsic mapping for the given value kind.
            </summary>
            <param name="value">The value to resolve an implementation for.</param>
            <param name="mapping">The resolved mapping.</param>
            <returns>True, if the given method could be resolved to a mapping.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetData``2(ILGPU.IR.Value,``0@)">
            <summary>
            Tries to resolve data from the given value.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <typeparam name="TDataProvider">The resolver type.</typeparam>
            <param name="value">The value to resolve.</param>
            <param name="result">The resulting value.</param>
            <returns>
            True, if the value could be resolved to an intrinsic value.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetImplementation(ILGPU.IR.Value,ILGPU.IR.Method@)">
            <summary>
            Resolves the intrinsic implementation (if any) for the given value kind.
            </summary>
            <param name="value">The value to resolve an implementation for.</param>
            <param name="irImplementation">The resolved IR implementation.</param>
            <returns>
            True, if the given method could be resolved to an IR implementation.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.TryGetCodeGenerator(ILGPU.IR.Value,`0@)">
            <summary>
            Resolves the intrinsic code generator (if any) for the given value kind.
            </summary>
            <param name="value">The value to resolve an implementation for.</param>
            <param name="codeGenerator">The resolved code generator.</param>
            <returns>
            True, if the given method could be resolved to a code generator.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>This method is not thread-safe.</remarks>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicImplementationProvider`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping">
            <summary>
            Represents an abstract intrinsic implementation mapping.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping.IGenericArgumentResolver">
            <summary>
            Resolves generic arguments for redirection/code-generation purposes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.IGenericArgumentResolver.ResolveGenericArguments">
            <summary>
            Resolves generic arguments for redirection/code-generation purposes.
            </summary>
            <returns>The resolved generic arguments.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping.MethodInfoArgumentResolver">
            <summary>
            Resolves generic arguments from <see cref="T:System.Reflection.MethodInfo"/>
            objects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MethodInfoArgumentResolver.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Constructs a new method-info argument resolver.
            </summary>
            <param name="methodInfo">The associated method information.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.MethodInfoArgumentResolver.MethodInfo">
            <summary>
            Returns the associated method information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MethodInfoArgumentResolver.ResolveGenericArguments">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMapping.IGenericArgumentResolver.ResolveGenericArguments"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping.ValueArgumentResolver">
            <summary>
            Resolves generic arguments from <see cref="P:ILGPU.IR.Intrinsics.IntrinsicMapping.ValueArgumentResolver.Value"/> objects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.ValueArgumentResolver.#ctor(ILGPU.IR.Value)">
            <summary>
            Constructs a new value argument resolver.
            </summary>
            <param name="value">The associated value.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.ValueArgumentResolver.Value">
            <summary>
            Returns the associated value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.ValueArgumentResolver.ResolveGenericArguments">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMapping.IGenericArgumentResolver.ResolveGenericArguments"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey">
            <summary>
            Represents a cached mapping key.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.#ctor(System.Type[])">
            <summary>
            Constructs a new mapping key.
            </summary>
            <param name="arguments">The type arguments.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.Length">
            <summary>
            Returns the number of mapped generic arguments.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.Equals(ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey)">
            <summary>
            Returns true if the given object is equal to this mapping key.
            </summary>
            <param name="other">The other object.</param>
            <returns>
            True, if the given object is equal to this mapping key.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this mapping key.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            True, if the given object is equal to this mapping key.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.GetHashCode">
            <summary>
            Returns the hash code of this instance.
            </summary>
            <returns>The hash code of this instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.ToString">
            <summary>
            Returns the string representation of this mapping key.
            </summary>
            <returns>The string representation of this mapping key.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.op_Equality(ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey,ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey)">
            <summary>
            Returns true if both mapping keys are identical.
            </summary>
            <param name="first">The first mapping key.</param>
            <param name="second">The second mapping key.</param>
            <returns>True, if both mapping keys are identical.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey.op_Inequality(ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey,ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey)">
            <summary>
            Returns true if both mapping keys are not identical.
            </summary>
            <param name="first">The first mapping key.</param>
            <param name="second">The second mapping key.</param>
            <returns>True, if both mapping keys are not identical.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.#ctor(ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Constructs a new intrinsic implementation.
            </summary>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.Implementation">
            <summary>
            Returns the associated intrinsic implementation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.BackendType">
            <summary>
            Returns the associated backend type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.Mode">
            <summary>
            Returns the associated implementation mode.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping.TargetMethod">
            <summary>
            Returns the associated target method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.ResolveTarget``1(``0,System.Type[]@)">
            <summary>
            Resolves the target method (if any).
            </summary>
            <typeparam name="TResolver">The generic argument resolver type.</typeparam>
            <param name="resolver">The argument resolver.</param>
            <param name="genericArguments">
            The resolved generic arguments (if any).
            </param>
            <returns>The resolved target method (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping.ResolveRedirect``1(``0,ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey@)">
            <summary>
            Resolves the redirection method (if any).
            </summary>
            <typeparam name="TResolver">The generic argument resolver type.</typeparam>
            <param name="resolver">The argument resolver.</param>
            <param name="genericMapping">The resolved generic mapping key.</param>
            <returns>The resolved redirection method (if any).</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMapping`1">
            <summary>
            Represents a single intrinsic implementation mapping.
            </summary>
            <typeparam name="TDelegate">The implementation delegate type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping`1.#ctor(ILGPU.IR.Intrinsics.IntrinsicImplementation)">
            <summary>
            Constructs a new intrinsic implementation.
            </summary>
            <param name="implementation">The intrinsic implementation.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.IntrinsicMapping`1.CodeGenerator">
            <summary>
            Returns the associated default code generator (if any).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping`1.ProvideImplementation(ILGPU.IR.Intrinsics.IntrinsicMapping.MappingKey,ILGPU.IR.Method)">
            <summary>
            Provides the given implementation.
            </summary>
            <param name="genericMapping">The generic mapping key.</param>
            <param name="implementation">The implementation to provide.</param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping`1.ResolveImplementation``1(``0)">
            <summary>
            Resolves the redirection method (if any).
            </summary>
            <typeparam name="TResolver">The generic argument resolver type.</typeparam>
            <param name="resolver">The argument resolver.</param>
            <returns>The resolved redirection method (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMapping`1.ResolveCodeGenerator``1(``0)">
            <summary>
            Resolves the code-generation method (if any).
            </summary>
            <typeparam name="TResolver">The generic argument resolver type.</typeparam>
            <param name="resolver">The argument resolver.</param>
            <returns>The resolved code-generation method (if any).</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMatcher">
            <summary>
            Matches whether intrinsic implementations are compatible
            to internal requirements.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher.#ctor">
            <summary>
            Constructs a new intrinsic matcher.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMatcher.MatcherKind">
            <summary>
            Represents a matcher kind.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher.CreateMatchers``1">
            <summary>
            Creates a new set of intrinsic matchers.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IIntrinsicImplementation">
            <summary>
            Defines an abstract intrinsic implementation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IIntrinsicImplementationTransformer`2">
            <summary>
            Transforms a single intrinsic implementation into another one.
            </summary>
            <typeparam name="TFirst">The first implementation type.</typeparam>
            <typeparam name="TSecond">The second implementation type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IIntrinsicImplementationTransformer`2.Transform(`0)">
            <summary>
            Transforms the given implementation into another one.
            </summary>
            <param name="implementation">The implementation to transform.</param>
            <returns>The transformed implementation.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMatcher`1">
            <summary>
            Matches whether intrinsic implementations are compatible
            to internal requirements.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.#ctor">
            <summary>
            Constructs a new intrinsic matcher.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})">
            <summary>
            Transforms the currently stored intrinsic implementations.
            </summary>
            <typeparam name="TOther">The other matcher value type.</typeparam>
            <typeparam name="TTransformer">The implementation transformer.</typeparam>
            <param name="transformer">The transformer to use.</param>
            <param name="other">The other matcher.</param>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMatcher`2">
            <summary>
            Matches whether intrinsic implementations are compatible
            to internal requirements.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
            <typeparam name="TMatchedValue">The value type to be matched.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.#ctor">
            <summary>
            Constructs a new intrinsic matcher.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="value">The value instance.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.IntrinsicMethodMatcher`1">
            <summary>
            Represents an intrinsic matcher that matches managed methods.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMethodMatcher`1.#ctor">
            <summary>
            Constructs a new intrinsic matcher.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMethodMatcher`1.Register(System.Reflection.MethodInfo,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="value">The method information.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMethodMatcher`1.TryGetImplementation(System.Reflection.MethodInfo,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.IntrinsicMethodMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.BaseIntrinsicValueMatcher`1">
            <summary>
            Represents an intrinsic matcher that matches values.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BaseIntrinsicValueMatcher`1.#ctor(ILGPU.IR.ValueKind)">
            <summary>
            Constructs a new abstract intrinsic value matcher.
            </summary>
            <param name="valueKind">The value kind.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.BaseIntrinsicValueMatcher`1.ValueKind">
            <summary>
            Returns the target value kind.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.TypedIntrinsicValueMatcher`2">
            <summary>
            Represents an intrinsic matcher that matches values.
            </summary>
            <typeparam name="T">The matcher value type.</typeparam>
            <typeparam name="TValueKind">The type of the value kind.</typeparam>
        </member>
        <member name="F:ILGPU.IR.Intrinsics.TypedIntrinsicValueMatcher`2.entries">
            <summary>
            All value implementation entries.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.TypedIntrinsicValueMatcher`2.#ctor(ILGPU.IR.ValueKind)">
            <summary>
            Constructs a new abstract intrinsic value matcher.
            </summary>
            <param name="valueKind">The value kind.</param>
        </member>
        <member name="P:ILGPU.IR.Intrinsics.TypedIntrinsicValueMatcher`2.Item(System.Int32,ILGPU.BasicValueType)">
            <summary>
            Returns a reference to the i-th element.
            </summary>
            <param name="index">The element index.</param>
            <param name="basicValueType">The basic-value type.</param>
            <returns>The resolved reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.TypedIntrinsicValueMatcher`2.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`1.TransformTo``2(``1,ILGPU.IR.Intrinsics.IntrinsicMatcher{``0})"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.BroadcastMatcher`1">
            <summary>
            Matches typed Broadcast values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BroadcastMatcher`1.Register(ILGPU.IR.Values.BroadcastKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BroadcastMatcher`1.TryGetImplementation(ILGPU.IR.Values.BroadcastKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BroadcastMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.PredicateBarrierMatcher`1">
            <summary>
            Matches typed PredicateBarrier values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.PredicateBarrierMatcher`1.Register(ILGPU.IR.Values.PredicateBarrierKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.PredicateBarrierMatcher`1.TryGetImplementation(ILGPU.IR.Values.PredicateBarrierKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.PredicateBarrierMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.WarpShuffleMatcher`1">
            <summary>
            Matches typed WarpShuffle values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.WarpShuffleMatcher`1.Register(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.WarpShuffleMatcher`1.TryGetImplementation(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.WarpShuffleMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.SubWarpShuffleMatcher`1">
            <summary>
            Matches typed SubWarpShuffle values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.SubWarpShuffleMatcher`1.Register(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.SubWarpShuffleMatcher`1.TryGetImplementation(ILGPU.IR.Values.ShuffleKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.SubWarpShuffleMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.UnaryArithmeticMatcher`1">
            <summary>
            Matches typed UnaryArithmetic values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.UnaryArithmeticMatcher`1.Register(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.UnaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.UnaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.BinaryArithmeticMatcher`1">
            <summary>
            Matches typed BinaryArithmetic values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BinaryArithmeticMatcher`1.Register(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BinaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.BinaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.TernaryArithmeticMatcher`1">
            <summary>
            Matches typed TernaryArithmetic values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.TernaryArithmeticMatcher`1.Register(ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.TernaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.TernaryArithmeticMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.Intrinsics.GenericAtomicMatcher`1">
            <summary>
            Matches typed GenericAtomic values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.GenericAtomicMatcher`1.Register(ILGPU.IR.Values.AtomicKind,ILGPU.BasicValueType,`0)">
            <summary>
            Registers the given implementation with the current matcher.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">
            The intrinsic implementation to register.
            </param>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.GenericAtomicMatcher`1.TryGetImplementation(ILGPU.IR.Values.AtomicKind,ILGPU.BasicValueType,`0@)">
            <summary>
            Tries to resolve an intrinsic implementation.
            </summary>
            <param name="kind">The value kind.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="implementation">The resolved implementation (if any).</param>
            <returns>True, if an implementation could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Intrinsics.GenericAtomicMatcher`1.TryGetImplementation(ILGPU.IR.Value,`0@)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicMatcher`2.TryGetImplementation(`1,`0@)"/>
        </member>
        <member name="T:ILGPU.IR.IRBaseContext">
            <summary>
            An abstract base IR context.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRBaseContext.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new IR context.
            </summary>
            <param name="context">The associated main context.</param>
        </member>
        <member name="P:ILGPU.IR.IRBaseContext.Context">
            <summary>
            Returns the main ILGPU context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRBaseContext.Properties">
            <summary>
            Returns the main context properties.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRBaseContext.Verifier">
            <summary>
            Returns the current verifier instance.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRBaseContext.TypeContext">
            <summary>
            Returns the associated type context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRBaseContext.UndefinedValue">
            <summary>
            Returns an undefined value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRBaseContext.VoidType">
            <summary>
            Returns the void type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRBaseContext.StringType">
            <summary>
            Returns the memory type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IRBaseContext.HandleType">
            <summary>
            Returns the runtime handle type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRBaseContext.GetPrimitiveType(ILGPU.BasicValueType)">
            <summary>
            Resolves the primitive type that corresponds to the given
            <see cref="T:ILGPU.BasicValueType"/>.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The created primitive type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRBaseContext.CreatePointerType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a pointer type.
            </summary>
            <param name="elementType">The pointer element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created pointer type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRBaseContext.CreateViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a view type.
            </summary>
            <param name="elementType">The view element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRBaseContext.CreateArrayType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new array type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="dimensions">The number of array dimensions.</param>
            <returns>The created array type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRBaseContext.CreateStructureType(System.Int32)">
            <summary>
            Creates a new structure type builder with the given capacity.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <returns>The created structure builder.</returns>
        </member>
        <member name="M:ILGPU.IR.IRBaseContext.CreateType(System.Type)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRBaseContext.CreateType(System.Type,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <param name="addressSpace">The address space for pointer types.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.IRBaseContext.SpecializeAddressSpaceType(ILGPU.IR.Types.AddressSpaceType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Specializes the address space of the given <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.
            </summary>
            <param name="addressSpaceType">The source type.</param>
            <param name="addressSpace">The new address space.</param>
            <returns>The created specialized <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.</returns>
        </member>
        <member name="M:ILGPU.IR.IRBaseContext.TrySpecializeAddressSpaceType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Types.TypeNode@)">
            <summary>
            Tries to specialize a view or a pointer address space.
            </summary>
            <param name="type">The pointer or view type.</param>
            <param name="addressSpace">The target address space.</param>
            <param name="specializedType">The specialized type.</param>
            <returns>True, if the type could be specialized.</returns>
        </member>
        <member name="T:ILGPU.IR.IRContext">
            <summary>
            Represents an IR context.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new IR context.
            </summary>
            <param name="context">The associated main context.</param>
        </member>
        <member name="P:ILGPU.IR.IRContext.Methods">
            <summary>
            Returns all top-level functions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.GetMethodCollection``1(``0)">
            <summary>
            Returns a thread-safe function view.
            </summary>
            <typeparam name="TPredicate">The type of the predicate to apply.</typeparam>
            <param name="predicate">The predicate to apply.</param>
            <returns>The resolved function view.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.GetMethodCollection_Sync``1(``0)">
            <summary>
            Returns a thread-safe function view.
            </summary>
            <typeparam name="TPredicate">The type of the predicate to apply.</typeparam>
            <param name="predicate">The predicate to apply.</param>
            <returns>The resolved function view.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.TryGetMethodHandle(System.Reflection.MethodBase,System.Nullable{ILGPU.IR.MethodHandle}@)">
            <summary>
            Tries to resolve the given managed method to function reference.
            </summary>
            <param name="method">The method to resolve.</param>
            <param name="handle">The resolved function reference (if any).</param>
            <returns>True, if the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.TryGetMethod(ILGPU.IR.MethodHandle,ILGPU.IR.Method@)">
            <summary>
            Tries to resolve the given handle to a top-level function.
            </summary>
            <param name="handle">The function handle to resolve.</param>
            <param name="function">The resolved function (if any).</param>
            <returns>True, if the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.TryGetMethod(System.Reflection.MethodBase,ILGPU.IR.Method@)">
            <summary>
            Tries to resolve the given method to a top-level function.
            </summary>
            <param name="method">The method to resolve.</param>
            <param name="function">The resolved function (if any).</param>
            <returns>True, if the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.GetMethod(ILGPU.IR.MethodHandle)">
            <summary>
            Resolves the given method to a top-level function.
            </summary>
            <param name="method">The method to resolve.</param>
            <returns>The resolved function.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.Declare(System.Reflection.MethodBase,System.Boolean@)">
            <summary>
            Declares a method.
            </summary>
            <param name="methodBase">The method to declare.</param>
            <param name="created">True, if the method has been created.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.Declare(ILGPU.IR.MethodDeclaration@,System.Boolean@)">
            <summary>
            Declares a method.
            </summary>
            <param name="declaration">The method declaration.</param>
            <param name="created">True, if the method has been created.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.Declare_Sync(ILGPU.IR.MethodDeclaration@,System.Boolean@)">
            <summary>
            Declares a method based on the given declaration (sync).
            </summary>
            <param name="declaration">The method declaration.</param>
            <param name="created">True, if the method has been created.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.DeclareNewMethod_Sync(ILGPU.IR.MethodDeclaration,ILGPU.IR.MethodHandle@)">
            <summary>
            Declares a new method (sync).
            </summary>
            <param name="declaration">The method declaration to use.</param>
            <param name="handle">The created handle.</param>
            <returns>The declared method.</returns>
            <remarks>
            Helper method for <see cref="M:ILGPU.IR.IRContext.Declare_Sync(ILGPU.IR.MethodDeclaration@,System.Boolean@)"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.IRContext.SealMethodWithoutImplementation(ILGPU.IR.Method)">
            <summary>
            Seals intrinsic or external methods.
            </summary>
            <param name="method">The method to seal.</param>
        </member>
        <member name="M:ILGPU.IR.IRContext.Import(ILGPU.IR.Method)">
            <summary>
            Imports the given method (and all dependencies) into this context.
            </summary>
            <param name="source">The method to import.</param>
            <returns>The imported method.</returns>
            <remarks>
            CAUTION: This method can cause deadlocks if improperly used. The import
            function needs to acquire write access to the current context and needs
            to request safe read access from the source context. This can lead to
            unintended deadlocks.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.IRContext.Import_Sync(ILGPU.IR.Method)">
            <summary>
            Imports the given method (and all dependencies) into this context.
            </summary>
            <param name="source">The method to import.</param>
            <returns>The imported method.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContext.Optimize">
            <summary>
            Applies all default optimization transformations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContext.Transform(ILGPU.IR.Transformations.Transformer@)">
            <summary>
            Applies the given transformer to the current context.
            </summary>
            <param name="transformer">The target transformer.</param>
        </member>
        <member name="M:ILGPU.IR.IRContext.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the IR context to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.IRContext.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears cached IR nodes.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.IR.IRContext.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.IR.IRContextExtensions">
            <summary>
            Extension methods for context related objects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IRContextExtensions.GetIRContext(ILGPU.Context)">
            <summary>
            Gets the main IR context from a main ILGPU context instance.
            </summary>
            <param name="context">The main ILGPU context instance.</param>
            <returns>The main IR context.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContextExtensions.GetIRTypeContext(ILGPU.Context)">
            <summary>
            Gets the main IR type context from a main ILGPU context instance.
            </summary>
            <param name="context">The main ILGPU context instance.</param>
            <returns>The main IR type context.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContextExtensions.GetTransformer(ILGPU.Context)">
            <summary>
            Gets the main context transformer from a main ILGPU context instance.
            </summary>
            <param name="context">The main ILGPU context instance.</param>
            <returns>The main context transformer.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContextExtensions.GetIntrinsicManager(ILGPU.Context)">
            <summary>
            Gets the current intrinsic manager from a main ILGPU context instance.
            </summary>
            <param name="context">The main ILGPU context instance.</param>
            <returns>The current intrinsic manager.</returns>
        </member>
        <member name="M:ILGPU.IR.IRContextExtensions.GetIntrinsicManager(ILGPU.Context.Builder)">
            <summary>
            Gets the current intrinsic implementation manager to register new intrinsics.
            </summary>
            <param name="builder">The current builder instance.</param>
            <returns>The current intrinsic manager.</returns>
        </member>
        <member name="T:ILGPU.IR.Location">
            <summary>
            An abstract source location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Location.Unknown">
            <summary>
            Represents an unknown location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Location.Nowhere">
            <summary>
            Represents no location.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Location.UnknownLocation">
            <summary>
            An unknown location implementation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Location.UnknownLocation.FormatErrorMessage(System.String)">
            <summary>
            Returns the original message.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Location.NoLocation">
            <summary>
            A no location implementation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Location.NoLocation.FormatErrorMessage(System.String)">
            <summary>
            Returns the original message.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Location.Merge(ILGPU.IR.Location,ILGPU.IR.Location)">
            <summary>
            Merges two locations into one.
            </summary>
            <param name="start">The start location.</param>
            <param name="end">The end location.</param>
            <returns>The merged location.</returns>
        </member>
        <member name="P:ILGPU.IR.Location.IsKnown">
            <summary>
            Returns true if this location is a known location.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Location.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific location information.
            </summary>
            <param name="message">The source error message.</param>
            <returns>The formatted error message.</returns>
        </member>
        <member name="T:ILGPU.IR.FileLocation">
            <summary>
            A location that is based on file information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.FileLocation.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new file location.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="startColumn">The start column.</param>
            <param name="endColumn">The end column.</param>
            <param name="startLine">The start line.</param>
            <param name="endLine">The end line.</param>
        </member>
        <member name="P:ILGPU.IR.FileLocation.FileName">
            <summary>
            Return the associated file name.
            </summary>
        </member>
        <member name="P:ILGPU.IR.FileLocation.StartColumn">
            <summary>
            Returns the start column.
            </summary>
        </member>
        <member name="P:ILGPU.IR.FileLocation.EndColumn">
            <summary>
            Returns the end column.
            </summary>
        </member>
        <member name="P:ILGPU.IR.FileLocation.StartLine">
            <summary>
            Returns the start line.
            </summary>
        </member>
        <member name="P:ILGPU.IR.FileLocation.EndLine">
            <summary>
            Returns the end line.
            </summary>
        </member>
        <member name="M:ILGPU.IR.FileLocation.FormatErrorMessage(System.String)">
            <summary>
            Formats the given message to include detailed file location information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.FileLocation.Merge(ILGPU.IR.FileLocation)">
            <summary>
            Merges this location with the other one.
            </summary>
            <param name="other">The other one to merge with.</param>
            <returns>The merged location.</returns>
        </member>
        <member name="M:ILGPU.IR.FileLocation.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current location.
            </summary>
            <param name="obj">The other location.</param>
            <returns>
            True, if the given object is equal to the current location.
            </returns>
        </member>
        <member name="M:ILGPU.IR.FileLocation.GetHashCode">
            <summary>
            Returns the hash code of this sequence point.
            </summary>
            <returns>The hash code of this sequence point.</returns>
        </member>
        <member name="M:ILGPU.IR.FileLocation.ToString">
            <summary>
            Returns the location information of this sequence point.
            </summary>
            <returns>
            The location information string that represents this sequence point.
            </returns>
        </member>
        <member name="T:ILGPU.IR.CompilationStackLocation">
            <summary>
            A collection of locations than is manipulated as a stack.
            </summary>
        </member>
        <member name="M:ILGPU.IR.CompilationStackLocation.#ctor(ILGPU.IR.Location)">
            <summary>
            Constructs a new stack location.
            </summary>
            <param name="location">The initial location.</param>
        </member>
        <member name="M:ILGPU.IR.CompilationStackLocation.#ctor(System.Collections.Immutable.ImmutableStack{ILGPU.IR.Location})">
            <summary>
            Constructs a new stack location.
            </summary>
            <param name="locations">The initial locations.</param>
        </member>
        <member name="P:ILGPU.IR.CompilationStackLocation.Stack">
            <summary>
            Returns the stack of locations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.CompilationStackLocation.FormatErrorMessage(System.String)">
            <summary>
            Formats the given message to include detailed location information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.CompilationStackLocation.Append(ILGPU.IR.Location)">
            <summary>
            Merges this location with the other one.
            </summary>
            <param name="other">The other one to merge with.</param>
            <returns>The merged location.</returns>
        </member>
        <member name="M:ILGPU.IR.CompilationStackLocation.TryGetLocation``1(``0@)">
            <summary>
            Returns the most recent location of the given type from the compilation
            stack, if any.
            </summary>
            <param name="location">Filled in with the location found.</param>
            <returns>True if this compilation stack has the location type.</returns>
        </member>
        <member name="M:ILGPU.IR.CompilationStackLocation.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current location.
            </summary>
            <param name="obj">The other location.</param>
            <returns>
            True, if the given object is equal to the current location.
            </returns>
        </member>
        <member name="M:ILGPU.IR.CompilationStackLocation.GetHashCode">
            <summary>
            Returns the hash code of this sequence point.
            </summary>
            <returns>The hash code of this sequence point.</returns>
        </member>
        <member name="M:ILGPU.IR.CompilationStackLocation.ToString">
            <summary>
            Returns the location information of this sequence point.
            </summary>
            <returns>
            The location information string that represents this sequence point.
            </returns>
        </member>
        <member name="T:ILGPU.IR.MethodFlags">
            <summary>
            Represents custom method flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodFlags.None">
            <summary>
            No flags (default).
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodFlags.Inline">
            <summary>
            This method should be inlined.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodFlags.External">
            <summary>
            An external method declaration (without an implementation).
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodFlags.Intrinsic">
            <summary>
            An intrinsic method that requires a backend-specific implementation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodFlags.EntryPoint">
            <summary>
            Marks entry-point methods.
            </summary>
        </member>
        <member name="T:ILGPU.IR.MethodTransformationFlags">
            <summary>
            Represents transformation flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodTransformationFlags.None">
            <summary>
            No flags (default).
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodTransformationFlags.Dirty">
            <summary>
            This method has been modified since the last GC.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodTransformationFlags.Transformed">
            <summary>
            This method has been transformed and does not require further
            transformation passes.
            </summary>
        </member>
        <member name="T:ILGPU.IR.IMethodCollectionPredicate">
            <summary>
            Represents a predicate on a function.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IMethodCollectionPredicate.Match(ILGPU.IR.Method)">
            <summary>
            Returns true if this predicate matches the given function.
            </summary>
            <param name="method">The function to test.</param>
            <returns>True, if this predicate matches the given function.</returns>
        </member>
        <member name="T:ILGPU.IR.MethodCollections">
            <summary>
            Represents useful extensions for function views.
            </summary>
        </member>
        <member name="T:ILGPU.IR.MethodCollections.AllMethods">
            <summary>
            Represents a function predicate that matches all functions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollections.AllMethods.Match(ILGPU.IR.Method)">
            <summary cref="M:ILGPU.IR.IMethodCollectionPredicate.Match(ILGPU.IR.Method)"/>
        </member>
        <member name="T:ILGPU.IR.MethodCollections.NotTransformed">
            <summary>
            Represents a function predicate that matches all functions that have not
            been transformed yet.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollections.NotTransformed.Match(ILGPU.IR.Method)">
            <summary cref="M:ILGPU.IR.IMethodCollectionPredicate.Match(ILGPU.IR.Method)"/>
        </member>
        <member name="T:ILGPU.IR.MethodCollections.Dirty">
            <summary>
            Represents a function predicate that matches all dirty functions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollections.Dirty.Match(ILGPU.IR.Method)">
            <summary cref="M:ILGPU.IR.IMethodCollectionPredicate.Match(ILGPU.IR.Method)"/>
        </member>
        <member name="T:ILGPU.IR.MethodCollections.ToTransform">
            <summary>
            Represents a function predicate for functions to transform.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollections.ToTransform.#ctor(ILGPU.IR.MethodTransformationFlags)">
            <summary>
            Constructs a new function predicate.
            </summary>
            <param name="flags">The desired flags that should not be set.</param>
        </member>
        <member name="P:ILGPU.IR.MethodCollections.ToTransform.Flags">
            <summary>
            Returns the flags that should not be set on the target function.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollections.ToTransform.Match(ILGPU.IR.Method)">
            <summary cref="M:ILGPU.IR.IMethodCollectionPredicate.Match(ILGPU.IR.Method)"/>
        </member>
        <member name="T:ILGPU.IR.MethodCollections.SetPredicate">
            <summary>
            Represents a predicate based on a hash set implementation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollections.SetPredicate.#ctor(ILGPU.IR.MethodCollection@)">
            <summary>
            Constructs a new set predicate using a method collection.
            </summary>
            <param name="methods">The method collection to use.</param>
        </member>
        <member name="M:ILGPU.IR.MethodCollections.SetPredicate.#ctor(System.Collections.Generic.HashSet{ILGPU.IR.Method})">
            <summary>
            Constructs a new set predicate using a method set.
            </summary>
            <param name="methods">The method set to use.</param>
        </member>
        <member name="M:ILGPU.IR.MethodCollections.SetPredicate.Match(ILGPU.IR.Method)">
            <summary>
            Returns true if the given method is contained in the encapsulated set.
            </summary>
        </member>
        <member name="T:ILGPU.IR.MethodCollection">
            <summary>
            Represents a thread-safe function view.
            </summary>
        </member>
        <member name="T:ILGPU.IR.MethodCollection.Enumerator">
            <summary>
            The internal enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollection.Enumerator.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Method})">
            <summary>
            Constructs a new internal enumerator.
            </summary>
            <param name="collection">The parent collection.</param>
        </member>
        <member name="P:ILGPU.IR.MethodCollection.Enumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.IR.MethodCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.MethodCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.MethodCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.MethodCollection.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.MethodCollection.#ctor(ILGPU.IR.IRContext,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Method})">
            <summary>
            Constructs a new method collection.
            </summary>
            <param name="context">The parent context.</param>
            <param name="collection">The collection members.</param>
        </member>
        <member name="P:ILGPU.IR.MethodCollection.Context">
            <summary>
            Returns the associated IR context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodCollection.Collection">
            <summary>
            Returns the associated function collection.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodCollection.Count">
            <summary>
            Returns the number of functions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodCollection.ToSet">
            <summary>
            Converts this collection into a <see cref="T:System.Collections.Generic.HashSet`1"/> instance.
            </summary>
            <returns>The created and filled set instance.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodCollection.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all stored values.
            </summary>
            <returns>An enumerator that enumerates all stored values.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodCollection.System#Collections#Generic#IEnumerable{ILGPU#IR#Method}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.MethodCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:ILGPU.IR.MethodHandle">
            <summary>
            Represents a method handle to an <see cref="T:ILGPU.IR.Method"/>
            that is valid across transformations.
            </summary>
        </member>
        <member name="F:ILGPU.IR.MethodHandle.Empty">
            <summary>
            An empty method handle.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.Deserialize(System.String)">
            <summary>
            Reconstructs a method handle from a serialization string.
            </summary>
            <param name="serializationString">The handle serialization string.</param>
            <returns>The deserialized method handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.Create(System.String)">
            <summary>
            Creates an empty named method handle.
            </summary>
            <param name="name">The name of the method reference.</param>
            <returns>The created method handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.#ctor(System.Int64,System.String)">
            <summary>
            Constructs a new method handle.
            </summary>
            <param name="id">The unique id of the reference.</param>
            <param name="name">The name of the method reference.</param>
        </member>
        <member name="P:ILGPU.IR.MethodHandle.Id">
            <summary>
            Returns the unique id.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodHandle.IsEmpty">
            <summary>
            Returns true if this handle is empty.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodHandle.Name">
            <summary>
            Returns the name of the referenced method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.Serialize">
            <summary>
            Returns a serialization string.
            </summary>
            <returns>The created serialization string.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.Equals(ILGPU.IR.MethodHandle)">
            <summary>
            Returns true if the given handle is equal to this handle.
            </summary>
            <param name="other">The other handle.</param>
            <returns>True, if the given handle is equal to this handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this handle.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to this handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.GetHashCode">
            <summary>
            Returns the hash code of this handle.
            </summary>
            <returns>The hash code of this handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.ToString">
            <summary>
            Returns the string representation of this handle.
            </summary>
            <returns>The string representation of this handle.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.op_Equality(ILGPU.IR.MethodHandle,ILGPU.IR.MethodHandle)">
            <summary>
            Returns true if the first and the second handle are the same.
            </summary>
            <param name="first">The first handle.</param>
            <param name="second">The second handle.</param>
            <returns>True, if the first and the second handle are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodHandle.op_Inequality(ILGPU.IR.MethodHandle,ILGPU.IR.MethodHandle)">
            <summary>
            Returns true if the first and the second handle are not the same.
            </summary>
            <param name="first">The first handle.</param>
            <param name="second">The second handle.</param>
            <returns>
            True, if the first and the second handle are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.IR.MethodDeclaration">
            <summary>
            Represents a method declaration of a <see cref="T:ILGPU.IR.Method"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(System.String,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new method declaration with an implicit handle.
            </summary>
            <param name="name">The method name.</param>
            <param name="returnType">The return type.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(System.String,ILGPU.IR.Types.TypeNode,ILGPU.IR.MethodFlags)">
            <summary>
            Constructs a new method declaration with an implicit handle.
            </summary>
            <param name="name">The method name.</param>
            <param name="returnType">The return type.</param>
            <param name="flags">Custom method flags.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(ILGPU.IR.MethodHandle,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new method declaration.
            </summary>
            <param name="handle">The method handle (may be an empty handle).</param>
            <param name="returnType">The return type.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(ILGPU.IR.MethodHandle,ILGPU.IR.Types.TypeNode,ILGPU.IR.MethodFlags)">
            <summary>
            Constructs a new method declaration.
            </summary>
            <param name="handle">The method handle (may be an empty handle).</param>
            <param name="returnType">The return type.</param>
            <param name="flags">Custom method flags.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(ILGPU.IR.MethodHandle,ILGPU.IR.Types.TypeNode,System.Reflection.MethodBase)">
            <summary>
            Constructs a new method declaration.
            </summary>
            <param name="handle">The method handle (may be an empty handle).</param>
            <param name="returnType">The return type.</param>
            <param name="source">The source method.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.#ctor(ILGPU.IR.MethodHandle,ILGPU.IR.Types.TypeNode,System.Reflection.MethodBase,ILGPU.IR.MethodFlags)">
            <summary>
            Constructs a new method declaration.
            </summary>
            <param name="handle">The method handle (may be an empty handle).</param>
            <param name="returnType">The return type.</param>
            <param name="source">The source method.</param>
            <param name="flags">Custom method flags.</param>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.Flags">
            <summary>
            Returns the associated method flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.IsExternal">
            <summary>
            Returns true if this method is an external method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.HasHandle">
            <summary>
            Returns true if the associated handle is not empty.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.Handle">
            <summary>
            Returns the associated handle.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.ReturnType">
            <summary>
            Returns the return type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.HasSource">
            <summary>
            Returns true if the associated source method is not null.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodDeclaration.Source">
            <summary>
            Returns the managed source method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.Specialize(ILGPU.IR.MethodHandle)">
            <summary>
            Specializes the current method declaration by specializing an empty
            method handle.
            </summary>
            <param name="handle">The handle to specialize.</param>
            <returns>The specialized method declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.Specialize(ILGPU.IR.Types.TypeNode)">
            <summary>
            Specializes the current method declaration by specializing the return type.
            </summary>
            <param name="returnType">The return type to specialize.</param>
            <returns>The specialized method declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.HasFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Returns true if this declaration has the given method flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, if this declaration has the given method flags.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.AddFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Adds the given flags to this declaration.
            </summary>
            <param name="flags">The flags to add.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.RemoveFlags(ILGPU.IR.MethodFlags)">
            <summary>
            Removes the given flags from this declaration.
            </summary>
            <param name="flags">The flags to remove.</param>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.Equals(ILGPU.IR.MethodDeclaration)">
            <summary>
            Returns true if the given declaration is equal to this declaration.
            </summary>
            <param name="other">The other declaration.</param>
            <returns>
            True, if the given declaration is equal to this declaration.
            </returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this declaration.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to this declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.GetHashCode">
            <summary>
            Returns the hash code of this declaration.
            </summary>
            <returns>The hash code of this declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.ToString">
            <summary>
            Returns the string representation of this declaration.
            </summary>
            <returns>The string representation of this declaration.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.op_Equality(ILGPU.IR.MethodDeclaration,ILGPU.IR.MethodDeclaration)">
            <summary>
            Returns true if the first and the second declaration are the same.
            </summary>
            <param name="first">The first declaration.</param>
            <param name="second">The second declaration.</param>
            <returns>
            True, if the first and the second declaration are the same.
            </returns>
        </member>
        <member name="M:ILGPU.IR.MethodDeclaration.op_Inequality(ILGPU.IR.MethodDeclaration,ILGPU.IR.MethodDeclaration)">
            <summary>
            Returns true if the first and the second declaration are not the same.
            </summary>
            <param name="first">The first declaration.</param>
            <param name="second">The second declaration.</param>
            <returns>
            True, if the first and the second declaration are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.IR.IMethodMappingObject">
            <summary>
            Represents an object that can be managed in the scope of a
            <see cref="T:ILGPU.IR.MethodMapping`1"/>
            </summary>
        </member>
        <member name="P:ILGPU.IR.IMethodMappingObject.Handle">
            <summary>
            Returns the associated function handle.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IMethodMappingObject.Source">
            <summary>
            Returns the original source method (may be null).
            </summary>
        </member>
        <member name="T:ILGPU.IR.MethodMapping`1">
            <summary>
            Maps function handles and managed .Net methods to <see cref="T:ILGPU.IR.Method"/>
            objects.
            </summary>
            <typeparam name="T">The mapped type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.MethodMapping`1.Enumerator">
            <summary>
            The internal enumerator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Enumerator.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Constructs a new enumerator.
            </summary>
            <param name="dataList">The data list.</param>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.Enumerator.Current">
            <summary cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Enumerator.Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:ILGPU.IR.MethodMapping`1.ReadOnlyCollection">
            <summary>
            Represents a readonly view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.Count">
            <summary>
            Returns the number of stored functions.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.Item(ILGPU.IR.MethodHandle)">
            <summary>
            Returns data that corresponds to the given handle.
            </summary>
            <param name="handle">The function handle.</param>
            <returns>The resolved data.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.TryGetHandle(System.Reflection.MethodBase,System.Nullable{ILGPU.IR.MethodHandle}@)">
            <summary>
            Tries to resolve the given managed method to function reference.
            </summary>
            <param name="method">The method to resolve.</param>
            <param name="handle">The resolved function handle (if any).</param>
            <returns>True, if the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.TryGetFunction(ILGPU.IR.MethodHandle,`0@)">
            <summary>
            Tries to resolve the given handle to a top-level function.
            </summary>
            <param name="handle">The function handle to resolve.</param>
            <param name="data">The resolved data (if any).</param>
            <returns>True, if the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all stored values.
            </summary>
            <returns>An enumerator that enumerates all stored values.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ReadOnlyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.Count">
            <summary>
            Returns the number of stored functions.
            </summary>
        </member>
        <member name="P:ILGPU.IR.MethodMapping`1.Item(ILGPU.IR.MethodHandle)">
            <summary>
            Returns data that corresponds to the given handle.
            </summary>
            <param name="handle">The function handle.</param>
            <returns>The resolved data.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.AsReadOnly">
            <summary>
            Constructs a readonly object view.
            </summary>
            <returns>The created readonly object view.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.TryGetHandle(System.Reflection.MethodBase,System.Nullable{ILGPU.IR.MethodHandle}@)">
            <summary>
            Tries to resolve the given managed method to function reference.
            </summary>
            <param name="method">The method to resolve.</param>
            <param name="handle">The resolved function handle (if any).</param>
            <returns>True, if the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.TryGetData(ILGPU.IR.MethodHandle,`0@)">
            <summary>
            Tries to resolve the given method to a top-level function.
            </summary>
            <param name="method">The method to resolve.</param>
            <param name="data">The resolved data (if any).</param>
            <returns>True, if the requested function could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Register(ILGPU.IR.MethodHandle,`0)">
            <summary>
            Registers the handle with the given data object.
            </summary>
            <param name="handle">The function handle.</param>
            <param name="data">The data object to register.</param>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ToArray">
            <summary>
            Converts this mapping object into an array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.ToImmutableArray">
            <summary>
            Converts this mapping object into an immutable array.
            </summary>
            <returns>The immutable array.</returns>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.Clear">
            <summary>
            Clears all contained functions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.MethodMapping`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all stored values.
            </summary>
            <returns>An enumerator that enumerates all stored values.</returns>
        </member>
        <member name="T:ILGPU.IR.INode">
            <summary>
            The base interface of all nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.INode.Id">
            <summary>
            Returns the unique node id.
            </summary>
        </member>
        <member name="P:ILGPU.IR.INode.Location">
            <summary>
            Returns the associated location.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Node">
            <summary>
            Represents a basic intermediate-representation node.
            It is the base class for all nodes in the scope of this IR.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Node.Comparison">
            <summary>
            Compares two nodes according to their id.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Node.#ctor(ILGPU.IR.Location)">
            <summary>
            Constructs a new node that is marked as replaceable.
            </summary>
            <param name="location">The current location.</param>
        </member>
        <member name="P:ILGPU.IR.Node.Location">
            <summary>
            Returns the associated location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Node.Id">
            <summary>
            Returns the unique node id.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Node.InferLocation``1(System.ReadOnlySpan{``0})">
            <summary>
            Infers the location (if required) of the current node.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="elements">Elements we can infer the location from.</param>
        </member>
        <member name="M:ILGPU.IR.Node.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific exception information.
            </summary>
            <param name="message">The source error message.</param>
            <returns>The formatted error message.</returns>
        </member>
        <member name="M:ILGPU.IR.Node.Dump(System.IO.TextWriter)">
            <summary>
            Dumps this method to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.Node.ToPrefixString">
            <summary>
            Returns the prefix string (operation name) of this node.
            </summary>
            <returns>The prefix string.</returns>
        </member>
        <member name="M:ILGPU.IR.Node.ToReferenceString">
            <summary>
            Returns the string representation of this node as reference.
            </summary>
            <returns>The string representation of this node as reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Node.ToString">
            <summary>
            Returns the string representation of this node.
            </summary>
            <returns>The string representation of this node.</returns>
        </member>
        <member name="T:ILGPU.IR.NodeId">
            <summary>
            Represents a node id.
            </summary>
        </member>
        <member name="M:ILGPU.IR.NodeId.CreateNew">
            <summary>
            Creates a new unique node id.
            </summary>
            <returns>A new unique node id.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.#ctor(ILGPU.InstanceId)">
            <summary>
            Constructs a new node id.
            </summary>
            <param name="id">The raw id.</param>
        </member>
        <member name="P:ILGPU.IR.NodeId.Id">
            <summary>
            Returns the encapsulated id.
            </summary>
        </member>
        <member name="M:ILGPU.IR.NodeId.Is(System.Int64)">
            <summary>
            Returns true if the given id is equal to this node id.
            </summary>
            <param name="id">The id to test.</param>
            <returns>True if the given id is equal to this node id.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.Equals(ILGPU.IR.NodeId)">
            <summary>
            Returns true if the given id is equal to this id.
            </summary>
            <param name="other">The other id.</param>
            <returns>True, if the given id is equal to this id.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.CompareTo(ILGPU.IR.NodeId)">
            <summary>
            Compares this id to the given one.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this id.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to this id.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.GetHashCode">
            <summary>
            Returns the hash code of this id.
            </summary>
            <returns>The hash code of this id.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.ToString">
            <summary>
            Returns the string representation of this id.
            </summary>
            <returns>The string representation of this id.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_Implicit(ILGPU.IR.NodeId)~System.Int64">
            <summary>
            Converts the given node id into its underlying long value.
            </summary>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_Equality(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true if the first and the second id are the same.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, if the first and the second id are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_Inequality(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true if the first and the second id are not the same.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, if the first and the second id are not the same.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_LessThan(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true if the first id is smaller than the second one.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, if the first id is smaller than the second one.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_LessThanOrEqual(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true if the first id is smaller than or equal to the second one.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>
            True, if the first id is smaller than or equal to the second one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_GreaterThan(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true if the first id is greater than the second one.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>True, if the first id is greater than the second one.</returns>
        </member>
        <member name="M:ILGPU.IR.NodeId.op_GreaterThanOrEqual(ILGPU.IR.NodeId,ILGPU.IR.NodeId)">
            <summary>
            Returns true if the first id is greater than or equal to the second one.
            </summary>
            <param name="first">The first id.</param>
            <param name="second">The second id.</param>
            <returns>
            True, if the first id is greater than or equal to the second one.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.IRewriterContext">
            <summary>
            A rewriter context to process values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.IRewriterContext.Builder">
            <summary>
            Returns the associated builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.IRewriterContext.Block">
            <summary>
            Returns the associated block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.IRewriterContext.IsConverted(ILGPU.IR.Value)">
            <summary>
            Returns true if the given value has been converted.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True, if the given value has been converted.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.IRewriterContext.MarkConverted(ILGPU.IR.Value)">
            <summary>
            Marks the given value as converted.
            </summary>
            <param name="value">The value to mark.</param>
            <returns>True, if the element has been added to the set of value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.IRewriterContext.Replace``1(ILGPU.IR.Value,``0)">
            <summary>
            Replaces the given value with the new value.
            </summary>
            <typeparam name="TValue">The value type of the new value.</typeparam>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.IRewriterContext.ReplaceAndRemove``1(ILGPU.IR.Value,``0)">
            <summary>
            Replaces the given value with the new value and removes it from the block.
            </summary>
            <typeparam name="TValue">The value type of the new value.</typeparam>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.IRewriterContext.Remove(ILGPU.IR.Value)">
            <summary>
            Removes the given value from the block.
            </summary>
            <param name="value">The current value.</param>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewriterContextExtensions">
            <summary>
            Extension methods for rewriter contexts.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContextExtensions.Replace``1(``0,ILGPU.IR.Value,ILGPU.IR.Values.ValueReference)">
            <summary>
            Replaces the given value with the new value.
            </summary>
            <typeparam name="T">The context type.</typeparam>
            <param name="context">The context instance.</param>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContextExtensions.ReplaceAndRemove``1(``0,ILGPU.IR.Value,ILGPU.IR.Values.ValueReference)">
            <summary>
            Replaces the given value with the new value and removes it from the block.
            </summary>
            <typeparam name="T">The context type.</typeparam>
            <param name="context">The context instance.</param>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContextExtensions.GetMethod``1(``0)">
            <summary>
            Returns the parent method.
            </summary>
            <typeparam name="T">The context type.</typeparam>
            <param name="context">The context instance.</param>
            <returns>The parent method.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContextExtensions.GetMethodBuilder``1(``0)">
            <summary>
            Returns the parent method builder.
            </summary>
            <typeparam name="T">The context type.</typeparam>
            <param name="context">The context instance.</param>
            <returns>The parent method builder.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewritePredicate`2">
            <summary>
            A rewriter predicate.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="data">The current user context.</param>
            <param name="value">The value to test.</param>
            <returns>True, if the value can be rewritten.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewriteConverter`3">
            <summary>
            A rewriter converter that converts nodes.
            </summary>
            <typeparam name="TContext">The rewriter context type.</typeparam>
            <typeparam name="T">The data type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="context">The current rewriting context.</param>
            <param name="data">The user-defined data.</param>
            <param name="value">The value to rewrite.</param>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter`4">
            <summary>
            A rewriter class to rewrite IR nodes.
            </summary>
            <typeparam name="TContext">The rewriter context type.</typeparam>
            <typeparam name="TContextProvider">
            The provider type for new context providers.
            </typeparam>
            <typeparam name="TContextData">
            The context specific data to build new rewriter contexts.
            </typeparam>
            <typeparam name="T">The user-defined data type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter`4.Converter">
            <summary>
            An internal converter type.
            </summary>
            <param name="context">The current context.</param>
            <param name="data">The custom data context.</param>
            <param name="value">The value to convert.</param>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter`4.IProcessor">
            <summary>
            A processor that can be applied to every value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.IProcessor.Apply(ILGPU.IR.BasicBlock.Builder,System.Collections.Generic.HashSet{ILGPU.IR.Value},ILGPU.IR.Value)">
            <summary>
            Applies this processor to a particular value.
            </summary>
            <param name="blockBuilder">The current block builder.</param>
            <param name="converted">The set of converted values.</param>
            <param name="value">The current value.</param>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter`4.StaticProcessor">
            <summary>
            An adapter to use a static rewriter instance.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.StaticProcessor.#ctor(ILGPU.IR.Rewriting.Rewriter{`0,`1,`2,`3},`2,`3,System.Collections.Generic.HashSet{ILGPU.IR.Value})">
            <summary>
            Initializes a new static processor.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.StaticProcessor.Rewriter">
            <summary>
            Returns the underlying rewriter.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.StaticProcessor.ContextData">
            <summary>
            Returns the current context data.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.StaticProcessor.Data">
            <summary>
            Returns the current data instance.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.StaticProcessor.ToConvert">
            <summary>
            Returns the set of values to convert.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.StaticProcessor.Apply(ILGPU.IR.BasicBlock.Builder,System.Collections.Generic.HashSet{ILGPU.IR.Value},ILGPU.IR.Value)">
            <summary>
            Applies the current processing adapter.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter`4.DynamicProcessor">
            <summary>
            An adapter to use a dynamic rewriter instance.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.DynamicProcessor.#ctor(ILGPU.IR.Rewriting.Rewriter{`0,`1,`2,`3},`2,`3)">
            <summary>
            Initializes a new static processor.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.DynamicProcessor.Rewriter">
            <summary>
            Returns the underlying rewriter.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.DynamicProcessor.ContextData">
            <summary>
            Returns the current context data.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.DynamicProcessor.Data">
            <summary>
            Returns the current data instance.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.DynamicProcessor.Apply(ILGPU.IR.BasicBlock.Builder,System.Collections.Generic.HashSet{ILGPU.IR.Value},ILGPU.IR.Value)">
            <summary>
            Applies the current processing adapter.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess">
            <summary>
            Encapsulates a static rewriting step.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.#ctor(ILGPU.IR.Rewriting.Rewriter{`0,`1,`2,`3},ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder,`2,`3,System.Collections.Generic.HashSet{ILGPU.IR.Value})">
            <summary>
            Initializes a new rewriting.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.Rewriter">
            <summary>
            Returns the parent rewriter.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.Blocks">
            <summary>
            Returns the block collection.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.Builder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.ContextData">
            <summary>
            Returns the current context data.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.Data">
            <summary>
            Returns the current data instance.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.ToConvert">
            <summary>
            Returns the set of values to convert.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.RewriterProcess.Rewrite">
            <summary>
            Applies the current rewriting instance.
            </summary>
            <returns>True, if the rewriter could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.InitProcessing``1(ILGPU.IR.Method.Builder,``0,System.Collections.Generic.HashSet{ILGPU.IR.Value}@)">
            <summary>
            Initializes a processing phase by applying the processor to all parameters.
            </summary>
            <typeparam name="TProcessor">The processor type.</typeparam>
            <param name="builder">The parent method builder.</param>
            <param name="processor">The processor instance.</param>
            <param name="converted">The initializes set of converted values.</param>
            <returns>True, if the given processor could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.Process``1(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder,``0)">
            <summary>
            Processes the whole scope using the processor provided.
            </summary>
            <typeparam name="TProcessor">The processor type.</typeparam>
            <param name="blocks">All blocks to process.</param>
            <param name="builder">The parent method builder.</param>
            <param name="processor">The processor instance.</param>
            <returns>True, if the given processor could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.#ctor">
            <summary>
            Constructs a new rewriter instance.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.Add``1(ILGPU.IR.Rewriting.RewriteConverter{`0,`3,``0})">
            <summary>
            Adds a new rewriter converter.
            </summary>
            <typeparam name="TValue">The value kind.</typeparam>
            <param name="converter">The rewriter converter.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.Add``1(ILGPU.IR.Rewriting.RewritePredicate{`3,``0},ILGPU.IR.Rewriting.RewriteConverter{`0,`3,``0})">
            <summary>
            Adds a new rewriter converter with a specific predicate.
            </summary>
            <typeparam name="TValue">The value kind.</typeparam>
            <param name="predicate">The predicate to use prior to conversion.</param>
            <param name="converter">The rewriter converter.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.CanRewrite(`3,ILGPU.IR.Value)">
            <summary>
            Returns true if the given value can be rewritten.
            </summary>
            <param name="context">The current context.</param>
            <param name="value">The value to test.</param>
            <returns>True, if the given value can be rewritten.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.Apply(`0,`3,ILGPU.IR.Value)">
            <summary>
            Applies an internal converter.
            </summary>
            <param name="context">The rewriter context.</param>
            <param name="data">The custom data instance.</param>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.GatherNodesToConvert(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,`3)">
            <summary>
            Determines all nodes to convert.
            </summary>
            <param name="blocks">The block collection.</param>
            <param name="data">The user-defined context.</param>
            <returns>The set of all values to convert.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.TryBeginRewrite(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder,`2,`3,ILGPU.IR.Rewriting.Rewriter{`0,`1,`2,`3}.RewriterProcess@)">
            <summary>
            Tries to rewrite the given scope using the method builder provided.
            </summary>
            <param name="blocks">The block collection.</param>
            <param name="builder">The current builder.</param>
            <param name="contextData">The context data.</param>
            <param name="data">The user-defined data.</param>
            <param name="rewriting">The resolved rewriting functionality.</param>
            <returns>True, if some nodes to rewrite could have been determined.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`4.Rewrite(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder,`2,`3)">
            <summary>
            Rewrites the given scope on-the-fly using the method builder provided.
            </summary>
            <param name="blocks">The block collection.</param>
            <param name="builder">The current builder.</param>
            <param name="contextData">The context data.</param>
            <param name="data">The user-defined data.</param>
            <returns>True, if the rewriter could be applied.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewriteConverter`2">
            <summary>
            A rewriter converter that converts nodes.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="context">The current rewriting context.</param>
            <param name="data">The user-defined data.</param>
            <param name="value">The value to rewrite.</param>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter`1">
            <summary>
            A rewriter class that does not work on user-defined context instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`1.Add``1(ILGPU.IR.Rewriting.RewriteConverter{`0,``0})">
            <summary>
            Adds a new rewriter converter.
            </summary>
            <typeparam name="TValue">The value kind.</typeparam>
            <param name="converter">The rewriter converter.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`1.Add``1(ILGPU.IR.Rewriting.RewritePredicate{`0,``0},ILGPU.IR.Rewriting.RewriteConverter{`0,``0})">
            <summary>
            Adds a new rewriter converter with a specific predicate.
            </summary>
            <typeparam name="TValue">The value kind.</typeparam>
            <param name="predicate">The predicate to use prior to conversion.</param>
            <param name="converter">The rewriter converter.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`1.TryBeginRewrite(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder,`0,ILGPU.IR.Rewriting.Rewriter{ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Rewriting.RewriterContextProvider{System.Object},System.Object,`0}.RewriterProcess@)">
            <summary>
            Tries to rewrite the given scope using the method builder provided.
            </summary>
            <param name="blocks">The block collection.</param>
            <param name="builder">The current builder.</param>
            <param name="data">The user-defined data.</param>
            <param name="rewriting">The resolved rewriting functionality.</param>
            <returns>True, if some nodes to rewrite could have been determined.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter`1.Rewrite(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder,`0)">
            <summary>
            Rewrites the given scope on-the-fly using the method builder provided.
            </summary>
            <param name="blocks">The block collection.</param>
            <param name="builder">The current builder.</param>
            <param name="data">The user-defined data.</param>
            <returns>True, if the rewriter could be applied.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewritePredicate`1">
            <summary>
            A rewriter predicate.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="value">The value to test.</param>
            <returns>True, if the value can be rewritten.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewriteConverter`1">
            <summary>
            A rewriter converter that converts nodes.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="context">The current rewriting context.</param>
            <param name="value">The value to rewrite.</param>
        </member>
        <member name="T:ILGPU.IR.Rewriting.Rewriter">
            <summary>
            A rewriter class that does not work on user-defined context instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter.Add``1(ILGPU.IR.Rewriting.RewriteConverter{``0})">
            <summary>
            Adds a new rewriter converter.
            </summary>
            <typeparam name="TValue">The value kind.</typeparam>
            <param name="converter">The rewriter converter.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter.Add``1(ILGPU.IR.Rewriting.RewritePredicate{``0},ILGPU.IR.Rewriting.RewriteConverter{``0})">
            <summary>
            Adds a new rewriter converter with a specific predicate.
            </summary>
            <typeparam name="TValue">The value kind.</typeparam>
            <param name="predicate">The predicate to use prior to conversion.</param>
            <param name="converter">The rewriter converter.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter.TryBeginRewrite(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder,ILGPU.IR.Rewriting.Rewriter{ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Rewriting.RewriterContextProvider{System.Object},System.Object,System.Object}.RewriterProcess@)">
            <summary>
            Tries to rewrite the given scope using the method builder provided.
            </summary>
            <param name="blocks">The block collection.</param>
            <param name="builder">The current builder.</param>
            <param name="rewriting">The resolved rewriting functionality.</param>
            <returns>True, if some nodes to rewrite could have been determined.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.Rewriter.Rewrite(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Method.Builder)">
            <summary>
            Rewrites the given scope on-the-fly using the method builder provided.
            </summary>
            <param name="blocks">The block collection.</param>
            <param name="builder">The current builder.</param>
            <returns>True, if the rewriter could be applied.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewriterContext">
            <summary>
            Helper class to process value instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContext.FromBuilder(ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Creates a light-weight rewriter context from the given builder.
            </summary>
            <param name="builder">The parent builder.</param>
            <returns>The created rewriter context.</returns>
            <remarks>
            Note that this context does not support any of the conversion utilities.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContext.#ctor(ILGPU.IR.BasicBlock.Builder,System.Collections.Generic.HashSet{ILGPU.IR.Value})">
            <summary>
            Constructs a new value processor.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="converted">The set of converted value.</param>
        </member>
        <member name="P:ILGPU.IR.Rewriting.RewriterContext.Builder">
            <summary>
            Returns the associated builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.RewriterContext.Block">
            <summary>
            Returns the associated block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.RewriterContext.Converted">
            <summary>
            The set of all converted nodes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContext.SpecializeBuilder(ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Specializes the build by setting a new block builder.
            </summary>
            <param name="newBuilder">The new builder to use.</param>
            <returns>The specialized rewriter context.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContext.IsConverted(ILGPU.IR.Value)">
            <summary>
            Returns true if the given value has been converted.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True, if the given value has been converted.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContext.MarkConverted(ILGPU.IR.Value)">
            <summary>
            Marks the given value as converted.
            </summary>
            <param name="value">The value to mark.</param>
            <returns>True, if the element has been added to the set of value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContext.Replace``1(ILGPU.IR.Value,``0)">
            <summary>
            Replaces the given value with the new value.
            </summary>
            <typeparam name="TValue">The value type of the new value.</typeparam>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContext.ReplaceAndRemove``1(ILGPU.IR.Value,``0)">
            <summary>
            Replaces the given value with the new value and removes it from the block.
            </summary>
            <typeparam name="TValue">The value type of the new value.</typeparam>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContext.Remove(ILGPU.IR.Value)">
            <summary>
            Removes the given value from the block.
            </summary>
            <param name="value">The current value.</param>
        </member>
        <member name="T:ILGPU.IR.Rewriting.IRewriterContextProvider`2">
            <summary>
            Provides rewriter context instances.
            </summary>
            <typeparam name="TContext">The context instance type.</typeparam>
            <typeparam name="T">The custom data type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Rewriting.IRewriterContextProvider`2.CreateContext(ILGPU.IR.BasicBlock.Builder,System.Collections.Generic.HashSet{ILGPU.IR.Value},`1)">
            <summary>
            Creates a new rewriter context.
            </summary>
            <param name="builder">The current block builder.</param>
            <param name="converted">The set of converted values.</param>
            <param name="data">The user defined data instance.</param>
            <returns>The created rewriter context.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewriterContextProvider`1">
            <summary>
            Provides <see cref="T:ILGPU.IR.Rewriting.RewriterContext"/> instances.
            </summary>
            <typeparam name="T">The custom data type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterContextProvider`1.CreateContext(ILGPU.IR.BasicBlock.Builder,System.Collections.Generic.HashSet{ILGPU.IR.Value},`0)">
            <summary>
            Creates a new <see cref="T:ILGPU.IR.Rewriting.RewriterContext"/>.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Rewriting.SSARewriterContext`1">
            <summary>
            A processor that can be applied to every block.
            </summary>
            <typeparam name="TVariable">The SSA variable type.</typeparam>
        </member>
        <member name="P:ILGPU.IR.Rewriting.SSARewriterContext`1.SSABuilder">
            <summary>
            Returns the current SSA builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.SSARewriterContext`1.Builder">
            <summary>
            Returns the associated builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.SSARewriterContext`1.Block">
            <summary>
            Returns the associated block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.SpecializeBuilder(ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Specializes the build by setting a new block builder.
            </summary>
            <param name="newBuilder">The new builder to use.</param>
            <returns>The specialized rewriter context.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.IsConverted(ILGPU.IR.Value)">
            <summary>
            Returns true if the given value has been converted.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True, if the given value has been converted.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.MarkConverted(ILGPU.IR.Value)">
            <summary>
            Marks the given value as converted.
            </summary>
            <param name="value">The value to mark.</param>
            <returns>True, if the element has been added to the set of value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.Replace``1(ILGPU.IR.Value,``0)">
            <summary>
            Replaces the given value with the new value.
            </summary>
            <typeparam name="TValue">The value type of the new value.</typeparam>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.ReplaceAndRemove``1(ILGPU.IR.Value,``0)">
            <summary>
            Replaces the given value with the new value and removes it from the block.
            </summary>
            <typeparam name="TValue">The value type of the new value.</typeparam>
            <param name="value">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>Returns the new value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.Remove(ILGPU.IR.Value)">
            <summary>
            Removes the given value from the block.
            </summary>
            <param name="value">The current value.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.SetValue(ILGPU.IR.BasicBlock,`0,ILGPU.IR.Value)">
            <summary>
            Sets the given variable to the given block.
            </summary>
            <param name="basicBlock">The target block.</param>
            <param name="var">The variable reference.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContext`1.GetValue(ILGPU.IR.BasicBlock,`0)">
            <summary>
            Returns the value of the given variable.
            </summary>
            <param name="basicBlock">The target block.</param>
            <param name="var">The variable reference.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.SSARewriterContextProvider`1">
            <summary>
            Provides <see cref="T:ILGPU.IR.Rewriting.SSARewriterContext`1"/> instances.
            </summary>
            <typeparam name="TVariable">The SSA variable type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriterContextProvider`1.CreateContext(ILGPU.IR.BasicBlock.Builder,System.Collections.Generic.HashSet{ILGPU.IR.Value},ILGPU.IR.Construction.SSABuilder{`0})">
            <summary>
            Creates a new <see cref="T:ILGPU.IR.Rewriting.SSARewriterContext`1"/>.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Rewriting.SSARewriter`2">
            <summary>
            A rewriter class to rewrite SSA builders.
            </summary>
            <typeparam name="TVariable">The SSA variable type.</typeparam>
            <typeparam name="T">The user-defined context type.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Rewriting.SSARewriter`2.RewriterProcess">
            <summary>
            Encapsulates a static rewriting step.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriter`2.RewriterProcess.#ctor(ILGPU.IR.Rewriting.SSARewriter{`0,`1},ILGPU.IR.Construction.SSABuilder{`0},`1,System.Collections.Generic.HashSet{ILGPU.IR.Value})">
            <summary>
            Initializes a new rewriting.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.SSARewriter`2.RewriterProcess.Rewriter">
            <summary>
            Returns the parent rewriter.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.SSARewriter`2.RewriterProcess.SSABuilder">
            <summary>
            Returns the parent scope.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.SSARewriter`2.RewriterProcess.Data">
            <summary>
            Returns the current data.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Rewriting.SSARewriter`2.RewriterProcess.ToConvert">
            <summary>
            Returns the set of values to convert.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriter`2.RewriterProcess.Rewrite">
            <summary>
            Applies the current rewriting instance.
            </summary>
            <returns>True, if the rewriter could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriter`2.ProcessSSA``1(ILGPU.IR.Construction.SSABuilder{`0},``0)">
            <summary>
            Processes the whole scope using the processor provided.
            </summary>
            <typeparam name="TProcessor">The processor type.</typeparam>
            <param name="ssaBuilder">The parent SSA builder..</param>
            <param name="processor">The processor instance.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriter`2.TryBeginRewrite(ILGPU.IR.Construction.SSABuilder{`0},`1,ILGPU.IR.Rewriting.SSARewriter{`0,`1}.RewriterProcess@)">
            <summary>
            Tries to rewrite the given SSA builder using the method builder provided.
            </summary>
            <param name="ssaBuilder">The parent SSA builder.</param>
            <param name="data">The user-defined data.</param>
            <param name="rewriting">The resolved rewriting functionality.</param>
            <returns>True, if some nodes to rewrite could have been determined.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriter`2.Rewrite(ILGPU.IR.Construction.SSABuilder{`0},`1)">
            <summary>
            Rewrites the given SSA builder on-the-fly using the method builder provided.
            </summary>
            <param name="ssaBuilder">The parent SSA builder.</param>
            <param name="data">The user-defined data.</param>
            <returns>True, if the rewriter could be applied.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.SSARewriter`1">
            <summary>
            A rewriter class to rewrite SSA builders.
            </summary>
            <typeparam name="TVariable">The SSA variable type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriter`1.TryBeginRewrite(ILGPU.IR.Construction.SSABuilder{`0},ILGPU.IR.Rewriting.SSARewriter{`0,System.Object}.RewriterProcess@)">
            <summary>
            Tries to rewrite the given SSA builder using the method builder provided.
            </summary>
            <param name="ssaBuilder">The parent SSA builder.</param>
            <param name="rewriting">The resolved rewriting functionality.</param>
            <returns>True, if some nodes to rewrite could have been determined.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.SSARewriter`1.Rewrite(ILGPU.IR.Construction.SSABuilder{`0})">
            <summary>
            Rewrites the given SSA builder on-the-fly using the method builder provided.
            </summary>
            <param name="ssaBuilder">The parent SSA builder.</param>
            <returns>True, if the rewriter could be applied.</returns>
        </member>
        <member name="T:ILGPU.IR.Rewriting.RewriterStructureExtensions">
            <summary>
            Extension methods for generation and destruction of structure values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterStructureExtensions.AssembleStructure``2(``0,ILGPU.IR.Types.StructureType,``1,System.Func{``0,``1,ILGPU.IR.Values.FieldAccess,ILGPU.IR.Value})">
            <summary>
            Assembles a structure value using the lowering provided.
            </summary>
            <typeparam name="T">The rewriter context type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="context">The current rewriter context instance.</param>
            <param name="structureType">The structure type to use.</param>
            <param name="value">The source value.</param>
            <param name="lowering">The lowering functionality.</param>
            <returns>The assembled structure value.</returns>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterStructureExtensions.DisassembleStructure``2(``0,ILGPU.IR.Types.StructureType,``1,System.Action{``0,``1,ILGPU.IR.Value,ILGPU.IR.Values.FieldAccess})">
            <summary>
            Disassembled a structure value using the lowering provided.
            </summary>
            <typeparam name="T">The rewriter context type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="context">The current rewriter context instance.</param>
            <param name="structureType">The structure type to use.</param>
            <param name="value">The source value.</param>
            <param name="lowering">The lowering functionality.</param>
        </member>
        <member name="M:ILGPU.IR.Rewriting.RewriterStructureExtensions.LowerValue``2(``0,``1,ILGPU.IR.Value,System.Func{``0,``1,ILGPU.IR.Value,ILGPU.IR.Value})">
            <summary>
            Lowers the given value by applying the lowering provided to each field value.
            Primitive values will be lowered once.
            </summary>
            <typeparam name="T">The rewriter context type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="context">The current rewriter context instance.</param>
            <param name="source">The source value.</param>
            <param name="variable">The variable value.</param>
            <param name="lowering">The lowering functionality.</param>
            <returns>The assembled structure value holding the result value.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.AcceleratorSpecializer">
            <summary>
            Represents a device specializer that instantiates device-specific constants
            and updates device-specific functionality.
            </summary>
            <remarks>
            Note that this class does not perform recursive specialization operations.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData.#ctor(ILGPU.IR.Transformations.AcceleratorSpecializer,ILGPU.IR.IRContext,System.Collections.Generic.List{ILGPU.IR.Value})">
            <summary>
            Constructs a new data instance.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData.ToImplement">
            <summary>
            A list of values to be implemented in the next step.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData.Specializer">
            <summary>
            Returns the parent specializer instance.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData.Context">
            <summary>
            Returns the current IR context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData.AcceleratorType">
            <summary>
            Returns the current accelerator type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData.WarpSize">
            <summary>
            Returns the current warp size (if any).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData.IntPointerType">
            <summary>
            Returns the target-platform specific integer pointer type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData.EnableAssertions">
            <summary>
            Returns true if assertions are enabled.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData.EnableIOOperations">
            <summary>
            Returns true if IO is enabled.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.Specialize(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Value,System.Int32)">
            <summary>
            Specializes accelerator-specific values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.Specialize(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData,ILGPU.IR.Values.AcceleratorTypeValue)">
            <summary>
            Specializes accelerator-type values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.Specialize(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData,ILGPU.IR.Values.WarpSizeValue)">
            <summary>
            Specializes warp size values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.CanSpecialize(ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData,ILGPU.IR.Values.IntAsPointerCast)">
            <summary>
            Returns true if we have to adjust the source cast operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.Specialize(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData,ILGPU.IR.Values.IntAsPointerCast)">
            <summary>
            Specializes int to native pointer casts.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.CanSpecialize(ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData,ILGPU.IR.Values.PointerAsIntCast)">
            <summary>
            Returns true if we have to adjust the source cast operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.Specialize(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData,ILGPU.IR.Values.PointerAsIntCast)">
            <summary>
            Specializes native pointer to int casts.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.Specialize(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData,ILGPU.IR.Values.DebugAssertOperation)">
            <summary>
            Removes or collects debug operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.Specialize(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData,ILGPU.IR.Values.WriteToOutput)">
            <summary>
            Removes or collects IO operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.Specialize(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.AcceleratorSpecializer.SpecializerData,ILGPU.IR.Values.AsAligned)">
            <summary>
            Collects alignment operations (for debugging purposes).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.AcceleratorSpecializer.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.#cctor">
            <summary>
            Registers all rewriting patterns.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.#ctor(ILGPU.Runtime.AcceleratorType,System.Nullable{System.Int32},ILGPU.IR.Types.PrimitiveType,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new device specializer.
            </summary>
            <param name="acceleratorType">The accelerator type.</param>
            <param name="warpSize">The warp size (if any).</param>
            <param name="intPointerType">The native integer pointer type.</param>
            <param name="enableAssertions">True, if the assertions are enabled.</param>
            <param name="enableIOOperations">True, if the IO is enabled.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.AcceleratorType">
            <summary>
            Returns the current accelerator type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.WarpSize">
            <summary>
            Returns the current warp size (if any).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.IntPointerType">
            <summary>
            Returns the target-platform specific integer pointer type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.EnableAssertions">
            <summary>
            Returns true if assertions are enabled.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.AcceleratorSpecializer.EnableIOOperations">
            <summary>
            Returns true if debug output is enabled.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.PerformTransformation(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder)">
            <summary>
            Applies an accelerator-specialization transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.Implement(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.DebugAssertOperation)">
            <summary>
            Specializes debug output operations (if any). Note that this default
            implementation removes the output operations from the current program.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="methodBuilder">The parent method builder.</param>
            <param name="builder">The current block builder.</param>
            <param name="debugAssert">The debug assert operation.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.Implement(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.WriteToOutput)">
            <summary>
            Specializes IO output operations (if any). Note that this default
            implementation removes the output operations from the current program.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="methodBuilder">The parent method builder.</param>
            <param name="builder">The current block builder.</param>
            <param name="writeToOutput">The IO output operation.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.AcceleratorSpecializer.Implement(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.AsAligned)">
            <summary>
            Specializes as-aligned operations (if any) for debugging purposes (if
            enabled). Note that this default implementation does not perform any
            operation.
            </summary>
            <param name="context">The parent IR context.</param>
            <param name="methodBuilder">The parent method builder.</param>
            <param name="builder">The current block builder.</param>
            <param name="asAligned">The current alignment operation.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.CleanupBlocks">
            <summary>
            Cleans up empty blocks.
            </summary>
            <remarks>
            TODO: this transformation should become much more aggressive by cloning values
            into predecessor blocks to reduce the number of branches.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Transformations.CleanupBlocks.Remapper">
            <summary>
            Remaps source to target blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CleanupBlocks.Remapper.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new remapper.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.CleanupBlocks.Remapper.Source">
            <summary>
            Returns the source block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.CleanupBlocks.Remapper.Target">
            <summary>
            Returns the new target block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CleanupBlocks.Remapper.CanRemap(System.ReadOnlySpan{ILGPU.IR.BasicBlock}@)">
            <summary>
            Returns true if the given block span contains the source block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CleanupBlocks.Remapper.Remap(ILGPU.IR.BasicBlock)">
            <summary>
            Remaps the source block to the new target block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CleanupBlocks.HasSameTargets(ILGPU.IR.Values.ConditionalBranch,ILGPU.IR.BasicBlock@)">
            <summary>
            Returns true if the conditional branch has identical branch targets in all
            cases.
            </summary>
            <param name="conditionalBranch">The conditional branch.</param>
            <param name="target">The main target.</param>
            <returns>True, if all targets are identical.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.CleanupBlocks.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the cleanup transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.CodePlacementMode">
            <summary>
            Specifies the placement mode for a single <see cref="T:ILGPU.IR.Transformations.CodePlacement"/>
            instance.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.CodePlacementMode.Default">
            <summary>
            The default placement mode does not touch any values with side effects.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.CodePlacementMode.Aggressive">
            <summary>
            The aggressive mode allows the movement of values with side effects.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.CodePlacement">
            <summary>
            Represents a global code placement phase that moves values as close as possible
            to their uses. This minimizes live ranges of all values in the program.
            </summary>
            <remarks>
            This placement transformation should be used in combination with the
            <see cref="T:ILGPU.IR.Transformations.LoopInvariantCodeMotion"/> transformation to use values out of loops.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Transformations.CodePlacement.PlacementEntry">
            <summary>
            A single entry during the placement process.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.PlacementEntry.#ctor(ILGPU.IR.Value,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new placement entry.
            </summary>
            <param name="value">The current value to place.</param>
            <param name="block">The target block.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.CodePlacement.PlacementEntry.Value">
            <summary>
            The value to be placed.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.CodePlacement.PlacementEntry.Block">
            <summary>
            The intended initial basic block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.PlacementEntry.ToString">
            <summary>
            Returns the string representation of this entry for debugging purposes.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.CodePlacement.IMover">
            <summary>
            An abstract mover that validates the movement of placement entries.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.IMover.CanMove(ILGPU.IR.Transformations.CodePlacement.PlacementEntry@)">
            <summary>
            Returns true whether the given value can be moved to the desired target
            block.
            </summary>
            <param name="entry">
            The input entry consisting of the value to move and its target block to
            move the value to.
            </param>
            <returns>
            True, if the given entry is valid, and thus, the value can be moved.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.CodePlacement.IPlacementStrategy">
            <summary>
            An abstract strategy that describes how operands of values are scheduled.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.IPlacementStrategy.Init(System.Int32)">
            <summary>
            Initializes this placement strategy.
            </summary>
            <param name="capacity">The internal stack/queue capacity.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.CodePlacement.IPlacementStrategy.Count">
            <summary>
            Returns the number of placement entries to process.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.IPlacementStrategy.Push(ILGPU.IR.Transformations.CodePlacement.PlacementEntry@)">
            <summary>
            Pushes the next placement entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.IPlacementStrategy.Pop">
            <summary>
            Pops the next placement entry to process.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.IPlacementStrategy.EnqueueChildren``1(``0@,ILGPU.IR.Transformations.CodePlacement.PlacementEntry@)">
            <summary>
            Enqueues all child values of the given placement entry.
            </summary>
            <param name="mover">The current mover instance.</param>
            <param name="entry">The entry to enqueue all children for.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.CodePlacement.GroupOperands">
            <summary>
            Groups operands into "logical computation/processing groups" to keep them in
            an ascending order with respect to their parent target operations.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.CodePlacement.GroupOperands.toPlace">
            <summary>
            The stack of all remaining entries to be placed.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.GroupOperands.Init(System.Int32)">
            <summary>
            Initializes the internal stack with the given capacity.
            </summary>
            <param name="capacity">The initial stack capacity.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.CodePlacement.GroupOperands.Count">
            <summary>
            Returns the number of elements on the stack.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.GroupOperands.Push(ILGPU.IR.Transformations.CodePlacement.PlacementEntry@)">
            <summary>
            Pushes the given placement entry to the stack.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.GroupOperands.Pop">
            <summary>
            Pops the next placement entry from the stack.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.GroupOperands.EnqueueChildren``1(``0@,ILGPU.IR.Transformations.CodePlacement.PlacementEntry@)">
            <summary>
            Pushes all operands from right to left onto the internal processing stack.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.CodePlacement.MinimizeOperandDistances">
            <summary>
            Minimizes the distances between all operands.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.CodePlacement.MinimizeOperandDistances.toPlace">
            <summary>
            The queue of all remaining entries to be placed.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.MinimizeOperandDistances.Init(System.Int32)">
            <summary>
            Initializes the internal queue with the given capacity.
            </summary>
            <param name="capacity">The initial queue capacity.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.CodePlacement.MinimizeOperandDistances.Count">
            <summary>
            Returns the number of elements in the queue.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.MinimizeOperandDistances.Push(ILGPU.IR.Transformations.CodePlacement.PlacementEntry@)">
            <summary>
            Enqueues the given placement entry into the queue.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.MinimizeOperandDistances.Pop">
            <summary>
            Dequeues the next placement entry from the queue.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.MinimizeOperandDistances.EnqueueChildren``1(``0@,ILGPU.IR.Transformations.CodePlacement.PlacementEntry@)">
            <summary>
            Enqueues all operands from right to left into the internal queue.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement.#ctor(ILGPU.IR.Transformations.CodePlacementMode)">
            <summary>
            Constructs a new instance while specifying the placement mode.
            </summary>
            <param name="mode">The mode to use.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.CodePlacement.Mode">
            <summary>
            Returns the current placement mode.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.CodePlacement`1">
            <summary>
            Represents a global code placement phase that moves values a close as possible
            to their uses. This minimizes live ranges of all values in the program.
            </summary>
            <remarks>
            This placement transformation should be used in combination with the
            <see cref="T:ILGPU.IR.Transformations.LoopInvariantCodeMotion"/> transformation to use values out of loops.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Transformations.CodePlacement`1.IPlacerMode">
            <summary>
            An abstract placer mode that setups insert position for given blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.IPlacerMode.GetInsertPosition(ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Gets the insert position for the given builder.
            </summary>
            <param name="builder">The current block builder.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.IPlacerMode.SetupInsertPosition(ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Setups the value insert position for the given block builder.
            </summary>
            <param name="builder">The current block builder.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.CodePlacement`1.AppendMode">
            <summary>
            Appends values by inserting them behind all phi values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.CodePlacement`1.AppendMode.Blocks">
            <summary>
            Returns the current basic block map.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.AppendMode.GetInsertPosition(ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Determines the insert position according to the number of detected phi
            values in each block.
            </summary>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.AppendMode.SetupInsertPosition(ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Setups the insert position according to the number of detected phi
            values in each block.
            </summary>
            <param name="builder">The current builder.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.CodePlacement`1.InsertMode">
            <summary>
            Inserts all values at the beginning of each block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.InsertMode.GetInsertPosition(ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Setups the insert position to point to the start of the block.
            </summary>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.InsertMode.SetupInsertPosition(ILGPU.IR.BasicBlock.Builder)">
            <summary>
            Setups the insert position to point to the start of the block.
            </summary>
            <param name="builder">The current builder.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.CodePlacement`1.Mover">
            <summary>
            Tracks and validates the movement of values with side effects to different
            blocks. Enabling movement of side effect values makes the whole placement
            algorithm significantly more aggressive.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.CodePlacement`1.Mover.movement">
            <summary>
            The internal movement analysis instance used to move values during code
            placement.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.Mover.#ctor(ILGPU.IR.Method.Builder,ILGPU.IR.Transformations.CodePlacementMode)">
            <summary>
            Constructs a new mover.
            </summary>
            <param name="builder">The parent builder.</param>
            <param name="mode">The current placement mode.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.CodePlacement`1.Mover.Builder">
            <summary>
            Returns the underlying method builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.CodePlacement`1.Mover.Dominators">
            <summary>
            Returns the dominators of the current method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.CodePlacement`1.Mover.Mode">
            <summary>
            Returns the current placement mode.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.Mover.CanMove(ILGPU.IR.Transformations.CodePlacement.PlacementEntry@)">
            <summary>
            Returns true if the given value can be moved to a different block. This is
            the case if we reach a node without side effects or phi values that
            belongs to the same method. Alternatively, this might be a value with
            side effects. In this case, we validate if this can change the current
            program semantics.
            </summary>
            <param name="entry">The current placement entry.</param>
            <returns>
            True, if the given value can be moved to the target block given by the
            placement entry.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.CodePlacement`1.Placer">
            <summary>
            An internal placement helper structure that manages all values to be placed.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.CodePlacement`1.Placer.strategy">
            <summary>
            The strategy instance to manage the placement order.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.CodePlacement`1.Placer.placed">
            <summary>
            The set of all values that have been placed.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.Placer.#ctor(ILGPU.IR.Transformations.CodePlacement{`0}.Mover)">
            <summary>
            Constructs a new placer instance.
            </summary>
            <param name="mover">The parent mover.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.CodePlacement`1.Placer.Mover">
            <summary>
            Returns the parent mover.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.CodePlacement`1.Placer.Builder">
            <summary>
            Returns the parent method builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.CodePlacement`1.Placer.Dominators">
            <summary>
            Returns the parent dominators.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.Placer.IsPlaced(ILGPU.IR.Value)">
            <summary>
            Returns true if the given value has been placed.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.Placer.PlaceRecursive``1(ILGPU.IR.Transformations.CodePlacement.PlacementEntry@,``0@)">
            <summary>
            Places this value and all of its dependencies recursively.
            </summary>
            <param name="entry">The placement entry to place.</param>
            <param name="mode">The current placing mode.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.Placer.TryPlace(ILGPU.IR.Transformations.CodePlacement.PlacementEntry@)">
            <summary>
            Tries to place the given entry while determining a proper placement block.
            </summary>
            <param name="entry">The placement entry.</param>
            <returns>
            True, if the value could be placed given its operand conditions.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.Placer.PlaceDirect``1(ILGPU.IR.Transformations.CodePlacement.PlacementEntry@,``0)">
            <summary>
            Places a value directly without placing its operands.
            </summary>
            <param name="entry">The placement entry to be placed.</param>
            <param name="mode">The current placing mode.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.Placer.CanPlace(ILGPU.IR.Value)">
            <summary>
            Returns true if the current value can be placed now by checking all of
            its uses.
            </summary>
            <param name="value">The value to be placed.</param>
            <returns>True, if the value could be placed.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.CodePlacement`1.GatherValuesInBlock">
            <summary>
            Gathers phi values in all blocks and clears all block-internal lists.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.CodePlacement`1.GatherValuesInBlock.Builder">
            <summary>
            Returns the parent method builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.CodePlacement`1.GatherValuesInBlock.PhiValues">
            <summary>
            Returns the list of all phi values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.GatherValuesInBlock.GetValue(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Determines an array of all values of the given block in post order.
            </summary>
            <param name="block">The current block.</param>
            <param name="traversalIndex">The current traversal index.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.#ctor(ILGPU.IR.Transformations.CodePlacementMode)">
            <summary>
            Constructs a new instance while specifying the placement mode.
            </summary>
            <param name="mode">The mode to use.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.CodePlacement`1.PerformTransformation(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder)">
            <summary>
            Applies an accelerator-specialization transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.DeadCodeElimination">
            <summary>
            Represents a DCE transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.DeadCodeElimination.#ctor">
            <summary>
            Constructs a new DCE transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.DeadCodeElimination.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies a DCE transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConversion">
            <summary>
            Converts nested if/switch branches into value conditionals.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper">
            <summary>
            Remaps if branch targets to new blocks in order to linearize all jump targets.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new if branch remapper.
            </summary>
            <param name="postDominator">The common post dominator.</param>
            <param name="newTarget">The new target block.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.PostDominator">
            <summary>
            Returns the common post dominator.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.NewTarget">
            <summary>
            Returns the new target block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.CanRemap(System.ReadOnlySpan{ILGPU.IR.BasicBlock}@)">
            <summary>
            Returns true if one of the block is equal to the
            <see cref="P:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.PostDominator"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.Remap(ILGPU.IR.BasicBlock)">
            <summary>
            Remaps the given block to the block <see cref="P:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.NewTarget"/> if the source
            block is equal to the <see cref="P:ILGPU.IR.Transformations.IfConversion.IfBranchRemapper.PostDominator"/>.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConversion.Regions">
            <summary>
            A wrapper structure to encapsulate several basic block regions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.Regions.#ctor(ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Constructs a new regions wrapper.
            </summary>
            <param name="root">The root node.</param>
            <param name="numRegions">The number of attached regions.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.Regions.Root">
            <summary>
            Returns the associated root block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.Regions.Count">
            <summary>
            Returns the number of regions.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.Regions.Item(System.Int32)">
            <summary>
            Returns the i-th region.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.Regions.FindRegion(ILGPU.IR.BasicBlock)">
            <summary>
            Finds a particular case index via linear search.
            </summary>
            <param name="block">The phi-argument block.</param>
            <returns>The region index.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.Regions.AddRegion(System.Int32,System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock},System.Int32@)">
            <summary>
            Adds a new region.
            </summary>
            <param name="index">The region index.</param>
            <param name="region">The region contents.</param>
            <param name="regionSize">The region size to adapt.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer">
            <summary>
            An analyzer to detect compatible if/switch branch constructions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.VerifyPredecessors(ILGPU.IR.BasicBlock,System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock})">
            <summary>
            Verifies predecessors of all blocks.
            </summary>
            <param name="root">The current root node.</param>
            <param name="region">The current region.</param>
            <returns>True, if all predecessors can be safely converted.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.CanConvertPhis(System.Collections.Generic.HashSet{ILGPU.IR.Values.PhiValue},ILGPU.IR.Transformations.IfConversion.Regions)">
            <summary>
            Returns true if the given set of phi values can be converted.
            </summary>
            <param name="phiValues">The phi values to convert.</param>
            <param name="regions">The current regions.</param>
            <returns>True, if the given set of phi values can be converted.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.#ctor(System.Int32,System.Int32,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Constructs a new conditional analyzer.
            </summary>
            <param name="maxBlockSize">The maximum block size.</param>
            <param name="maxBlockDifference">
            The maximum block size difference.
            </param>
            <param name="blocks">The current blocks.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.MaxBlockSize">
            <summary>
            Returns the maximum block size.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.MaxBlockDifference">
            <summary>
            Returns the maximum block difference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.PostDominators">
            <summary>
            Returns the parent post dominators.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.Gathered">
            <summary>
            Gets or sets the current set of gathered blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.CanConvert(ILGPU.IR.BasicBlock,ILGPU.IR.Transformations.IfConversion.ConditionalConverter@)">
            <summary>
            Returns true if the given block forms an if-statement that can be
            converted using the associated <see cref="T:ILGPU.IR.Transformations.IfConversion.ConditionalConverter"/>.
            </summary>
            <param name="block">The block to check.</param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.GatherNodes(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock,System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock},System.Int32@)">
            <summary>
            Gathers all nodes recursively that belong to a particular region.
            </summary>
            <param name="current">The current block.</param>
            <param name="postDominator">
            The common post dominator of all regions.
            </param>
            <param name="visited">The target set of visited nodes.</param>
            <param name="regionSize">The current region size.</param>
            <returns>True, if this region can be converted.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalAnalyzer.GatherPhis(ILGPU.IR.Method)">
            <summary>
            Gathers all <see cref="T:ILGPU.IR.Values.PhiValue"/> nodes that reference values from the
            region that we want to convert.
            </summary>
            <param name="method">The parent method.</param>
            <returns>
            The set of all <see cref="T:ILGPU.IR.Values.PhiValue"/> that could be found.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConversion.ConditionalConverter">
            <summary>
            A conditional converter to perform the actual if/switch conversion into
            conditional value predicates.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.#ctor(ILGPU.IR.Values.ConditionalBranch,ILGPU.IR.BasicBlock,System.Collections.Generic.HashSet{ILGPU.IR.Values.PhiValue},ILGPU.IR.Transformations.IfConversion.Regions)">
            <summary>
            Constructs a new conditional converter.
            </summary>
            <param name="branch">The conditional branch node.</param>
            <param name="postDominator">The common post dominator.</param>
            <param name="phiValues">All phi values to convert.</param>
            <param name="regions"></param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.Branch">
            <summary>
            Returns the source branch.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.PostDominator">
            <summary>
            The post dominator block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.PhiValues">
            <summary>
            Returns the set of all phi values that will be converted.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.Regions">
            <summary>
            Returns all regions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.ConvertPhis(ILGPU.IR.Method.Builder)">
            <summary>
            Converts all phi nodes to their conditional value counterparts.
            </summary>
            <param name="methodBuilder">The current builder.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.ConvertBranches(ILGPU.IR.Method.Builder)">
            <summary>
            Converts all branches to a linear branch chain.
            </summary>
            <param name="methodBuilder">The current builder.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.ConvertRegionBranches(ILGPU.IR.Method.Builder,System.Int32,ILGPU.IR.BasicBlock)">
            <summary>
            Converts all branches inside the specified region.
            </summary>
            <param name="methodBuilder">The current builder.</param>
            <param name="regionIndex">The region index.</param>
            <param name="jumpTarget">The jump target.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.ConditionalConverter.Convert(ILGPU.IR.Method.Builder)">
            <summary>
            Converts all phi nodes and branches.
            </summary>
            <param name="methodBuilder">The current builder.</param>
        </member>
        <member name="F:ILGPU.IR.Transformations.IfConversion.DefaultMaxBlockSize">
            <summary>
            The default maximum block size measured in instructions.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.IfConversion.DefaultMaxBlockDifference">
            <summary>
            The default maximum block difference between all branches measured in
            instructions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.#ctor">
            <summary>
            Constructs a new if/switch conversion transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new if/switch conversion transformation.
            </summary>
            <param name="maxBlockSize">The maximum block size.</param>
            <param name="maxBlockDifference">The maximum block size difference.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.MaxBlockSize">
            <summary>
            Returns the maximum block size.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConversion.MaxBlockDifference">
            <summary>
            Returns the maximum block difference.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConversion.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Folds conditionals into uniform control flow using selects.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConditionConversion">
            <summary>
            Transforms and-also and or-else branch chains into efficient logical operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.GetIfBranch(ILGPU.IR.BasicBlock)">
            <summary>
            Helper function to return <see cref="T:ILGPU.IR.Values.IfBranch"/> terminator of the given
            block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.MergePhiCaseValue(ILGPU.IR.Value@,ILGPU.IR.Value)">
            <summary>
            Merges two phi case values.
            </summary>
            <param name="currentValue">The current value.</param>
            <param name="caseValue">The case value to merge.</param>
            <returns>True, if both case values are compatible.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConditionConversion.BlockKind">
            <summary>
            The kind of a single block in the scope of this transformation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.IfConditionConversion.BlockKind.Inner">
            <summary>
            An inner block that can be merged.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.IfConditionConversion.BlockKind.Exit">
            <summary>
            An exit block that has to be preserved.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks">
            <summary>
            Wraps a pair consisting of a true-case and a false-case block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.TryGetTrueExit(ILGPU.IR.BasicBlockMap{ILGPU.IR.Transformations.IfConditionConversion.BlockKind}@,ILGPU.IR.BasicBlock)">
            <summary>
            Gets the primary true leaf that is used to created the merged branch.
            </summary>
            <param name="kinds">The set of all block kinds.</param>
            <param name="current">The current block.</param>
            <returns>The determined true block.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.GetFalseExit(ILGPU.IR.BasicBlockMap{ILGPU.IR.Transformations.IfConditionConversion.BlockKind}@,ILGPU.IR.BasicBlock)">
            <summary>
            Gets the primary false leaf that is used to created the merged branch.
            </summary>
            <param name="kinds">The set of all block kinds.</param>
            <param name="trueBlock">The true block.</param>
            <returns>The determined false block.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.#ctor(ILGPU.IR.BasicBlockMap{ILGPU.IR.Transformations.IfConditionConversion.BlockKind}@,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new case blocks instance.
            </summary>
            <param name="kinds">The current block kinds.</param>
            <param name="current">The current root block to start the search.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.TrueBlock">
            <summary>
            Returns the true block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.FalseBlock">
            <summary>
            Returns the false block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.IsValid">
            <summary>
            Returns true if this conversion phase is able to convert the pair.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.IsTrueBlock(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given block is the <see cref="P:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.TrueBlock"/>.
            </summary>
            <param name="block">The block to test.</param>
            <returns>
            True, if the given block is the <see cref="P:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.TrueBlock"/>.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.Contains(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given block is either the <see cref="P:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.TrueBlock"/>
            or the <see cref="P:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.FalseBlock"/>.
            </summary>
            <param name="block">The block to test.</param>
            <returns>
            True, if the given block is either the <see cref="P:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.TrueBlock"/> or the
            <see cref="P:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.FalseBlock"/>.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.AssertInBlocks(ILGPU.IR.Value)">
            <summary>
            Asserts that the given value is contained in either the
            <see cref="P:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.TrueBlock"/> or the <see cref="P:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.FalseBlock"/>.
            </summary>
            <param name="value">The value to test.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConditionConversion.SuccessorsProvider">
            <summary>
            A custom successors provider that stops processing as soon as it hits an
            block with kind <see cref="F:ILGPU.IR.Transformations.IfConditionConversion.BlockKind.Exit"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.SuccessorsProvider.#ctor(ILGPU.IR.Analyses.Dominators{ILGPU.IR.Analyses.ControlFlowDirection.Forwards},ILGPU.IR.BasicBlock,System.Int32)">
            <summary>
            Constructs a new successors provider.
            </summary>
            <param name="dominators">The dominators.</param>
            <param name="entryPoint">The current entry point.</param>
            <param name="maxNumInstructions">
            The maximum number of instructions in an inner block.
            </param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.SuccessorsProvider.Dominators">
            <summary>
            Returns all dominators.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.SuccessorsProvider.EntryPoint">
            <summary>
            Returns the current entry point.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.SuccessorsProvider.MaxNumInstructions">
            <summary>
            Returns the maximum number of instructions in an inner block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.SuccessorsProvider.IsCompatibleBlock(ILGPU.IR.BasicBlock,ILGPU.IR.Values.IfBranch@)">
            <summary>
            Returns true if the given block can be converted (an inner block).
            </summary>
            <param name="basicBlock">The block to test.</param>
            <param name="terminator">The resolved terminator (if any).</param>
            <returns>
            True, if the block can be considered to be an inner block.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.SuccessorsProvider.GetBlockKind(ILGPU.IR.BasicBlock,System.Int32@)">
            <summary>
            Determines the block kind of the given block.
            </summary>
            <param name="basicBlock">The current block.</param>
            <param name="exitCounter">The current number of exit blocks.</param>
            <returns>The block kind.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.SuccessorsProvider.GetSuccessors(ILGPU.IR.BasicBlock)">
            <summary>
            Returns all successors in the case of an inner block.
            </summary>
            <param name="basicBlock">The current basic block.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConditionConversion.BlockKindPredicate">
            <summary>
            Represents a kind predicate that filters blocks based on their kind.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.BlockKindPredicate.#ctor(ILGPU.IR.BasicBlockMap{ILGPU.IR.Transformations.IfConditionConversion.BlockKind}@,ILGPU.IR.Transformations.IfConditionConversion.BlockKind)">
            <summary>
            Constructs a new kind predicate.
            </summary>
            <param name="kinds">All block kinds.</param>
            <param name="kindToInclude">The kind of blocks to include.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.BlockKindPredicate.KindToInclude">
            <summary>
            Returns the kind of blocks to include.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.BlockKindPredicate.Kinds">
            <summary>
            Returns the map of all block kinds.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.BlockKindPredicate.Apply(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the kind of the given block is equal to
            <see cref="P:ILGPU.IR.Transformations.IfConditionConversion.BlockKindPredicate.KindToInclude"/>.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConditionConversion.PhiRemapper">
            <summary>
            Skips duplicate entries pointing to the entry block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.PhiRemapper.EntryBlock">
            <summary>
            Returns the entry block to remap to.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.PhiRemapper.Added">
            <summary>
            Returns true if the <see cref="P:ILGPU.IR.Transformations.IfConditionConversion.PhiRemapper.EntryBlock"/> has been already wired
            with the current block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.PhiRemapper.CanRemap(ILGPU.IR.Values.PhiValue)">
            <summary>
            Returns true and sets the value of <see cref="P:ILGPU.IR.Transformations.IfConditionConversion.PhiRemapper.Added"/> to false.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.PhiRemapper.TryRemap(ILGPU.IR.Values.PhiValue,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock@)">
            <summary>
            Performs an identity mapping by filtering duplicate sources pointing to
            the <see cref="P:ILGPU.IR.Transformations.IfConditionConversion.PhiRemapper.EntryBlock"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.PhiRemapper.RemapValue(ILGPU.IR.Values.PhiValue,ILGPU.IR.BasicBlock,ILGPU.IR.Value)">
            <summary>
            Returns the input <paramref name="value"/>.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConditionConversion.ConditionalAnalyzer">
            <summary>
            An analyzer to detect compatible (nested) if-branch conditions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalAnalyzer.#ctor(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards},System.Int32)">
            <summary>
            Constructs a new conditional analyzer.
            </summary>
            <param name="blocks">The current block collection.</param>
            <param name="maxBlockSize">The maximum block size.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.ConditionalAnalyzer.MaxNumBlocks">
            <summary>
            Returns the maximum number of all blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.ConditionalAnalyzer.MaxBlockSize">
            <summary>
            Returns the maximum block size
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.ConditionalAnalyzer.Dominators">
            <summary>
            Returns the dominator analysis.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalAnalyzer.CanConvert(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock,ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter@)">
            <summary>
            Returns true if the given block forms an if-statement that can be
            converted using the associated <see cref="T:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter"/>.
            </summary>
            <param name="methodBuilder">The current builder.</param>
            <param name="current">The block to check.</param>
            <param name="converter">The created converter (if any).</param>
            <returns>True, if the given block can be converted.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalAnalyzer.Traverse(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@)">
            <summary>
            Traverses the control flow starting with the current block and tries to
            determine a set of blocks that can be merged.
            </summary>
            <param name="current">The current block.</param>
            <param name="blocks">The collection of convertible blocks.</param>
            <returns>
            True, if a set of blocks that can be merged could be found.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalAnalyzer.GetLocalPhis(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Transformations.IfConditionConversion.BlockKind)">
            <summary>
            Returns all local phi values that are stored in blocks with the
            specified <paramref name="blockKind"/>.
            </summary>
            <param name="blocks">The blocks to be converted.</param>
            <param name="blockKind">The target block kind.</param>
            <returns>The list of all phi values.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalAnalyzer.GatherPhiValues(ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}@,ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks@,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Gathers and checks all local phi values that need to be adapted.
            </summary>
            <param name="blocks">The blocks to be converted.</param>
            <param name="caseBlocks">Both case blocks.</param>
            <param name="phis">The list of phi values to adapt.</param>
            <returns>True, if all phi values are compatible.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter">
            <summary>
            A conditional converter to perform the actual if/switch conversion into
            conditional value predicates.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.#ctor(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlockMap{ILGPU.IR.Transformations.IfConditionConversion.BlockKind},ILGPU.IR.BasicBlockCollection{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards},System.ReadOnlySpan{ILGPU.IR.Values.ValueReference},ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks)">
            <summary>
            Constructs a new conditional converter.
            </summary>
            <param name="builder">The parent builder.</param>
            <param name="kinds">The mapping of block kinds.</param>
            <param name="blocks">The block collection to be used.</param>
            <param name="phis">All phis to be adapted.</param>
            <param name="caseBlocks">Both case blocks.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.Builder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.BlockBuilder">
            <summary>
            Returns the main target builder used to emit all conditionals.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.Blocks">
            <summary>
            Returns all blocks in this conditional graph.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.Kinds">
            <summary>
            Returns all block kinds.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.EntryBlock">
            <summary>
            Returns the entry block of the current collections of blocks.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.Phis">
            <summary>
            Returns all phi values that need to be adapted.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.CaseBlocks">
            <summary>
            Returns both case blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.IsBlockToKeep(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given block should be maintained.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.IsExit(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given block is an exit block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.Convert">
            <summary>
            Converts the underlying conditional tree into a folded set of wired
            conditionals.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.MergeBlocks">
            <summary>
            Merges the given inner node into the given block builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.MergeCondition(ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Values.BinaryArithmeticKind)">
            <summary>
            Merges both conditions using the <paramref name="kind"/>.
            </summary>
            <param name="condition">The source condition (may be null).</param>
            <param name="newCondition">The new condition to merge.</param>
            <param name="kind">The arithmetic kind used to combine them.</param>
            <returns>
            The merged condition or <paramref name="newCondition"/>.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.CreateMergedCondition(ILGPU.IR.BasicBlock,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value@)">
            <summary>
            Creates a merge intermediate condition that will be passed to the
            <see cref="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.CreateCondition(ILGPU.IR.BasicBlock,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value@)"/> method.
            </summary>
            <param name="current">The current block.</param>
            <param name="condition">The source condition (may be null).</param>
            <param name="newCondition">The new condition to merge.</param>
            <param name="initialExitCondition">The current exit condition.</param>
            <param name="exitCondition">The exit condition to be updated.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.CreateExitCondition(ILGPU.IR.BasicBlock,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value@)">
            <summary>
            Creates and updates the exit condition in the case of a
            <see cref="P:ILGPU.IR.Transformations.IfConditionConversion.CaseBlocks.TrueBlock" />
            </summary>
            <param name="current">The current block.</param>
            <param name="condition">The source condition (may be null).</param>
            <param name="initialExitCondition">The current exit condition.</param>
            <param name="exitCondition">The exit condition to be updated.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.CreateInnerCondition(ILGPU.IR.Values.IfBranch,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value@)">
            <summary>
            Creates conditions for inner blocks using recursion.
            </summary>
            <param name="terminator">The current terminator.</param>
            <param name="condition">The source condition (may be null).</param>
            <param name="initialExitCondition">The current exit condition.</param>
            <param name="exitCondition">The exit condition to be updated.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.CreateCondition(ILGPU.IR.BasicBlock,ILGPU.IR.Value,ILGPU.IR.Value,ILGPU.IR.Value@)">
            <summary>
            Creates a condition for an exit or an inner block.
            </summary>
            <param name="current">The current block.</param>
            <param name="condition">The source condition (may be null).</param>
            <param name="initialExitCondition">The current exit condition.</param>
            <param name="exitCondition">The exit condition to be updated.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.ClearBlocks">
            <summary>
            Clears all blocks that have been merged in order to release the uses.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.ConditionalConverter.AdaptPhis">
            <summary>
            Adapts all phi sources to match the new control-flow structure.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.IfConditionConversion.DefaultMaxBlockSize">
            <summary>
            The default maximum block size measured in instructions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.#ctor">
            <summary>
            Constructs a new conditional conversion transformation using the default
            maximum block size.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.#ctor(System.Int32)">
            <summary>
            Constructs a new conditional conversion transformation.
            </summary>
            <param name="maxBlockSize">The maximum block size in instructions.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.IfConditionConversion.MaxBlockSize">
            <summary>
            Returns the maximum block size for merging in number of instructions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IfConditionConversion.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies to if-conditional conversion transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.InferAddressSpaces">
            <summary>
            Infers address spaces by removing unnecessary address-space casts.
            </summary>
            <remarks>
            This transformation is a light-weight address-space inference pass that uses
            trivial conditions to remove unnecessary casts. Use
            <see cref="T:ILGPU.IR.Transformations.InferLocalAddressSpaces"/> or <see cref="T:ILGPU.IR.Transformations.InferKernelAddressSpaces"/>
            for better results.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Transformations.InferAddressSpaces.IAddressSpaceProvider">
            <summary>
            Represents a provider for address-space information.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.InferAddressSpaces.IAddressSpaceProvider.Item(ILGPU.IR.Value)">
            <summary>
            Returns the determined address space of the given value.
            </summary>
            <param name="value">The value to get the address space for.</param>
            <returns>The determined address space.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.InferAddressSpaces.DataProvider">
            <summary>
            Represents the default implementation of the interface
            <see cref="T:ILGPU.IR.Transformations.InferAddressSpaces.IAddressSpaceProvider"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.InferAddressSpaces.DataProvider.Item(ILGPU.IR.Value)">
            <summary>
            Returns the target address space of the underling type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData`1">
            <summary>
            Represents a data wrapper that represents processing data required for the
            internal rewriter implementation.
            </summary>
            <typeparam name="TProvider">The address-space provider type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData`1.#ctor(`0)">
            <summary>
            Constructs a new processing-data instance.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData`1.Provider">
            <summary>
            Return the current address-space provider to use.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData`1.ToProcess">
            <summary>
            Returns the current processing stack reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData`1.Item(ILGPU.IR.Value)">
            <summary>
            Returns the determined address space of the given value.
            </summary>
            <param name="value">The value to check.</param>
            <returns>The determined address space.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData`1.Push(ILGPU.IR.Value)">
            <summary>
            Pushes the given value onto the processing stack.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData`1.TryPop(ILGPU.IR.Value@)">
            <summary>
            Tries to pop a value from the current processing stack.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData`1.Clear">
            <summary>
            Clears the current processing stack.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.CreateProcessingData``1(``0)">
            <summary>
            Creates a new <see cref="T:ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData`1"/> instance.
            </summary>
            <typeparam name="TProvider">The provider type.</typeparam>
            <param name="provider">The provider instance.</param>
            <returns>The processing data instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.IsRedundantCast``1(ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData{``0}@,ILGPU.IR.Values.AddressSpaceCast)">
            <summary>
            Returns true if the given cast is redundant.
            </summary>
            <param name="data">The current processing data.</param>
            <param name="cast">The cast to check.</param>
            <returns>True, if the given cast is redundant.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.IsRedundantCastUse``1(ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData{``0}@,ILGPU.IR.Values.Use,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Returns true if the parent cast is redundant.
            </summary>
            <param name="data">The current processing data.</param>
            <param name="targetSpace">The target address space.</param>
            <param name="use">The current use to check.</param>
            <returns>True, if the parent cast is redundant.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.Rewrite``1(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData{``0},ILGPU.IR.Values.AddressSpaceCast)">
            <summary>
            Rewrites address-space casts.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.CanRewrite``2(ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData{``1},``0)">
            <summary>
            Returns true if the given value has an address-space type and can be updated
            using analysis information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.Rewrite``1(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData{``0},ILGPU.IR.Values.PhiValue)">
            <summary>
            Rewrites phi values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.Rewrite``1(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData{``0},ILGPU.IR.Values.Predicate)">
            <summary>
            Rewrites predicates.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.InvalidateType``2(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData{``1},``0)">
            <summary>
            Invalidates the type of an affected value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.InferAddressSpaces.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.#cctor">
            <summary>
            Registers all conversion patterns.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.AddRewriters``1(ILGPU.IR.Rewriting.Rewriter{ILGPU.IR.Transformations.InferAddressSpaces.ProcessingData{``0}})">
            <summary>
            Adds all internal rewriters to the given rewriter instance.
            </summary>
            <typeparam name="TProvider">The provider type.</typeparam>
            <param name="rewriter">The target rewriter instance.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.#ctor">
            <summary>
            Constructs a new address-space inference pass.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferAddressSpaces.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the address-space inference transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.InferLocalAddressSpaces">
            <summary>
            Infers method-local address spaces by removing unnecessary address-space casts.
            </summary>
            <remarks>
            This transformation uses a method-local program analysis to remove address-space
            casts that are no longer required.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Transformations.InferLocalAddressSpaces.LocalDataProvider">
            <summary>
            A data provider based on local program analysis information.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.InferLocalAddressSpaces.LocalDataProvider.Mapping">
            <summary>
            Returns the local information of the <see cref="T:ILGPU.IR.Analyses.PointerAddressSpaces"/>
            analysis.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.InferLocalAddressSpaces.LocalDataProvider.Item(ILGPU.IR.Value)">
            <summary>
            Returns the unified address space of the given value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.InferLocalAddressSpaces.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferLocalAddressSpaces.#cctor">
            <summary>
            Registers all conversion patterns.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferLocalAddressSpaces.#ctor">
            <summary>
            Constructs a new address-space inference pass.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferLocalAddressSpaces.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the address-space inference transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.InferKernelAddressSpaces">
            <summary>
            Infers kernel address spaces by specializing the address spaces of all parameters
            or keeping them and inserting the appropriate address space casts.
            </summary>
            <remarks>
            CAUTION: This program transformation adds additional address-space casts into
            the <see cref="F:ILGPU.IR.MemoryAddressSpace.Generic"/> address space to have a valid IR
            program in the end. The additionally introduced casts are intended to be removed
            using <see cref="T:ILGPU.IR.Transformations.InferLocalAddressSpaces"/> afterwards.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider">
            <summary>
            Represents an intermediate value for processing.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider.CreateProvider(ILGPU.IR.MethodCollection@,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new provider instance.
            </summary>
            <param name="methods">The collection of methods.</param>
            <param name="kernelAddressSpace">The target address space.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider.#ctor(ILGPU.IR.Analyses.GlobalAnalysisValueResult{ILGPU.IR.Analyses.PointerAddressSpaces.AddressSpaceInfo}@)">
            <summary>
            Constructs a new intermediate value.
            </summary>
            <param name="result">The analysis result.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider.Result">
            <summary>
            Returns the associated program analysis result.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider.Item(ILGPU.IR.Method)">
            <summary>
            Returns the return type and the original parameters of the given method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider.Item(ILGPU.IR.Value)">
            <summary>
            Returns the unified address space of the given value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider.GetTargetAddressSpace(ILGPU.IR.Values.Parameter)">
            <summary>
            Returns the original target address space for the updated parameter.
            </summary>
            <param name="parameter">The updated parameter reference.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider.Map(ILGPU.IR.Values.Parameter,ILGPU.IR.Values.Parameter)">
            <summary>
            Maps the <paramref name="targetParam"/> to the
            <paramref name="parameter"/>.
            </summary>
            <param name="parameter">The source parameter.</param>
            <param name="targetParam">The new target parameter.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferKernelAddressSpaces.ConvertToAddressSpace(ILGPU.IR.Rewriting.RewriterContext@,ILGPU.IR.Value,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Converts the given value into the specified target address space.
            </summary>
            <param name="context">The current rewriter context.</param>
            <param name="value">The current value to convert.</param>
            <param name="targetAddressSpace">
            The target address space to convert into.
            </param>
            <returns>The converted value in the correct address space.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferKernelAddressSpaces.SpecializeParameterAddressSpace(ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider,ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.Parameter)">
            <summary>
            Specializes an address-space dependent parameter.
            </summary>
            <param name="provider">The intermediate value.</param>
            <param name="methodBuilder">The target method builder.</param>
            <param name="builder">The entry block builder.</param>
            <param name="parameter">The source parameter.</param>
            <returns>True, if the given parameter was specialized.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferKernelAddressSpaces.CanRewrite(ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider,ILGPU.IR.Values.MethodCall)">
            <summary>
            Checks if the given call has address-space dependencies.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferKernelAddressSpaces.Rewrite(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider,ILGPU.IR.Values.MethodCall)">
            <summary>
            Rewrites method calls that need wrapped address-space casts.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferKernelAddressSpaces.CanRewrite(ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider,ILGPU.IR.Values.ReturnTerminator)">
            <summary>
            Checks if the given return has address-space dependencies.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferKernelAddressSpaces.Rewrite(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider,ILGPU.IR.Values.ReturnTerminator)">
            <summary>
            Rewrites return terminators that need a wrapped address-space cast.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.InferKernelAddressSpaces.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferKernelAddressSpaces.#cctor">
            <summary>
            Registers all conversion patterns.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferKernelAddressSpaces.#ctor(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new address-space specialization pass.
            </summary>
            <param name="kernelAddressSpace">
            The root address space of all kernel functions.
            </param>
        </member>
        <member name="P:ILGPU.IR.Transformations.InferKernelAddressSpaces.KernelAddressSpace">
            <summary>
            Returns the kernel address space.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferKernelAddressSpaces.CreateIntermediate(ILGPU.IR.MethodCollection@)">
            <summary>
            Creates a new <see cref="T:ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider"/> instance based on the main
            entry-point method.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferKernelAddressSpaces.PerformTransformation(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder,ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider@,ILGPU.IR.Analyses.Landscape,ILGPU.IR.Analyses.Landscape{System.Object}.Entry)">
            <summary>
            Applies the address-space inference transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.InferKernelAddressSpaces.FinishProcessing(ILGPU.IR.Transformations.InferKernelAddressSpaces.MethodDataProvider@)">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Inliner">
            <summary>
            Represents a function inliner.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.Inliner.MaxNumILInstructionsToInline">
            <summary>
            The maximum number of IL instructions to inline.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Inliner.InlineCalls(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock@)">
            <summary>
            Tries to inline method calls.
            </summary>
            <param name="builder">The current method builder.</param>
            <param name="currentBlock">The current block (may be modified).</param>
            <returns>True, in case of an inlined call.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Inliner.#ctor">
            <summary>
            Constructs a new inliner that inlines all methods marked with
            <see cref="F:ILGPU.IR.MethodFlags.Inline"/> flags.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Inliner.PerformTransformation(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.Landscape,ILGPU.IR.Analyses.Landscape{System.Object}.Entry)">
            <summary>
            Applies the inlining transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IntrinsicResolver`1">
            <summary>
            Resolved required intrinsic IR implementations.
            </summary>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicResolver`1.#ctor(ILGPU.IR.Intrinsics.IntrinsicImplementationProvider{`0})">
            <summary>
            Constructs a new intrinsic resolver.
            </summary>
            <param name="implementationProvider">
            The implementation provider to use.
            </param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicResolver`1.CreateIntermediate(ILGPU.IR.MethodCollection@)">
            <summary>
            Begins a new intrinsic specialization phase.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicResolver`1.FinishProcessing(ILGPU.IR.Intrinsics.IntrinsicImplementationProvider{`0}.IRSpecializationPhase)">
            <summary>
            Finishes an intrinsic specialization phase.
            </summary>
            <param name="intermediate"></param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicResolver`1.PerformTransformation(ILGPU.IR.Method.Builder,ILGPU.IR.Intrinsics.IntrinsicImplementationProvider{`0}.IRSpecializationPhase)">
            <summary>
            Applies an intrinsic implementation transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.IntrinsicSpecializer`1">
            <summary>
            Represents an intrinsic implementation specializer.
            </summary>
            <remarks>
            Note that this class does not perform recursive specialization operations.
            </remarks>
            <typeparam name="TDelegate">The backend-specific delegate type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicSpecializer`1.ImportDependencies(ILGPU.IR.IRContext,System.Collections.Generic.List{System.ValueTuple{ILGPU.IR.Value,ILGPU.IR.Method}})">
            <summary>
            Imports all detected dependencies into the current context.
            </summary>
            <param name="targetContext">The target context.</param>
            <param name="dependencies">The dependencies to import.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicSpecializer`1.#ctor(ILGPU.IR.Intrinsics.IntrinsicImplementationProvider{`0})">
            <summary>
            Constructs a new intrinsic specializer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicSpecializer`1.PerformTransformation(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder)">
            <summary>
            Applies an intrinsic specialization.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.IntrinsicSpecializer`1.FindDependencies(ILGPU.IR.Method.Builder,System.Boolean@)">
            <summary>
            Analyzes the given scope while importing the required dependencies.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="applied">
            True, if the transformation transformed something.
            </param>
            <returns>The imported dependency functions.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.LoopInvariantCodeMotion">
            <summary>
            Moves loop-invariant code pieces out of loops.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LoopInvariantCodeMotion.LoopInvariance">
            <summary>
            Manages knowledge loop invariance.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopInvariantCodeMotion.LoopInvariance.Loop">
            <summary>
            Returns the parent loop.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopInvariantCodeMotion.LoopInvariance.ReturnNotInvariant(ILGPU.IR.Value)">
            <summary>
            Registers the given value as not invariant and returns false.
            </summary>
            <param name="value">The value to mark.</param>
            <returns>False.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopInvariantCodeMotion.LoopInvariance.IsLoopInvariant(ILGPU.IR.Value)">
            <summary>
            Returns true if the given value is loop invariant.
            </summary>
            <param name="value">The value to test.</param>
            <returns>True, if the given value is loop invariant.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.LoopInvariantCodeMotion.Mover">
            <summary>
            A helper structure to move values around
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopInvariantCodeMotion.Mover.#ctor(System.Int32)">
            <summary>
            Initializes a new mover.
            </summary>
            <param name="numBlocks">The number of blocks of the parent loop.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopInvariantCodeMotion.Mover.Add(ILGPU.IR.Value)">
            <summary>
            Registers the given value to be moved later.
            </summary>
            <param name="value">The value to be moved.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopInvariantCodeMotion.Mover.ToMove">
            <summary>
            Returns a span to iterate over all values to be moved.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopInvariantCodeMotion.Mover.ShouldBeMoved(ILGPU.IR.Value)">
            <summary>
            Checks whether given value should be actually moved out of the loop.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True, if the given value should be moved.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.LoopInvariantCodeMotion.LoopProcessor">
            <summary>
            Applies the LICM transformation to all loops.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopInvariantCodeMotion.LoopProcessor.Builder">
            <summary>
            Returns the parent method builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopInvariantCodeMotion.LoopProcessor.Applied">
            <summary>
            Returns true if the loop processor could be applied.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopInvariantCodeMotion.LoopProcessor.Process(ILGPU.IR.Analyses.Loops{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}.Node)">
            <summary>
            Applies the LICM transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopInvariantCodeMotion.ApplyLICM(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.Loops{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}.Node)">
            <summary>
            Applies the LICM transformation to the given loop.
            </summary>
            <param name="builder">The parent method builder.</param>
            <param name="loop">The current loop.</param>
            <returns>True, if the transformation could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopInvariantCodeMotion.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the LICM transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LoopUnrolling">
            <summary>
            Unrolls loops that rely on simple induction variables.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LoopUnrolling.DefaultMaxUnrollFactor">
            <summary>
            Represents the default maximum unroll factor.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper">
            <summary>
            Remaps loop-specific target blocks and phi-value arguments.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.Source">
            <summary>
            The loop entry.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.Target">
            <summary>
            The temporary predecessor branch.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.TargetValue">
            <summary>
            Returns the target value to map phi operands to (if any).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.CanRemap(System.ReadOnlySpan{ILGPU.IR.BasicBlock}@)">
            <summary>
            Returns true if the given span contains the loop entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.CanRemap(ILGPU.IR.Values.PhiValue)">
            <summary>
            Returns true if the given phi value references the loop entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.Remap(ILGPU.IR.BasicBlock)">
            <summary>
            Remaps the given block to the target block in the case of the source
            block. It returns the given block otherwise.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.TryRemap(ILGPU.IR.Values.PhiValue,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock@)">
            <summary>
            Returns always true and remaps the new block using
            <see cref="M:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.Remap(ILGPU.IR.BasicBlock)"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopRemapper.RemapValue(ILGPU.IR.Values.PhiValue,ILGPU.IR.BasicBlock,ILGPU.IR.Value)">
            <summary>
            Remaps the given value to the target value (if defined).
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer">
            <summary>
            Specializes loop bodies.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.phiMapping">
            <summary>
            Maps original phi values to new target values that have to be used
            instead in the remainder of the program.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.valueMapping">
            <summary>
            Maps original values to new target values that have to be used instead
            in the remainder of the program.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.blocks">
            <summary>
            All blocks in the scope of this loop in RPO.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.phiValues">
            <summary>
            All (potentially) patched phi values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.LinkPhisToPhis">
            <summary>
            Links all phi values to their instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.LinkPhisToInitValue">
            <summary>
            Links all phi values to their outside (init) operands.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.Builder">
            <summary>
            Returns the parent method builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.BlockBuilder">
            <summary>
            Returns the current block builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.Variable">
            <summary>
            Returns the associated variable.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.PhiVariable">
            <summary>
            Returns the associated phi value representing the induction variable.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.LoopBody">
            <summary>
            Returns the block that is reachable from the break condition.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.BackEdge">
            <summary>
            Returns the block containing the back-edge branch.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.VariableInitValue">
            <summary>
            Returns the init value to update the induction variable.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.CreateValueRebuilderMapping(ILGPU.IR.Value)">
            <summary>
            Creates a rebuilder value mapping including all currently known value
            updates.
            </summary>
            <param name="initValue">The current init value to use.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.SpecializeLoop(ILGPU.IR.BasicBlock,ILGPU.IR.Value)">
            <summary>
            Specializes a single loop iteration.
            </summary>
            <param name="exitBlock">The current exit block to jump to.</param>
            <param name="initValue">The current init value to use.</param>
            <returns>The new entry and exit blocks.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.RewirePhis(ILGPU.IR.BasicBlock)">
            <summary>
            Finishes the loop specialization phase by wiring all phi values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.ReplacePhis">
            <summary>
            Replace all loop-specific phi values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.ReplaceValues">
            <summary>
            Replace all loop-specific values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopSpecializer.ClearBody">
            <summary>
            Clears all blocks in the body of the loop.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LoopUnrolling.LoopProcessor">
            <summary>
            Applies the unrolling transformation to all loops.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopProcessor.Builder">
            <summary>
            Returns the parent method builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopProcessor.MaxUnrollFactor">
            <summary>
            Returns the maximum unrolling factor.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.LoopProcessor.Applied">
            <summary>
            Returns true if the loop processor could be applied.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.LoopProcessor.Process(ILGPU.IR.Analyses.Loops{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}.Node)">
            <summary>
            Applies the unrolling transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.UnrollLoop(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.LoopInfo{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards},ILGPU.IR.Analyses.InductionVariable,ILGPU.IR.Analyses.InductionVariableBounds@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Unrolls the given loop based on the unroll and iteration factors.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.TryUnroll(ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.Loops{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards}.Node,ILGPU.IR.Analyses.LoopInfos{ILGPU.IR.Analyses.TraversalOrders.ReversePostOrder,ILGPU.IR.Analyses.ControlFlowDirection.Forwards},System.Int32)">
            <summary>
            Tries to unroll the given loop.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.ComputeUnrollFactor(System.Int32,System.Int32)">
            <summary>
            Computes the unroll factor and the number of iterations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.#ctor">
            <summary>
            Constructs a new loop unrolling transformation using the default maximum
            unroll factor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.#ctor(System.Int32)">
            <summary>
            Constructs a new loop unrolling transformation.
            </summary>
            <param name="maxUnrollFactor">The maximum unroll factor.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.LoopUnrolling.MaxUnrollFactor">
            <summary>
            Returns the maximum unrolling factor to use.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LoopUnrolling.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the loop unrolling transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerArrays">
            <summary>
            Converts array values into structure values and allocations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.ArrayTypeLowering.#ctor(ILGPU.IR.Method.Builder,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new array type lowering.
            </summary>
            <param name="builder">The parent builder.</param>
            <param name="targetAddressSpace">The target address spacce.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.LowerArrays.ArrayTypeLowering.TargetAddressSpace">
            <summary>
            Returns the target address space for all array values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.ArrayTypeLowering.IsTypeDependent(ILGPU.IR.Types.TypeNode)">
            <summary>
            Returns true if the given type depends on an array type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.ArrayTypeLowering.ConvertType``1(``0,ILGPU.IR.Types.ArrayType)">
            <summary>
            Converts the array type into a structure of dimensions + 1 elements.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.ArrayTypeLowering.GetNumFields(ILGPU.IR.Types.ArrayType)">
            <summary>
            Returns the number of dimensions of the given array type + 1.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.GetViewFromArray(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Gets the view from the given array value.
            </summary>
            <returns>A reference to the array view.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ArrayType},ILGPU.IR.Values.NewArray)">
            <summary>
            Lowers new array values into static allocation instances and structures.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ArrayType},ILGPU.IR.Values.LoadArrayElementAddress)">
            <summary>
            Lowers leae nodes to linear <see cref="T:ILGPU.IR.Values.LoadElementAddress"/> values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ArrayType},ILGPU.IR.Values.GetArrayLength)">
            <summary>
            Lower array length values to <see cref="T:ILGPU.IR.Values.GetViewLength"/> values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ArrayType},ILGPU.IR.Values.ArrayToViewCast)">
            <summary>
            Lower array to view casts to direct references to the underyling view.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LowerArrays.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.#cctor">
            <summary>
            Initializes all rewriter patterns.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.#ctor(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new array type lowering transformation.
            </summary>
            <param name="targetAddressSpace">
            The target address space for all array values.
            </param>
        </member>
        <member name="P:ILGPU.IR.Transformations.LowerArrays.TargetAddressSpace">
            <summary>
            Returns the target address space for all array values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.CreateLoweringConverter(ILGPU.IR.Method.Builder)">
            <summary>
            Creates a new <see cref="T:ILGPU.IR.Transformations.LowerArrays.ArrayTypeLowering"/> type converter to convert
            internal array types to low-level structure values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerArrays.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the array type lowering transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerStructureFlags">
            <summary>
            Flags for the <see cref="T:ILGPU.IR.Transformations.LowerStructures"/> transformation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LowerStructureFlags.None">
            <summary>
            Default lowering flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LowerStructureFlags.LowerLoadStores">
            <summary>
            Lowers <see cref="T:ILGPU.IR.Values.Load"/> and <see cref="T:ILGPU.IR.Values.Store"/> instructions.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerStructures">
            <summary>
            Converts structure values into separate values.
            </summary>
            <remarks>
            This transformation does not change function parameters and calls to other
            functions.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.AssembleStructure(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Types.StructureType,ILGPU.IR.Value)">
            <summary>
            Builds a new structure value during lowering of a source value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.DisassembleStructure(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Types.StructureType,ILGPU.IR.Value)">
            <summary>
            Registers all structure values in the current SSA builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.LowerThreadValue``2(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Types.StructureType,``0)">
            <summary>
            Lowers a thread value.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerStructures.LoweredPhi">
            <summary>
            A lowered phi that has to be sealed after all blocks have been processed.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LowerStructures.LoweredPhi.SourcePhi">
            <summary>
            Returns the source phi.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LowerStructures.LoweredPhi.FieldAccess">
            <summary>
            Returns the source access chain.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LowerStructures.LoweredPhi.PhiBuilder">
            <summary>
            Returns the new phi builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.LoweredPhi.Seal(ILGPU.IR.Construction.SSABuilder{ILGPU.IR.Values.FieldRef})">
            <summary>
            Seals this lowered phi.
            </summary>
            <param name="ssaBuilder">The parent SSA builder.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerStructures.LoweringData">
            <summary>
            Internal temporary data structure.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LowerStructures.LoweringData.LoweredPhis">
            <summary>
            The list of lowered phis.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.LoweringData.AddPhi(ILGPU.IR.Transformations.LowerStructures.LoweredPhi)">
            <summary>
            Adds the given phi to the list of lowered phis.
            </summary>
            <param name="loweredPhi">The lowered phi to add.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Keep(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.Load)">
            <summary>
            Keeps structure load operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.Load)">
            <summary>
            Lowers structure load operations into distinct loads for each field.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Keep(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.Store)">
            <summary>
            Keeps structure store operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.Store)">
            <summary>
            Lowers structure store operations into distinct stores for each field.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.NullValue)">
            <summary>
            Lowers null values into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.StructureValue)">
            <summary>
            Lowers structure values into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.GetField)">
            <summary>
            Lowers get field operations into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.SetField)">
            <summary>
            Lowers set field operations into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.PhiValue)">
            <summary>
            Lowers phi values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.MethodCall)">
            <summary>
            Lowers method calls involving structure types.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.Broadcast)">
            <summary>
            Lowers warp shuffles.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.WarpShuffle)">
            <summary>
            Lowers warp shuffles.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.SubWarpShuffle)">
            <summary>
            Lowers sub-warp shuffles.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Lower(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Values.ReturnTerminator)">
            <summary>
            Lowers return terminators returning structure values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.Keep(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Values.FieldRef},ILGPU.IR.Transformations.LowerStructures.LoweringData,ILGPU.IR.Value)">
            <summary>
            Lowers generic values containing structure types that cannot be rewritten.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LowerStructures.Rewriter">
            <summary>
            The internal rewriter that keeps load/store values.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.LowerStructures.LoadStoreRewriter">
            <summary>
            The internal rewriter that lowers load/store values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.AddRewriters(ILGPU.IR.Rewriting.SSARewriter{ILGPU.IR.Values.FieldRef,ILGPU.IR.Transformations.LowerStructures.LoweringData})">
            <summary>
            Adds the common rewriters to the given rewriter instance.
            </summary>
            <param name="rewriter">The rewriter to extend.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.#cctor">
            <summary>
            Initializes all rewriters.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.#ctor">
            <summary>
            Constructs a new structure conversion pass.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.#ctor(ILGPU.IR.Transformations.LowerStructureFlags)">
            <summary>
            Constructs a new structure conversion pass.
            </summary>
            <param name="flags">The transformation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.LowerStructures.Flags">
            <summary>
            Returns the current flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.LowerStructures.LowerLoadStores">
            <summary>
            Returns true if load/store operations should be lowered.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerStructures.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the structure lowering transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerThreadIntrinsics">
            <summary>
            Lowers internal high-level thread intrinsics.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerThreadIntrinsics.ILoweringImplementation`1">
            <summary>
            Represents an abstract value lowering.
            </summary>
            <typeparam name="TValue">The thread value type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.ILoweringImplementation`1.Lower(ILGPU.IR.BasicBlock.Builder,`0,ILGPU.IR.Value)">
            <summary>
            Lowers the given thread value.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="source">The source value.</param>
            <param name="newVariable">The new variable.</param>
            <returns>The created value.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerThreadIntrinsics.BroadcastLowering">
            <summary>
            Lowers broadcast operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.BroadcastLowering.Lower(ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.Broadcast,ILGPU.IR.Value)">
            <summary>
            Lowers a broadcast value by constructing a new one.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerThreadIntrinsics.WarpShuffleLowering">
            <summary>
            Lowers warp shuffle operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.WarpShuffleLowering.Lower(ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.WarpShuffle,ILGPU.IR.Value)">
            <summary>
            Lowers a warp shuffle value by constructing a new one.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerThreadIntrinsics.SubWarpShuffleLowering">
            <summary>
            Lowers sub warp shuffle operations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.SubWarpShuffleLowering.Lower(ILGPU.IR.BasicBlock.Builder,ILGPU.IR.Values.SubWarpShuffle,ILGPU.IR.Value)">
            <summary>
            Lowers a sub warp shuffle value by constructing a new one.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.LowerPrimitive``2(ILGPU.IR.Rewriting.RewriterContext,``0,ILGPU.IR.Value)">
            <summary>
            Lowers a primitive type.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <typeparam name="TLoweringImplementation">
            The implementation type.
            </typeparam>
            <param name="context">The current rewriter context.</param>
            <param name="sourceValue">The source value to get the values from.</param>
            <param name="variable">The source variable.</param>
            <returns>The lowered thread value.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.Lower``2(ILGPU.IR.Rewriting.RewriterContext@,``0)">
            <summary>
            Lowers a type.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <typeparam name="TLoweringImplementation">
            The implementation type.
            </typeparam>
            <param name="context">The current rewriter context.</param>
            <param name="value">The source value to get the values from.</param>
        </member>
        <member name="F:ILGPU.IR.Transformations.LowerThreadIntrinsics.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.#cctor">
            <summary>
            Registers all rewriting patterns.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerThreadIntrinsics.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the lowering of thread intrinsics transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerTypes`1">
            <summary>
            Converts structure values into distinct values.
            </summary>
            <remarks>
            This transformation does not change function parameters and calls to other
            functions.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.NullValue)">
            <summary>
            Lowers null values with nested types.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.StructureValue)">
            <summary>
            Lowers structure values with nested types.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.GetField)">
            <summary>
            Lowers set field operations into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.SetField)">
            <summary>
            Lowers set field operations into separate SSA values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.Alloca)">
            <summary>
            Lowers alloca values into their appropriate counter parts.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.PointerCast)">
            <summary>
            Lowers pointer cast values into their appropriate counter parts.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.LoadFieldAddress)">
            <summary>
            Lowers LFA operations into an adapted version.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Lower(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},ILGPU.IR.Values.PhiValue)">
            <summary>
            Lowers Phi nodes into an adapted version.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.InvalidateType``1(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Types.TypeLowering{`0},``0)">
            <summary>
            Invalidates the type of the given value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Register``1(ILGPU.IR.Types.TypeLowering{`0},``0)">
            <summary>
            Registers a type-mapping entry and returns always true.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.Register``1(ILGPU.IR.Types.TypeLowering{`0},``0,ILGPU.IR.Types.TypeNode)">
            <summary>
            Registers a type-mapping entry and returns always true.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.IsTypeDependent``1(ILGPU.IR.Types.TypeLowering{`0},``0)">
            <summary>
            Returns true if the type is type dependent and registers a type-mapping
            entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.IsTypeDependent``1(ILGPU.IR.Types.TypeLowering{`0},``0,ILGPU.IR.Types.TypeNode)">
            <summary>
            Returns true if the type is type dependent and registers a type-mapping
            entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.AddRewriters(ILGPU.IR.Rewriting.Rewriter{ILGPU.IR.Types.TypeLowering{`0}})">
            <summary>
            Adds all internal type rewriters to the given rewriter instance.
            </summary>
            <param name="rewriter">The rewriter to extent.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.#ctor">
            <summary>
            Constructs a new type conversion pass.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.CreateLoweringConverter(ILGPU.IR.Method.Builder)">
            <summary>
            Creates a new type lowering converter.
            </summary>
            <param name="builder">The current builder.</param>
            <returns>The created rewriter.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.PrePerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Updates all return types of all affected methods.
            </summary>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerTypes`1.PerformTransformation(ILGPU.IR.Method.Builder,ILGPU.IR.Rewriting.Rewriter{ILGPU.IR.Types.TypeLowering{`0}})">
            <summary>
            Performs a complete type lowering transformation.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="rewriter">The rewriter to use.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerViews">
            <summary>
            Lowers views (values and types) into platform specific instances.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.LowerViews.ViewTypeLowering">
            <summary>
            An abstract view type converter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerViews.ViewTypeLowering.#ctor(ILGPU.IR.Method.Builder)">
            <summary>
            Constructs a new type lowering.
            </summary>
            <param name="builder">The parent builder.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerViews.ViewTypeLowering.#ctor(ILGPU.IR.Construction.IRBuilder)">
            <summary>
            Constructs a new type lowering.
            </summary>
            <param name="builder">The parent builder.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerViews.ViewTypeLowering.#ctor(ILGPU.IR.Types.IRTypeContext)">
            <summary>
            Constructs a new type lowering.
            </summary>
            <param name="typeContext">The parent type context.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerViews.ViewTypeLowering.IsTypeDependent(ILGPU.IR.Types.TypeNode)">
            <summary cref="M:ILGPU.IR.Types.TypeLowering`1.IsTypeDependent(ILGPU.IR.Types.TypeNode)"/>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerViews.AddRewriters(ILGPU.IR.Rewriting.Rewriter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType}},ILGPU.IR.Rewriting.RewriteConverter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.NewView},ILGPU.IR.Rewriting.RewriteConverter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.GetViewLength},ILGPU.IR.Rewriting.RewriteConverter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.SubViewValue},ILGPU.IR.Rewriting.RewriteConverter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.AddressSpaceCast},ILGPU.IR.Rewriting.RewriteConverter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.ViewCast},ILGPU.IR.Rewriting.RewriteConverter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.LoadElementAddress},ILGPU.IR.Rewriting.RewriteConverter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.AlignTo},ILGPU.IR.Rewriting.RewriteConverter{ILGPU.IR.Types.TypeLowering{ILGPU.IR.Types.ViewType},ILGPU.IR.Values.AsAligned})">
            <summary>
            Adds a set of rewriters specialized for a general view-type lowering.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.LowerViews.#ctor">
            <summary>
            Constructs a new view conversion pass.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Optimizer">
            <summary>
            Realizes utility helpers to perform and initialize transformations
            based on an <see cref="T:ILGPU.OptimizationLevel"/>.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.Optimizer.NumOptimizationLevels">
            <summary>
            Returns the number of known optimization levels.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.Optimizer.OptimizationHandlers">
            <summary>
            Internal mapping from optimization levels to handlers.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddOptimizations(ILGPU.IR.Transformations.Transformer.Builder,ILGPU.InliningMode,ILGPU.OptimizationLevel)">
            <summary>
            Populates the given transformation manager with the required
            optimization transformations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <param name="inliningMode">The inlining mode to use.</param>
            <param name="level">The desired optimization level.</param>
            <returns>The maximum number of iterations.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddBasicOptimizations(ILGPU.IR.Transformations.Transformer.Builder,ILGPU.InliningMode)">
            <summary>
            Adds basic optimization transformations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <param name="inliningMode">The inlining mode to use.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddStructureOptimizations(ILGPU.IR.Transformations.Transformer.Builder)">
            <summary>
            Adds structure optimization passes that lower and remove structure values.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <remarks>
            Helps to reduce register pressure and to avoid unnecessary allocations.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddLoopOptimizations(ILGPU.IR.Transformations.Transformer.Builder)">
            <summary>
            Adds loop-specific optimizations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <remarks>
            Loop-invariant code will be moved out of loops, loops with a known trip
            count will be unrolled and (potentially new) unreachable code will be
            removed.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddConditionalOptimizations(ILGPU.IR.Transformations.Transformer.Builder)">
            <summary>
            Adds optimizations passes to convert control-flow ifs into fast predicates.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddAddressSpaceOptimizations(ILGPU.IR.Transformations.Transformer.Builder)">
            <summary>
            Adds address-space operation optimizations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <remarks>
            Converts operations working on the generic address space into operations
            working on specific address spaces to improve performance.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddBackendOptimizations``1(ILGPU.IR.Transformations.Transformer.Builder,ILGPU.IR.Transformations.AcceleratorSpecializer,ILGPU.InliningMode,ILGPU.OptimizationLevel)">
            <summary>
            Adds general backend optimizations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <param name="acceleratorSpecializer">
            An instance of an <see cref="T:ILGPU.IR.Transformations.AcceleratorSpecializer"/> class.
            </param>
            <param name="inliningMode">The inlining mode to use.</param>
            <param name="level">The desired optimization level.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddO0Optimizations(ILGPU.IR.Transformations.Transformer.Builder,ILGPU.InliningMode)">
            <summary>
            Populates the given transformation manager with O0 optimizations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <param name="inliningMode">The inlining mode to use.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddO1Optimizations(ILGPU.IR.Transformations.Transformer.Builder,ILGPU.InliningMode)">
            <summary>
            Populates the given transformation manager with O1 optimizations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <param name="inliningMode">The inlining mode to use.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.AddO2Optimizations(ILGPU.IR.Transformations.Transformer.Builder,ILGPU.InliningMode)">
            <summary>
            Populates the given transformation manager with O2 optimizations.
            </summary>
            <param name="builder">The transformation manager to populate.</param>
            <param name="inliningMode">The inlining mode to use.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Optimizer.CreateTransformer(ILGPU.OptimizationLevel,ILGPU.IR.Transformations.TransformerConfiguration,ILGPU.InliningMode)">
            <summary>
            Creates a transformer for the given optimization level.
            </summary>
            <param name="level">The level.</param>
            <param name="configuration">The transformer configuration.</param>
            <param name="inliningMode">The inlining mode to use.</param>
            <returns>The created transformer.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.SimplifyControlFlow">
            <summary>
            Merges multiple sequential branches (a call/branch chain) into a single block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SimplifyControlFlow.MergeChain(ILGPU.IR.Method.Builder,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlockSet@)">
            <summary>
            Tries to merge a sequence of jumps.
            </summary>
            <param name="builder">The current method builder.</param>
            <param name="root">The block where to start merging.</param>
            <param name="visited">The collection of visited nodes.</param>
            <returns>True, if something could be merged.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.SimplifyControlFlow.#ctor">
            <summary>
            Constructs a new transformation to merge sequential jump chains.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SimplifyControlFlow.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the control-flow simplification transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.SSATransformationBase">
            <summary>
            An abstract SSA transformation base class.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.SSATransformationBase.IConstructionDataType`1">
            <summary>
            An abstract construction data element per value.
            </summary>
            <typeparam name="TData">
            The parent type implementing this interface.
            </typeparam>
        </member>
        <member name="P:ILGPU.IR.Transformations.SSATransformationBase.IConstructionDataType`1.FieldRef">
            <summary>
            The internal field reference to access.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSATransformationBase.IConstructionDataType`1.Access(ILGPU.IR.Values.FieldRef)">
            <summary>
            Performs a virtual access to the given sub field-ref.
            </summary>
            <param name="fieldRef">The field ref to access.</param>
            <returns>
            The updated data element using the provided field ref.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.SSATransformationBase.IConstructionData`1">
            <summary>
            An abstract interface that contains required methods to perform the SSA
            construction.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSATransformationBase.IConstructionData`1.ContainsAlloca(ILGPU.IR.Values.Alloca)">
            <summary>
            Returns true if the given alloca should be converted.
            </summary>
            <param name="alloca">The alloca to check.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSATransformationBase.IConstructionData`1.TryGetConverted(ILGPU.IR.Value,`0@)">
            <summary>
            Tries to get a converted value entry.
            </summary>
            <param name="value">The value to lookup.</param>
            <param name="data">The resolved data reference (if any).</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSATransformationBase.IConstructionData`1.AddConverted(ILGPU.IR.Value,`0@)">
            <summary>
            Adds the given value and the field reference to the mapping of
            converted values.
            </summary>
            <param name="value">The value to register.</param>
            <param name="data">The data to associated with the value.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSATransformationBase.RequiresAddressForUse(ILGPU.IR.Value)">
            <summary>
            Returns true if the given use requires an explicit address in memory.
            See <see cref="M:ILGPU.IR.Transformations.SSATransformationBase.RequiresAddress(ILGPU.IR.Value)"/> for more information.
            </summary>
            <param name="use">The use value.</param>
            <returns>True, if this use requires an explicit address.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSATransformationBase.RequiresAddress(ILGPU.IR.Value)">
            <summary>
            Returns false if the given node cannot be transformed into an SSA value.
            </summary>
            <param name="node">The current node.</param>
            <returns>
            False, if the given node cannot be transformed into an SSA value.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSATransformationBase.ConvertAlloca``2(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},``0@,ILGPU.IR.Values.Alloca,ILGPU.IR.Value,``1@)">
            <summary>
            Converts the given allocation value into its SSA representation using the
            initialization value provided.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSATransformationBase.ConvertStore(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Values.Store,ILGPU.IR.Values.FieldRef)">
            <summary>
            Converts a store node into an SSA value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSATransformationBase.ConvertLoad(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Values.Load,ILGPU.IR.Values.FieldRef)">
            <summary>
            Converts a load node into an SSA value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSATransformationBase.Convert``2(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},``0,ILGPU.IR.Values.LoadFieldAddress)">
            <summary>
            Converts a field-address operation into an SSA binding.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSATransformationBase.Convert``2(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},``0,ILGPU.IR.Values.AddressSpaceCast)">
            <summary>
            Converts an address-space cast into an SSA binding.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSATransformationBase.RegisterRewriters``2(ILGPU.IR.Rewriting.SSARewriter{ILGPU.IR.Value,``0})">
            <summary>
            Registers all base rewriting patterns.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.SSAConstructionBase">
            <summary>
            The base class for both the <see cref="T:ILGPU.IR.Transformations.SSAConstruction"/> and the
            <see cref="T:ILGPU.IR.Transformations.SSAStructureConstruction"/> classes.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.SSAConstructionBase.ConstructionFieldRef">
            <summary>
            A single field reference in the scope of the <see cref="T:ILGPU.IR.Transformations.SSAConstructionBase.ConstructionData"/>
            container structure.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstructionBase.ConstructionFieldRef.#ctor(ILGPU.IR.Values.FieldRef)">
            <summary>
            Constructs a new wrapper field reference.
            </summary>
            <param name="fieldRef">The field reference to wrap.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.SSAConstructionBase.ConstructionFieldRef.FieldRef">
            <summary>
            Returns the internal field reference.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstructionBase.ConstructionFieldRef.Access(ILGPU.IR.Values.FieldRef)">
            <summary>
            Returns an updated instance using the given field reference.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstructionBase.ConstructionFieldRef.ToString">
            <summary>
            Returns the string representation of the underlying field reference.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.SSAConstructionBase.ConstructionData">
            <summary>
            A default implementation of the
            <see cref="T:ILGPU.IR.Transformations.SSATransformationBase.IConstructionData`1" /> interface.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstructionBase.ConstructionData.#ctor(System.Collections.Generic.HashSet{ILGPU.IR.Values.Alloca})">
            <summary>
            Initializes the data structure.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.SSAConstructionBase.ConstructionData.Allocas">
            <summary>
            The set of all allocas to be converted into SSA value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.SSAConstructionBase.ConstructionData.ConvertedValues">
            <summary>
            Maps converted values to their associated field references.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstructionBase.ConstructionData.ContainsAlloca(ILGPU.IR.Values.Alloca)">
            <summary>
            Returns true if the given alloca should be converted.
            </summary>
            <param name="alloca">The alloca to check.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstructionBase.ConstructionData.TryGetConverted(ILGPU.IR.Value,ILGPU.IR.Transformations.SSAConstructionBase.ConstructionFieldRef@)">
            <summary>
            Tries to get a converted value entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstructionBase.ConstructionData.AddConverted(ILGPU.IR.Value,ILGPU.IR.Transformations.SSAConstructionBase.ConstructionFieldRef@)">
            <summary>
            Adds the given value and the field reference to the mapping of
            converted values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstructionBase.#ctor(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new SSA transformation pass.
            </summary>
            <param name="addressSpace">The target memory address space.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.SSAConstructionBase.AddressSpace">
            <summary>
            Returns the memory address space to handle.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstructionBase.CanConvert(ILGPU.IR.Method.Builder,ILGPU.IR.Values.Alloca)">
            <summary>
            Returns true if the given allocation can be transformed.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstructionBase.PerformTransformation``2(ILGPU.IR.Method.Builder,ILGPU.IR.Rewriting.SSARewriter{ILGPU.IR.Value,``0},System.Func{ILGPU.IR.Transformations.SSAConstructionBase.ConstructionData,``0})">
            <summary>
            Performs the internal SSA construction transformation.
            </summary>
            <param name="builder">The parent method builder.</param>
            <param name="rewriter">The SSA rewriter to use.</param>
            <param name="getConstructionData">
            A builder function to convert the internal construction data instance
            into the target data structure required for this transformation.
            </param>
            <returns>True, if the transformation could be applied.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.SSAConstruction">
            <summary>
            Performs an SSA construction transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.Convert(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Transformations.SSAConstructionBase.ConstructionData,ILGPU.IR.Values.Alloca)">
            <summary>
            Converts an alloca node to its initial SSA value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.Convert(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Transformations.SSAConstructionBase.ConstructionData,ILGPU.IR.Values.Load)">
            <summary>
            Converts a load node into an SSA value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.Convert(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Transformations.SSAConstructionBase.ConstructionData,ILGPU.IR.Values.Store)">
            <summary>
            Converts a store node to its associated value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.SSAConstruction.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.#cctor">
            <summary>
            Registers all rewriting patterns.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.#ctor">
            <summary>
            Constructs a new SSA construction pass.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.#ctor(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new SSA construction pass.
            </summary>
            <param name="addressSpace">The target memory address space.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.CanConvert(ILGPU.IR.Method.Builder,ILGPU.IR.Values.Alloca)">
            <summary>
            Returns true if the given allocation is a simple allocation and does not
            require explicit addresses.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAConstruction.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the SSA construction transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.SSAStructureConstruction">
            <summary>
            Performs an SSA structure construction from array allocations transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.RequiresAddress(ILGPU.IR.Values.LoadElementAddress,System.Int32)">
            <summary>
            Returns true if the given <see cref="T:ILGPU.IR.Values.LoadElementAddress"/> value requires
            an explicit address in memory (e.g. the offset being accessed could not be
            resolved to a statically known index value).
            </summary>
            <param name="lea">The lea node.</param>
            <param name="arrayLength">The array length.</param>
            <returns>True, if an explicit address is required.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.RequiresAddress(ILGPU.IR.Value,System.Int32)">
            <summary>
            Returns true if the given value requires an explicit address in memory.
            </summary>
            <param name="node">The node to test.</param>
            <param name="arrayLength">The array length.</param>
            <returns>True, if an explicit address is required.</returns>
        </member>
        <member name="T:ILGPU.IR.Transformations.SSAStructureConstruction.ArrayData">
            <summary>
            An internal array allocation field reference wrapper.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.SSAStructureConstruction.ArrayData.ArrayLength">
            <summary>
            Returns the array length.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.SSAStructureConstruction.ArrayData.NumElementFields">
            <summary>
            Returns the number of fields per array element.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.SSAStructureConstruction.ArrayData.InternalFieldRef">
            <summary>
            Returns the internal field ref.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.SSAStructureConstruction.ArrayData.FieldRef">
            <summary>
            Returns the field ref.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.ArrayData.Access(ILGPU.IR.Values.FieldRef)">
            <summary>
            Creates a new array data instance using the given field reference.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.SSAStructureConstruction.ArrayConstructionData">
            <summary>
            An array construction helper that stores intermediate data during the SSA
            construction of data arrays.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.SSAStructureConstruction.ArrayConstructionData.ConstructionData">
            <summary>
            The internal construction data.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.SSAStructureConstruction.ArrayConstructionData.ArrayData">
            <summary>
            The additional array data per allocation entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.ArrayConstructionData.ContainsAlloca(ILGPU.IR.Values.Alloca)">
            <summary>
            Returns true if the given alloca should be converted.
            </summary>
            <param name="alloca">The alloca to check.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.ArrayConstructionData.TryGetConverted(ILGPU.IR.Value,ILGPU.IR.Transformations.SSAStructureConstruction.ArrayData@)">
            <summary>
            Tries to get a converted value entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.ArrayConstructionData.AddConverted(ILGPU.IR.Value,ILGPU.IR.Transformations.SSAStructureConstruction.ArrayData@)">
            <summary>
            Adds the given value and the field reference to the mapping of
            converted values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.Convert(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Transformations.SSAStructureConstruction.ArrayConstructionData,ILGPU.IR.Values.Alloca)">
            <summary>
            Converts an alloca node to its initial SSA value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.RemapToStructureElementAccess(ILGPU.IR.Transformations.SSAStructureConstruction.ArrayData@)">
            <summary>
            Remaps the given array data to a single field reference.
            </summary>
            <param name="data">The input array data to use.</param>
            <returns>The field reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.Convert(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Transformations.SSAStructureConstruction.ArrayConstructionData,ILGPU.IR.Values.Load)">
            <summary>
            Converts a load node into an SSA value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.Convert(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Transformations.SSAStructureConstruction.ArrayConstructionData,ILGPU.IR.Values.Store)">
            <summary>
            Converts a store node to its associated value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.Convert(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Transformations.SSAStructureConstruction.ArrayConstructionData,ILGPU.IR.Values.LoadElementAddress)">
            <summary>
            Converts a load node into an SSA value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.Convert(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Transformations.SSAStructureConstruction.ArrayConstructionData,ILGPU.IR.Values.NewView)">
            <summary>
            Converts a new view into an SSA value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.Convert(ILGPU.IR.Rewriting.SSARewriterContext{ILGPU.IR.Value},ILGPU.IR.Transformations.SSAStructureConstruction.ArrayConstructionData,ILGPU.IR.Values.GetViewLength)">
            <summary>
            Converts a new get length node into an SSA value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.SSAStructureConstruction.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.#cctor">
            <summary>
            Registers all rewriting patterns.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.#ctor">
            <summary>
            Constructs a new SSA structure construction pass.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.#ctor(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new SSA structure construction pass.
            </summary>
            <param name="addressSpace">The target memory address space.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the SSA construction transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SSAStructureConstruction.CanConvert(ILGPU.IR.Method.Builder,ILGPU.IR.Values.Alloca)">
            <summary>
            Returns true if the given allocation is a simple allocation and does not
            require explicit addresses.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Transformation">
            <summary>
            Represents a generic transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Transformation.ITransformExecutor">
            <summary>
            Represents an abstract transform execution driver closure.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformation.ITransformExecutor.Execute(ILGPU.IR.Method.Builder)">
            <summary>
            Executes the current transformation.
            </summary>
            <param name="builder">The current method builder.</param>
            <returns>True, if the transformation could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformation.#ctor">
            <summary>
            Constructs a new transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformation.Transform(ILGPU.IR.MethodCollection@)">
            <summary>
            Transforms all method in the given context.
            </summary>
            <param name="methods">The methods to transform.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformation.ExecuteTransform``1(ILGPU.IR.Method.Builder,``0@)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="builder">The current method builder.</param>
            <param name="executor">The desired transform executor.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnorderedTransformation">
            <summary>
            Represents a generic transformation that can be applied in an unordered manner.
            </summary>
            <remarks>
            Note that this transformation is applied in parallel to all methods.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnorderedTransformation.Executor">
            <summary>
            Represents an unordered executor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation.Executor.#ctor(ILGPU.IR.Transformations.UnorderedTransformation)">
            <summary>
            Constructs a new executor.
            </summary>
            <param name="parent">The parent transformation.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.UnorderedTransformation.Executor.Parent">
            <summary>
            The associated parent transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation.Executor.Execute(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the parent transformation.
            </summary>
            <param name="builder">The current builder.</param>
            <returns>True, if the transformation could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation.#ctor">
            <summary>
            Constructs a new transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation.Transform(ILGPU.IR.MethodCollection@)">
            <summary>
            Transforms all methods in the given context.
            </summary>
            <param name="methods">The methods to transform.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="builder">The current method builder.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnorderedTransformationWithPrePass">
            <summary>
            Represents a generic transformation that can be applied in an unordered manner.
            </summary>
            <remarks>
            Note that this transformation is applied in parallel to all methods.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnorderedTransformationWithPrePass.Executor">
            <summary>
            Represents an unordered executor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformationWithPrePass.Executor.#ctor(ILGPU.IR.Transformations.UnorderedTransformationWithPrePass)">
            <summary>
            Constructs a new executor.
            </summary>
            <param name="parent">The parent transformation.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.UnorderedTransformationWithPrePass.Executor.Parent">
            <summary>
            The associated parent transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformationWithPrePass.Executor.Execute(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the parent transformation.
            </summary>
            <param name="builder">The current builder.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformationWithPrePass.#ctor">
            <summary>
            Constructs a new transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformationWithPrePass.Transform(ILGPU.IR.MethodCollection@)">
            <summary>
            Transforms all methods in the given context.
            </summary>
            <param name="methods">The methods to transform.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformationWithPrePass.PrePerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="builder">The current method builder.</param>
            <remarks>
            Note that this method is executed on all methods prior to executing the
            <see cref="M:ILGPU.IR.Transformations.UnorderedTransformationWithPrePass.PrePerformTransformation(ILGPU.IR.Method.Builder)"/> method.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Transformations.SequentialUnorderedTransformation">
            <summary>
            Represents a generic transformation that can be applied in an unordered manner.
            </summary>
            <remarks>
            Note that this transformation is applied sequentially to all methods.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Transformations.SequentialUnorderedTransformation.Executor">
            <summary>
            Represents an unordered executor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SequentialUnorderedTransformation.Executor.#ctor(ILGPU.IR.Transformations.SequentialUnorderedTransformation,ILGPU.IR.IRContext)">
            <summary>
            Constructs a new executor.
            </summary>
            <param name="parent">The parent transformation.</param>
            <param name="context">The context IR context.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.SequentialUnorderedTransformation.Executor.Parent">
            <summary>
            The associated parent transformation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.SequentialUnorderedTransformation.Executor.Context">
            <summary>
            Returns the current IR context in the scope of this transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.SequentialUnorderedTransformation.Executor.Execute(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the parent transformation.
            </summary>
            <param name="builder">The current builder.</param>
            <returns>True, if the transformation could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.SequentialUnorderedTransformation.Transform(ILGPU.IR.MethodCollection@)">
            <summary>
            Transforms all methods in the given context.
            </summary>
            <param name="methods">The methods to transform.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.SequentialUnorderedTransformation.PerformTransformation(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="context">The parent IR context to operate on.</param>
            <param name="builder">The current method builder.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnorderedTransformation`1">
            <summary>
            Represents a generic transformation that can be applied in an unordered manner.
            </summary>
            <typeparam name="TIntermediate">The type of the intermediate values.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnorderedTransformation`1.Executor">
            <summary>
            Represents an unordered executor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.Executor.#ctor(ILGPU.IR.Transformations.UnorderedTransformation{`0},`0)">
            <summary>
            Constructs a new executor.
            </summary>
            <param name="parent">The parent transformation.</param>
            <param name="intermediate">The intermediate value.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.UnorderedTransformation`1.Executor.Parent">
            <summary>
            The associated parent transformation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.UnorderedTransformation`1.Executor.Intermediate">
            <summary>
            Returns the associated intermediate value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.Executor.Execute(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the parent transformation.
            </summary>
            <param name="builder">The current builder.</param>
            <returns>True, if the transformation could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.#ctor">
            <summary>
            Constructs a new transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.CreateIntermediate(ILGPU.IR.MethodCollection@)">
            <summary>
            Creates a new intermediate value.
            </summary>
            <returns>The resulting intermediate value.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.FinishProcessing(`0)">
            <summary>
            Is invoked after all methods have been transformed.
            </summary>
            <param name="intermediate">The current intermediate value.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.Transform(ILGPU.IR.MethodCollection@)">
            <summary>
            Transforms all methods in the given context.
            </summary>
            <param name="methods">The methods to transform.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnorderedTransformation`1.PerformTransformation(ILGPU.IR.Method.Builder,`0)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="builder">The current method builder.</param>
            <param name="intermediate">The intermediate value.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.OrderedTransformation`1">
            <summary>
            Represents a generic transformation that will be applied in the post order
            of the induced call graph.
            </summary>
            <typeparam name="TIntermediate">The type of the intermediate values.</typeparam>
        </member>
        <member name="T:ILGPU.IR.Transformations.OrderedTransformation`1.Executor">
            <summary>
            Represents an ordered executor.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation`1.Executor.#ctor(ILGPU.IR.Transformations.OrderedTransformation{`0},ILGPU.IR.IRContext,`0,ILGPU.IR.Analyses.Landscape,ILGPU.IR.Analyses.Landscape{System.Object}.Entry)">
            <summary>
            Constructs a new executor.
            </summary>
            <param name="parent">The parent transformation.</param>
            <param name="context">The context IR context.</param>
            <param name="intermediate">The intermediate value.</param>
            <param name="landscape">The current landscape.</param>
            <param name="entry">The current landscape entry.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.OrderedTransformation`1.Executor.Parent">
            <summary>
            The associated parent transformation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.OrderedTransformation`1.Executor.Context">
            <summary>
            Returns the current IR context in the scope of this transformation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.OrderedTransformation`1.Executor.Intermediate">
            <summary>
            Returns the associated intermediate value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.OrderedTransformation`1.Executor.Landscape">
            <summary>
            Returns the current landscape.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.OrderedTransformation`1.Executor.Entry">
            <summary>
            Returns the current entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation`1.Executor.Execute(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the parent transformation.
            </summary>
            <param name="builder">The current builder.</param>
            <returns>True, if the transformation could be applied.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation`1.#ctor">
            <summary>
            Constructs a new transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation`1.CreateIntermediate(ILGPU.IR.MethodCollection@)">
            <summary>
            Creates a new intermediate value.
            </summary>
            <returns>The resulting intermediate value.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation`1.FinishProcessing(`0@)">
            <summary>
            Is invoked after all methods have been transformed.
            </summary>
            <param name="intermediate">The current intermediate value.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation`1.Transform(ILGPU.IR.MethodCollection@)">
            <summary>
            Transforms all methods in the given context.
            </summary>
            <param name="methods">The methods to transform.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation`1.PerformTransformation(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder,`0@,ILGPU.IR.Analyses.Landscape,ILGPU.IR.Analyses.Landscape{System.Object}.Entry)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="context">The parent IR context to operate on.</param>
            <param name="builder">The current method builder.</param>
            <param name="intermediate">The intermediate value.</param>
            <param name="landscape">The global processing landscape.</param>
            <param name="current">The current landscape entry.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.OrderedTransformation">
            <summary>
            Represents a generic transformation that will be applied in the post order
            of the induced call graph.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation.#ctor">
            <summary>
            Constructs a new transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation.CreateIntermediate(ILGPU.IR.MethodCollection@)">
            <summary>
            Creates a new intermediate value.
            </summary>
            <returns>The resulting intermediate value.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation.FinishProcessing(System.Object@)">
            <summary>
            Is invoked after all methods have been transformed.
            </summary>
            <param name="intermediate">The current intermediate value.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation.PerformTransformation(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder,System.Object@,ILGPU.IR.Analyses.Landscape,ILGPU.IR.Analyses.Landscape{System.Object}.Entry)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="context">The parent IR context to operate on.</param>
            <param name="builder">The current method builder.</param>
            <param name="intermediate">The intermediate value.</param>
            <param name="landscape">The global processing landscape.</param>
            <param name="current">The current landscape entry.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.OrderedTransformation.PerformTransformation(ILGPU.IR.IRContext,ILGPU.IR.Method.Builder,ILGPU.IR.Analyses.Landscape,ILGPU.IR.Analyses.Landscape{System.Object}.Entry)">
            <summary>
            Transforms the given method using the provided builder.
            </summary>
            <param name="context">The parent IR context to operate on.</param>
            <param name="builder">The current method builder.</param>
            <param name="landscape">The global processing landscape.</param>
            <param name="current">The current landscape entry.</param>
        </member>
        <member name="T:ILGPU.IR.Transformations.TransformerConfiguration">
            <summary>
            Represents a transformer configuration.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.TransformerConfiguration.Empty">
            <summary>
            Represents an empty configuration that works on all functions without
            adding additional flags to them.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.TransformerConfiguration.Transformed">
            <summary>
            Represents a default configuration that works on all non-transformed
            functions and marks them as transformed.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.TransformerConfiguration.#ctor(ILGPU.IR.MethodTransformationFlags)">
            <summary>
            Constructs a new transformer configuration.
            </summary>
            <param name="flags">The transformation flags.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.TransformerConfiguration.#ctor(ILGPU.IR.MethodTransformationFlags,ILGPU.IR.MethodTransformationFlags)">
            <summary>
            Constructs a new transformer configuration.
            </summary>
            <param name="requiredFlags">
            The transformation flags that should not be set.
            </param>
            <param name="flags">The transformation flags that will be set.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.TransformerConfiguration.RequiredFlags">
            <summary>
            Returns the transformation flags that will be checked
            on the functions to transform.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.TransformerConfiguration.TransformationFlags">
            <summary>
            Returns the transformation flags that will be stored on
            on the transformed functions.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.TransformerConfiguration.AddsFlags">
            <summary>
            Returns true if the current configuration manipulates transformation flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.TransformerConfiguration.Predicate">
            <summary>
            Returns a compatible collection predicate.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Transformer">
            <summary>
            Applies transformations to contexts.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.Transformer.Builder">
            <summary>
            A transformer builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Builder.#ctor(ILGPU.IR.Transformations.TransformerConfiguration,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Transformations.Transformation}.Builder)">
            <summary>
            Constructs a new builder.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <param name="targetBuilder">The target builder.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.Transformer.Builder.Configuration">
            <summary>
            Returns the current transformer configuration.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Builder.Add(ILGPU.IR.Transformations.Transformation)">
            <summary>
            Adds the given transformation to the manager.
            </summary>
            <param name="transformation">The transformation to add.</param>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Builder.ToTransformer">
            <summary>
            Converts this builder to an immutable array.
            </summary>
            <returns>The immutable transformation array.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.CreateBuilder(ILGPU.IR.Transformations.TransformerConfiguration)">
            <summary>
            Creates a new transformer builder.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <returns>A new builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Create(ILGPU.IR.Transformations.TransformerConfiguration,ILGPU.IR.Transformations.Transformation)">
            <summary>
            Creates a transformer.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <param name="transform">The specification to use.</param>
            <returns>The created transformer.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Create(ILGPU.IR.Transformations.TransformerConfiguration,ILGPU.IR.Transformations.Transformation,ILGPU.IR.Transformations.Transformation[])">
            <summary>
            Creates a transformer.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <param name="transform">The first transformation.</param>
            <param name="transformations">The other transformations.</param>
            <returns>The created transformer.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.Create(ILGPU.IR.Transformations.TransformerConfiguration,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Transformations.Transformation})">
            <summary>
            Creates a transformer.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <param name="transforms">The transformations.</param>
            <returns>The created transformer.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.Transformer.#ctor(ILGPU.IR.Transformations.TransformerConfiguration,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Transformations.Transformation})">
            <summary>
            Constructs a new transformer.
            </summary>
            <param name="configuration">The transformer configuration.</param>
            <param name="transformations">The transformations.</param>
        </member>
        <member name="P:ILGPU.IR.Transformations.Transformer.Configuration">
            <summary>
            Returns the associated configuration.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.Transformer.Transformations">
            <summary>
            Returns the stored transformations.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnreachableCodeElimination">
            <summary>
            Represents an UCE transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper">
            <summary>
            An argument remapper for Phi values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper.#ctor(System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock}@)">
            <summary>
            Initializes a new scope.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper.Blocks">
            <summary>
            Returns the associated scope.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper.IsReachable(ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given block is reachable.
            </summary>
            <param name="block">The block to test.</param>
            <returns>True, if the given block is reachable.</returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper.IsReachableAndPredecessor(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Returns true if the given block is reachable and the block is one of the
            predecessors of the specified parent source value block.
            </summary>
            <param name="sourceBlock">
            The parent source block to query the predecessors.
            </param>
            <param name="block">The block to test.</param>
            <returns>
            True, if the given block is reachable and the block is one the
            predecessors of the source block.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper.CanRemap(ILGPU.IR.Values.PhiValue)">
            <summary>
            Returns true if any of the given blocks is no longer in the current
            scope.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper.TryRemap(ILGPU.IR.Values.PhiValue,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock@)">
            <summary>
            Keeps the block mapping but returns false if this block has become
            unreachable.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper.RemapValue(ILGPU.IR.Values.PhiValue,ILGPU.IR.BasicBlock,ILGPU.IR.Value)">
            <summary>
            Returns the value of <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.Update(ILGPU.IR.Rewriting.RewriterContext,ILGPU.IR.Transformations.UnreachableCodeElimination.PhiArgumentRemapper,ILGPU.IR.Values.PhiValue)">
            <summary>
            Updates reachable phi values that have references to unreachable parts.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Transformations.UnreachableCodeElimination.Rewriter">
            <summary>
            The internal rewriter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.#cctor">
            <summary>
            Registers all rewriting patterns.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.#ctor">
            <summary>
            Constructs a new UCE transformation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Transformations.UnreachableCodeElimination.PerformTransformation(ILGPU.IR.Method.Builder)">
            <summary>
            Applies the UCE transformation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.ArrayType">
            <summary>
            Represents the type of a generic array that lives in the local address space.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Constructs a new array type.
            </summary>
            <param name="typeContext">The parent type context.</param>
            <param name="elementType">The element type.</param>
            <param name="numDimensions">The number of array dimensions.</param>
        </member>
        <member name="P:ILGPU.IR.Types.ArrayType.IsArrayType">
            <inheritdoc/>
        </member>
        <member name="P:ILGPU.IR.Types.ArrayType.ElementType">
            <summary>
            Returns the underlying element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.ArrayType.NumDimensions">
            <summary>
            Returns the number of array dimensions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.GetManagedType">
            <summary>
            Creates a managed array type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.ArrayType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.HandleType">
            <summary>
            Represents a .Net runtime-specific handle type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.#ctor(ILGPU.IR.Types.IRTypeContext)">
            <summary>
            Constructs a new .Net runtime-specific handle type.
            </summary>
            <param name="typeContext">The parent type context.</param>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.GetManagedType">
            <summary>
            Creates an object type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.HandleType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.IIRTypeContext">
            <summary>
            Represents an abstract type context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IIRTypeContext.VoidType">
            <summary>
            Returns the void type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IIRTypeContext.StringType">
            <summary>
            Returns the memory type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.GetPrimitiveType(ILGPU.BasicValueType)">
            <summary>
            Resolves the primitive type that corresponds to the given
            <see cref="T:ILGPU.BasicValueType"/>.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The created primitive type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreatePointerType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a pointer type.
            </summary>
            <param name="elementType">The pointer element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created pointer type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a view type.
            </summary>
            <param name="elementType">The view element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateArrayType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new array type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="dimensions">The number of array dimensions.</param>
            <returns>The created array dimensions.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateStructureType(System.Int32)">
            <summary>
            Creates a new structure type builder with the given capacity.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <returns>The created structure builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateType(System.Type)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.CreateType(System.Type,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <param name="addressSpace">The address space for pointer types.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.SpecializeAddressSpaceType(ILGPU.IR.Types.AddressSpaceType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Specializes the address space of the given <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.
            </summary>
            <param name="addressSpaceType">The source type.</param>
            <param name="addressSpace">The new address space.</param>
            <returns>The created specialized <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IIRTypeContext.TrySpecializeAddressSpaceType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Types.TypeNode@)">
            <summary>
            Tries to specialize a view or a pointer address space.
            </summary>
            <param name="type">The pointer or view type.</param>
            <param name="addressSpace">The target address space.</param>
            <param name="specializedType">The specialized type.</param>
            <returns>True, if the type could be specialized.</returns>
        </member>
        <member name="T:ILGPU.IR.Types.IRTypeContextExtensions">
            <summary>
            Extension methods for <see cref="T:ILGPU.IR.Types.IIRTypeContext"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContextExtensions.CreateEmptyStructureType``1(``0)">
            <summary>
            Creates an empty structure type.
            </summary>
            <typeparam name="TTypeContext">the parent type context.</typeparam>
            <param name="typeContext">The type context.</param>
            <returns>The type representing an empty structure.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContextExtensions.CreateStructureType``1(``0)">
            <summary>
            Creates a new structure type builder with an initial capacity.
            </summary>
            <typeparam name="TTypeContext">the parent type context.</typeparam>
            <param name="typeContext">The type context.</param>
            <returns>The created structure builder.</returns>
        </member>
        <member name="T:ILGPU.IR.Types.IRTypeContext">
            <summary>
            Represents a context that manages IR types.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.IRTypeContext.BasicValueTypes">
            <summary>
            Contains all basic value types.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.IsViewIndexType(ILGPU.BasicValueType)">
            <summary>
            Returns true if the given basic value type can be used in combination with
            a view type.
            </summary>
            <param name="basicValueType"></param>
            <returns>
            True if the given value type is a compatible view index type.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new IR type context.
            </summary>
            <param name="context">The associated main context.</param>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.TargetPlatform">
            <summary>
            Returns the associated target platform for all pointer-based types.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.RuntimeSystem">
            <summary>
            Returns the parent runtime system.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.MathMode">
            <summary>
            Returns the current math mode.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.VoidType">
            <summary>
            Returns the void type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.StringType">
            <summary>
            Returns the memory type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.HandleType">
            <summary>
            Returns the managed handle type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.RootType">
            <summary>
            Returns the root structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.Padding8Type">
            <summary>
            Returns a custom padding type that is used to pad structure values (8-bits).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.Padding16Type">
            <summary>
            Returns a custom padding type that is used to pad structure values (16-bits).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.Padding32Type">
            <summary>
            Returns a custom padding type that is used to pad structure values (32-bits).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.IRTypeContext.Padding64Type">
            <summary>
            Returns a custom padding type that is used to pad structure values (64-bits).
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.GetPrimitiveType(ILGPU.BasicValueType)">
            <summary>
            Resolves the primitive type that corresponds to the given
            <see cref="T:ILGPU.BasicValueType"/>.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The created primitive type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.GetPaddingType(ILGPU.BasicValueType)">
            <summary>
            Resolves the padding type that corresponds to the given
            <see cref="T:ILGPU.BasicValueType"/>.
            </summary>
            <param name="basicValueType">The basic value type.</param>
            <returns>The padding type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreatePointerType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a pointer type.
            </summary>
            <param name="elementType">The pointer element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created pointer type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateViewType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a view type.
            </summary>
            <param name="elementType">The view element type.</param>
            <param name="addressSpace">The address space.</param>
            <returns>The created view type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateStructureType(System.Int32)">
            <summary>
            Creates a new structure type builder with the given capacity.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <returns>The created structure builder.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.FinishStructureType(ILGPU.IR.Types.StructureType.Builder@)">
            <summary>
            Creates a new structure type.
            </summary>
            <param name="builder">The current builder.</param>
            <returns>The created type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateArrayType(ILGPU.IR.Types.TypeNode,System.Int32)">
            <summary>
            Creates a new array type.
            </summary>
            <param name="elementType">The element type.</param>
            <param name="dimensions">The number of array dimensions.</param>
            <returns>The created array type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateType(System.Type)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateType(System.Type,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <param name="addressSpace">The address space for pointer types.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.Map``1(System.Type,ILGPU.IR.MemoryAddressSpace,``0)">
            <summary>
            Maps the given type and address space to the type node provided.
            </summary>
            <typeparam name="T">The node type.</typeparam>
            <param name="type">The managed type.</param>
            <param name="addressSpace">The address space.</param>
            <param name="typeNode">The type node to map to.</param>
            <returns>The given type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.CreateType_Sync(System.Type,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Creates a new type based on a type from the .Net world.
            </summary>
            <param name="type">The source type.</param>
            <param name="addressSpace">The address space for pointer types.</param>
            <returns>The IR type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.SpecializeAddressSpaceType(ILGPU.IR.Types.AddressSpaceType,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Specializes the address space of the given <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.
            </summary>
            <param name="addressSpaceType">The source type.</param>
            <param name="addressSpace">The new address space.</param>
            <returns>The created specialized <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.TrySpecializeAddressSpaceType(ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace,ILGPU.IR.Types.TypeNode@)">
            <summary>
            Tries to specialize a view or a pointer address space.
            </summary>
            <param name="type">The pointer or view type.</param>
            <param name="addressSpace">The target address space.</param>
            <param name="specializedType">The specialized type.</param>
            <returns>True, if the type could be specialized.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.UnifyType``1(``0)">
            <summary>
            Creates a type.
            </summary>
            <typeparam name="T">The type of the  type.</typeparam>
            <param name="type">The type to create.</param>
            <returns>The created type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.PopulateTypeMapping">
            <summary>
            Populates the internal type mapping.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.IR.Types.IRTypeContext.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.IR.Types.ObjectType">
            <summary>
            Represents an abstract object value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ObjectType.#ctor(ILGPU.IR.Types.IRTypeContext)">
            <summary>
            Constructs a new object type.
            </summary>
            <param name="typeContext">The parent type context.</param>
        </member>
        <member name="P:ILGPU.IR.Types.ObjectType.IsObjectType">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.IR.Types.PaddingType">
            <summary>
            Represents a padding type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PaddingType.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.IR.Types.PrimitiveType)">
            <summary>
            Constructs a new padding type.
            </summary>
            <param name="typeContext">The parent type context.</param>
            <param name="primitiveType">The primitive type to use for padding.</param>
        </member>
        <member name="P:ILGPU.IR.Types.PaddingType.IsPaddingType">
            <inheritdoc/>
        </member>
        <member name="P:ILGPU.IR.Types.PaddingType.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.PaddingType.PrimitiveType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PaddingType.GetManagedType">
            <summary>
            Returns the corresponding managed basic value type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PaddingType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.PaddingType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.PaddingType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.AddressSpaceType">
            <summary>
            Represents an abstract type that relies on addresses.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.AddressSpaceType.AddressSpaceConverter">
            <summary>
            Converts the address space of <see cref="T:ILGPU.IR.Types.AddressSpaceType"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.AddressSpaceConverter.#ctor(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new address space converter.
            </summary>
            <param name="addressSpace">The target address space.</param>
        </member>
        <member name="P:ILGPU.IR.Types.AddressSpaceType.AddressSpaceConverter.AddressSpace">
            <summary>
            Returns the target address space to specialize.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.AddressSpaceConverter.GetNumFields(ILGPU.IR.Types.AddressSpaceType)">
            <summary>
            Returns one field per address space type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.AddressSpaceConverter.ConvertType``1(``0,ILGPU.IR.Types.AddressSpaceType)">
            <summary>
            Converts a single <see cref="T:ILGPU.IR.Types.AddressSpaceType"/> into a specialized
            version using the target <see cref="P:ILGPU.IR.Types.AddressSpaceType.AddressSpaceConverter.AddressSpace"/>.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.AddressSpaceType.TypeConverters">
            <summary>
            Caches all known address space type converters.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.GetAddressSpaceConverter(ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Returns a cached version of an <see cref="T:ILGPU.IR.Types.AddressSpaceType.AddressSpaceConverter"/> for known
            address spaces.
            </summary>
            <param name="addressSpace">The address space to convert into.</param>
            <returns>A cached or a new converter instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new address type.
            </summary>
            <param name="typeContext">The parent type context.</param>
            <param name="elementType">The element type.</param>
            <param name="addressSpace">The associated address space.</param>
        </member>
        <member name="P:ILGPU.IR.Types.AddressSpaceType.ElementType">
            <summary>
            Returns the underlying element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.AddressSpaceType.AddressSpace">
            <summary>
            Returns the associated address space.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="M:ILGPU.IR.Types.AddressSpaceType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.IR.Types.PointerType">
            <summary>
            Represents the type of a generic pointer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new pointer type.
            </summary>
            <param name="typeContext">The parent type context.</param>
            <param name="elementType">The element type.</param>
            <param name="addressSpace">The associated address space.</param>
        </member>
        <member name="P:ILGPU.IR.Types.PointerType.IsPointerType">
            <inheritdoc/>
        </member>
        <member name="P:ILGPU.IR.Types.PointerType.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.GetManagedType">
            <summary>
            Creates a managed pointer type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.PointerType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.ViewType">
            <summary>
            Represents the type of a generic view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new view type.
            </summary>
            <param name="typeContext">The parent type context.</param>
            <param name="elementType">The element type.</param>
            <param name="addressSpace">The associated address space.</param>
        </member>
        <member name="P:ILGPU.IR.Types.ViewType.IsViewType">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.GetManagedType">
            <summary>
            Creates a managed view type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.ViewType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.PrimitiveType">
            <summary>
            Represents a primitive type.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.PrimitiveType.BasicTypeInformation">
            <summary>
            Contains default size information about built-in types.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.PrimitiveType.BasicSizeInformation">
            <summary>
            Maps integer-based type size values to <see cref="P:ILGPU.IR.Types.PrimitiveType.BasicValueType"/> entries.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.GetBasicValueTypeBySize(System.Int32)">
            <summary>
            Determines the <see cref="P:ILGPU.IR.Types.PrimitiveType.BasicValueType"/> that corresponds to the given
            type size in bytes (if any).
            </summary>
            <param name="size">The size in bytes.</param>
            <returns>The basic value type (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.BasicValueType)">
            <summary>
            Constructs a new primitive type.
            </summary>
            <param name="typeContext">The parent type context.</param>
            <param name="basicValueType">The basic value type.</param>
        </member>
        <member name="P:ILGPU.IR.Types.PrimitiveType.IsPrimitiveType">
            <inheritdoc/>
        </member>
        <member name="P:ILGPU.IR.Types.PrimitiveType.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.PrimitiveType.IsBool">
            <summary>
            Returns true if this type represents a bool type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.PrimitiveType.Is32Bit">
            <summary>
            Returns true if this type represents a 32 bit type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.PrimitiveType.Is64Bit">
            <summary>
            Returns true if this type represents a 64 bit type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.GetManagedType">
            <summary>
            Returns the corresponding managed basic value type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.PrimitiveType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.StringType">
            <summary>
            Represents a string type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.#ctor(ILGPU.IR.Types.IRTypeContext)">
            <summary>
            Constructs a new string type.
            </summary>
            <param name="typeContext">The parent type context.</param>
        </member>
        <member name="P:ILGPU.IR.Types.StringType.IsStringType">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.GetManagedType">
            <summary>
            Returns the corresponding managed basic value type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.StringType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType">
            <summary>
            Represents a structure type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.Builder">
            <summary>
            A structure type builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Builder.#ctor(ILGPU.IR.Types.IRTypeContext,System.Int32,System.Int32)">
            <summary>
            Creates a new type builder with the given capacity.
            </summary>
            <param name="typeContext">The current type context.</param>
            <param name="capacity">The initial capacity.</param>
            <param name="size">The custom size in bytes (if any).</param>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.TypeContext">
            <summary>
            Returns the parent type context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.ExplicitSize">
            <summary>
            Returns the explicit size in bytes (if any).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.Count">
            <summary>
            Returns the number of all fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.Offset">
            <summary>
            The current offset in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.Alignment">
            <summary>
            The current alignment for the underlying type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.Size">
            <summary>
            The current size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.AlignedSize">
            <summary>
            Returns the aligned size based on the current offset and the alignment.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Builder.Item(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns the field type that corresponds to the given field access.
            </summary>
            <param name="access">The field access.</param>
            <returns>The resolved field type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Builder.Add(ILGPU.IR.Types.TypeNode)">
            <summary>
            Adds the given type node to the structure builder.
            </summary>
            <param name="type">The type node to add.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Builder.AddInternal(ILGPU.IR.Types.TypeNode,System.Int32,System.Int32)">
            <summary>
            Adds the given primitive type node.
            </summary>
            <param name="type">The type node to add.</param>
            <param name="offset">The custom relative offset.</param>
            <param name="alignment">The custom alignment.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Builder.Seal">
            <summary>
            Seals this builder and returns a type that corresponds to the type
            represented by this builder.
            </summary>
            <returns>The create type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Builder.Seal(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode}@,System.Collections.Immutable.ImmutableArray{ILGPU.IR.Types.TypeNode}@,System.Collections.Immutable.ImmutableArray{System.Int32}@,System.Collections.Immutable.ImmutableArray{System.Int32}@)">
            <summary>
            Moves the underlying builders to immutable arrays.
            </summary>
            <param name="types">Direct field types.</param>
            <param name="allTypes">All field types.</param>
            <param name="offsets">All field offsets.</param>
            <param name="remappedFields">Renumbered field indices.</param>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.Enumerator">
            <summary>
            An enumerator to enumerate all nested fields in the structure type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Enumerator.#ctor(ILGPU.IR.Types.StructureType)">
            <summary>
            Constructs a new use enumerator.
            </summary>
            <param name="type">The structure type.</param>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Enumerator.Type">
            <summary>
            Returns the parent structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Enumerator.Current">
            <summary>
            Returns the current use.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.OffsetCollection">
            <summary>
            A readonly collection of all field offsets and paddings.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator">
            <summary>
            An enumerator to enumerate all offsets in the structure type.
            </summary>
            <remarks>
            The tuple contains field access, byte offset and byte padding info.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator.#ctor(ILGPU.IR.Types.StructureType)">
            <summary>
            Constructs a new use enumerator.
            </summary>
            <param name="type">The structure type.</param>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator.Type">
            <summary>
            Returns the parent structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator.Current">
            <summary>
            Returns the current use.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary cref="P:System.Collections.IEnumerator.Current"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator.System#IDisposable#Dispose">
            <summary cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary cref="M:System.Collections.IEnumerator.Reset"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.#ctor(ILGPU.IR.Types.StructureType)">
            <summary>
            Constructs a new offset collection.
            </summary>
            <param name="parent">The parent structure type.</param>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.OffsetCollection.Parent">
            <summary>
            Returns the parent structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.OffsetCollection.Count">
            <summary>
            Returns the number of offsets.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all offsets in the parent type.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.System#Collections#Generic#IEnumerable{(ILGPU#IR#Values#FieldAccess,System#Int32,System#Int32)}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all offsets in the parent type.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.OffsetCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all offsets in the parent type.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.VectorizableFieldCollection">
            <summary>
            Contains all vectorizable field ranges in the scope of its parent type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry">
            <summary>
            Represents a vectorizable sub range in the scope of a structure type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.#ctor(ILGPU.IR.Types.TypeNode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new entry.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.Type">
            <summary>
            Returns the associated type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.Index">
            <summary>
            Returns the start index within the parent structure.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.Count">
            <summary>
            Returns the number of fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.Offset">
            <summary>
            Returns the base offset in bytes from the beginning of the field.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.Size">
            <summary>
            Returns the size of this chunk in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.RequiredAlignment">
            <summary>
            Returns the required alignment in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.Split(ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry@,ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry@)">
            <summary>
            Splits the current entry into two parts.
            </summary>
            <param name="first">The first part.</param>
            <param name="second">The second part.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.AddField">
            <summary>
            Adds a field to this entry.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.IsAligned(System.Int32)">
            <summary>
            Checks whether the base offset is properly alignment with respect to
            the given alignment in bytes.
            </summary>
            <param name="alignment">The underlying alignment in bytes.</param>
            <returns>True, if the range is properly aligned.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry.CanBeAligned(ILGPU.IR.Types.StructureType)">
            <summary>
            Returns true if this entry can be properly aligned.
            </summary>
            <param name="parentType">The parent structure type.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.#ctor(ILGPU.IR.Types.StructureType,System.Int32)">
            <summary>
            Constructs a new field collection.
            </summary>
            <param name="structureType">The parent structure type.</param>
            <param name="maxSizeInBytes">The maximum vector size in bytes.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.RegisterRange(ILGPU.IR.Types.StructureType,ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Entry@)">
            <summary>
            Registers the given range entry.
            </summary>
            <param name="structureType">The parent structure type.</param>
            <param name="entry">The entry to register.</param>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Count">
            <summary>
            Returns the number of entries.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.VectorizableFieldCollection.Item(System.Int32)">
            <summary>
            Returns the i-th entry.
            </summary>
            <param name="index">The entry index.</param>
            <returns>The i-th vector range entry.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.GetNumFields(ILGPU.IR.Types.TypeNode)">
            <summary>
            Gets the number of fields of the given type.
            </summary>
            <param name="typeNode">The type.</param>
            <returns>The number of nested fields (or 1).</returns>
        </member>
        <member name="F:ILGPU.IR.Types.StructureType.hashCode">
            <summary>
            Caches the internal hash code of all child nodes.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.StructureType.offsets">
            <summary>
            All underlying byte offsets.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.StructureType.remappedFields">
            <summary>
            Maps the original field index to the index of the rebuilt field.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.#ctor(ILGPU.IR.Types.IRTypeContext,ILGPU.IR.Types.StructureType.Builder@)">
            <summary>
            Constructs a new object type.
            </summary>
            <param name="typeContext">The parent type context.</param>
            <param name="builder">The current structure builder.</param>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.IsStructureType">
            <inheritdoc/>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.IsRootType">
            <inheritdoc/>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.DirectFields">
            <summary>
            Returns the high-level fields stored in this structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Fields">
            <summary>
            Returns all associated fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Offsets">
            <summary>
            Returns a readonly collection of all field offsets.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.NumFields">
            <summary>
            Returns the number of associated fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.StructureType.Item(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns the field type that corresponds to the given field access.
            </summary>
            <param name="fieldAccess">The field access.</param>
            <returns>The resolved field type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.GetVectorizableFields(System.Int32)">
            <summary>
            Returns a readonly collection of all vectorized field configurations that
            do not exceed the maximum size in bytes.
            </summary>
            <param name="maxSizeInBytes">The maximum vector size in bytes.</param>
            <returns>The vectorizable field collection.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.GetOffset(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Gets a specific field offset in bytes from the beginning of the structure.
            </summary>
            <param name="fieldAccess">The field reference.</param>
            <returns>The field offset in bytes.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.RemapFieldIndex(System.Int32)">
            <summary>
            Gets the remapped field index corresponding to the original structure.
            </summary>
            <param name="fieldIndex">The field index.</param>
            <returns>The adjusted field index.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Get``1(``0,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Gets a nested type that corresponds to the given span.
            </summary>
            <typeparam name="TTypeContext">the parent type context.</typeparam>
            <param name="typeContext">The type context.</param>
            <param name="span">The span to slice.</param>
            <returns>The nested type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.ConvertFieldTypes``2(``0,``1)">
            <summary>
            Converts all field types using the type converter provided.
            </summary>
            <typeparam name="TTypeContext">The type context to use.</typeparam>
            <typeparam name="TTypeConverter">The type converter to use.</typeparam>
            <param name="typeContext">The type context instance to use.</param>
            <param name="typeConverter">The type converter instance to use.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Slice``1(``0,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Slices a structure type out of this type.
            </summary>
            <typeparam name="TTypeContext">the parent type context.</typeparam>
            <param name="typeContext">The type context.</param>
            <param name="span">The span to slice.</param>
            <returns>The sliced structure type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.SliceRecursive(ILGPU.IR.Types.StructureType.Builder@,System.Int32@,ILGPU.IR.Values.FieldSpan@)">
            <summary>
            Slices a subset of fields recursively.
            </summary>
            <param name="builder">The target builder to append to.</param>
            <param name="index">The current index.</param>
            <param name="span">The source span to slice.</param>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.GetManagedType">
            <summary>
            Creates a managed type that corresponds to this structure type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all fields in this type.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.System#Collections#Generic#IEnumerable{(ILGPU#IR#Types#TypeNode,ILGPU#IR#Values#FieldAccess)}#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all fields in this type.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all fields in this type.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="M:ILGPU.IR.Types.StructureType.ToString">
            <summary cref="M:ILGPU.IR.Types.TypeNode.ToString"/>
        </member>
        <member name="T:ILGPU.IR.Types.ITypeConverter`1">
            <summary>
            An abstract type converter to convert specific types.
            </summary>
            <typeparam name="TType">The type to convert.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Types.ITypeConverter`1.ConvertType``1(``0,`0)">
            <summary>
            Converts the given type node.
            </summary>
            <typeparam name="TTypeContext">The type converter to use.</typeparam>
            <param name="typeContext">The type converter instance to use.</param>
            <param name="type">The type to convert.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.ITypeConverter`1.GetNumFields(`0)">
            <summary>
            Resolves the number of element fields per type instance.
            </summary>
            <param name="type">The parent type.</param>
        </member>
        <member name="T:ILGPU.IR.Types.TypeConverter`1">
            <summary>
            A converter adapter to convert nested types within structures.
            </summary>
            <typeparam name="TType">The node type.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Types.TypeConverter`1.#ctor">
            <summary>
            Constructs a new type converter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeConverter`1.ConvertType``1(``0,`0)">
            <summary>
            Converts the given type node.
            </summary>
            <typeparam name="TTypeContext">The type context to use.</typeparam>
            <param name="typeContext">The type context instance to use.</param>
            <param name="type">The type to convert.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeConverter`1.GetNumFields(`0)">
            <summary>
            Resolves the number of element fields per type instance.
            </summary>
            <param name="type">The parent type.</param>
        </member>
        <member name="M:ILGPU.IR.Types.TypeConverter`1.ConvertType``1(``0,ILGPU.IR.Types.TypeNode)">
            <summary>
            Converts the given type node.
            </summary>
            <typeparam name="TTypeContext">The type context to use.</typeparam>
            <param name="typeContext">The type context instance to use.</param>
            <param name="type">The type to convert.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeConverter`1.GetNumFields(ILGPU.IR.Types.TypeNode)">
            <summary>
            Resolves the number of element fields per type instance.
            </summary>
            <param name="type">The parent type.</param>
        </member>
        <member name="T:ILGPU.IR.Types.TypeLowering`1">
            <summary>
            The type converter used during lowering phases.
            </summary>
            <typeparam name="TType">The source type to lower.</typeparam>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.#ctor(ILGPU.IR.Method.Builder)">
            <summary>
            Constructs a new type lowering.
            </summary>
            <param name="builder">The parent builder.</param>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.#ctor(ILGPU.IR.Construction.IRBuilder)">
            <summary>
            Constructs a new type lowering.
            </summary>
            <param name="builder">The parent builder.</param>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.#ctor(ILGPU.IR.Types.IRTypeContext)">
            <summary>
            Constructs a new type lowering.
            </summary>
            <param name="typeContext">The parent type context.</param>
        </member>
        <member name="P:ILGPU.IR.Types.TypeLowering`1.TypeContext">
            <summary>
            Returns the associated type context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeLowering`1.Item(ILGPU.IR.Value)">
            <summary>
            Maps the given new value to its original type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.ConvertType(ILGPU.IR.Value)">
            <summary>
            Converts the given value type.
            </summary>
            <param name="value">The value to convert the type.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.ConvertType(ILGPU.IR.Types.TypeNode)">
            <summary>
            Converts the given type node.
            </summary>
            <param name="type">The type to convert.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.ComputeSpan(ILGPU.IR.Value,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Computes a new field span while taking all structure field changes into
            account.
            </summary>
            <param name="value">The source value.</param>
            <param name="fieldSpan">The source span.</param>
            <returns>The target field span.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.IsTypeDependent(ILGPU.IR.Types.TypeNode)">
            <summary>
            Returns true if the given type has a type dependency.
            </summary>
            <param name="type">The type to test.</param>
            <returns>True, if the given type has a type dependency.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.Register(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode)">
            <summary>
            Registers the given value-type mapping.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The mapped type.</param>
            <returns>True.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeLowering`1.TryRegister(ILGPU.IR.Value,ILGPU.IR.Types.TypeNode)">
            <summary>
            Tries to register the given value-type mapping.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The mapped type.</param>
            <returns>True, if the given type is type dependent.</returns>
        </member>
        <member name="T:ILGPU.IR.Types.TypeInformationManager">
            <summary>
            Represents a context that manages type information.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.TypeInformationManager.TypeInformation">
            <summary>
            Represents a type information about a managed type.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.TypeInformation.#ctor(ILGPU.IR.Types.TypeInformationManager,System.Type,System.Int32,System.Collections.Immutable.ImmutableArray{System.Reflection.FieldInfo},System.Collections.Immutable.ImmutableArray{System.Int32},System.Collections.Immutable.ImmutableArray{System.Type},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new type information.
            </summary>
            <param name="parent">The parent type manager.</param>
            <param name="type">The .Net type.</param>
            <param name="size">The size in bytes (if any).</param>
            <param name="fields">All managed fields.</param>
            <param name="fieldOffsets">All field offsets.</param>
            <param name="fieldTypes">All managed field types.</param>
            <param name="numFlattenedFields">The number of flattened fields.</param>
            <param name="isBlittable">True, if this type is blittable.</param>
            <param name="isValidKernelParameter">
            True, if a valid kernel parameter.
            </param>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.Parent">
            <summary>
            Returns the parent information manager.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.ManagedType">
            <summary>
            Returns the .Net type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.Size">
            <summary>
            Returns the type size in bytes (if any).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.NumFields">
            <summary>
            Returns the number of fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.Fields">
            <summary>
            Returns all fields.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.FieldTypes">
            <summary>
            Returns all field types.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.FieldOffsets">
            <summary>
            Returns all field offsets.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.IsBlittable">
            <summary>
            Returns true if the associated .Net type is blittable.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.IsValidKernelParameter">
            <summary>
            Returns true if the type can be used as a kernel parameter.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeInformationManager.TypeInformation.NumFlattendedFields">
            <summary>
            Returns the number of flattened fields.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.TypeInformation.GetFieldTypeInfo(System.Int32)">
            <summary>
            Gets nested field type information.
            </summary>
            <param name="index">The field index.</param>
            <returns>The resulting type information.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.TypeInformation.TryResolveField(System.Int32,System.Reflection.FieldInfo@)">
            <summary>
            Tries to resolve the field of the given field.
            </summary>
            <param name="index">The target index.</param>
            <param name="field">The resolved field.</param>
            <returns>True, if the field could be resolved.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.TypeInformation.GetAbsoluteIndex(System.Reflection.FieldInfo)">
            <summary>
            Gets the absolute index of the given field.
            </summary>
            <param name="info">The field to get.</param>
            <returns>The absolute field index.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.TypeInformation.ToString">
            <summary>
            Returns the string representation of this type.
            </summary>
            <returns>The string representation of this type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.#ctor">
            <summary>
            Constructs a new type context.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.InitIntrinsicTypeInformation">
            <summary>
            Initializes intrinsic type information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.GetTypeInfo(System.Type)">
            <summary>
            Resolves type information for the given type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>The resolved type information.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.GetTypeInfoInternal(System.Type)">
            <summary>
            Resolves type information for the given type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>The resolved type information.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.AddTypeInfo(System.Type,System.Boolean)">
            <summary>
            Adds primitive type information.
            </summary>
            <param name="type">The type to add.</param>
            <param name="isBlittable">True, if this type is blittable.</param>
            <returns>The created type information instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.AddTypeInfo(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Adds primitive type information.
            </summary>
            <param name="type">The type to add.</param>
            <param name="isBlittable">True, if this type is blittable.</param>
            <param name="isValidKernelParameter">
            True, if a valid kernel parameter.
            </param>
            <returns>The created type information instance.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.CreateTypeInfo(System.Type)">
            <summary>
            Creates new type information and registers the created object
            in the internal cache.
            </summary>
            <param name="type">The base .Net type.</param>
            <returns>The created type information object.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.CreateCompoundTypeInfo(System.Type)">
            <summary>
            Creates new type information for compound types.
            </summary>
            <param name="type">The base .Net type.</param>
            <returns>The created type information object.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.IR.Types.TypeInformationManager.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.IR.Types.TypeFlags">
            <summary>
            Special type flags that provide additional information about the
            current type and all nested elements.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.TypeFlags.None">
            <summary>
            No special flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.TypeFlags.PointerDependent">
            <summary>
            The type is either a pointer or contains a pointer.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.TypeFlags.ViewDependent">
            <summary>
            The type is either a view or contains a view.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.TypeFlags.StructureDependent">
            <summary>
            The type is either a structure or contains a structure.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.TypeFlags.ArrayDependent">
            <summary>
            The type is either an array or contains an array.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Types.TypeFlags.AddressSpaceDependent">
            <summary>
            The type depends on an address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.ITypeNode">
            <summary>
            An abstract type node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ITypeNode.LoadManagedType">
            <summary>
            The type representation in the managed world.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Types.TypeNode">
            <summary>
            Represents a type in the scope of the ILGPU IR.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.Align(System.Int64,System.Int32)">
            <summary>
            Computes a properly aligned offset in bytes for the given field size.
            </summary>
            <param name="offset">The current.</param>
            <param name="fieldAlignment">The field size in bytes.</param>
            <returns>The aligned field offset.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.Align(System.Int32,System.Int32)">
            <summary>
            Computes a properly aligned offset in bytes for the given field size.
            </summary>
            <param name="offset">The current.</param>
            <param name="fieldAlignment">The field size in bytes.</param>
            <returns>The aligned field offset.</returns>
        </member>
        <member name="F:ILGPU.IR.Types.TypeNode.managedType">
            <summary>
            The managed type representation of this IR type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.#ctor(ILGPU.IR.Types.IRTypeContext)">
            <summary>
            Constructs a new type.
            </summary>
            <param name="typeContext">The parent type context.</param>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.TypeContext">
            <summary>
            Returns the parent type context.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.RuntimeSystem">
            <summary>
            Returns the urrent runtime system.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.Size">
            <summary>
            The size of the type in bytes (if the type is in its lowered representation).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.Alignment">
            <summary>
            The type alignment in bytes (if the type is in its lowered representation).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsVoidType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.VoidType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsStringType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.StringType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsPrimitiveType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.PrimitiveType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsViewOrPointerType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.AddressSpaceType"/>
            or a <see cref="T:ILGPU.IR.Types.ViewType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsPointerType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.PointerType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsViewType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.ViewType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsArrayType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.ArrayType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsObjectType">
            <summary>
            Returns true if the current type is an <see cref="T:ILGPU.IR.Types.ObjectType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsStructureType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.StructureType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsPaddingType">
            <summary>
            Returns true if the current type is a <see cref="T:ILGPU.IR.Types.PaddingType"/>.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsRootType">
            <summary>
            Returns true if this type is a root object type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.BasicValueType">
            <summary>
            Returns the basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.Flags">
            <summary>
            Returns all type flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Types.TypeNode.IsLowered">
            <summary>
            Returns true if this type corresponds to its lowered representation.
            </summary>
            <remarks>
            Lowered in this scope means that this type does not contains nested arrays
            and views. In this case the size and alignment information can be used
            immediately for interop purposes.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.LoadManagedType">
            <summary>
            The type representation in the managed world.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.HasFlags(ILGPU.IR.Types.TypeFlags)">
            <summary>
            Returns true if the given flags are set.
            </summary>
            <param name="typeFlags">The flags to test.</param>
            <returns>True, if the given flags are set.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.AddFlags(ILGPU.IR.Types.TypeFlags)">
            <summary>
            Adds the given flags to the current type.
            </summary>
            <param name="typeFlags">The flags to add.</param>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.GetManagedType">
            <summary>
            Creates a managed type that corresponds to this IR type.
            </summary>
            <returns>The created managed type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.As``1(ILGPU.IR.ILocation)">
            <summary>
            Converts the current type to the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type node.</typeparam>
            <param name="location">The location to use for assertions.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include the current debug information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.GetHashCode">
            <summary>
            Returns the hash code of this type node.
            </summary>
            <returns>The hash code of this type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current type.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current type.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.TypeNode.ToString">
            <summary>
            Returns the string representation of this node.
            </summary>
            <returns>The string representation of this node.</returns>
        </member>
        <member name="T:ILGPU.IR.Types.VoidType">
            <summary>
            Represents a void type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.#ctor(ILGPU.IR.Types.IRTypeContext)">
            <summary>
            Constructs a new void type.
            </summary>
            <param name="typeContext">The parent type context.</param>
        </member>
        <member name="P:ILGPU.IR.Types.VoidType.IsVoidType">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.GetManagedType">
            <summary>
            Returns the void type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.GetHashCode">
            <summary cref="M:ILGPU.IR.Types.TypeNode.GetHashCode"/>
        </member>
        <member name="M:ILGPU.IR.Types.VoidType.Equals(System.Object)">
            <summary cref="M:ILGPU.IR.Types.TypeNode.Equals(System.Object)"/>
        </member>
        <member name="T:ILGPU.IR.Types.ValueTuples">
            <summary>
            Contains helper functions for supporting System.ValueTuple.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ValueTuples.GetOffsets(System.Type[])">
            <summary>
            Retrieves the offsets for the fields in a value tuple that use the supplied
            generic type arguments.
            </summary>
            <param name="types">The generic type arguments of the value tuple.</param>
            <returns>Offsets for the fields of the value tuple.</returns>
        </member>
        <member name="M:ILGPU.IR.Types.ValueTuples.GetOffsets1``1">
            <summary>
            Retrieves the offsets for the fields in the given value tuple.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ValueTuples.GetOffsets2``2">
            <summary>
            Retrieves the offsets for the fields in the given value tuple.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ValueTuples.GetOffsets3``3">
            <summary>
            Retrieves the offsets for the fields in the given value tuple.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ValueTuples.GetOffsets4``4">
            <summary>
            Retrieves the offsets for the fields in the given value tuple.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ValueTuples.GetOffsets5``5">
            <summary>
            Retrieves the offsets for the fields in the given value tuple.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ValueTuples.GetOffsets6``6">
            <summary>
            Retrieves the offsets for the fields in the given value tuple.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ValueTuples.GetOffsets7``7">
            <summary>
            Retrieves the offsets for the fields in the given value tuple.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Types.ValueTuples.GetOffsets8``8">
            <summary>
            Retrieves the offsets for the fields in the given value tuple.
            </summary>
        </member>
        <member name="T:ILGPU.IR.IValueBuilder">
            <summary>
            An abstract value builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValueBuilder.IRBuilder">
            <summary>
            Returns the parent IR builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValueBuilder.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValueBuilder.Count">
            <summary>
            The number of field values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValueBuilder.Item(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns the value that corresponds to the given field access.
            </summary>
            <param name="access">The field access.</param>
            <returns>The resolved field type.</returns>
        </member>
        <member name="M:ILGPU.IR.IValueBuilder.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given value to the instance builder.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.IValueBuilder.Seal">
            <summary>
            Constructs a new value that represents the current value builder.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="T:ILGPU.IR.ValueBuilder">
            <summary>
            Extensions for <see cref="T:ILGPU.IR.IValueBuilder"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueBuilder.ToValueBuilder``1(``0)">
            <summary>
            Constructs a new <see cref="T:ILGPU.IR.ValueBuilder`1"/> wrapper.
            </summary>
            <typeparam name="TBuilder">The builder type.</typeparam>
            <param name="valueBuilder">The value builder instance.</param>
            <returns>The created wrapper class.</returns>
        </member>
        <member name="T:ILGPU.IR.ValueBuilder`1">
            <summary>
            A wrapped <see cref="T:ILGPU.IR.IValueBuilder"/> that wraps value-based builder structures.
            </summary>
            <typeparam name="TBuilder">The structure-based builder type.</typeparam>
        </member>
        <member name="F:ILGPU.IR.ValueBuilder`1.nestedBuilder">
            <summary>
            The nested builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueBuilder`1.#ctor(`0)">
            <summary>
            Constructs a new value builder.
            </summary>
            <param name="builder">The underlying builder structure.</param>
        </member>
        <member name="P:ILGPU.IR.ValueBuilder`1.IRBuilder">
            <summary>
            Returns the parent IR builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.ValueBuilder`1.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.ValueBuilder`1.Count">
            <summary>
            The number of field values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.ValueBuilder`1.Item(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns the value that corresponds to the given field access.
            </summary>
            <param name="access">The field access.</param>
            <returns>The resolved field type.</returns>
        </member>
        <member name="P:ILGPU.IR.ValueBuilder`1.Builder">
            <summary>
            Returns a reference to the nested builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueBuilder`1.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given value to the instance builder.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.ValueBuilder`1.Seal">
            <summary>
            Constructs a new value that represents the current value builder.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.ValueBuilder`1.SealAs``1">
            <summary>
            Constructs a new value that represents the current value builder and returns
            
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.BaseAlignOperationValue">
            <summary>
            Represents an abstract alignment operation value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BaseAlignOperationValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs an alignment operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The underlying source.</param>
            <param name="alignmentInBytes">The alignment in bytes.</param>
        </member>
        <member name="P:ILGPU.IR.Values.BaseAlignOperationValue.AlignmentInBytes">
            <summary>
            Returns the alignment in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BaseAlignOperationValue.IsViewOperation">
            <summary>
            Returns true if the current operation works on a view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BaseAlignOperationValue.IsPointerOperation">
            <summary>
            Returns true if the current operation works on a pointer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BaseAlignOperationValue.GetAlignmentConstant">
            <summary>
            Tries to determine an explicit alignment compile-time constant (primarily
            for compiler analysis purposes). If this alignment information could not be
            resolved, the function returns the worst-case alignment of 1.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BaseAlignOperationValue.TryGetAlignmentConstant(System.Int32@)">
            <summary>
            Tries to determine a compile-time known alignment constant.
            </summary>
            <param name="alignmentConstant">
            The determined alignment constant (if any).
            </param>
            <returns>True, if an alignment constant could be determined.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.BaseAlignOperationValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.AlignTo">
            <summary>
            Aligns a pointer or a view to a specified alignment in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AlignTo.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs an aligned pointer/view.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="view">The underlying view.</param>
            <param name="alignmentInBytes">The alignment in bytes.</param>
        </member>
        <member name="P:ILGPU.IR.Values.AlignTo.StructureType">
            <summary>
            The structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AlignTo.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.AlignTo.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AlignTo.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AlignTo.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.AlignTo.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.AsAligned">
            <summary>
            Interprets the given pointer or view to be aligned to the given alignment in
            bytes.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AsAligned.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs an alignment interpretation value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="view">The underlying view.</param>
            <param name="alignmentInBytes">The alignment in bytes.</param>
        </member>
        <member name="P:ILGPU.IR.Values.AsAligned.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.AsAligned.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AsAligned.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AsAligned.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.AsAligned.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ArithmeticFlags">
            <summary>
            Represents flags of an arithmetic operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ArithmeticFlags.None">
            <summary>
            No special flags (default).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ArithmeticFlags.Overflow">
            <summary>
            The operation has overflow semantics.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ArithmeticFlags.Unsigned">
            <summary>
            The operation has unsigned semantics.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ArithmeticFlags.OverflowUnsigned">
            <summary>
            The operation has overflow semantics and the
            overflow check is based on unsigned semantics.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.ArithmeticValue">
            <summary>
            Represents an abstract arithmetic value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ArithmeticValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Constructs a new arithmetic value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.PrimitiveType">
            <summary>
            Returns the associated type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.Flags">
            <summary>
            Returns the operation flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.ArithmeticBasicValueType">
            <summary>
            Returns the associated arithmetic basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.CanOverflow">
            <summary>
            Returns true if the operation has enabled overflow semantics.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.IsUnsigned">
            <summary>
            Returns true if the operation has enabled unsigned semantics.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.IsIntOperation">
            <summary>
            Returns true if the operation works on integers.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArithmeticValue.IsFloatOperation">
            <summary>
            Returns true if the operation works on floats.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.UnaryArithmeticValue">
            <summary>
            Represents a unary arithmetic operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.UnaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Constructs a new unary arithmetic operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UnaryArithmeticValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.UnaryArithmeticValue.Kind">
            <summary>
            Returns the operation kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UnaryArithmeticValue.Value">
            <summary>
            Returns the operand.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnaryArithmeticValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BinaryArithmeticValue">
            <summary>
            Represents a binary arithmetic operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.InvertLogical(ILGPU.IR.Values.BinaryArithmeticKind)">
            <summary>
            Inverts the given binary arithmetic kind.
            </summary>
            <param name="kind">The kind to invert.</param>
            <returns>The inverted operation (if inverted).</returns>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.TryInvertLogical(ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.IR.Values.BinaryArithmeticKind@)">
            <summary>
            Tries to invert the given binary arithmetic kind.
            </summary>
            <param name="kind">The kind to invert.</param>
            <param name="inverted">The inverted operation (if any).</param>
            <returns>True, if the given kind could be inverted.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.BinaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Constructs a new binary arithmetic value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.BinaryArithmeticValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.BinaryArithmeticValue.Kind">
            <summary>
            Returns the operation kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BinaryArithmeticValue.Left">
            <summary>
            Returns the left operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BinaryArithmeticValue.Right">
            <summary>
            Returns the right operand.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.BinaryArithmeticValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.TernaryArithmeticValue">
            <summary>
            Represents a binary arithmetic operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.GetLeftBinaryKind(ILGPU.IR.Values.TernaryArithmeticKind)">
            <summary>
            Returns the left hand binary operation of a fused ternary operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <returns>The resolved binary operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.GetRightBinaryKind(ILGPU.IR.Values.TernaryArithmeticKind)">
            <summary>
            Returns the right hand binary operation of a fused ternary operation.
            </summary>
            <param name="kind">The arithmetic kind.</param>
            <returns>The resolved binary operation.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.TernaryArithmeticKind,ILGPU.IR.Values.ArithmeticFlags)">
            <summary>
            Constructs a new ternary arithmetic value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <param name="third">The third operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.TernaryArithmeticValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.TernaryArithmeticValue.Kind">
            <summary>
            Returns the operation kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.TernaryArithmeticValue.First">
            <summary>
            Returns the first operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.TernaryArithmeticValue.Second">
            <summary>
            Returns the second operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.TernaryArithmeticValue.Third">
            <summary>
            Returns the third operand.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.TernaryArithmeticValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.NewArray">
            <summary>
            Represents an allocation operation of a new array in a particular address space.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.NewArray.Builder">
            <summary>
            An instance builder for array values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.NewArray.Builder.#ctor(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,ILGPU.IR.Types.ArrayType)">
            <summary>
            Initializes a new array value builder.
            </summary>
            <param name="irBuilder">The current IR builder.</param>
            <param name="location">The current location.</param>
            <param name="arrayType">The parent array type of this value.</param>
        </member>
        <member name="P:ILGPU.IR.Values.NewArray.Builder.IRBuilder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.NewArray.Builder.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.NewArray.Builder.ArrayType">
            <summary>
            Returns the array type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.NewArray.Builder.Count">
            <summary>
            The number of dimensions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.NewArray.Builder.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given dimension length to the array value builder.
            </summary>
            <param name="dimension">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.NewArray.Builder.Seal">
            <summary>
            Constructs a new value that represents the current array value.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.NewArray.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.ArrayType,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Constructs a array.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="arrayType">The parent array type of this array.</param>
            <param name="dimensions">The list of all array dimension lengths.</param>
        </member>
        <member name="P:ILGPU.IR.Values.NewArray.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.NewArray.Type">
            <summary>
            Returns the array type of this value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.NewArray.ElementType">
            <summary>
            Returns the array's element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.NewArray.NumDimensions">
            <summary>
            Returns the number of array dimensions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.NewArray.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Values.NewArray.Accept``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Values.NewArray.ToPrefixString">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.IR.Values.IArrayValueOperation">
            <summary>
            Represents an abstract array value operation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.IArrayValueOperation.ArrayValue">
            <summary>
            Returns the source array value.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.GetArrayLength">
            <summary>
            Gets the length of an array value or a particular array dimension.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayLength.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a array.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="arrayValue">The parent array value.</param>
            <param name="dimension">The value of the dimension to get.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GetArrayLength.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:ILGPU.IR.Values.GetArrayLength.ArrayValue">
            <summary>
            Returns the source array value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.GetArrayLength.Dimension">
            <summary>
            Returns the source dimension.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.GetArrayLength.IsFullLength">
            <summary>
            Returns true if this length value returns the full linear length of the array.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayLength.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayLength.Accept``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayLength.ToPrefixString">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Values.GetArrayLength.ToArgString">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.IR.Values.AtomicFlags">
            <summary>
            Represents flags of an atomic operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicFlags.None">
            <summary>
            No special flags (default).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicFlags.Unsigned">
            <summary>
            The operation has unsigned semantics.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.AtomicValue">
            <summary>
            Represents a general atomic value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.AtomicFlags)">
            <summary>
            Constructs a new abstract atomic value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.Target">
            <summary>
            Returns the target view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.TargetAddressSpace">
            <summary>
            Returns the target address space this atomic operates on.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.Value">
            <summary>
            Returns the target value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.Flags">
            <summary>
            Returns the operation flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.ArithmeticBasicValueType">
            <summary>
            Returns the associated arithmetic basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicValue.IsUnsigned">
            <summary>
            Returns true if the operation has enabled unsigned semantics.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="T:ILGPU.IR.Values.AtomicKind">
            <summary>
            Represents the kind of an atomic operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Exchange">
            <summary>
            An XCHG operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Add">
            <summary>
            An add operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.And">
            <summary>
            An and operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Or">
            <summary>
            An or operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Xor">
            <summary>
            An xor operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Max">
            <summary>
            A max operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.AtomicKind.Min">
            <summary>
            A min operation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.GenericAtomic">
            <summary>
            Represents a generic atomic operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GenericAtomic.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.AtomicKind,ILGPU.IR.Values.AtomicFlags)">
            <summary>
            Constructs a new generic atomic operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="target">The target.</param>
            <param name="value">The value to store.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GenericAtomic.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.GenericAtomic.Kind">
            <summary>
            The operation kind.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GenericAtomic.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GenericAtomic.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GenericAtomic.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.GenericAtomic.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.AtomicCAS">
            <summary>
            Represents an atomic compare-and-swap operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicCAS.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.AtomicFlags)">
            <summary>
            Constructs a new atomic compare-and-swap operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="target">The target.</param>
            <param name="value">The value to store.</param>
            <param name="compareValue">The comparison value.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicCAS.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.AtomicCAS.CompareValue">
            <summary>
            Returns the comparison value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicCAS.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicCAS.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicCAS.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.AtomicCAS.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.CastValue">
            <summary>
            Represents an abstract cast operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.CastValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The value to convert.</param>
        </member>
        <member name="P:ILGPU.IR.Values.CastValue.Value">
            <summary>
            Returns the operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CastValue.SourceType">
            <summary>
            Returns the source type to convert the value from.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CastValue.TargetType">
            <summary>
            Returns the target type to convert the value to.
            </summary>
            <remarks>This is equivalent to asking for the type.</remarks>
        </member>
        <member name="M:ILGPU.IR.Values.CastValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.PointerIntCast">
            <summary>
            An abstract base class for converting pointers to integers and vice versa.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PointerIntCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The value to cast.</param>
        </member>
        <member name="T:ILGPU.IR.Values.IntAsPointerCast">
            <summary>
            Casts from an integer to a raw pointer value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsPointerCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The view to cast.</param>
        </member>
        <member name="P:ILGPU.IR.Values.IntAsPointerCast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsPointerCast.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsPointerCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsPointerCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsPointerCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.PointerAsIntCast">
            <summary>
            Casts from a pointer value to an integer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PointerAsIntCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.PrimitiveType)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The pointer to cast.</param>
            <param name="targetType">The target int type to cast to.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PointerAsIntCast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.PointerAsIntCast.TargetType">
            <summary>
            Returns the target type to convert the value to.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PointerAsIntCast.TargetBasicValueType">
            <summary>
            Returns the target basic value type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PointerAsIntCast.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PointerAsIntCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PointerAsIntCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PointerAsIntCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BaseAddressSpaceCast">
            <summary>
            Represents an abstract cast operation that works on address spaces.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BaseAddressSpaceCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The value to convert.</param>
        </member>
        <member name="P:ILGPU.IR.Values.BaseAddressSpaceCast.Type">
            <summary>
            Returns the associated type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BaseAddressSpaceCast.SourceType">
            <summary>
            Returns the source type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.PointerCast">
            <summary>
            Casts the type of a pointer to a different type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new convert value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The value to convert.</param>
            <param name="targetElementType">The target element type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PointerCast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.PointerCast.SourceElementType">
            <summary>
            Returns the source element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PointerCast.TargetElementType">
            <summary>
            Returns the target element type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.PointerCast.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.AddressSpaceCast">
            <summary>
            Cast a pointer from one address space to another.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new convert value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The value to convert.</param>
            <param name="targetAddressSpace">The target address space.</param>
        </member>
        <member name="P:ILGPU.IR.Values.AddressSpaceCast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.AddressSpaceCast.TargetAddressSpace">
            <summary>
            Returns the target address space.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AddressSpaceCast.IsViewCast">
            <summary>
            Returns true if the current access works on a view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.AddressSpaceCast.IsPointerCast">
            <summary>
            Returns true if the current access works on a pointer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.AddressSpaceCast.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ViewCast">
            <summary>
            Casts a view from one element type to another.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="sourceView">The view to cast.</param>
            <param name="targetElementType">The target element type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ViewCast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.ViewCast.SourceElementType">
            <summary>
            Returns the source element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ViewCast.TargetElementType">
            <summary>
            Returns the target element type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.ViewCast.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ArrayToViewCast">
            <summary>
            Casts an array to a linear array view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayToViewCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="sourceArray">The source array to cast to a view.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ArrayToViewCast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.ArrayToViewCast.SourceType">
            <summary>
            Returns the array type of the source value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ArrayToViewCast.ElementType">
            <summary>
            Returns the array element type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayToViewCast.ComputeType(ILGPU.IR.ValueInitializer@)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayToViewCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayToViewCast.Accept``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayToViewCast.ToPrefixString">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Values.ArrayToViewCast.ToArgString">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.IR.Values.BitCast">
            <summary>
            Casts from one value type to another while reinterpreting
            the value as another type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BitCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.PrimitiveType)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The view to cast.</param>
            <param name="targetType">The primitive target type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.BitCast.TargetPrimitiveType">
            <summary>
            Returns the target type to convert the value to.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BitCast.Is32Bit">
            <summary>
            Returns true if this type represents a 32 bit type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BitCast.Is64Bit">
            <summary>
            Returns true if this type represents a 64 bit type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BitCast.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BitCast.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.FloatAsIntCast">
            <summary>
            Casts from a float to an int while preserving bits.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FloatAsIntCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.PrimitiveType)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The view to cast.</param>
            <param name="targetType">The primitive target type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.FloatAsIntCast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.FloatAsIntCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.FloatAsIntCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.FloatAsIntCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.IntAsFloatCast">
            <summary>
            Casts from an int to a float while preserving bits.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsFloatCast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.PrimitiveType)">
            <summary>
            Constructs a new cast value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The view to cast.</param>
            <param name="targetType">The primitive target type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.IntAsFloatCast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsFloatCast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsFloatCast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IntAsFloatCast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ClassValue">
            <summary>
            An abstract class value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ClassValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new abstract class value.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="T:ILGPU.IR.Values.ClassOperationValue">
            <summary>
            Represents an operation on object values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ClassOperationValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new abstract object operation.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ClassOperationValue.ObjectValue">
            <summary>
            Returns the object value to load from.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ClassOperationValue.ObjectType">
            <summary>
            Returns the object type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.CompareKind">
            <summary>
            Represents the kind of a compare node.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.Equal">
            <summary>
            An equal comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.NotEqual">
            <summary>
            A not-equal comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.LessThan">
            <summary>
            A less-than comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.LessEqual">
            <summary>
            A less-equal comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.GreaterThan">
            <summary>
            A greater-than comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareKind.GreaterEqual">
            <summary>
            A greater-equal comparison.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.CompareFlags">
            <summary>
            Represents special flags of a comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareFlags.None">
            <summary>
            No special flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareFlags.UnsignedOrUnordered">
            <summary>
            Specifies an unsigned (int) or an unordered
            (float) comparison.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.CompareValue">
            <summary>
            Represents a comparison.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareValue.Inverted">
            <summary>
            A mapping to inverted compare kinds.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareValue.Swapped">
            <summary>
            A mapping to swapped compare kinds to swap the operands.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CompareValue.StringOperations">
            <summary>
            A mapping to string representations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.UpdateFlags(ILGPU.IR.Values.CompareKind,ILGPU.IR.Values.CompareKind,ILGPU.BasicValueType,ILGPU.BasicValueType,ILGPU.IR.Values.CompareFlags@)">
            <summary>
            Updates the compare flags according to the potentially updated operation
            kind.
            </summary>
            <param name="kind">The current operation kind.</param>
            <param name="newKind">The new (potentially updated) operation kind.</param>
            <param name="leftType">The left basic value type.</param>
            <param name="rightType">The right basic value type.</param>
            <param name="flags">The current flags to be updated.</param>
            <returns>The value of <paramref name="newKind"/>.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.Invert(ILGPU.IR.Values.CompareKind,ILGPU.BasicValueType,ILGPU.BasicValueType,ILGPU.IR.Values.CompareFlags@)">
            <summary>
            Inverts the given compare kind.
            </summary>
            <param name="kind">The compare kind to invert.</param>
            <param name="leftType">The basic value type of the left operand..</param>
            <param name="rightType">The basic value type of the right operand.</param>
            <param name="flags">The compare flags that might be adjusted.</param>
            <returns>The inverted compare kind.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.SwapOperands(ILGPU.IR.Values.CompareKind,ILGPU.BasicValueType,ILGPU.BasicValueType,ILGPU.IR.Values.CompareFlags@)">
            <summary>
            Adjusts the given compare kind and the associated flags for swapping the
            operands of a compare operation.
            </summary>
            <param name="kind">The compare kind to invert.</param>
            <param name="leftType">The basic value type of the left operand..</param>
            <param name="rightType">The basic value type of the right operand.</param>
            <param name="flags">The compare flags that might be adjusted.</param>
            <returns>The adjusted compare kind.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.IsCommutative(ILGPU.IR.Values.CompareKind)">
            <summary>
            Returns true if the given kind is commutative.
            </summary>
            <param name="kind">The compare kind.</param>
            <returns>True, if the given kind is commutative.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.CompareKind,ILGPU.IR.Values.CompareFlags)">
            <summary>
            Constructs a new compare value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="kind">The operation kind.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.Left">
            <summary>
            Returns the left operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.Right">
            <summary>
            Returns the right operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.Kind">
            <summary>
            Returns the kind of this compare node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.Flags">
            <summary>
            Returns the associated flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.IsUnsignedOrUnordered">
            <summary>
            Returns true if the operation has enabled unsigned or unordered semantics.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.CompareValue.CompareType">
            <summary>
            Returns the comparison type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.CompareValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ConstantNode">
            <summary>
            Represents a constant value that will be instantiated.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConstantNode.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new constant value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="constantType">The type of the constant node.</param>
        </member>
        <member name="T:ILGPU.IR.Values.NullValue">
            <summary>
            Represents an immutable null value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.NullValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new object value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="type">The object type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.NullValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.NullValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.NullValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.NullValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.NullValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.PrimitiveValue">
            <summary>
            Represents a primitive value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.BasicValueType,System.Int64)">
            <summary>
            Constructs a new primitive constant.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="basicValueType">The basic value type.</param>
            <param name="value">The raw value.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.BasicValueType">
            <summary>
            Returns the associated basic type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.PrimitiveType">
            <summary>
            Returns the associated primitive type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Int1Value">
            <summary>
            Returns the value as i1.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Int8Value">
            <summary>
            Returns the value as si8.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Int16Value">
            <summary>
            Returns the value as si16.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Int32Value">
            <summary>
            Returns the value as si32.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Int64Value">
            <summary>
            Returns the value as si64.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.UInt8Value">
            <summary>
            Returns the value as u8.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.UInt16Value">
            <summary>
            Returns the value as u16.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.UInt32Value">
            <summary>
            Returns the value as u32.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.UInt64Value">
            <summary>
            Returns the value as u64.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Float16Value">
            <summary>
            Returns the value as f16.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Float32Value">
            <summary>
            Returns the value as f32.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.Float64Value">
            <summary>
            Returns the value as f64.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.IsBool">
            <summary>
            Returns true if the value is a bool.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.IsInt">
            <summary>
            Returns true if the value is an integer.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.IsFloat">
            <summary>
            Returns true if the value is a float.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.RawValue">
            <summary>
            Returns the underlying raw value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PrimitiveValue.IsZero">
            <summary>
            Returns true if this value represents the constant 0.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.HasIntValue(System.Int64)">
            <summary>
            Returns true if this constant represents the given raw integer value.
            </summary>
            <param name="value">The value to test.</param>
            <returns>
            True, if this constant represents the given raw integer value.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.HasFloatValue(System.Single,System.Double)">
            <summary>
            Returns true if this constant represents the given float values.
            </summary>
            <param name="f32Value">The 32-bit float value.</param>
            <param name="f64Value">The 64-bit float value.</param>
            <returns>True, if this constant the given float values.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.HasValue(System.Int64,System.Single,System.Double)">
            <summary>
            Returns true if this constant represents one of the given values.
            </summary>
            <param name="value">The integer value.</param>
            <param name="f32Value">The 32-bit float value.</param>
            <param name="f64Value">The 64-bit float value.</param>
            <returns>True, if this constant represents on the given values.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.ToValueString">
            <summary>
            Returns the encapsulated value as string.
            </summary>
            <returns>The string representation of the encapsulated value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.PrimitiveValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.StringValue">
            <summary>
            Represents an immutable string value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StringValue.#ctor(ILGPU.IR.ValueInitializer@,System.String,System.Text.Encoding)">
            <summary>
            Constructs a new string constant.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The string value.</param>
            <param name="encoding">The string encoding.</param>
        </member>
        <member name="P:ILGPU.IR.Values.StringValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.StringValue.StringType">
            <summary>
            Returns the associated type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StringValue.String">
            <summary>
            Returns the associated string constant.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StringValue.Encoding">
            <summary>
            Returns the associated encoding.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StringValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.StringValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.StringValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.StringValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ConvertFlags">
            <summary>
            Flags of a convert operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ConvertFlags.None">
            <summary>
            No flags (default).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ConvertFlags.SourceUnsigned">
            <summary>
            The convert operation treats the input value as unsigned.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ConvertFlags.TargetUnsigned">
            <summary>
            The convert operation results in an unsigned value.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.ConvertFlagsExtensions">
            <summary>
            Internal conversion flags extensions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertFlagsExtensions.ToSourceUnsignedFlags(ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Converts the given flags into source unsigned flags.
            </summary>
            <param name="flags">The flags to convert.</param>
            <returns>The converted flags.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.ConvertValue">
            <summary>
            Converts a node into a target type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode,ILGPU.IR.Values.ConvertFlags)">
            <summary>
            Constructs a new convert value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The value to convert.</param>
            <param name="targetType">The target type to convert the value to.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.Value">
            <summary>
            Returns the operand.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.Flags">
            <summary>
            Returns the associated flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.SourceType">
            <summary>
            Returns the source type to convert the value from.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.TargetType">
            <summary>
            Returns the target type to convert the value to.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.IsSourceUnsigned">
            <summary>
            Returns true if the operation has enabled unsigned semantics.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConvertValue.IsResultUnsigned">
            <summary>
            Returns true if the operation has enabled unsigned semantics.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.ConvertValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.DebugAssertOperation">
            <summary>
            Represents a debug assert operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DebugAssertOperation.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new debug operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="condition">The assert condition.</param>
            <param name="message">The debug message.</param>
        </member>
        <member name="P:ILGPU.IR.Values.DebugAssertOperation.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.DebugAssertOperation.Condition">
            <summary>
            The debug condition.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.DebugAssertOperation.Message">
            <summary>
            Returns the message.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DebugAssertOperation.GetLocationInfo">
            <summary>
            Determines the current location information.
            </summary>
            <returns>The location information.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.DebugAssertOperation.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.DebugAssertOperation.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.DebugAssertOperation.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.DebugAssertOperation.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.DebugAssertOperation.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.DeviceConstantValue">
            <summary>
            Represents a device constant inside a kernel.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DeviceConstantValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="constantType">The constant type node.</param>
        </member>
        <member name="T:ILGPU.IR.Values.AcceleratorTypeValue">
            <summary>
            Represents the <see cref="P:ILGPU.Runtime.Accelerator.AcceleratorType"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.AcceleratorTypeValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.AcceleratorTypeValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.AcceleratorTypeValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.AcceleratorTypeValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.AcceleratorTypeValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.DeviceConstantDimension3D">
            <summary>
            Represents a dimension of a 3D device constant.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.DeviceConstantDimension3D.X">
            <summary>
            The X dimension.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.DeviceConstantDimension3D.Y">
            <summary>
            The Y dimension.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.DeviceConstantDimension3D.Z">
            <summary>
            The Z dimension.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.DeviceConstantDimensionValue">
            <summary>
            Represents a device constant inside a kernel.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DeviceConstantDimensionValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="dimension">The device constant dimension.</param>
        </member>
        <member name="P:ILGPU.IR.Values.DeviceConstantDimensionValue.Dimension">
            <summary>
            Returns the constant dimension.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DeviceConstantDimensionValue.ToArgString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GridIndexValue">
            <summary>
            Represents the <see cref="P:ILGPU.Grid.Index"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GridIndexValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="dimension">The constant dimension.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GridIndexValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.GridIndexValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GridIndexValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GridIndexValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GroupIndexValue">
            <summary>
            Represents the <see cref="P:ILGPU.Group.Index"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GroupIndexValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="dimension">The constant dimension.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GroupIndexValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.GroupIndexValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GroupIndexValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GroupIndexValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GridDimensionValue">
            <summary>
            Represents the <see cref="P:ILGPU.Grid.Dimension"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GridDimensionValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="dimension">The constant dimension.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GridDimensionValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.GridDimensionValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GridDimensionValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GridDimensionValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GroupDimensionValue">
            <summary>
            Represents the <see cref="P:ILGPU.Group.Dimension"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GroupDimensionValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.DeviceConstantDimension3D)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="dimension">The constant dimension.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GroupDimensionValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.GroupDimensionValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GroupDimensionValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GroupDimensionValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.WarpSizeValue">
            <summary>
            Represents the <see cref="P:ILGPU.Warp.WarpSize"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.WarpSizeValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.WarpSizeValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.WarpSizeValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.WarpSizeValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.WarpSizeValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.LaneIdxValue">
            <summary>
            Represents the <see cref="P:ILGPU.Warp.LaneIdx"/> property.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LaneIdxValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.LaneIdxValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.LaneIdxValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LaneIdxValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.LaneIdxValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.DynamicMemoryLengthValue">
            <summary>
            Represents the value returned by calling the <see cref="P:ILGPU.ArrayView`1.Length"/>
            property on a dynamic memory view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DynamicMemoryLengthValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="elementType">The element type node.</param>
            <param name="addressSpace">The target address space.</param>
        </member>
        <member name="P:ILGPU.IR.Values.DynamicMemoryLengthValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.DynamicMemoryLengthValue.ElementType">
            <summary>
            Returns the element type node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.DynamicMemoryLengthValue.AddressSpace">
            <summary>
            Returns the address space of this allocation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.DynamicMemoryLengthValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.DynamicMemoryLengthValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.DynamicMemoryLengthValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.HandleValue">
            <summary>
            Represents an internal .Net runtime handle value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.#ctor(ILGPU.IR.ValueInitializer@,System.Object)">
            <summary>
            Constructs a new internal .Net runtime handle value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="handle">The managed handle.</param>
        </member>
        <member name="P:ILGPU.IR.Values.HandleValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.HandleValue.Handle">
            <summary>
            Returns the underlying managed handle.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.GetHandle``1">
            <summary>
            Returns the underlying handle as type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The converted handle.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.HandleValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.IOValue">
            <summary>
            Represents an abstract Input/Output (IO) value with side effects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IOValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new debug operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="staticType">The static type.</param>
        </member>
        <member name="T:ILGPU.IR.Values.WriteToOutput">
            <summary>
            Represents a console output.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.WriteToOutput.ArgumentCollection">
            <summary>
            Represents an write argument collection.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.WriteToOutput.ArgumentCollection.Enumerator">
            <summary>
            Returns an enumerator to enumerate all values in argument collection.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.WriteToOutput.ArgumentCollection.Enumerator.#ctor(ILGPU.IR.Values.WriteToOutput)">
            <summary>
            Constructs a new use enumerator.
            </summary>
            <param name="writeToOutput">The parent write node.</param>
        </member>
        <member name="P:ILGPU.IR.Values.WriteToOutput.ArgumentCollection.Enumerator.WriteToOutput">
            <summary>
            Returns the associated node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.WriteToOutput.ArgumentCollection.Enumerator.Current">
            <summary>
            Returns the current use.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.WriteToOutput.ArgumentCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Values.WriteToOutput.ArgumentCollection.#ctor(ILGPU.IR.Values.WriteToOutput)">
            <summary>
            Constructs a new argument collection.
            </summary>
            <param name="writeToOutput">The parent write node.</param>
        </member>
        <member name="P:ILGPU.IR.Values.WriteToOutput.ArgumentCollection.WriteToOutput">
            <summary>
            Returns the associated node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.WriteToOutput.ArgumentCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all uses in the context
            of the parent scope.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="F:ILGPU.IR.Values.WriteToOutput.PrintFFormats">
            <summary>
            All native PrintF formats for all arithmetic basic value types.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.WriteToOutput.PrintFPointerFormat">
            <summary>
            The native PrintF pointer format.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.WriteToOutput.PrintFPercentFormat">
            <summary>
            The native PrintF percent format.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.WriteToOutput.GetPrintFFormat(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Returns the native PrintF format for the given basic value type.
            </summary>
            <param name="valueType">The basic value type.</param>
            <returns>The resolved PrintF format.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.WriteToOutput.ConvertToPrintFArgument(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Converts the given value into a printf compatible argument.
            </summary>
            <param name="builder">The current builder.</param>
            <param name="location">The current location.</param>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.WriteToOutput.#ctor(ILGPU.IR.ValueInitializer@,System.Collections.Immutable.ImmutableArray{ILGPU.Util.FormatString.FormatExpression},ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@,ILGPU.IR.Types.VoidType)">
            <summary>
            Constructs a new debug operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="expressions">The list of all format expressions.</param>
            <param name="arguments">The arguments to format.</param>
            <param name="voidType">The void type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.WriteToOutput.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.WriteToOutput.Expressions">
            <summary>
            Returns the underlying native format expressions.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.WriteToOutput.Arguments">
            <summary>
            Returns all direct argument references for further processing.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.WriteToOutput.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.WriteToOutput.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.WriteToOutput.ToPrintFExpression">
            <summary>
            Converts the internal format expressions into a printf string.
            </summary>
            <returns>The converted printf string.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.WriteToOutput.ToEscapedPrintFExpression">
            <summary>
            Converts the internal format expressions into an escaped sequence.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.WriteToOutput.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.WriteToOutput.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.IValueVisitor">
            <summary>
            A generic interface to visit values in the IR.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.MethodCall)">
            <summary>
            Visits the node.
            </summary>
            <param name="methodCall">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PhiValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="phiValue">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Parameter)">
            <summary>
            Visits the node.
            </summary>
            <param name="parameter">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UnaryArithmeticValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.BinaryArithmeticValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.TernaryArithmeticValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.CompareValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ConvertValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IntAsPointerCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PointerAsIntCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PointerCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AddressSpaceCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ViewCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ArrayToViewCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.FloatAsIntCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IntAsFloatCast)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Predicate)">
            <summary>
            Visits the given predicate.
            </summary>
            <param name="predicate">The predicate node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GenericAtomic)">
            <summary>
            Visits the node.
            </summary>
            <param name="atomic">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AtomicCAS)">
            <summary>
            Visits the node.
            </summary>
            <param name="atomicCAS">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Alloca)">
            <summary>
            Visits the node.
            </summary>
            <param name="alloca">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.MemoryBarrier)">
            <summary>
            Visits the node.
            </summary>
            <param name="barrier">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Load)">
            <summary>
            Visits the node.
            </summary>
            <param name="load">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Store)">
            <summary>
            Visits the node.
            </summary>
            <param name="store">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SubViewValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadElementAddress)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadArrayElementAddress)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LoadFieldAddress)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NewView)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetViewLength)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AlignTo)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AsAligned)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NewArray)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetArrayLength)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PrimitiveValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.StringValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.NullValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.StructureValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GetField)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SetField)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.AcceleratorTypeValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GridIndexValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GroupIndexValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GridDimensionValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.GroupDimensionValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WarpSizeValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LaneIdxValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.DynamicMemoryLengthValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.PredicateBarrier)">
            <summary>
            Visits the node.
            </summary>
            <param name="barrier">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Barrier)">
            <summary>
            Visits the node.
            </summary>
            <param name="barrier">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.Broadcast)">
            <summary>
            Visits the node.
            </summary>
            <param name="broadcast">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WarpShuffle)">
            <summary>
            Visits the node.
            </summary>
            <param name="shuffle">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SubWarpShuffle)">
            <summary>
            Visits the node.
            </summary>
            <param name="shuffle">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UndefinedValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="undefined">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.HandleValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="handle">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.DebugAssertOperation)">
            <summary>
            Visits the debug operation.
            </summary>
            <param name="debug">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.WriteToOutput)">
            <summary>
            Visits the IO write node.
            </summary>
            <param name="writeToOutput">The write node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.ReturnTerminator)">
            <summary>
            Visits the node.
            </summary>
            <param name="returnTerminator">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.UnconditionalBranch)">
            <summary>
            Visits the node.
            </summary>
            <param name="branch">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.IfBranch)">
            <summary>
            Visits the node.
            </summary>
            <param name="branch">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.SwitchBranch)">
            <summary>
            Visits the node.
            </summary>
            <param name="branch">The node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.IValueVisitor.Visit(ILGPU.IR.Values.LanguageEmitValue)">
            <summary>
            Visits the node.
            </summary>
            <param name="value">The node.</param>
        </member>
        <member name="T:ILGPU.IR.Values.LanguageKind">
            <summary>
            Represents the kind of inline language.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.LanguageKind.PTX">
            <summary>
            Inline PTX assembly.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.CudaEmitParameterDirection">
            <summary>
            Indicates the direction of the emit parameter.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CudaEmitParameterDirection.None">
            <summary>
            The parameter is not used in either direction.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CudaEmitParameterDirection.In">
            <summary>
            The parameter is used for passing input values.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CudaEmitParameterDirection.Out">
            <summary>
            The parameter is used for passing output values.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.CudaEmitParameterDirection.Both">
            <summary>
            The parameter is used for both input and output.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.LanguageEmitValue">
            <summary>
            Represents an inline lanaguage statement.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LanguageEmitValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.LanguageKind,System.Boolean,System.Collections.Immutable.ImmutableArray{ILGPU.Util.FormatString.FormatExpression},System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.CudaEmitParameterDirection},ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@,ILGPU.IR.Types.VoidType)">
            <summary>
            Constructs a new inline language statement.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="languageKind">The language kind.</param>
            <param name="usingRefParams">True, if passing parameters by reference.</param>
            <param name="expressions">The list of all format expressions.</param>
            <param name="directions">Indicates the direction of the arguments.</param>
            <param name="arguments">The arguments to format.</param>
            <param name="voidType">The void type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.LanguageEmitValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.LanguageEmitValue.LanguageKind">
            <summary>
            Returns the language kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LanguageEmitValue.Directions">
            <summary>
            Returns true if the first argument is an output argument.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LanguageEmitValue.Expressions">
            <summary>
            Returns the underlying native format expressions.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LanguageEmitValue.UsingRefParams">
            <summary>
            Returns true if passing parameters by reference
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LanguageEmitValue.IsInputArgument(System.Int32)">
            <summary>
            Returns true if the argument is an input parameter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LanguageEmitValue.IsOutputArgument(System.Int32)">
            <summary>
            Returns true if the argument is an ouput parameter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LanguageEmitValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LanguageEmitValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LanguageEmitValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.LanguageEmitValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="M:ILGPU.IR.Values.LanguageEmitValue.ToStringExpression">
            <summary>
            Converts the internal format expressions into a string for debugging purposes.
            </summary>
            <returns>The converted string.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.MemoryValue">
            <summary>
            Represents an abstract value operating on memory.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new memory value.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new memory value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="staticType">The static type.</param>
        </member>
        <member name="T:ILGPU.IR.Values.Alloca">
            <summary>
            Represents an allocation operation on the stack.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Types.TypeNode,ILGPU.IR.MemoryAddressSpace)">
            <summary>
            Constructs a new alloca node.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="arrayLength">The array length to allocate.</param>
            <param name="allocaType">The allocation type.</param>
            <param name="addressSpace">The target address space.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.AllocaType">
            <summary>
            Returns the allocation type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.AddressSpace">
            <summary>
            Returns the address space of this allocation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.ArrayLength">
            <summary>
            Returns the array length.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.IsSimpleAllocation">
            <summary>
            Returns true if this allocation is a simple allocation.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Alloca.IsDynamicAllocation">
            <summary>
            Returns true if this allocation is a dynamic allocation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.IsArrayAllocation(ILGPU.IR.Values.PrimitiveValue@)">
            <summary>
            Returns true if this allocation is an array allocation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Alloca.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.MemoryBarrierKind">
            <summary>
            Represents the kind of a memory-barrier operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.MemoryBarrierKind.GroupLevel">
            <summary>
            The barrier works on the group level.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.MemoryBarrierKind.DeviceLevel">
            <summary>
            The barrier works on the device level.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.MemoryBarrierKind.SystemLevel">
            <summary>
            The barrier works on the system level.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.MemoryBarrier">
            <summary>
            Represents a memory barrier that hinders reordering of memory operations
            with side effects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.MemoryBarrierKind)">
            <summary>
            Constructs a new memory barrier.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="kind">The barrier kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.MemoryBarrier.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.MemoryBarrier.Kind">
            <summary>
            Returns the kind of the barrier.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.MemoryBarrier.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Load">
            <summary>
            Represents a load operation with side effects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Load.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new load operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The source view.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Load.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.Load.Source">
            <summary>
            Returns the source view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Load.SourceAddressSpace">
            <summary>
            Returns the source address space this load reads from.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Load.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Load.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Load.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Load.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Load.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Store">
            <summary>
            Represents a store operation with side effects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Store.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new store operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="target">The target view.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Store.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.Store.Target">
            <summary>
            Returns the target view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Store.TargetAddressSpace">
            <summary>
            Returns the target address space this store writes to.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Store.Value">
            <summary>
            Returns the value to store.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Store.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Store.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Store.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Store.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Store.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.MethodCall">
            <summary>
            Represents a single function call of the form
            x = f(a0, ..., an-1) or f(a0, ..., an-1)
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.MethodCall.Builder">
            <summary>
            An instance builder for method calls.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.Builder.#ctor(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,ILGPU.IR.Method)">
            <summary>
            Initializes a new call builder.
            </summary>
            <param name="irBuilder">The current IR builder.</param>
            <param name="location">The current location.</param>
            <param name="target">The target method to call.</param>
        </member>
        <member name="P:ILGPU.IR.Values.MethodCall.Builder.IRBuilder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.MethodCall.Builder.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.MethodCall.Builder.Target">
            <summary>
            Returns the call target.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.MethodCall.Builder.Count">
            <summary>
            The number of arguments.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.Builder.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given value to the call builder.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.Builder.Seal">
            <summary>
            Constructs a new value that represents the current method call.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Method,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Constructs a new call.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="target">The jump target.</param>
            <param name="arguments">The arguments of the jump target.</param>
        </member>
        <member name="P:ILGPU.IR.Values.MethodCall.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.MethodCall.Target">
            <summary>
            Returns the call target.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.MethodCall.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Parameter">
            <summary>
            Represents a function parameter.
            </summary>
            <remarks>Note that parameters have not associated basic block.</remarks>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode,System.String)">
            <summary>
            Constructs a new parameter.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="type">The parameter type.</param>
            <param name="name">The parameter name (for debugging purposes).</param>
        </member>
        <member name="P:ILGPU.IR.Values.Parameter.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.Parameter.ParameterType">
            <summary>
            Returns the actual parameter type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Parameter.Name">
            <summary>
            Returns the parameter name (for debugging purposes).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Parameter.Index">
            <summary>
            Returns the parameter index.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.UpdateType``2(``0,``1)">
            <summary>
            Updates the current parameter type.
            </summary>
            <typeparam name="TTypeContext">The type context.</typeparam>
            <typeparam name="TTypeConverter">The type converter.</typeparam>
            <param name="typeContext">The type context instance.</param>
            <param name="typeConverter">The type converter instance.</param>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Parameter.ToParameterString">
            <summary>
            Return the parameter string.
            </summary>
            <returns>The parameter string.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.PhiValue">
            <summary>
            Represents a single control-flow dependent phi node.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.PhiValue.IArgumentRemapper">
            <summary>
            Remaps phi argument blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.IArgumentRemapper.CanRemap(ILGPU.IR.Values.PhiValue)">
            <summary>
            Returns true if the given phi contains a block to remap.
            </summary>
            <param name="phiValue">The source phi.</param>
            <returns>True, if the given phi contains the old block.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.IArgumentRemapper.TryRemap(ILGPU.IR.Values.PhiValue,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock@)">
            <summary>
            Tries to remap the given block to a new one.
            </summary>
            <param name="phiValue">The source phi.</param>
            <param name="block">The old block to remap.</param>
            <param name="newBlock">The (possible) remapped new block.</param>
            <returns>True, if the block could be remapped.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.IArgumentRemapper.RemapValue(ILGPU.IR.Values.PhiValue,ILGPU.IR.BasicBlock,ILGPU.IR.Value)">
            <summary>
            Remaps the given value.
            </summary>
            <param name="phiValue">The source phi.</param>
            <param name="updatedBlock">The updated source information.</param>
            <param name="value">The original source value passed to the phi.</param>
            <returns>The new value to use instead.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.PhiValue.BlockRemapper">
            <summary>
            A simple remapper that allows to map an old block to a new block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.BlockRemapper.#ctor(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new block remapper.
            </summary>
            <param name="oldBlock">The old block.</param>
            <param name="newBlock">The new block.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.BlockRemapper.OldBlock">
            <summary>
            Returns the old block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.BlockRemapper.NewBlock">
            <summary>
            Returns the new block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.BlockRemapper.CanRemap(ILGPU.IR.Values.PhiValue)">
            <summary>
            Returns true if the given blocks contain the old block.
            </summary>
            <returns>True, if the given blocks contain the old block.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.BlockRemapper.TryRemap(ILGPU.IR.Values.PhiValue,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock@)">
            <summary>
            Tries to remap the old block to the new block.
            </summary>
            <returns>Returns always true.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.BlockRemapper.RemapValue(ILGPU.IR.Values.PhiValue,ILGPU.IR.BasicBlock,ILGPU.IR.Value)">
            <summary>
            Returns the value of <paramref name="value"/>.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.PhiValue.Builder">
            <summary>
            A phi builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Builder.#ctor(ILGPU.IR.Values.PhiValue,System.Int32)">
            <summary>
            Constructs a new phi builder.
            </summary>
            <param name="phiValue">The phi value.</param>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Builder.PhiValue">
            <summary>
            Returns the associated phi value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Builder.Type">
            <summary>
            Returns the node type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Builder.Count">
            <summary>
            Returns the number of attached arguments.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Builder.Item(System.Int32)">
            <summary>
            Returns the i-th argument.
            </summary>
            <param name="index">The argument index.</param>
            <returns>The resolved argument.</returns>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Builder.BasicBlock">
            <summary>
            Returns the parent basic block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Builder.AddArgument(ILGPU.IR.BasicBlock,ILGPU.IR.Value)">
            <summary>
            Adds the given argument.
            </summary>
            <param name="predecessor">
            The input block associated with the argument value.
            </param>
            <param name="value">The argument value to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Builder.Seal">
            <summary>
            Seals this phi node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Builder.GetEnumerator">
            <summary>
            Returns a new enumerator.
            </summary>
            <returns>The created enumerator.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.TryRemoveTrivialPhi(ILGPU.IR.Method.Builder,ILGPU.IR.Values.PhiValue)">
            <summary>
            Tries to remove a trivial phi value.
            </summary>
            <param name="methodBuilder">The current method builder.</param>
            <param name="phiValue">The phi value to check.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new phi node.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="type">The phi type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.PhiType">
            <summary>
            Returns the basic phi type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PhiValue.Sources">
            <summary>
            Returns all associated blocks from which the values have to be resolved
            from.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.GetValue(ILGPU.IR.BasicBlock)">
            <summary>
            Gets the value for the given source block.
            </summary>
            <param name="source">The source block.</param>
            <returns>The value for the given source block (if any).</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.UpdateType``2(``0,``1)">
            <summary>
            Updates the current phi type.
            </summary>
            <typeparam name="TTypeContext">The type context.</typeparam>
            <typeparam name="TTypeConverter">The type converter.</typeparam>
            <param name="typeContext">The type context instance.</param>
            <param name="typeConverter">The type converter instance.</param>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.RemapArguments``1(ILGPU.IR.Method.Builder,``0)">
            <summary>
            Remaps the current phi arguments.
            </summary>
            <typeparam name="TArgumentRemaper">The argument remapper type.</typeparam>
            <param name="methodBuilder">The parent method builder.</param>
            <param name="remapper">The remapper instance.</param>
            <returns>The remapped phi value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.SealPhiArguments(ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Seals the given phi arguments.
            </summary>
            <param name="sources">The associated block sources.</param>
            <param name="arguments">The phi arguments.</param>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.TryRemoveTrivialPhi(ILGPU.IR.Method.Builder)">
            <summary>
            Tries to remove a trivial phi value.
            </summary>
            <param name="methodBuilder">The current method builder.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="M:ILGPU.IR.Values.PhiValue.ToFullArgString">
            <summary>
            Returns a full argument string representation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.PointerValue">
            <summary>
            Represents an abstract pointer value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PointerValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new pointer value.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PointerValue.Source">
            <summary>
            Returns the source address.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PointerValue.Offset">
            <summary>
            Returns the associated element index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PointerValue.Is32BitAccess">
            <summary>
            Returns true if this is a 32bit element access.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PointerValue.Is64bitAccess">
            <summary>
            Returns true if this is a 64bit element access.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PointerValue.AddressSpaceType">
            <summary>
            Returns the view element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PointerValue.AddressSpace">
            <summary>
            Returns the pointer address space.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PointerValue.ElementType">
            <summary>
            Returns the element type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.SubViewValue">
            <summary>
            Represents a value to compute a sub-view value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new sub-view computation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The source view.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SubViewValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.SubViewValue.Length">
            <summary>
            Returns the length of the sub view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.SubViewValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.LoadElementAddress">
            <summary>
            Loads an element address of a view or a pointer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new address value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="sourceView">The source address.</param>
            <param name="elementIndex">The address of the referenced element.</param>
        </member>
        <member name="P:ILGPU.IR.Values.LoadElementAddress.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.LoadElementAddress.IsViewAccess">
            <summary>
            Returns true if the current access works on a view.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadElementAddress.IsPointerAccess">
            <summary>
            Returns true if the current access works on a pointer.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadElementAddress.AccessesFirstElement">
            <summary>
            Returns true if this access targets the first element.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadElementAddress.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.LoadArrayElementAddress">
            <summary>
            Loads the address of a single (possibly multi-dimensional) array element.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.LoadArrayElementAddress.Builder">
            <summary>
            An instance builder for laea values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LoadArrayElementAddress.Builder.#ctor(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,ILGPU.IR.Value)">
            <summary>
            Initializes a new laea builder.
            </summary>
            <param name="irBuilder">The current IR builder.</param>
            <param name="location">The current location.</param>
            <param name="arrayValue">The parent array value.</param>
        </member>
        <member name="P:ILGPU.IR.Values.LoadArrayElementAddress.Builder.IRBuilder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadArrayElementAddress.Builder.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadArrayElementAddress.Builder.ArrayValue">
            <summary>
            Returns the source array value to load the element address from.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadArrayElementAddress.Builder.ArrayType">
            <summary>
            Returns the array type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadArrayElementAddress.Builder.Count">
            <summary>
            The number of dimensions.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LoadArrayElementAddress.Builder.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given dimension length to the array value builder.
            </summary>
            <param name="dimension">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.LoadArrayElementAddress.Builder.Seal">
            <summary>
            Constructs a new value that represents the current array value.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.LoadArrayElementAddress.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Constructs a new laea value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="values">
            The array value and a single value index for each array dimension.
            </param>
        </member>
        <member name="P:ILGPU.IR.Values.LoadArrayElementAddress.ArrayValue">
            <summary>
            Returns the source array value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadArrayElementAddress.Dimensions">
            <summary>
            Returns all accessor dimensions.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadArrayElementAddress.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadArrayElementAddress.ComputeType(ILGPU.IR.ValueInitializer@)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadArrayElementAddress.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadArrayElementAddress.Accept``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadArrayElementAddress.ToPrefixString">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.IR.Values.LoadFieldAddress">
            <summary>
            Loads a field address of an object pointer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Constructs a new address value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="source">The source address.</param>
            <param name="fieldSpan">The structure field span.</param>
        </member>
        <member name="P:ILGPU.IR.Values.LoadFieldAddress.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.LoadFieldAddress.Source">
            <summary>
            Returns the source address.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadFieldAddress.StructureType">
            <summary>
            Returns the structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadFieldAddress.FieldType">
            <summary>
            Returns the managed field information.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.LoadFieldAddress.FieldSpan">
            <summary>
            Returns the field span.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.LoadFieldAddress.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Predicate">
            <summary>
            Represents a conditional predicate.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Predicate.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new predicate.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="condition">The condition.</param>
            <param name="trueValue">The true value.</param>
            <param name="falseValue">The false value.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Predicate.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.Predicate.Condition">
            <summary>
            Returns the associated predicate value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Predicate.TrueValue">
            <summary>
            Returns the true value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Predicate.FalseValue">
            <summary>
            Returns the false value.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Predicate.Values">
            <summary>
            Returns a span excluding the condition value reference.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Predicate.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Predicate.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Predicate.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.Predicate.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Predicate.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.SideEffectValue">
            <summary>
            Represents an abstract value with side effects.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SideEffectValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new value with side effects.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="M:ILGPU.IR.Values.SideEffectValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new value with side effects.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="staticType">The static type.</param>
        </member>
        <member name="T:ILGPU.IR.Values.ControlFlowValue">
            <summary>
            A value with side effects that depends on the control flow of the program.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ControlFlowValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a value that depends on the control flow of the program.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="M:ILGPU.IR.Values.ControlFlowValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a value that depends on the control flow of the program.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="staticType">The static type.</param>
        </member>
        <member name="T:ILGPU.IR.Values.FieldAccess">
            <summary>
            An index into to a scalar structure field.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.#ctor(System.Int32)">
            <summary>
            Constructs a new field access.
            </summary>
            <param name="fieldIndex">The field access.</param>
        </member>
        <member name="P:ILGPU.IR.Values.FieldAccess.Index">
            <summary>
            Returns the field index.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.Add(System.Int32)">
            <summary>
            Adds the given field offset to the current index.
            </summary>
            <param name="offset">The offset to add.</param>
            <returns>The adapted field access.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.Subtract(System.Int32)">
            <summary>
            Subtracts the given field offset from the current index.
            </summary>
            <param name="offset">The offset to subtract.</param>
            <returns>The adapted field access.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.Equals(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns true if the given field access is equal to the current one.
            </summary>
            <param name="other">The other field reference.</param>
            <returns>
            True, if the given field access is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given field access is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.GetHashCode">
            <summary>
            Returns the hash code of this field access.
            </summary>
            <returns>The hash code of this field access.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.ToString">
            <summary>
            Returns the string representation of this field access.
            </summary>
            <returns>The string representation of this field access.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.op_Implicit(System.Int32)~ILGPU.IR.Values.FieldAccess">
            <summary>
            Converts a field index into a field access instance.
            </summary>
            <param name="fieldIndex">The field index to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.op_Explicit(ILGPU.IR.Values.FieldAccess)~System.Int32">
            <summary>
            Converts a field index access into its underlying field index.
            </summary>
            <param name="access">The field access to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.op_Equality(ILGPU.IR.Values.FieldAccess,ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns true if the first and second field access are the same.
            </summary>
            <param name="first">The first field access.</param>
            <param name="second">The second field access.</param>
            <returns>
            True, if the first and second field access are the same.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccess.op_Inequality(ILGPU.IR.Values.FieldAccess,ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns true if the first and second field access are not the same.
            </summary>
            <param name="first">The first field access.</param>
            <param name="second">The second field access.</param>
            <returns>
            True, if the first and second field access are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Values.FieldSpan">
            <summary>
            An index into to a scalar structure field that can span multiple fields.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.#ctor(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Constructs a new field span.
            </summary>
            <param name="fieldIndex">The field access.</param>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.#ctor(ILGPU.IR.Values.FieldAccess,System.Int32)">
            <summary>
            Constructs a new field reference.
            </summary>
            <param name="fieldIndex">The field access.</param>
            <param name="span">The number of fields to span.</param>
        </member>
        <member name="P:ILGPU.IR.Values.FieldSpan.Access">
            <summary>
            Returns the field index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldSpan.Index">
            <summary>
            Returns the field index.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldSpan.Span">
            <summary>
            The number of fields to span.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldSpan.HasSpan">
            <summary>
            Returns true if this instance spans over multiple fields.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.GetLastAccess">
            <summary>
            Returns the last inclusive field access.
            </summary>
            <returns>The last inclusive field access.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.Contains(ILGPU.IR.Values.FieldSpan)">
            <summary>
            Returns true if the given field span is contained in this span.
            </summary>
            <param name="fieldSpan">The field span.</param>
            <returns>True, if the given field span is contained in this span.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.Distinct(ILGPU.IR.Values.FieldSpan)">
            <summary>
            Checks whether the current field span is distinct from the given one.
            </summary>
            <param name="fieldSpan">The other field span.</param>
            <returns>
            True, if the given field span is distinct from the given one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.Overlaps(ILGPU.IR.Values.FieldSpan)">
            <summary>
            Checks whether the current field span overlaps with the given one.
            </summary>
            <param name="fieldSpan">The other field span.</param>
            <returns>True, if the given field span overlaps with the given one.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.Narrow(ILGPU.IR.Values.FieldSpan)">
            <summary>
            Narrows the current span by accessing a nested span.
            </summary>
            <param name="fieldSpan">The nested span.</param>
            <returns>A new nested span that has an adjusted field index.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.Equals(ILGPU.IR.Values.FieldSpan)">
            <summary>
            Returns true if the given field access is equal to the current one.
            </summary>
            <param name="other">The other field reference.</param>
            <returns>
            True, if the given field access is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given field access is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.GetHashCode">
            <summary>
            Returns the hash code of this field access.
            </summary>
            <returns>The hash code of this field access.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.ToString">
            <summary>
            Returns the string representation of this field access.
            </summary>
            <returns>The string representation of this field access.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.op_Implicit(ILGPU.IR.Values.FieldAccess)~ILGPU.IR.Values.FieldSpan">
            <summary>
            Converts a field access into a field span.
            </summary>
            <param name="access">The access to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.op_Equality(ILGPU.IR.Values.FieldSpan,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Returns true if the first and second field access are the same.
            </summary>
            <param name="first">The first field access.</param>
            <param name="second">The second field access.</param>
            <returns>
            True, if the first and second field access are the same.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldSpan.op_Inequality(ILGPU.IR.Values.FieldSpan,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Returns true if the first and second field access are not the same.
            </summary>
            <param name="first">The first field access.</param>
            <param name="second">The second field access.</param>
            <returns>
            True, if the first and second field access are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Values.FieldAccessChain">
            <summary>
            Represents a chain of field indices that is used to point to a particular
            structure field.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.FieldAccessChain.Empty">
            <summary>
            An empty access chain.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.FieldAccessChain.hashCode">
            <summary>
            The cached hash code.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.#ctor(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Constructs a new access chain using the given index.
            </summary>
            <param name="index">The index of this reference.</param>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.#ctor(System.Collections.Immutable.ImmutableArray{ILGPU.IR.Values.FieldAccess})">
            <summary>
            Constructs a new access chain using the given indices.
            </summary>
            <param name="accessChain">The indices of this reference.</param>
        </member>
        <member name="P:ILGPU.IR.Values.FieldAccessChain.Item(System.Int32)">
            <summary>
            Returns the access chain element for the given index.
            </summary>
            <param name="index">The access chain index.</param>
            <returns>The resolved chain element.</returns>
        </member>
        <member name="P:ILGPU.IR.Values.FieldAccessChain.Length">
            <summary>
            Returns the number of chain elements.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldAccessChain.AccessChain">
            <summary>
            Returns the list of index elements.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldAccessChain.IsEmpty">
            <summary>
            Returns true if this chain is empty.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.IsSubChainOf(ILGPU.IR.Values.FieldAccessChain)">
            <summary>
            Returns true if this access chain is a subchain of the given one.
            </summary>
            <param name="other">The other subchain.</param>
            <returns>
            True if this access chain is a subchain of the given one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.GetEnumerator">
            <summary>
            Returns an enumerate to iterate over all chain elements.
            </summary>
            <returns>An enumerate to iterate over all chain elements.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.Append(ILGPU.IR.Values.FieldAccessChain)">
            <summary>
            Realizes an additional access operation to the given field indices.
            </summary>
            <param name="accessChain">The next access chain.</param>
            <returns>The extended field reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.Append(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Realizes an additional access operation to the given field index.
            </summary>
            <param name="fieldAccess">The next field access.</param>
            <returns>The extended field reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.Equals(ILGPU.IR.Values.FieldAccessChain)">
            <summary>
            Returns true if the given field ref is equal to the current one.
            </summary>
            <param name="other">The other field reference.</param>
            <returns>
            True, if the given field ref is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given field ref is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.GetHashCode">
            <summary>
            Returns the hash code of this field reference.
            </summary>
            <returns>The hash code of this field reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.ToString">
            <summary>
            Returns the string representation of this field reference.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.op_Equality(ILGPU.IR.Values.FieldAccessChain,ILGPU.IR.Values.FieldAccessChain)">
            <summary>
            Returns true if the first and second field ref are the same.
            </summary>
            <param name="first">The first field ref.</param>
            <param name="second">The second field ref.</param>
            <returns>
            True, if the first and second field ref are the same.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldAccessChain.op_Inequality(ILGPU.IR.Values.FieldAccessChain,ILGPU.IR.Values.FieldAccessChain)">
            <summary>
            Returns true if the first and second field ref are not the same.
            </summary>
            <param name="first">The first field ref.</param>
            <param name="second">The second field ref.</param>
            <returns>
            True, if the first and second field ref are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.IR.Values.FieldRef">
            <summary>
            A reference to a scalar structure field.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.#ctor(ILGPU.IR.Value)">
            <summary>
            Constructs a new direct reference to the given node.
            </summary>
            <param name="source">The main source.</param>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.#ctor(ILGPU.IR.Value,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Constructs a new direct reference to the given node.
            </summary>
            <param name="source">The main source.</param>
            <param name="fieldSpan">The field span.</param>
        </member>
        <member name="P:ILGPU.IR.Values.FieldRef.IsValid">
            <summary>
            Returns true if this field reference points to a valid field.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldRef.Source">
            <summary>
            Returns the source node (the main structure value).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldRef.FieldSpan">
            <summary>
            Returns the field span.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.FieldRef.IsDirect">
            <summary>
            Returns true if this instances references the whole source object.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.Access(ILGPU.IR.Values.FieldSpan)">
            <summary>
            Accesses the given field span.
            </summary>
            <param name="fieldSpan">The field span.</param>
            <returns>The new field reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.Equals(ILGPU.IR.Values.FieldRef)">
            <summary>
            Returns true if the given field ref is equal to the current one.
            </summary>
            <param name="other">The other field reference.</param>
            <returns>
            True, if the given field ref is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given field ref is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.GetHashCode">
            <summary>
            Returns the hash code of this field reference.
            </summary>
            <returns>The hash code of this field reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.ToString">
            <summary>
            Returns the string representation of this field reference.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.op_Equality(ILGPU.IR.Values.FieldRef,ILGPU.IR.Values.FieldRef)">
            <summary>
            Returns true if the first and second field ref are the same.
            </summary>
            <param name="first">The first field ref.</param>
            <param name="second">The second field ref.</param>
            <returns>True, if the first and second field ref are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.FieldRef.op_Inequality(ILGPU.IR.Values.FieldRef,ILGPU.IR.Values.FieldRef)">
            <summary>
            Returns true if the first and second field ref are not the same.
            </summary>
            <param name="first">The first field ref.</param>
            <param name="second">The second field ref.</param>
            <returns>True, if the first and second field ref are not the same.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.StructureValue">
            <summary>
            Represents an immutable structure value.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.StructureValue.IBuilder">
            <summary>
            An abstract structure value builder.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.StructureValue.IInternalBuilder">
            <summary>
            An internal instance builder.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.IInternalBuilder.Seal(ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Moves the underlying array builder to a target list and outputs an
            assembled structure type.
            </summary>
            <param name="values">The resulting array of value references.</param>
            <returns>The resulting structure type.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.StructureValue.Builder">
            <summary>
            An instance builder for structure instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.Builder.#ctor(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,ILGPU.IR.Types.StructureType)">
            <summary>
            Initializes a new instance builder.
            </summary>
            <param name="irBuilder">The current IR builder.</param>
            <param name="location">The current location.</param>
            <param name="parent">The parent type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.Builder.IRBuilder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.Builder.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.Builder.Parent">
            <summary>
            Returns the corresponding parent type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.Builder.Count">
            <summary>
            The number of field values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.Builder.Item(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns the value that corresponds to the given field access.
            </summary>
            <param name="access">The field access.</param>
            <returns>The resolved field type.</returns>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.Builder.NextExpectedType">
            <summary>
            Returns the next expected type to be added.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.Builder.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given value to the instance builder.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.Builder.Seal">
            <summary>
            Constructs a new value that represents the current value builder.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.Builder.ILGPU#IR#Values#StructureValue#IInternalBuilder#Seal(ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Moves the underlying array builder to a target list and outputs an
            assembled structure type.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.StructureValue.DynamicBuilder">
            <summary>
            An instance builder for dynamically typed structure instances.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.DynamicBuilder.#ctor(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,System.Int32)">
            <summary>
            Initializes a new instance builder.
            </summary>
            <param name="irBuilder">The current IR builder.</param>
            <param name="location">The current location.</param>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.DynamicBuilder.#ctor(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Initializes a new instance builder.
            </summary>
            <param name="irBuilder">The current IR builder.</param>
            <param name="location">The current location.</param>
            <param name="values">The initial capacity.</param>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.DynamicBuilder.IRBuilder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.DynamicBuilder.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.DynamicBuilder.Count">
            <summary>
            The number of field values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.DynamicBuilder.Item(ILGPU.IR.Values.FieldAccess)">
            <summary>
            Returns the value that corresponds to the given field access.
            </summary>
            <param name="access">The field access.</param>
            <returns>The resolved field type.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.DynamicBuilder.Add(ILGPU.IR.Value)">
            <summary>
            Adds the given value to the instance builder.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.DynamicBuilder.Seal">
            <summary>
            Constructs a new value that represents the current value builder.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.DynamicBuilder.ILGPU#IR#Values#StructureValue#IInternalBuilder#Seal(ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Moves the underlying array builder to a target list and outputs an
            assembled structure type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.StructureType,ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Constructs a new structure value.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="structureType">The associated structure type.</param>
            <param name="fieldValues">The field values.</param>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.StructureValue.StructureType">
            <summary>
            Returns the structure type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.Get(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Gets a new nested structure value.
            </summary>
            <param name="builder">The parent builder.</param>
            <param name="location">The current location.</param>
            <param name="fieldSpan">The field span.</param>
            <returns>The resolved structure value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.StructureValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.StructureOperationValue">
            <summary>
            Represents an operation on structure values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureOperationValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Constructs a new abstract structure operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="fieldSpan">The field span.</param>
        </member>
        <member name="P:ILGPU.IR.Values.StructureOperationValue.ObjectValue">
            <summary>
            Returns the object value to load from.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureOperationValue.StructureType">
            <summary>
            Returns the structure type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.StructureOperationValue.FieldSpan">
            <summary>(
            Returns the field span.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.StructureOperationValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.GetField">
            <summary>
            Represents an operation to load a single field from an object.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GetField.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.FieldSpan)">
            <summary>
            Constructs a new field load.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="structValue">The structure value.</param>
            <param name="fieldSpan">The field span.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GetField.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetField.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetField.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetField.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GetField.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.SetField">
            <summary>
            Represents an operation to store a single field of an object.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.FieldSpan,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new field store.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="structValue">The structure value.</param>
            <param name="fieldSpan">The field access.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SetField.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.SetField.Value">
            <summary>
            Returns the value to store.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.SetField.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.SetField.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.TerminatorValue">
            <summary>
            Represents a single terminator value.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.TerminatorValue.IBlockRemapper">
            <summary>
            Remaps basic blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.IBlockRemapper.CanRemap(System.ReadOnlySpan{ILGPU.IR.BasicBlock}@)">
            <summary>
            Returns true if the given blocks contain a block to remap.
            </summary>
            <param name="blocks">The blocks to check.</param>
            <returns>True, if the given blocks contain the old block.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.TerminatorValue.IDirectTargetRemapper">
            <summary>
            An abstract target remapper.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.IDirectTargetRemapper.Remap(ILGPU.IR.BasicBlock)">
            <summary>
            Remaps the given block to a new one.
            </summary>
            <param name="block">The old block to remap.</param>
            <returns>The remapped block.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.TerminatorValue.ITargetRemapper">
            <summary>
            An abstract target remapper.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.TerminatorValue.IdentityRemapper">
            <summary>
            An identity remapper that does not remap any targets.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.IdentityRemapper.CanRemap(System.ReadOnlySpan{ILGPU.IR.BasicBlock}@)">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.IdentityRemapper.Remap(ILGPU.IR.BasicBlock)">
            <summary>
            Returns the same block.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new terminator value that is marked.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.TerminatorValue.Targets">
            <summary>
            Returns the associated targets.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.TerminatorValue.NumTargets">
            <summary>
            Returns the number of attached targets.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.SealTargets(ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Seals all internal branch targets (if any).
            </summary>
            <param name="targets">The associated targets.</param>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.RemapTargets``1(ILGPU.IR.Method.Builder,``0)">
            <summary>
            Remaps the current block targets.
            </summary>
            <typeparam name="TTargetRemapper">The target remapper type.</typeparam>
            <param name="methodBuilder">The current method builder.</param>
            <param name="remapper">The remapper instance.</param>
            <returns>The remapped terminator value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.RemapTargets``1(ILGPU.IR.BasicBlock.Builder,``0)">
            <summary>
            Remaps the current block targets.
            </summary>
            <typeparam name="TTargetRemapper">The target remapper type.</typeparam>
            <param name="blockBuilder">The current block builder.</param>
            <param name="remapper">The remapper instance.</param>
            <returns>The remapped terminator value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.TerminatorValue.RemapTargets(ILGPU.IR.BasicBlock.Builder,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Remaps the current targets to the given target list.
            </summary>
            <param name="builder">The builder to use.</param>
            <param name="targets">The new targets.</param>
            <returns>The new terminator value.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.ReturnTerminator">
            <summary>
            Represents a simple return terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a new return terminator.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="returnValue">The current return value.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ReturnTerminator.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.ReturnTerminator.IsVoidReturn">
            <summary>
            Returns true if the current return terminator is a void return.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ReturnTerminator.ReturnValue">
            <summary>
            Returns the associated return value.
            In case of a void return value the result is a <see cref="T:ILGPU.IR.Values.NullValue"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.RemapTargets(ILGPU.IR.BasicBlock.Builder,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.ReturnTerminator.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Branch">
            <summary>
            Represents a branch-based terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Branch.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new branch terminator.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="M:ILGPU.IR.Values.Branch.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="T:ILGPU.IR.Values.UnconditionalBranch">
            <summary>
            Represents an unconditional branch terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.BasicBlock)">
            <summary>
            Constructs a new branch terminator.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="target">The jump target.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UnconditionalBranch.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.UnconditionalBranch.Target">
            <summary>
            Returns the unconditional jump target.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.RemapTargets(ILGPU.IR.BasicBlock.Builder,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Creates a new branch using the given targets.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.UnconditionalBranch.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ConditionalBranch">
            <summary>
            Represents a conditional branch terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ConditionalBranch.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new conditional branch terminator.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ConditionalBranch.Condition">
            <summary>
            Returns the associated branch condition.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ConditionalBranch.CanFold">
            <summary>
            Returns true if this conditional branch can be folded.
            </summary>
            <remarks>
            A branch can be folded if its condition evaluates to a constant value.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Values.ConditionalBranch.TryGetOtherBranchTarget(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock@)">
            <summary>
            Returns true if this branch offers two branch targets and one of the
            targets is the one provided.
            </summary>
            <param name="block">The branch target to exclude.</param>
            <param name="otherBlock">The other branch target (if any).</param>
        </member>
        <member name="M:ILGPU.IR.Values.ConditionalBranch.Fold(ILGPU.IR.Construction.IRBuilder)">
            <summary>
            Folds this branch into another branch that might be unconditional.
            </summary>
            <param name="builder">The builder to use.</param>
            <returns>The folded branch.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ConditionalBranch.FoldBranch(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.PrimitiveValue)">
            <summary>
            Folds this conditional branch into an unconditional branch.
            </summary>
            <param name="builder">The builder to use.</param>
            <param name="condition">The constant condition value.</param>
            <returns>The folded branch.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.IfBranchFlags">
            <summary>
            Specific flags for the <see cref="T:ILGPU.IR.Values.IfBranch"/> class.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.IfBranchFlags.None">
            <summary>
            No specific branch flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.IfBranchFlags.IsInverted">
            <summary>
            Represents an inverted if branch.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.IfBranch">
            <summary>
            Represents an if branch terminator.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IfBranch.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock,ILGPU.IR.Values.IfBranchFlags)">
            <summary>
            Constructs a new conditional branch terminator.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="condition">The jump condition.</param>
            <param name="falseTarget">The false jump target.</param>
            <param name="trueTarget">The true jump target.</param>
            <param name="flags">The branch flags.</param>
        </member>
        <member name="P:ILGPU.IR.Values.IfBranch.Flags">
            <summary>
            Returns the associated branch flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.IfBranch.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.IfBranch.TrueTarget">
            <summary>
            Returns the true jump target.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.IfBranch.FalseTarget">
            <summary>
            Returns the false jump target.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.IfBranch.IsInverted">
            <summary>
            Returns true if this branch has been inverted.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.IfBranch.NotInvertedBranchTargets">
            <summary>
            Returns the original branch targets of the given if branch taking the
            current <see cref="F:ILGPU.IR.Values.IfBranchFlags.IsInverted"/> flag into account.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IfBranch.Invert(ILGPU.IR.Construction.IRBuilder)">
            <summary>
            Inverts this if branch by negating the condition and swapping both cases.
            </summary>
            <param name="builder">The parent builder.</param>
            <returns>The inverted branch.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.IfBranch.FoldBranch(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.PrimitiveValue)">
            <summary cref="M:ILGPU.IR.Values.ConditionalBranch.FoldBranch(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.PrimitiveValue)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IfBranch.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IfBranch.RemapTargets(ILGPU.IR.BasicBlock.Builder,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Creates a new if branch using the given targets.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.IfBranch.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.IfBranch.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.IfBranch.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.SwitchBranch">
            <summary>
            Represents a single switch terminator.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.SwitchBranch.Builder">
            <summary>
            An instance builder for switch branches.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.Builder.#ctor(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Location,ILGPU.IR.Value,System.Int32)">
            <summary>
            Initializes a new call builder.
            </summary>
            <param name="irBuilder">The current IR builder.</param>
            <param name="location">The current location.</param>
            <param name="condition">The switch condition value.</param>
            <param name="capacity">The initial builder capacity.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.Builder.IRBuilder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.Builder.Location">
            <summary>
            Returns the current location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.Builder.Condition">
            <summary>
            Returns the current switch condition.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.Builder.Count">
            <summary>
            The number of arguments.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.Builder.Add(ILGPU.IR.BasicBlock)">
            <summary>
            Adds the given value to the switch builder.
            </summary>
            <param name="target">The target to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.Builder.Seal">
            <summary>
            Constructs a new value that represents the current branch.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Constructs a new switch terminator.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The value to switch over.</param>
            <param name="targets">The jump targets.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.DefaultBlock">
            <summary>
            Returns the default block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.SwitchBranch.NumCasesWithoutDefault">
            <summary>
            Returns the number of actual switch cases without the default case.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.GetCaseTarget(System.Int32)">
            <summary>
            Returns the case target for the i-th case.
            </summary>
            <param name="i">The index of the i-th case.</param>
            <returns>The resulting jump target.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.FoldBranch(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.PrimitiveValue)">
            <summary cref="M:ILGPU.IR.Values.ConditionalBranch.FoldBranch(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Values.PrimitiveValue)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.RemapTargets(ILGPU.IR.BasicBlock.Builder,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Creates a new switch branch using the given targets.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.SwitchBranch.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BuilderTerminator">
            <summary>
            Represents a temporary builder terminator.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.BuilderTerminator.Builder">
            <summary>
            An instance builder for temporary branches.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.Builder.#ctor(ILGPU.IR.Construction.IRBuilder,System.Int32)">
            <summary>
            Initializes a new call builder.
            </summary>
            <param name="irBuilder">The current IR builder.</param>
            <param name="capacity">The initial builder capacity.</param>
        </member>
        <member name="P:ILGPU.IR.Values.BuilderTerminator.Builder.IRBuilder">
            <summary>
            Returns the parent builder.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.BuilderTerminator.Builder.Count">
            <summary>
            The number of arguments.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.Builder.Add(ILGPU.IR.BasicBlock)">
            <summary>
            Adds the given value to the custom terminator builder.
            </summary>
            <param name="target">The target to add.</param>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.Builder.Seal">
            <summary>
            Constructs a new value that represents the current branch.
            </summary>
            <returns>The resulting value reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Constructs a temporary builder terminator.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="targets">The jump targets.</param>
        </member>
        <member name="P:ILGPU.IR.Values.BuilderTerminator.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.RemapTargets(ILGPU.IR.BasicBlock.Builder,ILGPU.Util.InlineList{ILGPU.IR.BasicBlock}@)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)"/>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.BuilderTerminator.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BarrierOperation">
            <summary>
            Represents a generic barrier operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.BarrierOperation.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new generic barrier operation.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="M:ILGPU.IR.Values.BarrierOperation.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.PredicateBarrierKind">
            <summary>
            Represents a predicate-barrier kind.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.PredicateBarrierKind.PopCount">
            <summary>
            Returns the number of threads in the group
            for which the predicate evaluates to true.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.PredicateBarrierKind.And">
            <summary>
            Returns the logical and result of the predicate
            of all threads in the group.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.PredicateBarrierKind.Or">
            <summary>
            Returns the logical or result of the predicate
            of all threads in the group.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.PredicateBarrier">
            <summary>
            Represents a predicated synchronization barrier.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.PredicateBarrierKind)">
            <summary>
            Constructs a new predicate barrier.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="predicate">The predicate value.</param>
            <param name="kind">The operation kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.PredicateBarrier.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.PredicateBarrier.Predicate">
            <summary>
            Returns the barrier predicate.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.PredicateBarrier.Kind">
            <summary>
            Returns the kind of the barrier operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.PredicateBarrier.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.BarrierKind">
            <summary>
            Represents a barrier kind.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BarrierKind.WarpLevel">
            <summary>
            A barrier that operates on warp level.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BarrierKind.GroupLevel">
            <summary>
            A barrier that operates on group level.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.Barrier">
            <summary>
            Represents a synchronization barrier.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Barrier.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.BarrierKind)">
            <summary>
            Constructs a new barrier.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="barrierKind">The barrier kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Barrier.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.Barrier.Kind">
            <summary>
            Return the associated barrier kind.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Barrier.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Barrier.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Barrier.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="T:ILGPU.IR.Values.BroadcastKind">
            <summary>
            Represents the kind of a broadcast operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BroadcastKind.WarpLevel">
            <summary>
            A broadcast operation that operates on warp level.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BroadcastKind.GroupLevel">
            <summary>
            A broadcast operation that operates on group level.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.ThreadValue">
            <summary>
            Represents a value that is used for communicating values across all threads.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ThreadValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new communication operation.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ThreadValue.Variable">
            <summary>
            Returns the variable reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ThreadValue.IsBuiltIn">
            <summary>
            Returns true if this communication operation works on intrinsic primitive
            types.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ThreadValue.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="T:ILGPU.IR.Values.Broadcast">
            <summary>
            Represents a broadcast operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.BroadcastKind)">
            <summary>
            Constructs a new broadcast operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="value">The value to broadcast.</param>
            <param name="origin">
            The source thread index within the group or warp.
            </param>
            <param name="broadcastKind">The operation kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Broadcast.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.Broadcast.Origin">
            <summary>
            Returns the thread index origin (group or lane index).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Broadcast.Kind">
            <summary>
            Returns the kind of the broadcast operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.Broadcast.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ShuffleKind">
            <summary>
            Represents the kind of a shuffle operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ShuffleKind.Generic">
            <summary>
            A generic shuffle operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ShuffleKind.Down">
            <summary>
            A down-shuffle operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ShuffleKind.Up">
            <summary>
            An up-shuffle operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.ShuffleKind.Xor">
            <summary>
            A xor-shuffle operation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.ShuffleOperation">
            <summary>
            Represents a shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ShuffleOperation.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Constructs a new shuffle operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="shuffleKind">The operation kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ShuffleOperation.Origin">
            <summary>
            Returns the shuffle origin (depends on the operation).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ShuffleOperation.Kind">
            <summary>
            Returns the kind of the shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ShuffleOperation.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.WarpShuffle">
            <summary>
            Represents a shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.WarpShuffle.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Constructs a new shuffle operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="variable">The source variable value.</param>
            <param name="origin">The shuffle origin.</param>
            <param name="kind">The operation kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.WarpShuffle.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.WarpShuffle.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.WarpShuffle.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.WarpShuffle.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.SubWarpShuffle">
            <summary>
            Represents an sub-warp shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SubWarpShuffle.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ShuffleKind)">
            <summary>
            Constructs a new shuffle operation.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="variable">The source variable value.</param>
            <param name="origin">The shuffle origin.</param>
            <param name="width">The sub-warp width.</param>
            <param name="kind">The operation kind.</param>
        </member>
        <member name="P:ILGPU.IR.Values.SubWarpShuffle.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.SubWarpShuffle.Width">
            <summary>
            Returns the intra-warp width.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.SubWarpShuffle.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.SubWarpShuffle.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.SubWarpShuffle.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.UndefinedValue">
            <summary>
            Represents an undefined value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a undefined value.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UndefinedValue.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.UndefinedValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.Use">
            <summary>
            Represents the use of a single node.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Use.#ctor(ILGPU.IR.Value,System.Int32)">
            <summary>
            Constructs a new use.
            </summary>
            <param name="target">The target reference.</param>
            <param name="index">The argument index.</param>
        </member>
        <member name="P:ILGPU.IR.Values.Use.Target">
            <summary>
            Returns the target reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.Use.Index">
            <summary>
            Returns the argument index.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.Use.Refresh">
            <summary>
            Refreshes the use with up-to-date replacement information.
            </summary>
            <returns>The refreshed use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.Resolve">
            <summary>
            Resolves the actual node with respect to replacement information.
            </summary>
            <returns>The actual node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.ResolveAs``1">
            <summary>
            Resolves the actual value with respect to replacement information.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The actual value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.Equals(ILGPU.IR.Values.Use)">
            <summary>
            Returns true if the given use is equal to this use.
            </summary>
            <param name="other">The other use.</param>
            <returns>True, if the given id is equal to this use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this use.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to this use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.GetHashCode">
            <summary>
            Returns the hash code of this use.
            </summary>
            <returns>The hash code of this use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.ToString">
            <summary>
            Returns the string representation of this use.
            </summary>
            <returns>The string representation of this use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.op_Implicit(ILGPU.IR.Values.Use)~ILGPU.IR.Values.ValueReference">
            <summary>
            Implicitly converts the given use to the associated node reference.
            </summary>
            <param name="use">The use to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.Use.op_Implicit(ILGPU.IR.Values.Use)~ILGPU.IR.Value">
            <summary>
            Implicitly converts the given use to the associated node.
            </summary>
            <param name="use">The use to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.Use.op_Equality(ILGPU.IR.Values.Use,ILGPU.IR.Values.Use)">
            <summary>
            Returns true if the first and the second use are the same.
            </summary>
            <param name="first">The first use.</param>
            <param name="second">The second use.</param>
            <returns>True, if the first and the second use are the same.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.Use.op_Inequality(ILGPU.IR.Values.Use,ILGPU.IR.Values.Use)">
            <summary>
            Returns true if the first and the second use are not the same.
            </summary>
            <param name="first">The first use.</param>
            <param name="second">The second use.</param>
            <returns>True, if the first and the second use are not the same.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.UseCollection">
            <summary>
            Represents an enumerable of uses that point to non-replaced nodes.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.UseCollection.HasPhiUsesPredicate">
            <summary>
            Checks whether a given use references a phi value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.HasPhiUsesPredicate.Apply(ILGPU.IR.Values.Use)">
            <inheritdoc cref="M:ILGPU.Util.InlineList.IPredicate`1.Apply(`0)"/>
        </member>
        <member name="T:ILGPU.IR.Values.UseCollection.HasSideEffectUses">
            <summary>
            Checks whether a given use references a method call or memory value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.HasSideEffectUses.Apply(ILGPU.IR.Values.Use)">
            <inheritdoc cref="M:ILGPU.Util.InlineList.IPredicate`1.Apply(`0)"/>
        </member>
        <member name="T:ILGPU.IR.Values.UseCollection.Enumerator">
            <summary>
            Returns an enumerator to enumerate all uses in the context
            of the parent scope.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.Enumerator.#ctor(ILGPU.IR.Value,System.ReadOnlySpan{ILGPU.IR.Values.Use})">
            <summary>
            Constructs a new use enumerator.
            </summary>
            <param name="node">The node.</param>
            <param name="uses">The list of all uses.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.Enumerator.Node">
            <summary>
            Returns the node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.Enumerator.Current">
            <summary>
            Returns the current use.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.Enumerator.MoveNext">
            <summary cref="M:System.Collections.IEnumerator.MoveNext"/>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.#ctor(ILGPU.IR.Value,System.ReadOnlySpan{ILGPU.IR.Values.Use})">
            <summary>
            Constructs a new uses collection.
            </summary>
            <param name="node">The associated node.</param>
            <param name="uses">The set of associated uses.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.Node">
            <summary>
            Returns the associated node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.Uses">
            <summary>
            Returns all associated uses.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.HasAny">
            <summary>
            Returns true, if the collection contains at least one use.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.UseCollection.HasExactlyOne">
            <summary>
            Returns true, if the collection contains exactly one use.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.TryGetSingleUse(ILGPU.IR.Values.Use@)">
            <summary>
            Tries to resolve a single use.
            </summary>
            <param name="use">The resolved use reference.</param>
            <returns>True, if the collection contains exactly one use.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.Any``1(``0)">
            <summary>
            Returns true if any of the uses fulfills the given predicate.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <param name="predicate">The predicate to use.</param>
            <returns>True, if any use fulfills the given predicate.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.AllIn(System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock})">
            <summary>
            Returns true if all uses reference values in the given block set.
            </summary>
            <param name="blocks">The block set to which all uses must refer to.</param>
            <returns>True, if all uses reference values in the given block set.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.Clone">
            <summary>
            Clones this use collection into a new one.
            </summary>
            <returns>The cloned use collection.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.UseCollection.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all uses in the context
            of the parent scope.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.UseDistribution">
            <summary>
            An analysis class to resolve information about the global use-relation
            within a given context.
            </summary>
            <remarks>
            This class is typically used for internal debugging and tracking of memory
            allocations.
            </remarks>
        </member>
        <member name="M:ILGPU.IR.Values.UseDistribution.#ctor(ILGPU.IR.IRContext)">
            <summary>
            Constructs a new use distribution.
            </summary>
            <param name="context">The target context.</param>
        </member>
        <member name="P:ILGPU.IR.Values.UseDistribution.Uses">
            <summary>
            Returns the use distribution of all global nodes.
            </summary>
            <remarks>Tuple layout: (number of uses, number of nodes).</remarks>
        </member>
        <member name="P:ILGPU.IR.Values.UseDistribution.UsesPerType">
            <summary>
            Returns the use distribution of all node types.
            </summary>
            <remarks>
            Tuple layout: (max number of uses, type, number of nodes with this type).
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Values.ValueReference">
            <summary>
            Represents a reference to a node that can be resolved
            automatically to the latest node information by following
            the replacement relation on nodes.
            </summary>
            <remarks>
            Use the <see cref="P:ILGPU.IR.Values.ValueReference.DirectTarget"/> property to resolve the
            directly associated node.
            </remarks>
        </member>
        <member name="T:ILGPU.IR.Values.ValueReference.ToReferenceFormatter">
            <summary>
            A value reference formatter.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.ToReferenceFormatter.ILGPU#Util#InlineList#IFormatter{ILGPU#IR#Value}#Format(ILGPU.IR.Value)">
            <summary>
            Formats a value by returning its reference string.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.ToReferenceFormatter.ILGPU#Util#InlineList#IFormatter{ILGPU#IR#Values#ValueReference}#Format(ILGPU.IR.Values.ValueReference)">
            <summary>
            Formats a value reference by returning its reference string.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.#ctor(ILGPU.IR.Value)">
            <summary>
            Constructs a new node reference.
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.ValueKind">
            <summary>
            Returns the current value kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.DirectTarget">
            <summary>
            Returns the node that is directly stored in the reference structure
            without using any replacement information.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.IsValid">
            <summary>
            Returns true if the reference points to a valid node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.IsReplaced">
            <summary>
            Returns true if the direct target has been replaced.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.BasicBlock">
            <summary>
            Returns the parent basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.Id">
            <summary>
            Returns the unique node id of the latest node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.Location">
            <summary>
            Returns the associated location.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.Nodes">
            <summary>
            Returns all child nodes of the latest node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.Uses">
            <summary>
            Returns all uses of the latest node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.Type">
            <summary>
            Returns the associated type of the latest node.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ValueReference.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Refresh">
            <summary>
            Refreshes the current reference and returns the new one.
            </summary>
            <returns>The refreshed reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all child nodes.
            </summary>
            <returns>An enumerator to enumerate all child nodes.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Accept``1(``0)">
            <summary>
            Accepts a node visitor.
            </summary>
            <typeparam name="T">The type of the visitor.</typeparam>
            <param name="visitor">The visitor.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Replace(ILGPU.IR.Value)">
            <summary>
            Replaces this node with the given node.
            </summary>
            <param name="other">The other node.</param>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Resolve">
            <summary>
            Resolves the actual node with respect to
            replacement information.
            </summary>
            <returns>The actual node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.ResolveAs``1">
            <summary>
            Resolves the actual node with respect to replacement information.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The actual node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Dump(System.IO.TextWriter)">
            <summary>
            Dumps this node to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.ILGPU#IR#ILocation#FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific location information.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Equals(ILGPU.IR.Values.ValueReference)">
            <summary>
            Returns true if the given node reference points to the
            same node.
            </summary>
            <param name="other">The other reference.</param>
            <returns>True, if the given reference points to the same node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.Equals(System.Object)">
            <summary>
            Returns true if the given object is a node reference that
            points to the same node.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object points to the same node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.GetHashCode">
            <summary>
            Returns the hash code of the directly associated node.
            </summary>
            <returns>The hash code of the directly associated node</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.ToString">
            <summary>
            Returns the string representation of this reference.
            </summary>
            <returns>The string representation of this reference.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.op_Implicit(ILGPU.IR.Value)~ILGPU.IR.Values.ValueReference">
            <summary>
            Converts the given node implicitly to a node reference.
            </summary>
            <param name="node">The node to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.op_Implicit(ILGPU.IR.Values.ValueReference)~ILGPU.IR.Value">
            <summary>
            Converts the given reference to the latest node information.
            </summary>
            <param name="reference">The reference to convert.</param>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.op_Equality(ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Returns true if the both node references point to the
            same node.
            </summary>
            <param name="first">The first reference.</param>
            <param name="second">The first reference.</param>
            <returns>True, if both node references point to the same node.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ValueReference.op_Inequality(ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Returns true if the both node references point to different nodes.
            </summary>
            <param name="first">The first reference.</param>
            <param name="second">The first reference.</param>
            <returns>True, if both node references point to different nodes.</returns>
        </member>
        <member name="T:ILGPU.IR.Values.NewView">
            <summary>
            Represents a new view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a view.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="pointer">The underlying pointer.</param>
            <param name="length">The number of elements.</param>
        </member>
        <member name="P:ILGPU.IR.Values.NewView.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="P:ILGPU.IR.Values.NewView.Pointer">
            <summary>
            Returns the underlying pointer.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.NewView.ViewElementType">
            <summary>
            Returns the view's element type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.NewView.ViewAddressSpace">
            <summary>
            Returns the view's address space.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.NewView.Length">
            <summary>
            Returns the length of the view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.NewView.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="M:ILGPU.IR.Values.NewView.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ViewOperationValue">
            <summary>
            Represents a generic operation of an <see cref="T:ILGPU.ArrayView`1"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ViewOperationValue.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a generic view operation.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ViewOperationValue.View">
            <summary>
            Returns the underlying view.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ViewOperationValue.ToArgString">
            <summary cref="M:ILGPU.IR.Value.ToArgString"/>
        </member>
        <member name="T:ILGPU.IR.Values.ViewPropertyValue">
            <summary>
            Represents a generic property of an <see cref="T:ILGPU.ArrayView`1"/>.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ViewPropertyValue.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference)">
            <summary>
            Constructs a view property.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="view">The underlying view.</param>
        </member>
        <member name="P:ILGPU.IR.Values.ViewPropertyValue.Is32BitProperty">
            <summary>
            Returns true if this is a 32bit element access.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.ViewPropertyValue.Is64BitProperty">
            <summary>
            Returns true if this is a 64bit element access.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.GetViewLength">
            <summary>
            Represents the <see cref="P:ILGPU.ArrayView`1.Length"/> property inside the IR.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Values.ValueReference,ILGPU.BasicValueType)">
            <summary>
            Constructs a new view length property.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="view">The underlying view.</param>
            <param name="lengthType">The underlying length type.</param>
        </member>
        <member name="P:ILGPU.IR.Values.GetViewLength.LengthType">
            <summary>
            Returns the associated length type to return.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Values.GetViewLength.ValueKind">
            <summary cref="P:ILGPU.IR.Value.ValueKind"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary cref="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary cref="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)"/>
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.Accept``1(``0)">
            <summary cref="M:ILGPU.IR.Value.Accept``1(``0)" />
        </member>
        <member name="M:ILGPU.IR.Values.GetViewLength.ToPrefixString">
            <summary cref="M:ILGPU.IR.Node.ToPrefixString"/>
        </member>
        <member name="T:ILGPU.IR.Values.UnaryArithmeticKind">
            <summary>
            Represents the kind of an unary operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Neg">
            <summary>
            The neg operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Not">
            <summary>
            The logical not operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Abs">
            <summary>
            The abs operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.PopC">
            <summary>
            The popcount operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.CLZ">
            <summary>
            The CLZ operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.CTZ">
            <summary>
            The CTZ operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.RcpF">
            <summary>
            The reciprocal operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.IsNaNF">
            <summary>
            The is-not-a-number operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.IsInfF">
            <summary>
            The is-infinity operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.IsFinF">
            <summary>
            The is-finite operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.SqrtF">
            <summary>
            Computes sqrt(value).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.RsqrtF">
            <summary>
            Computes 1/sqrt(value).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.AsinF">
            <summary>
            Computes asin(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.SinF">
            <summary>
            Computes sin(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.SinhF">
            <summary>
            Computes sinh(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.AcosF">
            <summary>
            Computes acos(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.CosF">
            <summary>
            Computes cos(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.CoshF">
            <summary>
            Computes cosh(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.TanF">
            <summary>
            Computes tan(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.TanhF">
            <summary>
            Computes tanh(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.AtanF">
            <summary>
            Computes atan(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.ExpF">
            <summary>
            Computes exp(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Exp2F">
            <summary>
            Computes 2^x.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.FloorF">
            <summary>
            Computes floor(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.CeilingF">
            <summary>
            Computes ceil(x).
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.LogF">
            <summary>
            Computes log(x) to base e.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Log2F">
            <summary>
            Computes log(x) to base 2.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.UnaryArithmeticKind.Log10F">
            <summary>
            Computes log(x) to base 10.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.BinaryArithmeticKind">
            <summary>
            Represents the kind of a binary operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Add">
            <summary>
            The + operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Sub">
            <summary>
            The - operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Mul">
            <summary>
            The * operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Div">
            <summary>
            The / operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Rem">
            <summary>
            The % operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.And">
            <summary>
            The logical and operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Or">
            <summary>
            The logical or operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Xor">
            <summary>
            The logical xor operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Shl">
            <summary>
            The shift left operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Shr">
            <summary>
            The shift right operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Min">
            <summary>
            The min operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Max">
            <summary>
            The max operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.Atan2F">
            <summary>
            The atan2 operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.PowF">
            <summary>
            The pow operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.BinaryLogF">
            <summary>
            The binary log operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.BinaryArithmeticKind.CopySignF">
            <summary>
            The copy sign operation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.TernaryArithmeticKind">
            <summary>
            Represents the kind of a ternary operation.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Values.TernaryArithmeticKind.MultiplyAdd">
            <summary>
            The FMA operation.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Values.ArithmeticKindExtensions">
            <summary>
            Contains several extensions for arithmetic kinds.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Values.ArithmeticKindExtensions.IsCommutative(ILGPU.IR.Values.BinaryArithmeticKind)">
            <summary>
            Returns true if the given kind is commutative.
            </summary>
            <param name="kind">The kind to test.</param>
            <returns>True, if the given kind is commutative.</returns>
        </member>
        <member name="M:ILGPU.IR.Values.ArithmeticKindExtensions.IsCommutative(ILGPU.IR.Values.TernaryArithmeticKind)">
            <summary>
            Returns true if the given kind is commutative.
            </summary>
            <param name="kind">The kind to test.</param>
            <returns>True, if the given kind is commutative.</returns>
        </member>
        <member name="T:ILGPU.IR.IValue">
            <summary>
            The base interface of all values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.ValueKind">
            <summary>
            Returns the current value kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.Type">
            <summary>
            Returns the associated type information.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.BasicBlock">
            <summary>
            Returns the parent basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.Nodes">
            <summary>
            Returns all associated nodes.
            </summary>
        </member>
        <member name="P:ILGPU.IR.IValue.Uses">
            <summary>
            Returns all associated uses.
            </summary>
        </member>
        <member name="M:ILGPU.IR.IValue.Resolve">
            <summary>
            Resolves the actual value with respect to
            replacement information.
            </summary>
            <returns>The actual value.</returns>
        </member>
        <member name="M:ILGPU.IR.IValue.ResolveAs``1">
            <summary>
            Resolves the actual value with respect to replacement information.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The actual value.</returns>
        </member>
        <member name="M:ILGPU.IR.IValue.Accept``1(``0)">
            <summary>
            Accepts a value visitor.
            </summary>
            <typeparam name="T">The type of the visitor.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.IValue.Replace(ILGPU.IR.Value)">
            <summary>
            Replaces this value with the given value.
            </summary>
            <param name="other">The other value.</param>
        </member>
        <member name="T:ILGPU.IR.ValueExtensions">
            <summary>
            Contains extension methods for values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueExtensions.IsPrimitive``1(``0)">
            <summary>
            Returns true if the given value is a primitive value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value to test.</param>
            <returns>True, if the given value is a primitive value.</returns>
        </member>
        <member name="M:ILGPU.IR.ValueExtensions.IsPrimitive``1(``0,System.Int64)">
            <summary>
            Returns true if the given value is a primitive value with the specified raw
            value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value to test.</param>
            <param name="rawValue">The expected raw value.</param>
            <returns>
            True, if the given value is a primitive value with the specified raw value.
            </returns>
        </member>
        <member name="M:ILGPU.IR.ValueExtensions.IsInstantiatedConstant``1(``0)">
            <summary>
            Returns true if the given value is an instantiated constant value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value to test.</param>
            <returns>
            True, if the given value is an instantiated constant value.
            </returns>
        </member>
        <member name="M:ILGPU.IR.ValueExtensions.IsDeviceConstant``1(``0)">
            <summary>
            Returns true if the given value is a device constant value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value to test.</param>
            <returns>True, if the given value is a device constant value.</returns>
        </member>
        <member name="T:ILGPU.IR.ValueFlags">
            <summary>
            Flags that can be associated with every value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueFlags.None">
            <summary>
            The default flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueFlags.NotReplacable">
            <summary>
            The value cannot be replaced.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueFlags.NoUses">
            <summary>
            The value cannot have uses.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueFlags.StaticType">
            <summary>
            Static type
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueFlags.IsSealed">
            <summary>
            The value has been sealed.
            </summary>
        </member>
        <member name="T:ILGPU.IR.ValueInitializer">
            <summary>
            A general value initializer.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueInitializer.#ctor(ILGPU.IR.IRBaseContext,ILGPU.IR.ValueParent,ILGPU.IR.Location)">
            <summary>
            Constructs a new value initializer.
            </summary>
            <param name="context">The context reference.</param>
            <param name="parent">The associated parent.</param>
            <param name="location">The current location.</param>
        </member>
        <member name="P:ILGPU.IR.ValueInitializer.Context">
            <summary>
            Returns the parent context reference.
            </summary>
        </member>
        <member name="P:ILGPU.IR.ValueInitializer.Parent">
            <summary>
            Returns the associated parent.
            </summary>
        </member>
        <member name="P:ILGPU.IR.ValueInitializer.Location">
            <summary>
            Returns the associated location.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueInitializer.ILGPU#IR#ILocation#FormatErrorMessage(System.String)">
            <summary>
            Formats an error message to include specific location information.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Value">
            <summary>
            Represents a basic intermediate-representation value.
            It is the base class for all values in the scope of this IR.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Value.DefaultFlags">
            <summary>
            The default value flags.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Value.parent">
            <summary>
            The current parent container.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Value.type">
            <summary>
            The current node type.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Value.values">
            <summary>
            The list of all values.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Value.uses">
            <summary>
            The collection of all uses.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.#ctor(ILGPU.IR.ValueInitializer@)">
            <summary>
            Constructs a new value that is marked as replaceable.
            </summary>
            <param name="initializer">The value initializer.</param>
        </member>
        <member name="M:ILGPU.IR.Value.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new value that is marked as replaceable.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="staticType">The static type.</param>
        </member>
        <member name="M:ILGPU.IR.Value.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.ValueFlags)">
            <summary>
            Constructs a new value that is marked as replaceable.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="valueFlags">The value flags.</param>
        </member>
        <member name="M:ILGPU.IR.Value.#ctor(ILGPU.IR.ValueInitializer@,ILGPU.IR.ValueFlags,ILGPU.IR.Types.TypeNode)">
            <summary>
            Constructs a new value that is marked as replaceable.
            </summary>
            <param name="initializer">The value initializer.</param>
            <param name="valueFlags">The value flags.</param>
            <param name="staticType">The static type (if any).</param>
        </member>
        <member name="P:ILGPU.IR.Value.ValueKind">
            <summary>
            Returns the current value kind.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Method">
            <summary>
            Returns the parent method.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.BasicBlock">
            <summary>
            Returns the parent basic block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Type">
            <summary>
            Returns the associated type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.BasicValueType">
            <summary>
            Returns the associated basic value type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.ValueFlags">
            <summary>
            Returns the associated value flags.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.CanBeReplaced">
            <summary>
            Returns true if the current value can be replaced.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.CanHaveUses">
            <summary>
            Returns true if the current value can have uses.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.HasStaticType">
            <summary>
            Returns true if the current value has a static type.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.IsSealed">
            <summary>
            Returns true if the current value has been sealed.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Replacement">
            <summary>
            Returns the replacement of this value (if any).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.IsReplaced">
            <summary>
            Returns true if the current value has been replaced.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Nodes">
            <summary>
            Returns all child values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Count">
            <summary>
            Returns the number of child values.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.AllNumUses">
            <summary>
            Returns the total number of all associated uses.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Uses">
            <summary>
            Returns all current uses (to non-replaced values).
            </summary>
        </member>
        <member name="P:ILGPU.IR.Value.Item(System.Int32)">
            <summary>
            Accesses the child value with the given index.
            </summary>
            <param name="index">The child-value index.</param>
            <returns>The resolved child value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.GC">
            <summary>
            Performs a GC run on this value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.GetFirstUse">
            <summary>
            Resolves the first use.
            </summary>
            <returns>The first use.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.GetFirstUseNode">
            <summary>
            Resolves the first use as value.
            </summary>
            <returns>The first use as value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.AddUse(ILGPU.IR.Value,System.Int32)">
            <summary>
            Adds the given use to the use set.
            </summary>
            <param name="target">The target value.</param>
            <param name="useIndex">The use index.</param>
        </member>
        <member name="M:ILGPU.IR.Value.InvalidateType">
            <summary>
            Invalidates the current type and enforces a re-computation of the current
            type.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.ComputeType(ILGPU.IR.ValueInitializer@)">
            <summary>
            Computes the current type.
            </summary>
            <param name="initializer">The value initializer.</param>
            <returns>The resolved type node.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.Accept``1(``0)">
            <summary>
            Accepts a value visitor.
            </summary>
            <typeparam name="T">The type of the visitor.</typeparam>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:ILGPU.IR.Value.Rebuild(ILGPU.IR.Construction.IRBuilder,ILGPU.IR.Construction.IRRebuilder)">
            <summary>
            Rebuilds the current value in the scope of the given rebuilder.
            </summary>
            <param name="builder">The builder to use.</param>
            <param name="rebuilder">The rebuilder to use.</param>
            <returns>The rebuilt value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.VerifyNotSealed">
            <summary>
            Verifies that the this value is not sealed.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.Seal">
            <summary>
            Seals this value.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.Seal(ILGPU.IR.Values.ValueReference)">
            <summary>
            Seals this value.
            </summary>
            <param name="value1">The first child node.</param>
        </member>
        <member name="M:ILGPU.IR.Value.Seal(ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Seals this value.
            </summary>
            <param name="value1">The first child node.</param>
            <param name="value2">The second child node.</param>
        </member>
        <member name="M:ILGPU.IR.Value.Seal(ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference,ILGPU.IR.Values.ValueReference)">
            <summary>
            Seals this value.
            </summary>
            <param name="value1">The first child node.</param>
            <param name="value2">The second child node.</param>
            <param name="value3">The third child node.</param>
        </member>
        <member name="M:ILGPU.IR.Value.Seal(ILGPU.Util.InlineList{ILGPU.IR.Values.ValueReference}@)">
            <summary>
            Seals this value.
            </summary>
            <param name="valueList">The nested child nodes.</param>
        </member>
        <member name="M:ILGPU.IR.Value.Replace(ILGPU.IR.Value)">
            <summary>
            Replaces this value with the given value.
            </summary>
            <param name="other">The other value.</param>
        </member>
        <member name="M:ILGPU.IR.Value.OnReplacedNode">
            <summary>
            Invoked when an attached node is replaced.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Value.Resolve">
            <summary>
            Resolves the actual value with respect to replacement information.
            </summary>
            <returns>The actual value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.ResolveAs``1">
            <summary>
            Resolves the actual value with respect to replacement information.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <returns>The actual value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.Equals(ILGPU.IR.Value)">
            <summary>
            Returns true if the given value is the same value.
            </summary>
            <param name="other">The other value.</param>
            <returns>True, if the given value is the same value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all child values.
            </summary>
            <returns>An enumerator to enumerate all child values.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.ToArgString">
            <summary>
            Returns the argument string (operation arguments) of this node.
            </summary>
            <returns>The argument string.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.ToString">
            <summary>
            Returns the string representation of this node.
            </summary>
            <returns>The string representation of this node.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current value.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current value.</returns>
        </member>
        <member name="M:ILGPU.IR.Value.GetHashCode">
            <summary>
            Returns the hash code of this value.
            </summary>
            <returns>The hash code of this value.</returns>
        </member>
        <member name="T:ILGPU.IR.ValueParent">
            <summary>
            A parent value container that holds and manages values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueParent.#ctor(ILGPU.IR.Location)">
            <summary>
            Constructs a new value parent.
            </summary>
            <param name="location">The current location.</param>
        </member>
        <member name="P:ILGPU.IR.ValueParent.IsBasicBlock">
            <summary>
            Returns true if this parent container is a block.
            </summary>
        </member>
        <member name="P:ILGPU.IR.ValueParent.IsMethod">
            <summary>
            Returns true if this container is method.
            </summary>
        </member>
        <member name="T:ILGPU.IR.ValueKind">
            <summary>
            Represents the kind of a single IR value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.UnaryArithmetic">
            <summary>
            An <see cref="T:ILGPU.IR.Values.UnaryArithmeticValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.BinaryArithmetic">
            <summary>
            A <see cref="T:ILGPU.IR.Values.BinaryArithmeticValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.TernaryArithmetic">
            <summary>
            A <see cref="T:ILGPU.IR.Values.TernaryArithmeticValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Compare">
            <summary>
            A <see cref="T:ILGPU.IR.Values.CompareValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Convert">
            <summary>
            A <see cref="T:ILGPU.IR.Values.ConvertValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Predicate">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Predicate"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.PointerCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.PointerCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.AddressSpaceCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.AddressSpaceCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.ViewCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.ViewCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.ArrayToViewCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.ArrayToViewCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.IntAsPointerCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.IntAsPointerCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.PointerAsIntCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.PointerAsIntCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.FloatAsIntCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.FloatAsIntCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.IntAsFloatCast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.IntAsFloatCast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Null">
            <summary>
            A <see cref="T:ILGPU.IR.Values.NullValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Primitive">
            <summary>
            A <see cref="T:ILGPU.IR.Values.PrimitiveValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.String">
            <summary>
            A <see cref="T:ILGPU.IR.Values.StringValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.AcceleratorType">
            <summary>
            A <see cref="T:ILGPU.IR.Values.AcceleratorTypeValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GridIndex">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GridIndexValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GroupIndex">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GroupIndexValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GridDimension">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GridDimensionValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GroupDimension">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GroupDimensionValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.WarpSize">
            <summary>
            A <see cref="T:ILGPU.IR.Values.WarpSizeValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.LaneIdx">
            <summary>
            A <see cref="T:ILGPU.IR.Values.LaneIdxValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.DynamicMemoryLength">
            <summary>
            A <see cref="T:ILGPU.IR.Values.DynamicMemoryLengthValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Alloca">
            <summary>
            An <see cref="T:ILGPU.IR.Values.Alloca"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.MemoryBarrier">
            <summary>
            A <see cref="T:ILGPU.IR.Values.MemoryBarrier"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Load">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Load"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Store">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Store"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Phi">
            <summary>
            A <see cref="T:ILGPU.IR.Values.PhiValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Parameter">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Parameter"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.MethodCall">
            <summary>
            A <see cref="T:ILGPU.IR.Values.MethodCall"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Structure">
            <summary>
            A <see cref="T:ILGPU.IR.Values.StructureValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GetField">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GetField"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SetField">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SetField"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.NewView">
            <summary>
            A <see cref="T:ILGPU.IR.Values.NewView"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GetViewLength">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GetViewLength"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.AlignTo">
            <summary>
            A <see cref="T:ILGPU.IR.Values.AlignTo"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.AsAligned">
            <summary>
            A <see cref="T:ILGPU.IR.Values.AsAligned"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SubView">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SubViewValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Array">
            <summary>
            A <see cref="T:ILGPU.IR.Values.NewArray"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GetArrayLength">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GetArrayLength"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.LoadElementAddress">
            <summary>
            A <see cref="T:ILGPU.IR.Values.LoadElementAddress"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.LoadArrayElementAddress">
            <summary>
            A <see cref="T:ILGPU.IR.Values.LoadArrayElementAddress"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.LoadFieldAddress">
            <summary>
            A <see cref="T:ILGPU.IR.Values.LoadFieldAddress"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Return">
            <summary>
            A <see cref="T:ILGPU.IR.Values.ReturnTerminator"/> terminator value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.UnconditionalBranch">
            <summary>
            An <see cref="T:ILGPU.IR.Values.UnconditionalBranch"/> terminator value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.IfBranch">
            <summary>
            A <see cref="T:ILGPU.IR.Values.IfBranch"/> terminator value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SwitchBranch">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SwitchBranch"/> terminator value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.GenericAtomic">
            <summary>
            A <see cref="T:ILGPU.IR.Values.GenericAtomic"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.AtomicCAS">
            <summary>
            A <see cref="T:ILGPU.IR.Values.AtomicCAS"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.PredicateBarrier">
            <summary>
            A <see cref="T:ILGPU.IR.Values.PredicateBarrier"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Barrier">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Barrier"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Broadcast">
            <summary>
            A <see cref="T:ILGPU.IR.Values.Broadcast"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.WarpShuffle">
            <summary>
            A <see cref="T:ILGPU.IR.Values.WarpShuffle"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.SubWarpShuffle">
            <summary>
            A <see cref="T:ILGPU.IR.Values.SubWarpShuffle"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.DebugAssert">
            <summary>
            A <see cref="T:ILGPU.IR.Values.DebugAssertOperation"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.WriteToOutput">
            <summary>
            A <see cref="T:ILGPU.IR.Values.WriteToOutput"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Undefined">
            <summary>
            An <see cref="T:ILGPU.IR.Values.UndefinedValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.BuilderTerminator">
            <summary>
            A <see cref="T:ILGPU.IR.Values.BuilderTerminator"/> terminator value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.Handle">
            <summary>
            A <see cref="T:ILGPU.IR.Values.HandleValue"/> managed handle value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.LanguageEmit">
            <summary>
            A <see cref="T:ILGPU.IR.Values.LanguageEmitValue"/> value.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKind.MaxValue">
            <summary>
            Placeholder for the last value kind.
            </summary>
        </member>
        <member name="T:ILGPU.IR.ValueKindAttribute">
            <summary>
            Marks value classes with specific value kinds.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueKindAttribute.#ctor(ILGPU.IR.ValueKind)">
            <summary>
            Constructs a new value kind attribute.
            </summary>
            <param name="kind">The value kind.</param>
        </member>
        <member name="P:ILGPU.IR.ValueKindAttribute.Kind">
            <summary>
            Returns the value kind.
            </summary>
        </member>
        <member name="T:ILGPU.IR.ValueKinds">
            <summary>
            Utility methods for <see cref="T:ILGPU.IR.ValueKind"/> enumeration values.
            </summary>
        </member>
        <member name="F:ILGPU.IR.ValueKinds.NumValueKinds">
            <summary>
            The number of different value kinds.
            </summary>
        </member>
        <member name="M:ILGPU.IR.ValueKinds.GetValueKind``1">
            <summary>
            Gets the value kind of the value type specified.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <returns>The determined value kind.</returns>
        </member>
        <member name="M:ILGPU.IR.ValueKinds.GetValueKind(System.Type)">
            <summary>
            Gets the value kind of the type specified.
            </summary>
            <returns>The determined value kind.</returns>
        </member>
        <member name="T:ILGPU.IR.VerificationResult">
            <summary>
            An IR verification result.
            </summary>
        </member>
        <member name="F:ILGPU.IR.VerificationResult.errors">
            <summary>
            The internal mapping of error messages.
            </summary>
        </member>
        <member name="P:ILGPU.IR.VerificationResult.Count">
            <summary>
            Returns the number of collected errors.
            </summary>
        </member>
        <member name="P:ILGPU.IR.VerificationResult.HasErrors">
            <summary>
            Returns true if there are any errors.
            </summary>
        </member>
        <member name="M:ILGPU.IR.VerificationResult.Dump(System.IO.TextWriter)">
            <summary>
            Dumps all errors to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="M:ILGPU.IR.VerificationResult.ReportError(ILGPU.IR.Node,System.Type,System.String)">
            <summary>
            Reports a new error.
            </summary>
            <param name="node">The associated node the message belongs to.</param>
            <param name="verifier">The verifier class.</param>
            <param name="stage">The verification stage.</param>
        </member>
        <member name="M:ILGPU.IR.VerificationResult.ToString">
            <summary>
            Returns a string representation of all errors.
            </summary>
            <returns>The string representation of all errors.</returns>
        </member>
        <member name="T:ILGPU.IR.Verifier">
            <summary>
            A verifier to verify the structure of an IR method.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Verifier.VerifierBase">
            <summary>
            An abstract verifier.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.VerifierBase.#ctor(ILGPU.IR.Method,ILGPU.IR.VerificationResult)">
            <summary>
            Constructs a new verifier base.
            </summary>
            <param name="method">The method to verify.</param>
            <param name="result">The verification result.</param>
        </member>
        <member name="P:ILGPU.IR.Verifier.VerifierBase.Method">
            <summary>
            Returns the method to verify.
            </summary>
        </member>
        <member name="P:ILGPU.IR.Verifier.VerifierBase.Result">
            <summary>
            The verification result.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.VerifierBase.Error(ILGPU.IR.Node,System.String)">
            <summary>
            Reports a new error.
            </summary>
            <param name="node">The target node.</param>
            <param name="stage">The verification stage.</param>
        </member>
        <member name="M:ILGPU.IR.Verifier.VerifierBase.Assert(ILGPU.IR.Node,System.Boolean,System.String)">
            <summary>
            Asserts that the given condition holds true.
            </summary>
            <param name="node">The current node.</param>
            <param name="condition">The condition.</param>
            <param name="stage">The caller stage name.</param>
        </member>
        <member name="M:ILGPU.IR.Verifier.VerifierBase.Verify">
            <summary>
            Performs the verification step.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Verifier.ControlFlowVerifier">
            <summary>
            Verifiers the general structure of the control flow.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.#ctor(ILGPU.IR.Method,ILGPU.IR.VerificationResult)">
            <summary>
            Constructs a new control-flow verifier.
            </summary>
            <param name="method">The method to verify.</param>
            <param name="result">The verification result.</param>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.CreateLinkSets(ILGPU.IR.BasicBlock)">
            <summary>
            Creates new predecessor and successor ink sets.
            </summary>
            <param name="block">The current block.</param>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.AddSuccessor(ILGPU.IR.BasicBlock,ILGPU.IR.BasicBlock)">
            <summary>
            Adds a <paramref name="successor"/> to the given
            <paramref name="block"/>.
            </summary>
            <param name="block">The current block.</param>
            <param name="successor">The successor to add.</param>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.ComputePostOrder(ILGPU.IR.BasicBlock)">
            <summary>
            Computes the post order of the given block recursively.
            </summary>
            <param name="block">The current block.</param>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.VerifyBlocks">
            <summary>
            Verifies the existence and the order of all blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.VerifyLinks">
            <summary>
            Verifies all links.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.VerifyExitBlock">
            <summary>
            Verifies all exit blocks.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ControlFlowVerifier.Verify">
            <summary>
            Performs the control-flow verification step.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Verifier.ValueVerifier">
            <summary>
            Verifiers the general SSA value properties of the program.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ValueVerifier.#ctor(ILGPU.IR.Method,ILGPU.IR.VerificationResult)">
            <summary>
            Constructs a new value verifier.
            </summary>
            <param name="method">The method to verify.</param>
            <param name="result">The verification result.</param>
        </member>
        <member name="M:ILGPU.IR.Verifier.ValueVerifier.VerifyValues">
            <summary>
            Verifies all value operands for defined an unbound values.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ValueVerifier.VerifyValueBlockAssociations">
            <summary>
            Verifies all value-block associations.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ValueVerifier.FindValueRecursive(System.Collections.Generic.HashSet{ILGPU.IR.BasicBlock},ILGPU.IR.BasicBlock,ILGPU.IR.Value)">
            <summary>
            Tries to find a value recursively in all predecessors.
            </summary>
            <param name="visited">The set of visited nodes.</param>
            <param name="currentBlock">The current block.</param>
            <param name="toFind">The value to find.</param>
            <returns>True, if the value could be found.</returns>
        </member>
        <member name="M:ILGPU.IR.Verifier.ValueVerifier.VerifyPhis">
            <summary>
            Verifies all phi node references.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ValueVerifier.Verify">
            <summary>
            Performs the SSA-value verification step.
            </summary>
        </member>
        <member name="T:ILGPU.IR.Verifier.NoVerifier">
            <summary>
            A verifier that does not perform any verification steps.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.NoVerifier.Verify(ILGPU.IR.Method)">
            <summary>
            Performs no verification step.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.NoVerifier.VerifyToResult(ILGPU.IR.Method)">
            <summary>
            Returns an empty verification result.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.NoVerifier.Verify(ILGPU.IR.MethodCollection@)">
            <summary>
            Performs a verification step for all methods that should be verified.
            </summary>
            <param name="methods">The methods to verify.</param>
        </member>
        <member name="F:ILGPU.IR.Verifier.Instance">
            <summary>
            Returns a verifier instance that verifies all IR methods.
            </summary>
        </member>
        <member name="F:ILGPU.IR.Verifier.Empty">
            <summary>
            Returns an empty verifier that does not perform any verification steps.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.ApplyVerification(ILGPU.IR.Method)">
            <summary>
            Verifies the given IR method.
            </summary>
            <param name="method">The method to verify.</param>
            <returns>The created verification result object.</returns>
        </member>
        <member name="M:ILGPU.IR.Verifier.#ctor">
            <summary>
            Constructs a verifier instance.
            </summary>
        </member>
        <member name="M:ILGPU.IR.Verifier.Verify(ILGPU.IR.Method)">
            <summary>
            Verifies the given IR method and throws an
            <see cref="T:System.InvalidOperationException"/> in case of an error.
            </summary>
            <param name="method">The method to verify.</param>
        </member>
        <member name="M:ILGPU.IR.Verifier.VerifyToResult(ILGPU.IR.Method)">
            <summary>
            Verifies the given IR method.
            </summary>
            <param name="method">The method to verify.</param>
            <returns>The created verification result object.</returns>
        </member>
        <member name="M:ILGPU.IR.Verifier.Verify(ILGPU.IR.MethodCollection@)">
            <summary>
            Performs a verification step for all methods that should be verified.
            </summary>
            <param name="methods">The methods to verify.</param>
        </member>
        <member name="T:ILGPU.KernelConfig">
            <summary>
            A single kernel configuration for an explicitly grouped kernel.
            </summary>
        </member>
        <member name="F:ILGPU.KernelConfig.ImplicitlyGroupedKernelConstructor">
            <summary>
            Represents a kernel constructor for implicitly grouped kernels.
            </summary>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Constructs a new kernel configuration that does not use any dynamically
            specified shared memory.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index1D,ILGPU.Index1D,ILGPU.SharedMemoryConfig)">
            <summary>
            Constructs a new kernel configuration.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
            <param name="sharedMemoryConfig">
            The dynamic shared memory configuration.
            </param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Constructs a new kernel configuration that does not use any dynamically
            specified shared memory.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index2D,ILGPU.Index2D,ILGPU.SharedMemoryConfig)">
            <summary>
            Constructs a new kernel configuration.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
            <param name="sharedMemoryConfig">
            The dynamic shared memory configuration.
            </param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Constructs a new kernel configuration that does not use any dynamically
            specified shared memory.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new kernel configuration that does not use any dynamically
            specified shared memory.
            </summary>
            <param name="gridDimX">The grid dimension in X dimension.</param>
            <param name="gridDimY">The grid dimension in Y dimension.</param>
            <param name="gridDimZ">The grid dimension in Z dimension.</param>
            <param name="groupDimX">The group dimension in X dimension.</param>
            <param name="groupDimY">The group dimension in Y dimension.</param>
            <param name="groupDimZ">The group dimension in Z dimension.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.#ctor(ILGPU.Index3D,ILGPU.Index3D,ILGPU.SharedMemoryConfig)">
            <summary>
            Constructs a new kernel configuration.
            </summary>
            <param name="gridDim">The grid dimension to use.</param>
            <param name="groupDim">The group dimension to use.</param>
            <param name="sharedMemoryConfig">
            The dynamic shared memory configuration.
            </param>
        </member>
        <member name="P:ILGPU.KernelConfig.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.GridDim">
            <summary>
            Returns the global grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.GroupDim">
            <summary>
            Returns the global group dimension of each group.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.SharedMemoryConfig">
            <summary>
            Returns the associated dynamic memory configuration.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.UsesDynamicSharedMemory">
            <summary>
            Returns true if the current configuration uses dynamic shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.IsValid">
            <summary>
            Returns true if this configuration is a valid launch configuration.
            </summary>
        </member>
        <member name="P:ILGPU.KernelConfig.Size">
            <summary>
            Returns the total launch size.
            </summary>
        </member>
        <member name="M:ILGPU.KernelConfig.ToDimensions">
            <summary>
            Converts the current instance into a dimension tuple.
            </summary>
            <returns>A dimension tuple representing this kernel configuration.</returns>
        </member>
        <member name="M:ILGPU.KernelConfig.ToValueTuple">
            <summary>
            Converts the current instance into a value tuple.
            </summary>
            <returns>A value tuple representing this kernel configuration.</returns>
        </member>
        <member name="M:ILGPU.KernelConfig.Deconstruct(ILGPU.Index3D@,ILGPU.Index3D@)">
            <summary>
            Deconstructs the current instance into a dimension tuple.
            </summary>
            <param name="gridDim">The grid dimension.</param>
            <param name="groupDim">The group dimension.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.Deconstruct(ILGPU.Index3D@,ILGPU.Index3D@,ILGPU.SharedMemoryConfig@)">
            <summary>
            Deconstructs the current instance into a value tuple.
            </summary>
            <param name="gridDim">The grid dimension.</param>
            <param name="groupDim">The group dimension.</param>
            <param name="sharedMemoryConfig">The shared memory configuration.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index1D,ILGPU.Index1D})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index3D,ILGPU.Index1D})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index3D,ILGPU.Index2D})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index2D,ILGPU.Index2D})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index3D,ILGPU.Index3D})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index1D,ILGPU.Index1D,ILGPU.SharedMemoryConfig})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(System.ValueTuple{ILGPU.Index3D,ILGPU.Index3D,ILGPU.SharedMemoryConfig})~ILGPU.KernelConfig">
            <summary>
            Converts the given dimension tuple into an equivalent kernel configuration.
            </summary>
            <param name="dimensions">The kernel dimensions.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(ILGPU.KernelConfig)~System.ValueTuple{ILGPU.Index3D,ILGPU.Index3D}">
            <summary>
            Converts the given kernel configuration into an equivalent dimension tuple.
            </summary>
            <param name="config">The kernel configuration to convert.</param>
        </member>
        <member name="M:ILGPU.KernelConfig.op_Implicit(ILGPU.KernelConfig)~System.ValueTuple{ILGPU.Index3D,ILGPU.Index3D,ILGPU.SharedMemoryConfig}">
            <summary>
            Converts the given kernel configuration into an equivalent value tuple.
            </summary>
            <param name="config">The kernel configuration to convert.</param>
        </member>
        <member name="T:ILGPU.SharedMemoryConfig">
            <summary>
            Represents a dynamic shared memory configuration for kernels.
            </summary>
        </member>
        <member name="F:ILGPU.SharedMemoryConfig.Empty">
            <summary>
            An empty shared memory configuration.
            </summary>
            <remarks>
            This configuration does not use dynamic shared memory.
            </remarks>
        </member>
        <member name="M:ILGPU.SharedMemoryConfig.RequestDynamic``1(System.Int32)">
            <summary>
            Requests a <see cref="T:ILGPU.SharedMemoryConfig"/>
            </summary>
            <typeparam name="T">The element type to use.</typeparam>
            <param name="numElements">The number of elements to request.</param>
            <returns>A shared memory configuration that uses shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemoryConfig.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new shared memory configuration.
            </summary>
            <param name="numElements">The number of elements to allocate.</param>
            <param name="elementSize">The element size to allocate.</param>
        </member>
        <member name="P:ILGPU.SharedMemoryConfig.NumElements">
            <summary>
            Returns the number of elements.
            </summary>
        </member>
        <member name="P:ILGPU.SharedMemoryConfig.ElementSize">
            <summary>
            Returns the element size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.SharedMemoryConfig.ArraySize">
            <summary>
            Returns the array size in bytes of the dynamically allocated shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.SharedMemoryConfig.UsesDynamicSharedMemory">
            <summary>
            Returns true if this configuration uses dynamic shared memory.
            </summary>
        </member>
        <member name="T:ILGPU.RuntimeSharedMemoryConfig">
            <summary>
            A shared memory configuration that stores both static and dynamic information
            about shared memory.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSharedMemoryConfig.#ctor(ILGPU.Backends.EntryPoints.SharedMemorySpecification,ILGPU.SharedMemoryConfig)">
            <summary>
            Constructs a new shared memory configuration.
            </summary>
            <param name="specification">The general specification.</param>
            <param name="dynamicConfig">The dynamic configuration.</param>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.Specification">
            <summary>
            Returns the static specification.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.DynamicConfig">
            <summary>
            Returns the dynamic configuration.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.NumDynamicElements">
            <summary>
            Returns the number of dynamic shared memory elements.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.DynamicArraySize">
            <summary>
            Returns the array size in bytes of the dynamically allocated shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.HasSharedMemory">
            <summary>
            Returns true if the current specification.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.StaticSize">
            <summary>
            Returns the amount of shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.HasStaticMemory">
            <summary>
            Returns true if the current config requires static shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSharedMemoryConfig.HasDynamicMemory">
            <summary>
            Returns true if the current config requires dynamic shared memory.
            </summary>
        </member>
        <member name="T:ILGPU.RuntimeKernelConfig">
            <summary>
            Represents a runtime kernel configuration that is used internally to specify
            launch dimensions and shared memory settings.
            </summary>
        </member>
        <member name="F:ILGPU.RuntimeKernelConfig.Constructor">
            <summary>
            Represents the associated constructor.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeKernelConfig.#ctor(ILGPU.KernelConfig,ILGPU.Backends.EntryPoints.SharedMemorySpecification)">
            <summary>
            Constructs a new runtime kernel configuration.
            </summary>
            <param name="kernelConfig">The kernel configuration to use.</param>
            <param name="specification">The shared memory specification to use.</param>
        </member>
        <member name="P:ILGPU.RuntimeKernelConfig.GridDim">
            <summary>
            Returns the global grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeKernelConfig.GroupDim">
            <summary>
            Returns the global group dimension of each group.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeKernelConfig.SharedMemoryConfig">
            <summary>
            Returns the current shared memory configuration.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeKernelConfig.IsValid">
            <summary>
            Returns true if this configuration is a valid launch configuration.
            </summary>
        </member>
        <member name="T:ILGPU.LocalMemory">
            <summary>
            Contains methods to allocate and manage local memory.
            </summary>
        </member>
        <member name="M:ILGPU.LocalMemory.Allocate``1(System.Int32)">
            <summary>
            Allocates a single element in local memory.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <returns>An allocated element in local memory.</returns>
        </member>
        <member name="M:ILGPU.LocalMemory.Allocate1D``1(ILGPU.Index1D)">
            <summary>
            Allocates a 1D chunk of local memory with the specified number
            of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent of the buffer.</param>
            <returns>An allocated region of local memory.</returns>
        </member>
        <member name="M:ILGPU.LocalMemory.Allocate1D``2(ILGPU.Index1D,``1)">
            <summary>
            Allocates a 1D chunk of local memory with the
            specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The stride type.</typeparam>
            <param name="extent">The extent of the buffer.</param>
            <param name="stride">The buffer stride.</param>
            <returns>An allocated region of local memory.</returns>
        </member>
        <member name="M:ILGPU.LocalMemory.Allocate2D``2(ILGPU.Index2D,``1)">
            <summary>
            Allocates a 2D chunk of local memory with the
            specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The stride type.</typeparam>
            <param name="extent">The extent of the buffer.</param>
            <param name="stride">The buffer stride.</param>
            <returns>An allocated region of local memory.</returns>
        </member>
        <member name="M:ILGPU.LocalMemory.Allocate3D``2(ILGPU.Index3D,``1)">
            <summary>
            Allocates a 3D chunk of local memory with the
            specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The stride type.</typeparam>
            <param name="extent">The extent of the buffer.</param>
            <param name="stride">The buffer stride.</param>
            <returns>An allocated region of local memory.</returns>
        </member>
        <member name="T:ILGPU.MemoryFence">
            <summary>
            Contains memory-fence functions.
            </summary>
        </member>
        <member name="M:ILGPU.MemoryFence.GroupLevel">
            <summary>
            A memory fence at the group level.
            </summary>
        </member>
        <member name="M:ILGPU.MemoryFence.DeviceLevel">
            <summary>
            A memory fence at the device level.
            </summary>
        </member>
        <member name="M:ILGPU.MemoryFence.SystemLevel">
            <summary>
            A memory fence at the system level.
            </summary>
        </member>
        <member name="T:ILGPU.NotInsideKernelAttribute">
            <summary>
            Marks methods and constructors that are not supported within kernels.
            </summary>
            <remarks>
            This attribute is not required but helps us to generate better error messages.
            </remarks>
        </member>
        <member name="F:ILGPU.NotInsideKernelAttribute.AttributeType">
            <summary>
            The static type reference.
            </summary>
        </member>
        <member name="M:ILGPU.NotInsideKernelAttribute.IsDefined(System.Reflection.MethodBase)">
            <summary>
            Returns true if the method is annotated with the attribute
            <see cref="T:ILGPU.NotInsideKernelAttribute"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Resources.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.AssemblyVersionNotCompatible">
            <summary>
              Looks up a localized string similar to The assembly version &apos;{0}&apos; is not compatible with the current version &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CannotDeserializeDuplicateNodeId">
            <summary>
              Looks up a localized string similar to Duplicate node id &apos;{0}&apos; detected.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CannotFindFieldOfType">
            <summary>
              Looks up a localized string similar to Cannot find the field &apos;{0}&apos; of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CapabilityNotSupported">
            <summary>
              Looks up a localized string similar to {0} is not supported on this device..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CapabilityNotSupportedCuda">
            <summary>
              Looks up a localized string similar to {0} is not supported on this device. Requires {1} or higher..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.ContextFlagsAreNotCompatible">
            <summary>
              Looks up a localized string similar to The context flags &apos;{0}&apos; of the deserialized context are not compatible with the current flags &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CouldNotDeserializeMethod">
            <summary>
              Looks up a localized string similar to Could not load method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CouldNotDeserializeType">
            <summary>
              Looks up a localized string similar to Could not load type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CouldNotFindCorrespondingIRMethod">
            <summary>
              Looks up a localized string similar to Could not find IR method that corresponds to the method handle &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CouldNotLoadType">
            <summary>
              Looks up a localized string similar to {0}. Ensure type is publicly visible, or internally visible and define &apos;[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(&quot;{1}&quot;)]&apos;..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CustomExceptionSemantics">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; has custom exception semantics..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InternalCompilerError">
            <summary>
              Looks up a localized string similar to An internal compiler error has been detected.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InternalCompilerErrorNull">
            <summary>
              Looks up a localized string similar to Invalid null value.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidDynamicSharedMemoryConfiguration">
            <summary>
              Looks up a localized string similar to Dynamic shared memory elements specified but the kernel does not support dynamic shared memory bindings.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointIndexParameter">
            <summary>
              Looks up a localized string similar to An entry point must receive at least one index parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointIndexParameterOfWrongType">
            <summary>
              Looks up a localized string similar to An implicitly grouped entry point must receive an int index type as first parameter, long indices will not work..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointInstanceKernelMethod">
            <summary>
              Looks up a localized string similar to Only static methods and non-capturing lambdas are supported at the moment.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointParameter">
            <summary>
              Looks up a localized string similar to Not supported by-ref kernel parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointWithoutDotNetMethod">
            <summary>
              Looks up a localized string similar to Not supported entry point without a valid .Net runtime entry.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidILCode">
            <summary>
              Looks up a localized string similar to Invalid IL Code.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidKernelOperation">
            <summary>
              Looks up a localized string similar to This operation can only be called from an ILGPU kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.LocationCompilationStackLinePrefix">
            <summary>
              Looks up a localized string similar to -.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.LocationFileMessageL1C1">
            <summary>
              Looks up a localized string similar to {0} in file &apos;{1}&apos;, line {2} column {3}.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.LocationFileMessageL1C2">
            <summary>
              Looks up a localized string similar to {0} in file &apos;{1}&apos;, line {2} column {3} to {4}.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.LocationFileMessageL2C2">
            <summary>
              Looks up a localized string similar to {0} in file &apos;{1}&apos;, line {2} column {3} to line {4} column {5}.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.LocationMethodMessage">
            <summary>
              Looks up a localized string similar to {0} in method {1} declared in type {2}.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.LocationTypeMessage">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; related to type {1} (managed type &apos;{2}&apos;).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NativeMethodNotSupported">
            <summary>
              Looks up a localized string similar to Native method &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NativePlatformInvocationRequired">
            <summary>
              Looks up a localized string similar to This operation is only permitted in native-OS-platform mode. The current runtime is &apos;{0}&apos; but the native OS platform is &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedActivatorOperation">
            <summary>
              Looks up a localized string similar to The operation &apos;{0}&apos; on the .Net activator is not supported..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedArithmeticOperandTypes">
            <summary>
              Looks up a localized string similar to Not supported arithmetic operands &apos;{0}&apos; &amp; &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedArrayCreation">
            <summary>
              Looks up a localized string similar to Cannot create a dynamically sized array on an accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedArrayDimension">
            <summary>
              Looks up a localized string similar to The array dimension &apos;{0}&apos; is out of the supported array dimensions..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedByRefKernelParameters">
            <summary>
              Looks up a localized string similar to Not supported by-ref kernel parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedClassType">
            <summary>
              Looks up a localized string similar to Class type &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedCompareArgumentType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not supported in the scope of this compare operation.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedCompareOrArithmeticValue">
            <summary>
              Looks up a localized string similar to Not supported compare or arithmetic value of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedConversion">
            <summary>
              Looks up a localized string similar to Cannot convert from &apos;{0}&apos; to type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedDelegateType">
            <summary>
              Looks up a localized string similar to Delegate type &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedDynamicAllocation">
            <summary>
              Looks up a localized string similar to The allocation size of type &apos;{0}&apos; must be statically known and not a dynamic value.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedDynamicSharedMemoryAllocations">
            <summary>
              Looks up a localized string similar to Dynamic shared memory allocations are not supported by this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedFloatIntCast">
            <summary>
              Looks up a localized string similar to Cannot cast type &apos;{0}&apos; to float/int.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedILInstruction">
            <summary>
              Looks up a localized string similar to Not supported IL instruction of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedILInstructionPossibleLambda">
            <summary>
              Looks up a localized string similar to Not supported IL instruction in method &apos;{0}&apos;. Are you using a lambda closure?.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIndirectMethodCall">
            <summary>
              Looks up a localized string similar to Not supported indirect call to a method with the signature &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedInlinePTXFormat">
            <summary>
              Looks up a localized string similar to Not supported inline PTX format &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedInlinePTXFormatArgumentRef">
            <summary>
              Looks up a localized string similar to Not supported inline PTX format argument reference &apos;{1}&apos; in &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedInlinePTXFormatArgumentType">
            <summary>
              Looks up a localized string similar to Not supported inline PTX format argument type &apos;{1} in &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedInlinePTXFormatConstant">
            <summary>
              Looks up a localized string similar to Not supported inline PTX format &apos;{0}; must be a constant string reference.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedInstruction">
            <summary>
              Looks up a localized string similar to Not supported instruction &apos;{0}&apos; in method &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedInterfaceType">
            <summary>
              Looks up a localized string similar to Interface type &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedInteropIntrinsic">
            <summary>
              Looks up a localized string similar to The interop intrinsic &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntOperand">
            <summary>
              Looks up a localized string similar to Not supported int operand of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntrinsic">
            <summary>
              Looks up a localized string similar to Not supported intrinsic type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntrinsicImplementation0">
            <summary>
              Looks up a localized string similar to A function does not have an intrinsic implementation for this backend. &apos;EnableAlgorithms&apos; from the Algorithms library not invoked?.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntrinsicImplementation1">
            <summary>
              Looks up a localized string similar to The function &apos;{0}&apos; does not have an intrinsic implementation for this backend. &apos;EnableAlgorithms&apos; from the Algorithms library not invoked?.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIsInstance">
            <summary>
              Looks up a localized string similar to IsInstance is currently not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedKernelParameterType">
            <summary>
              Looks up a localized string similar to Not supported kernel-parameter type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedLanguageIntrinsic">
            <summary>
              Looks up a localized string similar to The language intrinsic &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedLoadFromStaticArray">
            <summary>
              Looks up a localized string similar to Cannot load from the static array &apos;{0} since it is mutable..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedLoadOfStaticField">
            <summary>
              Looks up a localized string similar to Cannot load from the static field &apos;{0}&apos; since it is not read only.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedLocalMemoryIntrinsic">
            <summary>
              Looks up a localized string similar to The local memory intrinsic &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedMathIntrinsic">
            <summary>
              Looks up a localized string similar to The math intrinsic with {0} arguments is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedMethodJump">
            <summary>
              Looks up a localized string similar to Not supported jump to method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedPlatform">
            <summary>
              Looks up a localized string similar to Not supported platform &apos;{0}&apos; ({1} required).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedPointerType">
            <summary>
              Looks up a localized string similar to Pointer type &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedRecursiveProgram">
            <summary>
              Looks up a localized string similar to Not supported recursive program.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedRuntimeMethod">
            <summary>
              Looks up a localized string similar to Not supported runtime method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedSharedImplicitlyGroupedKernel">
            <summary>
              Looks up a localized string similar to Shared memory is not supported by implicitly grouped kernels..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedSharedMemoryIntrinsic">
            <summary>
              Looks up a localized string similar to The shared memory intrinsic &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedSizeOf">
            <summary>
              Looks up a localized string similar to Could not resolve the native size of the type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedStoreToStaticField">
            <summary>
              Looks up a localized string similar to Cannot store a value to the static field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedStructureLayout">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; has an unsupported structure layout.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedType">
            <summary>
              Looks up a localized string similar to Not supported type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedViewIntrinsic">
            <summary>
              Looks up a localized string similar to The view intrinsic &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedVirtualMethodCall">
            <summary>
              Looks up a localized string similar to Not supported virtual call to method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedVirtualMethodCallToObject">
            <summary>
              Looks up a localized string similar to Not supported virtual call to method &apos;{0}&apos; defined in type &apos;{1}&apos; that was called on &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedVirtualMethodCallToUnconstrainedInstance">
            <summary>
              Looks up a localized string similar to Calling the virtual method &apos;{0}&apos; of unconstrained instance is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedVoidType">
            <summary>
              Looks up a localized string similar to Void type is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedWarpIntrinsic">
            <summary>
              Looks up a localized string similar to The warp intrinsic &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedWriteFormat">
            <summary>
              Looks up a localized string similar to Not supported write format &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedWriteFormatArgumentRef">
            <summary>
              Looks up a localized string similar to Not supported write format argument reference &apos;{1}&apos; in &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedWriteFormatArgumentType">
            <summary>
              Looks up a localized string similar to Not supported write format argument type &apos;{1} in &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedWriteFormatConstant">
            <summary>
              Looks up a localized string similar to Not supported write format &apos;{0}; must be a constant string reference.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportNonConstArrayDimension">
            <summary>
              Looks up a localized string similar to The array dimension &apos;{0}&apos; must be a compile-time constant and within the range of the array..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NoUses">
            <summary>
              Looks up a localized string similar to There are no uses to resolve.
            </summary>
        </member>
        <member name="T:ILGPU.Resources.RuntimeErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.CannotEnablePeerAccessToOtherAccelerator">
            <summary>
              Looks up a localized string similar to Cannot enable peer access to an accelerator of a different kind.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.CannotResolveErrorString">
            <summary>
              Looks up a localized string similar to Error-description string could not be resolved.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.CLNotSupported">
            <summary>
              Looks up a localized string similar to OpenCL is not supported on this platform.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.CudaNotSupported">
            <summary>
              Looks up a localized string similar to Cuda is not supported on this platform.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.CudaPlatform64">
            <summary>
              Looks up a localized string similar to Cuda accelerator requires 64-bit application ({0} not supported). Ensure Prefer32Bit is set to &apos;false&apos;..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidCodeGenerationOperation0">
            <summary>
              Looks up a localized string similar to Invalid code generation operation.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidCodeGenerationOperation1">
            <summary>
              Looks up a localized string similar to Invalid code generation operation:\n{0}.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidConcurrentModification">
            <summary>
              Looks up a localized string similar to Concurrent modification detected.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidCustomGroupSize">
            <summary>
              Looks up a localized string similar to Invalid custom group size &gt; 0 in a grouped-index scenario.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidDeviceTypeAttribute">
            <summary>
              Looks up a localized string similar to The parent device class is not annotated with the DeviceTypeAttribute.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidDowngradeOfDebugSymbols">
            <summary>
              Looks up a localized string similar to Invalid downgrade of debug symbols mode..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidGridDimension">
            <summary>
              Looks up a localized string similar to Invalid grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidGroupDimension">
            <summary>
              Looks up a localized string similar to Invalid group dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidKernelLaunchGridDimension">
            <summary>
              Looks up a localized string similar to Invalid grid dimensions {0} (exceeds maximum {1}).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidKernelLaunchGroupDimension">
            <summary>
              Looks up a localized string similar to Invalid group dimensions {0} (exceeds maximum {1}).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidKernelSpecializationGroupSize">
            <summary>
              Looks up a localized string similar to The given kernel specialization is not compatible with the defined group size..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidlyAssumedPointerOrViewAlignment">
            <summary>
              Looks up a localized string similar to Invalidly assumed pointer or view orientation.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidNumberOfUniformArgs">
            <summary>
              Looks up a localized string similar to The number of provided arguments does not match the required length.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidProfilingMarker">
            <summary>
              Looks up a localized string similar to Profiling marker &apos;{0}&apos; is not compatible with &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidSharedMemorySize">
            <summary>
              Looks up a localized string similar to Shared-memory size cannot be &lt; 0.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedAcceleratorStream">
            <summary>
              Looks up a localized string similar to The accelerator stream is not supported for this operation.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedDriverVersion">
            <summary>
              Looks up a localized string similar to Not supported driver version &apos;{0}&apos; (&gt;= {1} required).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedEfficientStrideCopy">
            <summary>
              Looks up a localized string similar to The stride information does not allow to perform an efficient copy operation without reordering. Use AsGeneral to convert the view to a general view with a CPU-based reordering operation..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedExplicitlyGroupedKernel">
            <summary>
              Looks up a localized string similar to Not supported explicitly-grouped kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedIndexType">
            <summary>
              Looks up a localized string similar to Not supported index type.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedKernel">
            <summary>
              Looks up a localized string similar to Not supported kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedKernelSpecialization">
            <summary>
              Looks up a localized string similar to The given kernel specialization is not compatible with the current accelerator..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedLibDeviceEnvironmentVariable">
            <summary>
              Looks up a localized string similar to Could not find environment variable &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedLibDeviceNotFoundBitCode">
            <summary>
              Looks up a localized string similar to Could not find LibDevice BitCode in &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedLibDeviceNotFoundNvvmDll">
            <summary>
              Looks up a localized string similar to Could not find NVVM DLL in &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedNonBlittableType">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not blittable.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedOpenCLCVersion">
            <summary>
              Looks up a localized string similar to Not supported OpenCL C version (&gt;= {0} required).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedPageLock">
            <summary>
              Looks up a localized string similar to Creating a page lock is not supported on the current accelerator..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedPitchedAllocation">
            <summary>
              Looks up a localized string similar to Not supported pitched allocation for type &apos;{0}&apos; and byte pitch {1}.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedProfilingMarker">
            <summary>
              Looks up a localized string similar to Cannot add profiling marker. Ensure that profiling is enabled from the ContextBuilder..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedPTXArchitecture">
            <summary>
              Looks up a localized string similar to Not supported PTX architecture.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedPTXInstructionSet">
            <summary>
              Looks up a localized string similar to Not supported PTX instruction set.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedTargetAccelerator">
            <summary>
              Looks up a localized string similar to Not supported target accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedTotalGroupSize">
            <summary>
              Looks up a localized string similar to Not supported total group size. The total group size must be &lt;= the number of available threads ({0}).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedUninitalizedArrayInitialization">
            <summary>
              Looks up a localized string similar to Creating an uninitialized array is not supported on the current platform..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.UnknownParentAccelerator">
            <summary>
              Looks up a localized string similar to Unknown parent accelerator.
            </summary>
        </member>
        <member name="T:ILGPU.RuntimeAPI">
            <summary>
            An abstract runtime API that can be used in combination with the dynamic DLL
            loader functionality of the class <see cref="T:ILGPU.RuntimeSystem"/>.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeAPI.LoadRuntimeAPI``5">
            <summary>
            Loads a runtime API that is implemented via compile-time known classes.
            </summary>
            <typeparam name="T">The abstract class type to implement.</typeparam>
            <typeparam name="TWindows">The Windows implementation.</typeparam>
            <typeparam name="TLinux">The Linux implementation.</typeparam>
            <typeparam name="TMacOS">The MacOS implementation.</typeparam>
            <typeparam name="TNotSupported">The not-supported implementation.</typeparam>
            <returns>The loaded runtime API.</returns>
        </member>
        <member name="P:ILGPU.RuntimeAPI.IsSupported">
            <summary>
            Returns true if the runtime API instance is supported on this platform.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeAPI.Init">
            <summary>
            Initializes the runtime API implementation.
            </summary>
            <returns>
            True, if the API instance could be initialized successfully.
            </returns>
        </member>
        <member name="T:ILGPU.RuntimeSystem">
            <summary>
            Represents the dynamic ILGPU assembly runtime system.
            </summary>
        </member>
        <member name="F:ILGPU.RuntimeSystem.AssemblyName">
            <summary>
            The name of the dynamic runtime assembly.
            </summary>
        </member>
        <member name="F:ILGPU.RuntimeSystem.CustomTypeName">
            <summary>
            A custom runtime type name.
            </summary>
        </member>
        <member name="F:ILGPU.RuntimeSystem.LauncherMethodName">
            <summary>
            A default launcher name.
            </summary>
        </member>
        <member name="T:ILGPU.RuntimeSystem.ScopedLock">
            <summary>
            A scoped lock that can be used in combination with a
            <see cref="T:ILGPU.RuntimeSystem"/> instance.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSystem.ScopedLock.Parent">
            <summary>
            Returns the parent runtime system instance.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSystem.ScopedLock.AssemblyVersion">
            <summary>
            Returns the original assembly version this lock has been created from.
            </summary>
            <remarks>
            This information is used to detect internal assembly corruption.
            </remarks>
        </member>
        <member name="M:ILGPU.RuntimeSystem.ScopedLock.Dispose">
            <summary>
            Releases the lock.
            </summary>
        </member>
        <member name="T:ILGPU.RuntimeSystem.MethodEmitter">
            <summary>
            Represents a method builder in the .Net world.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.MethodEmitter.#ctor(System.Reflection.Emit.DynamicMethod)">
            <summary>
            Constructs a new method emitter.
            </summary>
            <param name="method">The desired internal method.</param>
        </member>
        <member name="P:ILGPU.RuntimeSystem.MethodEmitter.Method">
            <summary>
            Returns the associated method builder.
            </summary>
        </member>
        <member name="P:ILGPU.RuntimeSystem.MethodEmitter.ILGenerator">
            <summary>
            Returns the internal IL generator.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.MethodEmitter.Finish">
            <summary>
            Finishes the building process.
            </summary>
            <returns>The emitted method.</returns>
        </member>
        <member name="F:ILGPU.RuntimeSystem.globalAssemblyVersion">
            <summary>
            The globally unique assembly version.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.GetNextAssemblyVersion">
            <summary>
            Determines the next global assembly version.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.#ctor">
            <summary>
            Constructs a new runtime system.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.ReloadAssemblyBuilder">
            <summary>
            Reloads the assembly builder.
            </summary>
        </member>
        <member name="M:ILGPU.RuntimeSystem.DefineRuntimeType(System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.TypeBuilder@)">
            <summary>
            Defines a new runtime type.
            </summary>
            <param name="attributes">The custom type attributes.</param>
            <param name="baseClass">The base class.</param>
            <param name="typeBuilder">The type builder.</param>
            <returns>The acquired scoped lock.</returns>
        </member>
        <member name="M:ILGPU.RuntimeSystem.DefineRuntimeClass(System.Type,System.Reflection.Emit.TypeBuilder@)">
            <summary>
            Defines a new runtime class.
            </summary>
            <param name="baseClass">The base class.</param>
            <param name="typeBuilder">The type builder.</param>
            <returns>The acquired scoped lock.</returns>
        </member>
        <member name="M:ILGPU.RuntimeSystem.DefineRuntimeStruct(System.Reflection.Emit.TypeBuilder@)">
            <summary>
            Defines a new runtime structure.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <returns>The acquired scoped lock.</returns>
        </member>
        <member name="M:ILGPU.RuntimeSystem.DefineRuntimeStruct(System.Boolean,System.Reflection.Emit.TypeBuilder@)">
            <summary>
            Defines a new runtime structure.
            </summary>
            <param name="explicitLayout">
            True, if the individual fields have an explicit structure layout.
            </param>
            <param name="typeBuilder">The type builder.</param>
            <returns>The acquired scoped lock.</returns>
        </member>
        <member name="M:ILGPU.RuntimeSystem.DefineRuntimeMethod(System.Type,System.Type[],ILGPU.RuntimeSystem.MethodEmitter@)">
            <summary>
            Defines a new runtime method.
            </summary>
            <param name="returnType">The return type.</param>
            <param name="parameterTypes">All parameter types.</param>
            <param name="methodEmitter">The method emitter.</param>
            <returns>The acquired scoped lock.</returns>
        </member>
        <member name="M:ILGPU.RuntimeSystem.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">
            Passing <see cref="F:ILGPU.ClearCacheMode.Everything"/>, causes a reload of the
            CLR assembly builder, which is used internally.
            </param>
        </member>
        <member name="M:ILGPU.RuntimeSystem.Dispose(System.Boolean)">
            <summary>
            Disposes the internal assembly lock.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator">
            <summary>
            Represents a general abstract accelerator.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate1D``1(System.Int64)">
            <summary>
            Allocates a 1D buffer with the specified number of elements on this
            accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="length">The number of elements to allocate.</param>
            <returns>An allocated buffer on this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate1D``2(System.Int64,``1)">
            <summary>
            Allocates a 1D buffer with the specified number of elements on this
            accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The buffer stride type.</typeparam>
            <param name="length">The number of elements to allocate.</param>
            <param name="stride">The buffer stride to use.</param>
            <returns>An allocated 1D buffer on this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Build2DStride``2(ILGPU.LongIndex2D@,ILGPU.Stride2D.GetLeadingDimensionSize,ILGPU.Stride2D.BuildStride{``1})">
            <summary>
            Builds a new 2D stride based on a generic stride description.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The buffer stride type.</typeparam>
            <param name="extent">The number of elements to use.</param>
            <param name="getLeadingDimensionSize">
            Determines the size of the leading dimension.
            </param>
            <param name="buildStride">Builds a new stride.</param>
            <returns>The 2D stride.</returns>
            <remarks>
            The leading dimension must be less or equal to <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate2D``2(ILGPU.LongIndex2D@,ILGPU.Stride2D.GetLeadingDimensionSize,ILGPU.Stride2D.BuildStride{``1})">
            <summary>
            Allocates a 2D buffer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The buffer stride type.</typeparam>
            <param name="extent">The number of elements to use.</param>
            <param name="getLeadingDimensionSize">
            Determines the size of the leading dimension.
            </param>
            <param name="buildStride">Builds a new stride.</param>
            <returns>An allocated 2D buffer on this accelerator.</returns>
            <remarks>
            The leading dimension must be less or equal to <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate2DDenseX``1(ILGPU.LongIndex2D@)">
            <summary>
            Allocates a 2D buffer with X being the leading dimension.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The number of elements to allocate.</param>
            <returns>An allocated 2D buffer on this accelerator.</returns>
            <remarks>
            Since X is the leading dimension, X must be less or equal to
            <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate2DDenseY``1(ILGPU.LongIndex2D@)">
            <summary>
            Allocates a 2D buffer with Y being the leading dimension.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The number of elements to allocate.</param>
            <returns>An allocated 2D buffer on this accelerator.</returns>
            <remarks>
            Since Y is the leading dimension, Y must be less or equal to
            <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate2DPitched``2(ILGPU.LongIndex2D@,ILGPU.Stride2D.GetLeadingDimensionSize,ILGPU.Stride2D.BuildStride{``1},System.Int32)">
            <summary>
            Allocates a pitched 2D buffer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The buffer stride type.</typeparam>
            <param name="extent">The number of elements to use.</param>
            <param name="getLeadingDimensionSize">
            Determines the size of the leading dimension.
            </param>
            <param name="buildStride">Builds a new stride.</param>
            <param name="alignmentInBytes">
            The alignment in bytes of the leading dimension.
            </param>
            <returns>An allocated pitched 2D buffer on this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate2DPitchedX``1(ILGPU.LongIndex2D@,System.Int32)">
            <summary>
            Allocates a pitched 2D buffer with X being the leading dimension.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The number of elements to allocate.</param>
            <param name="xAlignmentInBytes">
            The alignment in bytes of the leading dimension.
            </param>
            <returns>An allocated 2D buffer on this accelerator.</returns>
            <remarks>
            Since X is the leading dimension, X must be less or equal to
            <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate2DPitchedY``1(ILGPU.LongIndex2D@,System.Int32)">
            <summary>
            Allocates a pitched 2D buffer with Y being the leading dimension.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The number of elements to allocate.</param>
            <param name="yAlignmentInBytes">
            The alignment in bytes of the leading dimension.
            </param>
            <returns>An allocated 2D buffer on this accelerator.</returns>
            <remarks>
            Since Y is the leading dimension, Y must be less or equal to
            <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Build3DStride``2(ILGPU.LongIndex3D@,ILGPU.Stride3D.GetLeadingDimensionSize,ILGPU.Stride3D.BuildStride{``1})">
            <summary>
            Builds a new 3D stride based on a generic stride description.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The buffer stride type.</typeparam>
            <param name="extent">The number of elements to use.</param>
            <param name="getLeadingDimensionSize">
            Determines the size of the leading dimension.
            </param>
            <param name="buildStride">Builds a new stride.</param>
            <returns>The 3D stride.</returns>
            <remarks>
            The leading dimension must be less or equal to <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate3D``2(ILGPU.LongIndex3D,ILGPU.Stride3D.GetLeadingDimensionSize,ILGPU.Stride3D.BuildStride{``1})">
            <summary>
            Allocates a 3D buffer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The buffer stride type.</typeparam>
            <param name="extent">The number of elements to use.</param>
            <param name="getLeadingDimensionSize">
            Determines the size of the leading dimension.
            </param>
            <param name="buildStride">Builds a new stride.</param>
            <returns>An allocated 3D buffer on this accelerator.</returns>
            <remarks>
            The leading dimension must be less or equal to <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate3DDenseXY``1(ILGPU.LongIndex3D)">
            <summary>
            Allocates a 3D buffer with XY being the leading dimensions.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The number of elements to allocate.</param>
            <returns>An allocated 3D buffer on this accelerator.</returns>
            <remarks>
            Since XY are the leading dimension, X * Y must be less or equal to
            <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate3DDenseZY``1(ILGPU.LongIndex3D)">
            <summary>
            Allocates a 3D buffer with ZY being the leading dimensions.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The number of elements to allocate.</param>
            <returns>An allocated 3D buffer on this accelerator.</returns>
            <remarks>
            Since YZ are the leading dimension, Y * Z must be less or equal to
            <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate3DPitched``2(ILGPU.LongIndex3D,ILGPU.Stride3D.GetLeadingDimensionSize,ILGPU.Stride3D.BuildStride{``1},System.Int32)">
            <summary>
            Allocates a pitched 3D buffer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The buffer stride type.</typeparam>
            <param name="extent">The number of elements to use.</param>
            <param name="getLeadingDimensionSize">
            Determines the size of the leading dimension.
            </param>
            <param name="buildStride">Builds a new stride.</param>
            <param name="alignmentInBytes">
            The alignment in bytes of the leading dimension.
            </param>
            <returns>An allocated pitched 3D buffer on this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate3DPitchedXY``1(ILGPU.LongIndex3D,System.Int32)">
            <summary>
            Allocates a pitched 3D buffer with XY being the leading dimensions.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The number of elements to allocate.</param>
            <param name="xyAlignmentInBytes">
            The alignment in bytes of the leading dimension.
            </param>
            <returns>An allocated 2D buffer on this accelerator.</returns>
            <remarks>
            Since XY are the leading dimensions, X * Y must be less or equal to
            <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate3DPitchedZY``1(ILGPU.LongIndex3D,System.Int32)">
            <summary>
            Allocates a pitched 3D buffer with ZY being the leading dimensions.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The number of elements to allocate.</param>
            <param name="yzAlignmentInBytes">
            The alignment in bytes of the leading dimension.
            </param>
            <returns>An allocated 3D buffer on this accelerator.</returns>
            <remarks>
            Since YZ are the leading dimensions, Y * Z must be less or equal to
            <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CurrentType">
            <summary>
            Returns the current accelerator type.
            </summary>
            <remarks>
            Note that this static property is also accessible within kernels.
            </remarks>
        </member>
        <member name="E:ILGPU.Runtime.Accelerator.Disposed">
            <summary>
            Will be raised if the accelerator is disposed.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.syncRoot">
            <summary>
            Main object for accelerator synchronization.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.nativePtr">
            <summary>
            The current volatile native pointer of this instance.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.#ctor(ILGPU.Context,ILGPU.Runtime.Device)">
            <summary>
            Constructs a new accelerator.
            </summary>
            <param name="context">The target context.</param>
            <param name="device">The device.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.InstanceId">
            <summary>
            Returns the internal unique accelerator instance id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Context">
            <summary>
            Returns the associated ILGPU context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Device">
            <summary>
            Returns the parent device.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.DefaultStream">
            <summary>
            Returns the default stream of this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.NativePtr">
            <summary>
            Returns the current native accelerator pointer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxNumGroupsExtent">
            <summary>
            Returns a kernel extent (a grouped index) with the maximum number of groups
            using the maximum number of threads per group to launch common grid-stride
            loop kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Backend">
            <summary>
            Returns the primary backend of this accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Init(ILGPU.Backends.Backend)">
            <summary>
            Initializes the current accelerator instance.
            </summary>
            <param name="backend">The backend to use.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.OnAcceleratorCreated">
            <summary>
            Invoked when the accelerator instance has been created.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CreateExtension``2(``1)">
            <summary>
            Creates a new accelerator extension using the given provider.
            </summary>
            <typeparam name="TExtension">The type of the extension to create.</typeparam>
            <typeparam name="TExtensionProvider">
            The extension provided type to create the extension.
            </typeparam>
            <param name="provider">
            The extension provided to create the extension.
            </param>
            <returns>The created extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CreateStream">
            <summary>
            Creates a new accelerator stream.
            </summary>
            <returns>The created accelerator stream.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CreateStreamInternal">
            <summary>
            Creates a new accelerator stream.
            </summary>
            <returns>The created accelerator stream.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Synchronize">
            <summary>
            Synchronizes pending operations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.SynchronizeInternal">
            <summary>
            Synchronizes pending operations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.AllocateRaw(System.Int64,System.Int32)">
            <summary>
            Allocates a buffer with the specified size in bytes on this accelerator.
            </summary>
            <param name="length">The number of elements to allocate.</param>
            <param name="elementSize">The size of a single element in bytes.</param>
            <returns>An allocated buffer on this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.AllocateRawInternal(System.Int64,System.Int32)">
            <summary>
            Allocates a buffer with the specified number of elements on this accelerator.
            </summary>
            <param name="length">The number of elements to allocate.</param>
            <param name="elementSize">The size of a single element in bytes.</param>
            <returns>An allocated buffer on this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.AllocateRaw``4(``1,``3)">
            <summary>
            Allocates an n-D buffer with the specified number of elements on this
            accelerator times the total stride length.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TExtent">The extent type of the buffer.</typeparam>
            <typeparam name="TStrideIndex">The buffer stride index type.</typeparam>
            <typeparam name="TStride">The buffer stride type.</typeparam>
            <param name="extent">The extent of the buffer.</param>
            <param name="stride">The buffer stride to use.</param>
            <returns>An allocated n-D buffer on this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EnsureBlittable``1">
            <summary>
            Ensures that the specified type <typeparamref name="T"/> is blittable.
            </summary>
            <typeparam name="T">The type to test.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateOccupancyPerMultiprocessor``1(ILGPU.Runtime.Kernel,``0)">
            <summary>
            Estimates the occupancy of the given kernel with the given group size of a
            single multiprocessor.
            </summary>
            <typeparam name="TIndex">The index type of the group dimension.</typeparam>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="groupDim">The group dimension.</param>
            <returns>
            The estimated occupancy in percent [0.0, 1.0] of a single multiprocessor.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateOccupancyPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32)">
            <summary>
            Estimates the occupancy of the given kernel with the given group size of a
            single multiprocessor.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="groupSize">The number of threads per group.</param>
            <returns>
            The estimated occupancy in percent [0.0, 1.0] of a single multiprocessor.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateOccupancyPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary>
            Estimates the occupancy of the given kernel with the given group size of a
            single multiprocessor.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="groupSize">The number of threads per group.</param>
            <param name="dynamicSharedMemorySizeInBytes">
            The required dynamic shared-memory size in bytes.
            </param>
            <returns>
            The estimated occupancy in percent [0.0, 1.0] of a single multiprocessor.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor``1(ILGPU.Runtime.Kernel,``0)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the
            given kernel.
            </summary>
            <typeparam name="TIndex">The index type of the group dimension.</typeparam>
            <param name="kernel">The kernel used for the computation of the maximum
            number of active groups.</param>
            <param name="groupDim">The group dimension.</param>
            <returns>
            The maximum number of active groups per multiprocessor for the given kernel.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the
            given kernel.
            </summary>
            <param name="kernel">The kernel used for the computation of the maximum
            number of active groups.</param>
            <param name="groupSize">The number of threads per group.</param>
            <returns>
            The maximum number of active groups per multiprocessor for the given kernel.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the
            given kernel.
            </summary>
            <param name="kernel">The kernel used for the computation of the maximum
            number of active groups.</param>
            <param name="groupSize">The number of threads per group.</param>
            <param name="dynamicSharedMemorySizeInBytes">
            The required dynamic shared-memory size in bytes.
            </param>
            <returns>
            The maximum number of active groups per multiprocessor for the given kernel.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessorInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the
            given kernel.
            </summary>
            <param name="kernel">The kernel used for the computation of the maximum
            number of active groups.</param>
            <param name="groupSize">The number of threads per group.</param>
            <param name="dynamicSharedMemorySizeInBytes">
            The required dynamic shared-memory size in bytes.
            </param>
            <remarks>
            Note that the arguments do not have to be verified since they are already
            verified.
            </remarks>
            <returns>
            The maximum number of active groups per multiprocessor for the given kernel.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="dynamicSharedMemorySizeInBytes">
            The required dynamic shared-memory size in bytes.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="computeSharedMemorySize">
            A callback to compute the required amount of shared memory in bytes for a
            given group size.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="computeSharedMemorySize">
            A callback to compute the required amount of shared memory in bytes for a
            given group size.
            </param>
            <param name="maxGroupSize">
            The maximum group-size limit on a single multiprocessor.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="computeSharedMemorySize">
            A callback to compute the required amount of shared memory in bytes for a
            given group size.
            </param>
            <param name="maxGroupSize">
            The maximum group-size limit on a single multiprocessor.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <remarks>
            Note that the arguments do not have to be verified since they are already
            verified.
            </remarks>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="dynamicSharedMemorySizeInBytes">
            The required dynamic shared-memory size in bytes.
            </param>
            <param name="maxGroupSize">
            The maximum group-size limit on a single multiprocessor.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="dynamicSharedMemorySizeInBytes">
            The required dynamic shared-memory size in bytes.
            </param>
            <param name="maxGroupSize">
            The maximum group-size limit on a single multiprocessor.
            </param>
            <param name="minGridSize">
            The minimum grid size to gain maximum occupancy on this device.
            </param>
            <remarks>
            Note that the arguments do not have to be verified since they are already
            verified.
            </remarks>
            <returns>
            An estimated group size to gain maximum occupancy on this device.
            </returns>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.AcceleratorType">
            <summary>
            Returns the type of the accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Name">
            <summary>
            Returns the name of the device.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MemorySize">
            <summary>
            Returns the memory size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxGridSize">
            <summary>
            Returns the max grid size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxGroupSize">
            <summary>
            Returns the max group size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxNumThreadsPerGroup">
            <summary>
            Returns the maximum number of threads in a group.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxSharedMemoryPerGroup">
            <summary>
            Returns the maximum number of shared memory per thread group in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxConstantMemory">
            <summary>
            Returns the maximum number of constant memory in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.WarpSize">
            <summary>
            Return the warp size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.NumMultiprocessors">
            <summary>
            Returns the number of available multiprocessors.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxNumThreadsPerMultiprocessor">
            <summary>
            Returns the maximum number of threads per multiprocessor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxNumThreads">
            <summary>
            Returns the maximum number of threads of this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Capabilities">
            <summary>
            Returns the supported capabilities of this accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.PrintInformation(System.IO.TextWriter)">
            <summary>
            Prints device information to the given text writer.
            </summary>
            <param name="writer">The target text writer to write to.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CreatePageLockFromPinned``1(System.IntPtr,System.Int64)">
            <summary>
            Creates a page lock on the already pinned array.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="pinned">The already pinned array.</param>
            <param name="numElements">The number of elements in the array.</param>
            <returns>A page lock scope.</returns>
            <remarks>
            The array must already be pinned, otherwise the behaviour is undefined.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CreatePageLockFromPinned``1(``0[])">
            <summary>
            Creates a page lock on the already pinned array.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="pinned">The already pinned array.</param>
            <returns>A page lock scope.</returns>
            <remarks>
            The array must already be pinned, otherwise the behaviour is undefined.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CreatePageLockFromPinnedInternal``1(System.IntPtr,System.Int64)">
            <summary>
            Creates a page lock on the already pinned array.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="pinned">The already pinned array.</param>
            <param name="numElements">The number of elements in the array.</param>
            <returns>A page lock scope.</returns>
            <remarks>
            The array must already be pinned, otherwise the behaviour is undefined.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DisposeAccelerator_SyncRoot(System.Boolean)">
            <summary>
            Disposes this accelerator instance (synchronized with the current main
            synchronization object of this accelerator).
            </summary>
            <param name="disposing">
            True, if the method is not called by the finalizer.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ToString">
            <summary>
            Returns the string representation of this accelerator.
            </summary>
            <returns>The string representation of this accelerator.</returns>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.gcActivated">
            <summary>
            True, if the GC thread is activated.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.gcThread">
            <summary>
            The child-object GC thread
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.InitGC">
            <summary>
            Initializes the GC functionality.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DisposeGC_SyncRoot">
            <summary>
            Disposes the GC functionality.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.RequestGC_SyncRoot">
            <summary>
            Requests a GC run.
            </summary>
            <remarks>This method is invoked in the scope of the locked
            <see cref="F:ILGPU.Runtime.Accelerator.syncRoot"/> object.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.GCThread">
            <summary>
            GC thread to clean up cached resources.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.IKernelLaunchLoader`2">
            <summary>
            Represents an abstract kernel-launch loader.
            </summary>
            <typeparam name="TSource">The source delegate type.</typeparam>
            <typeparam name="TTarget">The target delegate type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.IKernelLaunchLoader`2.Load(ILGPU.Runtime.Accelerator,`0)">
            <summary>
            Loads the internal launcher delegate using the <paramref name="source"/>
            CPU kernel delegate.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="source">The source kernel delegate to use.</param>
            <returns>
            The loaded launcher of type <typeparamref name="TTarget"/>.
            </returns>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.launchCache">
            <summary>
            The internal async launch cache dictionary.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.InitLaunchCache">
            <summary>
            Initializes the local launch cache.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.LaunchCacheEnabled">
            <summary>
            Returns true if the launcher cache is enabled.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.GetOrLoadLauncher``3(``0)">
            <summary>
            Gets or loads the given action using the provided launcher loaded.
            </summary>
            <typeparam name="TSource">The source delegate type load.</typeparam>
            <typeparam name="TTarget">The target kernel delegate type.</typeparam>
            <typeparam name="TLaunchLoader">The specialized launcher loader.</typeparam>
            <param name="action">The action to load.</param>
            <returns>The loaded target delegate launcher.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ClearLaunchCache_SyncRoot">
            <summary>
            Clears the internal cache.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.NumberNewChildObjectsUntilGC">
            <summary>
            Constant to control GC invocations.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.MinNumberOfChildObjectsInGC">
            <summary>
            Minimum number of child objects before we apply GC.
            </summary>
            <remarks>
            Should be less or equal to <see cref="F:ILGPU.Runtime.Accelerator.NumberNewChildObjectsUntilGC"/>.
            </remarks>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.childObjects">
            <summary>
            The list of linked child objects.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.NumberChildObjects">
            <summary>
            Returns the number of the registered child objects that depend on this
            accelerator object.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.RequestChildObjectsGC_SyncRoot">
            <summary>
            True, if a GC run is requested to clean disposed child objects.
            </summary>
            <remarks>This method is invoked in the scope of the locked
            <see cref="F:ILGPU.Runtime.Accelerator.syncRoot"/> object.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.RegisterChildObject``1(``0)">
            <summary>
            Registers a child object with the current accelerator object.
            </summary>
            <param name="child">The child object to register.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ForEachChildObject``1(System.Action{``0})">
            <summary>
            Perform an action on each child object.
            </summary>
            <typeparam name="T">The type of child object.</typeparam>
            <param name="callback">The action to perform on the object.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DisposeChildObject_AcceleratorObject(ILGPU.Runtime.AcceleratorObject,System.Boolean)">
            <summary>
            Disposes the given child object associated with this accelerator instance.
            CAUTION: this function is invoked by the
            <see cref="M:ILGPU.Runtime.AcceleratorObject.Dispose(System.Boolean)"/> function only. It should
            never be called in a different context.
            </summary>
            <param name="acceleratorObject">The object to dispose.</param>
            <param name="disposing">
            True, if the method is not called by the finalizer.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DisposeChildObjects_SyncRoot(System.Boolean)">
            <summary>
            Disposes all child objects that are still alive since they are not allowed
            to live longer than the parent accelerator object.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ChildObjectsGC_SyncRoot">
            <summary>
            GC method to clean disposed child objects.
            </summary>
            <remarks>This method is invoked in the scope of the locked
            <see cref="F:ILGPU.Runtime.Accelerator.syncRoot"/> object.</remarks>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.currentAccelerator">
            <summary>
            Represents the current accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Current">
            <summary>
            Returns the current group runtime context.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Bind">
            <summary>
            Makes this accelerator the current one for this thread.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.BindScoped">
            <summary>
            Makes this accelerator the current one for this thread and
            returns a <see cref="T:ILGPU.Runtime.ScopedAcceleratorBinding"/> object that allows
            to easily recover the old binding.
            </summary>
            <returns>A scoped binding object.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.OnBind">
            <summary>
            Will be invoked when this accelerator will the current one.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.OnUnbind">
            <summary>
            Will be invoked when this accelerator is no longer the current one.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.NumberNewKernelsUntilGC">
            <summary>
            Constant to control GC invocations.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.MinNumberOfKernelsInGC">
            <summary>
            Minimum number of kernel objects before we apply GC.
            </summary>
            <remarks>
            Should be less or equal to <see cref="F:ILGPU.Runtime.Accelerator.NumberNewKernelsUntilGC"/>.
            </remarks>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey">
            <summary>
            A cached kernel key.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.#ctor(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Constructs a new kernel key.
            </summary>
            <param name="entry">The entry point description.</param>
            <param name="specialization">The kernel specialization.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.Entry">
            <summary>
            Returns the associated entry point description.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.Specialization">
            <summary>
            Returns the associated kernel specialization.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.Equals(ILGPU.Runtime.Accelerator.CachedCompiledKernelKey)">
            <summary>
            Returns true if the given cached key is equal to the current one.
            </summary>
            <param name="other">The other key.</param>
            <returns>
            True, if the given cached key is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.GetHashCode">
            <summary>
            Returns the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedCompiledKernelKey.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.CachedKernelKey">
            <summary>
            A cached kernel key.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.#ctor(ILGPU.Runtime.Accelerator.CachedCompiledKernelKey,System.Int32)">
            <summary>
            Constructs a new kernel key.
            </summary>
            <param name="compiledKernelKey">
            The compiled kernel key for lookup purposes.
            </param>
            <param name="implicitGroupSize">
            The implicit group size (if any).
            </param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedKernelKey.CompiledKernelKey">
            <summary>
            The associated compiled kernel key for lookup purposes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedKernelKey.ImplicitGroupSize">
            <summary>
            Returns the associated implicit group size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.Equals(ILGPU.Runtime.Accelerator.CachedKernelKey)">
            <summary>
            Returns true if the given cached key is equal to the current one.
            </summary>
            <param name="other">The other key.</param>
            <returns>
            True, if the given cached key is equal to the current one.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.GetHashCode">
            <summary>
            Returns the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.CachedKernel">
            <summary>
            A cached kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernel.#ctor(System.WeakReference{System.Object},ILGPU.Runtime.KernelInfo)">
            <summary>
            Constructs a new cached kernel.
            </summary>
            <param name="kernel">The kernel to cache.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedKernel.KernelInfo">
            <summary>
            Returns the stored kernel information.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernel.TryGetKernel``1(``0@)">
            <summary>
            Tries to resolve the associated kernel.
            </summary>
            <param name="kernel">The resolved kernel.</param>
            <returns>True, if the associated kernel could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernel.UpdateReference``1(``0)">
            <summary>
            Tries to update the internal weak reference or creates a new one
            pointing to the given target.
            </summary>
            <param name="target">The new target kernel.</param>
            <returns>
            An updated weak reference that points to the given target.
            </returns>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.IKernelLoader">
            <summary>
            Represents a generic kernel loader.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.IKernelLoader.GroupSize">
            <summary>
            Returns the custom group size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.IKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel using the given accelerator.
            </summary>
            <param name="accelerator">
            The target accelerator for the loading operation.
            </param>
            <param name="compiledKernel">The compiled kernel to load.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.CachedKernelLoader`2">
            <summary>
            Represents an internal cached kernel loader.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.compiledKernelCache">
            <summary>
            A cache for compiled kernel objects.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.kernelCache">
            <summary>
            A cache for loaded kernel objects.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.InitKernelCache">
            <summary>
            Initializes the local kernel cache.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.KernelCacheEnabled">
            <summary>
            Returns true if the kernel cache is enabled.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.RequestKernelCacheGC_SyncRoot">
            <summary>
            True, if a GC run is requested to clean disposed child kernels.
            </summary>
            <remarks>
            This method is invoked in the scope of the locked <see cref="F:ILGPU.Runtime.Accelerator.syncRoot"/>
            object.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadCachedKernel``2(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``0@,ILGPU.Runtime.Accelerator.CachedKernelLoader{``1,``0},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads a kernel specified by the given method.
            </summary>
            <typeparam name="TKernelLoader">The type of the kernel loader.</typeparam>
            <typeparam name="T">The internal cached type.</typeparam>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <param name="cachedLoader">The cached kernel loader.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadGenericKernelDirect``1(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``0@,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads a kernel specified by the given method without using internal caches.
            </summary>
            <typeparam name="TKernelLoader">
            The type of the custom kernel loader.
            </typeparam>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadGenericKernel``1(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Runtime.KernelSpecialization,``0@,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads a kernel specified by the given method.
            </summary>
            <typeparam name="TKernelLoader">The type of the kernel loader.</typeparam>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadSpecializationKernelDirect``2(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``1@,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads a kernel specified by the given method without using internal caches.
            </summary>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded specialized kernel delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadSpecializationKernel``2(ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Runtime.KernelSpecialization,``1@,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads a kernel specified by the given method.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <typeparam name="TKernelLoader">
            The type of the custom kernel loader.
            </typeparam>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CompileKernel(ILGPU.Backends.EntryPoints.EntryPointDescription@)">
            <summary>
            Compiles the given method into a <see cref="T:ILGPU.Backends.CompiledKernel"/>.
            </summary>
            <param name="entry">
            The entry point to compile into a
            <see cref="T:ILGPU.Backends.CompiledKernel"/>.</param>
            <returns>The compiled kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CompileKernel(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@)">
            <summary>
            Compiles the given method into a <see cref="T:ILGPU.Backends.CompiledKernel"/> using the given
            kernel specialization.
            </summary>
            <param name="entry">
            The entry point to compile into a
            <see cref="T:ILGPU.Backends.CompiledKernel"/>.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The compiled kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ClearKernelCache_SyncRoot">
            <summary>
            Clears the internal cache.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.KernelCacheGC_SyncRoot">
            <summary>
            GC method to clean disposed kernels.
            </summary>
            <remarks>
            This method is invoked in the scope of the locked <see cref="F:ILGPU.Runtime.Accelerator.syncRoot"/>
            object.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.AdjustAndVerifyKernelGroupSize(System.Int32@,ILGPU.Backends.EntryPoints.EntryPoint)">
            <summary>
            Adjusts and verifies a custom group size of a specific kernel.
            Note that this function ensures that implicitly grouped kernels
            without an explicit group size will be launched with a group size
            that is equal to the available warp size.
            </summary>
            <param name="customGroupSize">
            The custom group size to adjust and verify.
            </param>
            <param name="entryPoint">The kernel entry point.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel(ILGPU.Backends.CompiledKernel)">
            <summary>
            Loads the given explicitly grouped kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernelInternal(ILGPU.Backends.CompiledKernel)">
            <summary>
            Loads the given explicitly grouped kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel(ILGPU.Backends.CompiledKernel,System.Int32)">
            <summary>
            Loads the given implicitly-grouped kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group
            size.
            </remarks>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel(ILGPU.Backends.CompiledKernel,System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly-grouped kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">
            Detailed kernel information about the loaded kernel.
            </param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group
            size.
            </remarks>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly-grouped kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">
            Detailed kernel information about the loaded kernel.
            </param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group
            size.
            </remarks>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(ILGPU.Backends.CompiledKernel)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="kernelInfo">
            Detailed kernel information about the loaded kernel.
            </param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernelInternal(ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="kernelInfo">
            Detailed kernel information about the loaded kernel.
            </param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            </remarks>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.DefaultKernelLoader">
            <summary>
            Represents a default kernel loader.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.DefaultKernelLoader.GroupSize">
            <summary>
            Returns 0.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DefaultKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads an explicitly grouped kernel.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.GroupedKernelLoader">
            <summary>
            Represents a grouped kernel loader for implicitly-grouped kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.GroupedKernelLoader.#ctor(System.Int32)">
            <summary>
            Constructs a new grouped kernel loader.
            </summary>
            <param name="groupSize">The custom group size.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.GroupedKernelLoader.GroupSize">
            <summary>
            Returns the assigned group size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.GroupedKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads an implicitly grouped kernel.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.AutoKernelLoader">
            <summary>
            Represents an automatically configured grouped kernel loader for
            implicitly-grouped kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.AutoKernelLoader.GroupSize">
            <summary cref="P:ILGPU.Runtime.Accelerator.IKernelLoader.GroupSize"/>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.AutoKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads an automatically grouped kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadGenericKernel``2(ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,``1@,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads a kernel specified by the given method and returns a launcher of the
            specified type. Note that implicitly-grouped kernels will be launched with
            a group size of the current warp size of the accelerator.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <typeparam name="TKernelLoader">
            The type of the custom kernel loader.
            </typeparam>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelLoader">The kernel loader.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel(System.Reflection.MethodInfo)">
            <summary>
            Loads the given explicitly grouped kernel. Implicitly-grouped kernels are
            not supported.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel must not be disposed manually.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel(System.Reflection.MethodInfo,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel. Implicitly-grouped kernels are
            not supported.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel must not be disposed manually.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel(System.Reflection.MethodInfo,ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel. Implicitly-grouped kernels are
            not supported.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel must not be disposed manually.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Loads the given implicitly-grouped kernel. Implicitly-grouped kernel
            will be launched with the given group size.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel must not be disposed manually.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(System.Reflection.MethodInfo)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel must not be disposed manually.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(System.Reflection.MethodInfo,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel must not be disposed manually.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel``1(System.Reflection.MethodInfo)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels are not supported.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel``1(System.Reflection.MethodInfo,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="method">The method to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel``1(System.Reflection.MethodInfo,ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="method">The method to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel``1(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel``1(System.Reflection.MethodInfo,System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            <param name="kernelInfo">Detailed kernel information.</param>
            Note that implicitly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel``1(System.Reflection.MethodInfo)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel``1(System.Reflection.MethodInfo,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel``2(``1,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel``2(``1,ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel``2(``1,System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel``2(``1,System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel``2(``1,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <param name="kernelInfo">Detailed kernel information.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel``2(``1)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TSourceDelegate">The source delegate type.</typeparam>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="methodDelegate">The delegate to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.storedPeerAccelerators">
            <summary>
            Contains a collection of all peer accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.PeerAccessAcceleratorDestroyed(System.Object,System.EventArgs)">
            <summary>
            Event handler to disable peer access to disposed accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CanAccessPeer(ILGPU.Runtime.Accelerator)">
            <summary>
            Returns true if the current accelerator can directly access the memory
            of the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
            <returns>True, if the current accelerator can directly access the memory
            of the given accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.HasPeerAccess(ILGPU.Runtime.Accelerator)">
            <summary>
            Returns true if peer access between the current and the given accelerator
            has been enabled.
            </summary>
            <param name="otherAccelerator">The target accelerator.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)">
            <summary>
            Returns true if the current accelerator can directly access the memory
            of the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
            <returns>True, if the current accelerator can directly access the memory
            of the given accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EnableBidirectionalPeerAccess(ILGPU.Runtime.Accelerator)">
            <summary>
            Tries to enable a bidirectional peer access between the current and the given
            accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
            <returns>True, if the bidirectional access could be established.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EnablePeerAccess(ILGPU.Runtime.Accelerator)">
            <summary>
            Enables peer access to the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary>
            Enables peer access to the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DisablePeerAccess(ILGPU.Runtime.Accelerator)">
            <summary>
            Disables peer access to the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary>
            Disables peer access to the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchLoader`1">
            <summary>
            Wraps an explicit kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchAutoGroupedLoader`2">
            <summary>
            Wraps an automatically grouped kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchLoader`2">
            <summary>
            Wraps an explicit kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchAutoGroupedLoader`3">
            <summary>
            Wraps an automatically grouped kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchLoader`3">
            <summary>
            Wraps an explicit kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchAutoGroupedLoader`4">
            <summary>
            Wraps an automatically grouped kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchLoader`4">
            <summary>
            Wraps an explicit kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchAutoGroupedLoader`5">
            <summary>
            Wraps an automatically grouped kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchLoader`5">
            <summary>
            Wraps an explicit kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchAutoGroupedLoader`6">
            <summary>
            Wraps an automatically grouped kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchLoader`6">
            <summary>
            Wraps an explicit kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchAutoGroupedLoader`7">
            <summary>
            Wraps an automatically grouped kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchLoader`7">
            <summary>
            Wraps an explicit kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchAutoGroupedLoader`8">
            <summary>
            Wraps an automatically grouped kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchLoader`8">
            <summary>
            Wraps an explicit kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchAutoGroupedLoader`9">
            <summary>
            Wraps an automatically grouped kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchLoader`9">
            <summary>
            Wraps an explicit kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchAutoGroupedLoader`10">
            <summary>
            Wraps an automatically grouped kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchLoader`10">
            <summary>
            Wraps an explicit kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchAutoGroupedLoader`11">
            <summary>
            Wraps an automatically grouped kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchLoader`11">
            <summary>
            Wraps an explicit kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchAutoGroupedLoader`12">
            <summary>
            Wraps an automatically grouped kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchLoader`12">
            <summary>
            Wraps an explicit kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchAutoGroupedLoader`13">
            <summary>
            Wraps an automatically grouped kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchLoader`13">
            <summary>
            Wraps an explicit kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchAutoGroupedLoader`14">
            <summary>
            Wraps an automatically grouped kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchLoader`14">
            <summary>
            Wraps an explicit kernel loader.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.KernelLaunchAutoGroupedLoader`15">
            <summary>
            Wraps an automatically grouped kernel loader.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``1(System.Action{``0},ILGPU.Runtime.AcceleratorStream,ILGPU.KernelConfig@,``0)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``1(System.Action{``0},ILGPU.KernelConfig@,``0)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``2(System.Action{``0,``1},ILGPU.Runtime.AcceleratorStream,``0,``1)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``2(System.Action{``0,``1},ILGPU.Runtime.AcceleratorStream,ILGPU.KernelConfig@,``0,``1)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``2(System.Action{``0,``1},ILGPU.KernelConfig@,``0,``1)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``3(System.Action{``0,``1,``2},ILGPU.Runtime.AcceleratorStream,``0,``1,``2)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``3(System.Action{``0,``1,``2},ILGPU.Runtime.AcceleratorStream,ILGPU.KernelConfig@,``0,``1,``2)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``3(System.Action{``0,``1,``2},ILGPU.KernelConfig@,``0,``1,``2)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``4(System.Action{``0,``1,``2,``3},ILGPU.Runtime.AcceleratorStream,``0,``1,``2,``3)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``4(System.Action{``0,``1,``2,``3},ILGPU.Runtime.AcceleratorStream,ILGPU.KernelConfig@,``0,``1,``2,``3)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``4(System.Action{``0,``1,``2,``3},ILGPU.KernelConfig@,``0,``1,``2,``3)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``5(System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.AcceleratorStream,``0,``1,``2,``3,``4)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``5(System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.AcceleratorStream,ILGPU.KernelConfig@,``0,``1,``2,``3,``4)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``5(System.Action{``0,``1,``2,``3,``4},ILGPU.KernelConfig@,``0,``1,``2,``3,``4)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``6(System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.AcceleratorStream,``0,``1,``2,``3,``4,``5)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``6(System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.AcceleratorStream,ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``6(System.Action{``0,``1,``2,``3,``4,``5},ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``7(System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.AcceleratorStream,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``7(System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.AcceleratorStream,ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``7(System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.AcceleratorStream,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.AcceleratorStream,ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.AcceleratorStream,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.AcceleratorStream,ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.AcceleratorStream,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.AcceleratorStream,ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.AcceleratorStream,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.AcceleratorStream,ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.AcceleratorStream,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.AcceleratorStream,ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <param name="arg12">Argument 12 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <param name="arg12">Argument 12 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.AcceleratorStream,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <param name="arg12">Argument 12 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <param name="arg12">Argument 12 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.AcceleratorStream,ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <param name="arg12">Argument 12 of the underlying kernel.</param>
            <param name="arg13">Argument 13 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <param name="arg12">Argument 12 of the underlying kernel.</param>
            <param name="arg13">Argument 13 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.AcceleratorStream,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <param name="arg12">Argument 12 of the underlying kernel.</param>
            <param name="arg13">Argument 13 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <param name="arg12">Argument 12 of the underlying kernel.</param>
            <param name="arg13">Argument 13 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.AcceleratorStream,ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <param name="arg12">Argument 12 of the underlying kernel.</param>
            <param name="arg13">Argument 13 of the underlying kernel.</param>
            <param name="arg14">Argument 14 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Launch``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.KernelConfig@,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelConfig">The launch configuration.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <param name="arg12">Argument 12 of the underlying kernel.</param>
            <param name="arg13">Argument 13 of the underlying kernel.</param>
            <param name="arg14">Argument 14 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},ILGPU.Runtime.AcceleratorStream,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The stream to use.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <param name="arg12">Argument 12 of the underlying kernel.</param>
            <param name="arg13">Argument 13 of the underlying kernel.</param>
            <param name="arg14">Argument 14 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LaunchAutoGrouped``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Loads the given kernel and launches it immediately using the given arguments
            with the help of the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="action">The action to compile into a kernel.</param>
            <param name="extent">The launch extent.</param>
            <param name="arg1">Argument 1 of the underlying kernel.</param>
            <param name="arg2">Argument 2 of the underlying kernel.</param>
            <param name="arg3">Argument 3 of the underlying kernel.</param>
            <param name="arg4">Argument 4 of the underlying kernel.</param>
            <param name="arg5">Argument 5 of the underlying kernel.</param>
            <param name="arg6">Argument 6 of the underlying kernel.</param>
            <param name="arg7">Argument 7 of the underlying kernel.</param>
            <param name="arg8">Argument 8 of the underlying kernel.</param>
            <param name="arg9">Argument 9 of the underlying kernel.</param>
            <param name="arg10">Argument 10 of the underlying kernel.</param>
            <param name="arg11">Argument 11 of the underlying kernel.</param>
            <param name="arg12">Argument 12 of the underlying kernel.</param>
            <param name="arg13">Argument 13 of the underlying kernel.</param>
            <param name="arg14">Argument 14 of the underlying kernel.</param>
            <remarks>
            Uses the internal launcher cache that explicitly caches all launched kernels
            using strong references. To avoid caching use the context caching mode
            <see cref="F:ILGPU.CachingMode.NoKernelCaching" />.
            </remarks>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorType">
            <summary>
            Represents the general type of an accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.AcceleratorType.CPU">
            <summary>
            Represents a CPU accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.AcceleratorType.Cuda">
            <summary>
            Represents a Cuda accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.AcceleratorType.OpenCL">
            <summary>
            Represents an OpenCL accelerator (CPU/GPU via OpenCL).
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.IAcceleratorBuilder">
            <summary>
            An abstract builder type for accelerators.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IAcceleratorBuilder.AcceleratorType">
            <summary>
            Returns the type of the associated accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.IAcceleratorBuilder.CreateAccelerator(ILGPU.Context)">
            <summary>
            Creates a new accelerator instance.
            </summary>
            <param name="context">The context instance.</param>
            <returns>The created accelerator instance.</returns>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorExtension">
            <summary>
            Represents an abstract accelerator extension that can store additional data.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorException">
            <summary>
            The exception that is thrown when a specific operation did not succeed.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorException.#ctor">
            <summary>
            Initializes a new instance of the AcceleratorException class.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AcceleratorException class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AcceleratorException class with a specified
            error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AcceleratorException class with serialized
            data.
            </summary>
            <param name="serializationInfo">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.
            </param>
            <param name="streamingContext">
            The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.
            </param>
        </member>
        <member name="P:ILGPU.Runtime.AcceleratorException.AcceleratorType">
            <summary>
            Returns the associated accelerator type.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.IAcceleratorObject">
            <summary>
            Represents an abstract accelerator object.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IAcceleratorObject.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IAcceleratorObject.AcceleratorType">
            <summary>
            Returns the accelerator type of this object.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorObject">
            <summary>
            Represents the base class for all accelerator-dependent objects.
            </summary>
            <remarks>
            Note that accelerator objects are destroyed when their parent accelerator
            object is destroyed.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorObject.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs an accelerator object.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
        </member>
        <member name="P:ILGPU.Runtime.AcceleratorObject.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.AcceleratorObject.AcceleratorType">
            <summary>
            Returns the accelerator type of this object.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorObject.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorObject.DisposeAcceleratorObject_Accelerator(System.Boolean)">
            <summary>
            Disposes this accelerator object. Implementations of this function can
            assume that the associated accelerator is currently bound and active.
            </summary>
            <param name="disposing">
            True, if the method is not called by the finalizer.
            </param>
            <remarks>
            This function is called by the owning accelerator instance. This can either
            be <see cref="M:ILGPU.Runtime.Accelerator.DisposeChildObject_AcceleratorObject(ILGPU.Runtime.AcceleratorObject,System.Boolean)"/> or
            <see cref="M:ILGPU.Runtime.Accelerator.DisposeChildObjects_SyncRoot(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorObject.DisposeAcceleratorObject(System.Boolean)">
            <summary>
            Disposes this accelerator object. Implementations of this function can
            assume that the associated accelerator is currently bound and active.
            </summary>
            <param name="disposing">
            True, if the method is not called by the finalizer.
            </param>
            <remarks>
            This function is called by the owning accelerator instance. This can either
            be <see cref="M:ILGPU.Runtime.Accelerator.DisposeChildObject_AcceleratorObject(ILGPU.Runtime.AcceleratorObject,System.Boolean)"/> or
            <see cref="M:ILGPU.Runtime.Accelerator.DisposeChildObjects_SyncRoot(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorStream">
            <summary>
            Represents an abstract kernel stream for asynchronous processing.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new accelerator stream.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.Synchronize">
            <summary>
            Synchronizes all queued operations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.SynchronizeAsync">
            <summary>
            Synchronizes all queued operations asynchronously.
            </summary>
            <returns>A task object to wait for.</returns>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.BindScoped">
            <summary>
            Makes the associated accelerator the current one for this thread and
            returns a <see cref="T:ILGPU.Runtime.ScopedAcceleratorBinding"/> object that allows
            to easily recover the old binding.
            </summary>
            <returns>A scoped binding object.</returns>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.AddProfilingMarker">
            <summary>
            Adds a profiling marker into the stream.
            </summary>
            <returns>The profiling marker.</returns>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.AddProfilingMarkerInternal">
            <summary>
            Adds a profiling marker into the stream.
            </summary>
            <returns>The profiling marker.</returns>
        </member>
        <member name="T:ILGPU.Runtime.ArrayViewExtensions">
            <summary>
            Array view extension methods
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.LoadEffectiveAddress``1(ILGPU.ArrayView{``0})">
            <summary>
            Loads the effective address of the current view.
            </summary>
            <returns>The effective address.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.LoadEffectiveAddressAsPtr``1(ILGPU.ArrayView{``0})">
            <summary>
            Loads the effective address of the current view.
            </summary>
            <returns>The effective address.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.VerifyAlignmentInBytes``1(System.Int32)">
            <summary>
            Verifies the given alignment in bytes.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="alignmentInBytes">The alignment in bytes.</param>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AlignTo``1(ILGPU.ArrayView{``0},System.Int32)">
            <summary>
            Aligns the given array view to the specified alignment in bytes and returns a
            view spanning the initial unaligned parts of the given view and another
            view (main) spanning the remaining aligned elements of the given view.
            </summary>
            <param name="view">The source view.</param>
            <param name="alignmentInBytes">The basic alignment in bytes.</param>
            <returns>
            The prefix and main views pointing to non-aligned and aligned sub-views of
            the given view.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AlignTo``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},System.Int32)">
            <summary>
            Aligns the given array view to the specified alignment in bytes and returns a
            view spanning the initial unaligned parts of the given view and another
            view (main) spanning the remaining aligned elements of the given view.
            </summary>
            <param name="view">The source view.</param>
            <param name="alignmentInBytes">The basic alignment in bytes.</param>
            <returns>
            The prefix and main views pointing to non-aligned and aligned sub-views of
            the given view.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsAligned``1(ILGPU.ArrayView{``0},System.Int32)">
            <summary>
            Ensures that the array view is aligned to the specified alignment in bytes
            and returns the input view. Note that this operation explicitly generates an
            operation in the ILGPU IR that preserves these semantics. This enables the
            generation of debug assertions and guides the internal vectorization analysis
            to assume the given alignment even though it might not be able to prove that
            the given alignment is valid.
            </summary>
            <param name="view">The source view.</param>
            <param name="alignmentInBytes">The basic alignment in bytes.</param>
            <returns>The validated input view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsAligned``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},System.Int32)">
            <summary>
            Ensures that the array view is aligned to the specified alignment in bytes
            and returns the input view. Note that this operation explicitly generates an
            operation in the ILGPU IR that preserves these semantics. This enables the
            generation of debug assertions and guides the internal vectorization analysis
            to assume the given alignment even though it might not be able to prove that
            the given alignment is valid.
            </summary>
            <param name="view">The source view.</param>
            <param name="alignmentInBytes">The basic alignment in bytes.</param>
            <returns>The validated input view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.VariableView``1(ILGPU.ArrayView{``0},ILGPU.Index1D)">
            <summary>
            Returns a variable view to the given element.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="element">The element index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.VariableView``1(ILGPU.ArrayView{``0},ILGPU.LongIndex1D)">
            <summary>
            Returns a variable view to the given element.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="element">The element index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsDense``1(ILGPU.ArrayView{``0})">
            <summary>
            Converts this array view into a dense version.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <returns>The updated array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsGeneral``1(ILGPU.ArrayView{``0},ILGPU.Stride1D.General)">
            <summary>
            Converts this array view into a general version.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <param name="stride">The generic stride information to use.</param>
            <returns>The updated array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsGeneral``1(ILGPU.ArrayView{``0})">
            <summary>
            Converts this array view into a general version.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view.</param>
            <returns>The updated array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.HasNoData``1(``0)">
            <summary>
            Returns true if the current view is not valid or does not span over a single
            element (length &lt; 1).
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="view">The view instance.</param>
            <returns>True, this view has no data.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.HasData``1(``0)">
            <summary>
            Returns true if the current view is valid and includes at least a single
            element (length &gt; 0).
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="view">The view instance.</param>
            <returns>True, this view has a least one valid data element.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAccelerator``1(``0)">
            <summary>
            Returns the associated accelerator of the current view.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="view">The view instance.</param>
            <returns>The associated parent accelerator.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetContext``1(``0)">
            <summary>
            Returns the associated parent context of the current view.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="view">The view instance.</param>
            <returns>The associated parent context.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetContextProperties``1(``0)">
            <summary>
            Returns the associated accelerator of the current view.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="view">The view instance.</param>
            <returns>The associated parent accelerator.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAcceleratorType``1(``0)">
            <summary>
            Returns the associated accelerator type of the current view.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="view">The view instance.</param>
            <returns>The associated parent accelerator type.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetDefaultStream``1(``0)">
            <summary>
            Returns the associated default stream of the parent accelerator.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="view">The view instance.</param>
            <returns>The default stream of the parent accelerator.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetPageLockingMode``1(``0)">
            <summary>
            Returns the current page locking mode.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="view">The view instance.</param>
            <returns>The current page locking mode.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.UsesAutoPageLocking``1(``0)">
            <summary>
            Returns true if the view is attached to a context using
            <see cref="F:ILGPU.PageLockingMode.Auto"/>.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="view">The view instance.</param>
            <returns>True, if the parent context uses automatic page locking.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsTransposed``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseX})">
            <summary>
            Reinterpets the given view as a transposed dense view.
            </summary>
            <typeparam name="T">The view element type.</typeparam>
            <param name="view">The view instance.</param>
            <returns>The transposed array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsTransposed``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY})">
            <summary>
            Reinterpets the given view as a transposed dense view.
            </summary>
            <typeparam name="T">The view element type.</typeparam>
            <param name="view">The view instance.</param>
            <returns>The transposed array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsTransposed``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.General})">
            <summary>
            Reinterpets the given view as a transposed view.
            </summary>
            <typeparam name="T">The view element type.</typeparam>
            <param name="view">The view instance.</param>
            <returns>The transposed array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsTransposed``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseXY})">
            <summary>
            Reinterpets the given view as a transposed dense view.
            </summary>
            <typeparam name="T">The view element type.</typeparam>
            <param name="view">The view instance.</param>
            <returns>The transposed array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsTransposed``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY})">
            <summary>
            Reinterpets the given view as a transposed dense view.
            </summary>
            <typeparam name="T">The view element type.</typeparam>
            <param name="view">The view instance.</param>
            <returns>The transposed array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsTransposed``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.General})">
            <summary>
            Reinterpets the given view as a transposed view.
            </summary>
            <typeparam name="T">The view element type.</typeparam>
            <param name="view">The view instance.</param>
            <returns>The transposed array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.MemSetToZero``1(``0)">
            <summary>
            Sets the contents of the given buffer to zero using the default accelerator
            stream.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="view">The view instance.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.MemSetToZero``1(``0,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="view">The view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.MemSet``1(``0,System.Byte)">
            <summary>
            Sets the contents of the given buffer to the given byte value using the
            default accelerator stream.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="view">The view instance.</param>
            <param name="value">The value to write into the memory buffer.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.MemSet``1(``0,ILGPU.Runtime.AcceleratorStream,System.Byte)">
            <summary>
            Sets the contents of the current buffer to the given byte value.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="view">The view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="value">The value to write into the memory buffer.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyTo``1(``0,``0@)">
            <summary>
            Copies from the source view into the target view.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="target">The target view instance.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyTo``1(``0,ILGPU.Runtime.AcceleratorStream,``0@)">
            <summary>
            Copies from the source view into the target view.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view instance.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFrom``1(``0,``0@)">
            <summary>
            Copies from the source view into the target view.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="target">The target view instance.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFrom``1(``0,ILGPU.Runtime.AcceleratorStream,``0@)">
            <summary>
            Copies from the source view into the target view.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view instance.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPUUnsafeAsync``2(``1,``0@,System.Int64)">
            <summary>
            Copies from the source view into the given CPU target address without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="cpuData">The base address of the pinned CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPUUnsafeAsync``2(``1,ILGPU.Runtime.AcceleratorStream,``0@,System.Int64)">
            <summary>
            Copies from the source view into the given CPU target address without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="cpuData">The base address of the pinned CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPUUnsafeAsync``2(``1,``0@,System.Int64)">
            <summary>
            Copies from the CPU source address into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="cpuData">The base address of the pinned CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPUUnsafeAsync``2(``1,ILGPU.Runtime.AcceleratorStream,``0@,System.Int64)">
            <summary>
            Copies from the CPU source address into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view instance.</param>
            <param name="cpuData">The base address of the pinned CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``2(``1,``0@,System.Int64)">
            <summary>
            Copies from the source view into the given CPU target address while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="cpuData">The base address of the CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``2(``1,ILGPU.Runtime.AcceleratorStream,``0@,System.Int64)">
            <summary>
            Copies from the source view into the given CPU target address while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="cpuData">The base address of the CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``2(``1,``0@,System.Int64)">
            <summary>
            Copies from the CPU source address into the given target view while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="cpuData">The base address of the CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``2(``1,ILGPU.Runtime.AcceleratorStream,``0@,System.Int64)">
            <summary>
            Copies from the CPU source address into the given target view while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="cpuData">The base address of the CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.General},``0[])">
            <summary>
            Copies the contents of the 1D array into the given 1D view using the default
            stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method reorders the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.General},ILGPU.Runtime.AcceleratorStream,``0[])">
            <summary>
            Copies the contents of the 1D array into the given 1D view using the given
            stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.General},``0[0:,0:])">
            <summary>
            Copies the contents of the 2D array into the given 2D view using the default
            stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method reorders the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.General},ILGPU.Runtime.AcceleratorStream,``0[0:,0:])">
            <summary>
            Copies the contents of the 2D array into the given 2D view using the given
            stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method reorders the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.General},``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D array into the given 3D view using the default
            stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method reorders the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.General},ILGPU.Runtime.AcceleratorStream,``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D array into the given 3D view using the given
            stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method reorders the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.General},``0[])">
            <summary>
            Copies the contents of the 1D view into the given 1D array using the default
            stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method reorders the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.General},ILGPU.Runtime.AcceleratorStream,``0[])">
            <summary>
            Copies the contents of the 1D view into the given 1D array using the given
            stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method reorders the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.General},``0[0:,0:])">
            <summary>
            Copies the contents of the 2D view into the given 2D array using the default
            stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method reorders the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.General},ILGPU.Runtime.AcceleratorStream,``0[0:,0:])">
            <summary>
            Copies the contents of the 2D view into the given 2D array using the given
            stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method reorders the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.General},``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D view into the given 3D array using the default
            stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method reorders the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.General},ILGPU.Runtime.AcceleratorStream,``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D view into the given 3D array using the given
            stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method reorders the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``2(``1,ILGPU.Runtime.AcceleratorStream,System.Span{``0}@)">
            <summary>
            Copies from the source view into the given CPU data array while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="span">The CPU data target.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``2(``1,ILGPU.Runtime.AcceleratorStream,System.ReadOnlySpan{``0}@)">
            <summary>
            Copies from the CPU source span into the given target view while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="span">The CPU data source.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``2(``1,System.Span{``0}@)">
            <summary>
            Copies from the source view into the given CPU data array using the default
            stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="span">The CPU data target.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``2(``1,System.ReadOnlySpan{``0}@)">
            <summary>
            Copies from the CPU source span into the given target view using the default
            stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="span">The CPU data source.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.ArrayView{``0},``0[])">
            <summary>
            Copies the contents of the 1D view into the given 1D array using the default
            accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.ArrayView{``0},ILGPU.Runtime.AcceleratorStream,``0[])">
            <summary>
            Copies the contents of the 1D view into the given 1D array using the given
            accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.ArrayView{``0},``0[])">
            <summary>
            Copies the contents of the 1D array into the given 1D view using the default
            accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.ArrayView{``0},ILGPU.Runtime.AcceleratorStream,``0[])">
            <summary>
            Copies the contents of the 1D array into the given 1D view using the
            given stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToPageLockedAsync``2(``1,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.PageLockScope{``0})">
            <summary>
            Copies from the source view into the given page locked memory without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="pageLockScope">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromPageLockedAsync``2(``1,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.PageLockScope{``0})">
            <summary>
            Copies from the page locked memory into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="pageLockScope">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToPageLockedAsync``2(``1,ILGPU.Runtime.PageLockScope{``0})">
            <summary>
            Copies from the source view into the given page locked memory without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="pageLockScope">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromPageLockedAsync``2(``1,ILGPU.Runtime.PageLockScope{``0})">
            <summary>
            Copies from the page locked memory into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="pageLockScope">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToPageLockedAsync``2(``1,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.PageLockedArray{``0})">
            <summary>
            Copies from the source view into the given page locked memory without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromPageLockedAsync``2(``1,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.PageLockedArray{``0})">
            <summary>
            Copies from the page locked memory into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToPageLockedAsync``2(``1,ILGPU.Runtime.PageLockedArray{``0})">
            <summary>
            Copies from the source view into the given page locked memory without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromPageLockedAsync``2(``1,ILGPU.Runtime.PageLockedArray{``0})">
            <summary>
            Copies from the page locked memory into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TView">The view type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray``1(ILGPU.ArrayView{``0})">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <param name="view">The source view instance.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray``1(ILGPU.ArrayView{``0},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="view">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsPageLocked``1(ILGPU.ArrayView{``0})">
            <summary>
            Copies the current contents into a new array using
            the default accelerator stream.
            </summary>
            <param name="view">The source view instance.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsPageLocked``1(ILGPU.ArrayView{``0},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="view">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetRawData``1(``0)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="view">The source view instance.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetRawData``1(``0,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="view">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetRawData``1(``0,System.Int64,System.Int64)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="view">The source view instance.</param>
            <param name="byteOffset">The offset within the view in bytes.</param>
            <param name="byteExtent">The number of bytes to load.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetRawData``1(``0,ILGPU.Runtime.AcceleratorStream,System.Int64,System.Int64)">
            <summary>
            Copies the current contents into a new byte array.
            </summary>
            <param name="view">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="byteOffset">The offset within the view in bytes.</param>
            <param name="byteExtent">The number of bytes to load.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.Allocate1D``1(ILGPU.Runtime.Accelerator,``0[])">
            <summary>
            Allocates a buffer with the specified content on the given accelerator
            using the default stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The parent accelerator.</param>
            <param name="data">The source CPU data.</param>
            <returns>An allocated buffer on this accelerator.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.Allocate1D``1(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,``0[])">
            <summary>
            Allocates a buffer with the specified content on the given accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The parent accelerator.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The source CPU data.</param>
            <returns>An allocated buffer on this accelerator.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsRawArrayView``1(System.Array)">
            <summary>
            Converts a raw .Net array into an internal view representation.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="array">The managed array instance.</param>
            <returns>The created raw array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsContiguousArrayView``1(``0[])">
            <summary>
            Converts the array into a view representation.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="array">The managed array instance.</param>
            <returns>The converted array view.</returns>
            <remarks>Note that this operation is supported in kernels only.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsArrayView``1(``0[])">
            <summary>
            Converts the array into a view representation.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="array">The managed array instance.</param>
            <returns>The converted array view.</returns>
            <remarks>Note that this operation is supported in kernels only.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsArrayView``1(``0[0:,0:])">
            <summary>
            Converts the array into a view representation.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="array">The managed array instance.</param>
            <returns>The converted array view.</returns>
            <remarks>Note that this operation is supported in kernels only.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsArrayView``1(``0[0:,0:,0:])">
            <summary>
            Converts the array into a view representation.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="array">The managed array instance.</param>
            <returns>The converted array view.</returns>
            <remarks>Note that this operation is supported in kernels only.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.Cast``2(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Casts the given array view into another array-view type.
            </summary>
            <typeparam name="T">The current element type.</typeparam>
            <typeparam name="TOther">The target element type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.Cast``2(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseX})">
            <summary>
            Casts the given array view into another array-view type.
            </summary>
            <typeparam name="T">The current element type.</typeparam>
            <typeparam name="TOther">The target element type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.Cast``2(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY})">
            <summary>
            Casts the given array view into another array-view type.
            </summary>
            <typeparam name="T">The current element type.</typeparam>
            <typeparam name="TOther">The target element type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.Cast``2(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseXY})">
            <summary>
            Casts the given array view into another array-view type.
            </summary>
            <typeparam name="T">The current element type.</typeparam>
            <typeparam name="TOther">The target element type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.Cast``2(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY})">
            <summary>
            Casts the given array view into another array-view type.
            </summary>
            <typeparam name="T">The current element type.</typeparam>
            <typeparam name="TOther">The target element type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.MemSetToZero``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite})">
            <summary>
            Sets the contents of the given buffer to zero using the default accelerator
            stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view instance.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.MemSetToZero``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.MemSet``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},System.Byte)">
            <summary>
            Sets the contents of the given buffer to the given byte value using the
            default accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view instance.</param>
            <param name="value">The value to write into the memory buffer.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.MemSet``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},ILGPU.Runtime.AcceleratorStream,System.Byte)">
            <summary>
            Sets the contents of the current buffer to the given byte value.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="value">The value to write into the memory buffer.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.MemSetToZero``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Sets the contents of the given buffer to zero using the default accelerator
            stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view instance.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.MemSetToZero``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.MemSet``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},System.Byte)">
            <summary>
            Sets the contents of the given buffer to the given byte value using the
            default accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view instance.</param>
            <param name="value">The value to write into the memory buffer.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.MemSet``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream,System.Byte)">
            <summary>
            Sets the contents of the current buffer to the given byte value.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="value">The value to write into the memory buffer.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyTo``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite})">
            <summary>
            Copies from the source view into the target view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="target">The target view instance.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyTo``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite}@)">
            <summary>
            Copies from the source view into the target view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view instance.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFrom``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite}@)">
            <summary>
            Copies from the source view into the target view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="target">The target view instance.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFrom``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite}@)">
            <summary>
            Copies from the source view into the target view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view instance.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyTo``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Copies from the source view into the target view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="target">The target view instance.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyTo``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense}@)">
            <summary>
            Copies from the source view into the target view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="target">The target view instance.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFrom``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense}@)">
            <summary>
            Copies from the source view into the target view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="target">The target view instance.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFrom``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense}@)">
            <summary>
            Copies from the source view into the target view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="source">The source view instance.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},``0@,System.Int64)">
            <summary>
            Copies from the source view into the given CPU target address while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="cpuData">The base address of the CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},ILGPU.Runtime.AcceleratorStream,``0@,System.Int64)">
            <summary>
            Copies from the source view into the given CPU target address while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="cpuData">The base address of the CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},``0@,System.Int64)">
            <summary>
            Copies from the CPU source address into the given target view while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="cpuData">The base address of the CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},ILGPU.Runtime.AcceleratorStream,``0@,System.Int64)">
            <summary>
            Copies from the CPU source address into the given target view while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="cpuData">The base address of the CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <param name="stream">The used accelerator stream.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},``0@,System.Int64)">
            <summary>
            Copies from the source view into the given CPU target address while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="cpuData">The base address of the CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream,``0@,System.Int64)">
            <summary>
            Copies from the source view into the given CPU target address while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="cpuData">The base address of the CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},``0@,System.Int64)">
            <summary>
            Copies from the CPU source address into the given target view while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="cpuData">The base address of the CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream,``0@,System.Int64)">
            <summary>
            Copies from the CPU source address into the given target view while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="cpuData">The base address of the CPU buffer.</param>
            <param name="length">The number of elements to copy.</param>
            <param name="stream">The used accelerator stream.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},ILGPU.Runtime.AcceleratorStream,System.Span{``0}@)">
            <summary>
            Copies from the source view into the given CPU data array while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="span">The CPU data target.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},ILGPU.Runtime.AcceleratorStream,System.ReadOnlySpan{``0}@)">
            <summary>
            Copies from the CPU source span into the given target view while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="span">The CPU data source.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream,System.Span{``0}@)">
            <summary>
            Copies from the source view into the given CPU data array while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="span">The CPU data target.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream,System.ReadOnlySpan{``0}@)">
            <summary>
            Copies from the CPU source span into the given target view while
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="span">The CPU data source.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.Allocate2DDenseX``1(ILGPU.Runtime.Accelerator,``0[0:,0:])">
            <summary>
            Allocates a buffer with the specified content on the given accelerator
            using the default stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The parent accelerator.</param>
            <param name="data">The source CPU data.</param>
            <returns>An allocated buffer on this accelerator.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.Allocate2DDenseX``1(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,``0[0:,0:])">
            <summary>
            Allocates a buffer with the specified content on the given accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The parent accelerator.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The source CPU data.</param>
            <returns>An allocated buffer on this accelerator.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.Allocate2DDenseY``1(ILGPU.Runtime.Accelerator,``0[0:,0:])">
            <summary>
            Allocates a buffer with the specified content on the given accelerator
            using the default stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The parent accelerator.</param>
            <param name="data">The source CPU data.</param>
            <returns>An allocated buffer on this accelerator.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.Allocate2DDenseY``1(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,``0[0:,0:])">
            <summary>
            Allocates a buffer with the specified content on the given accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The parent accelerator.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The source CPU data.</param>
            <returns>An allocated buffer on this accelerator.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.Allocate3DDenseXY``1(ILGPU.Runtime.Accelerator,``0[0:,0:,0:])">
            <summary>
            Allocates a buffer with the specified content on the given accelerator
            using the default stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The parent accelerator.</param>
            <param name="data">The source CPU data.</param>
            <returns>An allocated buffer on this accelerator.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.Allocate3DDenseXY``1(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,``0[0:,0:,0:])">
            <summary>
            Allocates a buffer with the specified content on the given accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The parent accelerator.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The source CPU data.</param>
            <returns>An allocated buffer on this accelerator.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.Allocate3DDenseZY``1(ILGPU.Runtime.Accelerator,``0[0:,0:,0:])">
            <summary>
            Allocates a buffer with the specified content on the given accelerator
            using the default stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The parent accelerator.</param>
            <param name="data">The source CPU data.</param>
            <returns>An allocated buffer on this accelerator.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.Allocate3DDenseZY``1(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,``0[0:,0:,0:])">
            <summary>
            Allocates a buffer with the specified content on the given accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The parent accelerator.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The source CPU data.</param>
            <returns>An allocated buffer on this accelerator.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseX},``0[0:,0:])">
            <summary>
            Copies the contents of the 2D view into the given
            2D array using the default accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseX},ILGPU.Runtime.AcceleratorStream,``0[0:,0:])">
            <summary>
            Copies the contents of the 2D view into the given
            2D array using the given accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseX},``0[0:,0:])">
            <summary>
            Copies the contents of the 2D array into the given
            2D view using the default accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseX},ILGPU.Runtime.AcceleratorStream,``0[0:,0:])">
            <summary>
            Copies the contents of the 2D array into the given
            2D view using the given stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY},``0[0:,0:])">
            <summary>
            Copies the contents of the 2D view into the given
            2D array using the default accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY},ILGPU.Runtime.AcceleratorStream,``0[0:,0:])">
            <summary>
            Copies the contents of the 2D view into the given
            2D array using the given accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY},``0[0:,0:])">
            <summary>
            Copies the contents of the 2D array into the given
            2D view using the default accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY},ILGPU.Runtime.AcceleratorStream,``0[0:,0:])">
            <summary>
            Copies the contents of the 2D array into the given
            2D view using the given stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseXY},``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D view into the given
            3D array using the default accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseXY},ILGPU.Runtime.AcceleratorStream,``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D view into the given
            3D array using the given accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseXY},``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D array into the given
            3D view using the default accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseXY},ILGPU.Runtime.AcceleratorStream,``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D array into the given
            3D view using the given stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY},``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D view into the given
            3D array using the default accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY},ILGPU.Runtime.AcceleratorStream,``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D view into the given
            3D array using the given accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY},``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D array into the given
            3D view using the default accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY},ILGPU.Runtime.AcceleratorStream,``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D array into the given
            3D view using the given stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},``0[])">
            <summary>
            Copies the contents of the 1D view into the given
            1D array using the default accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream,``0[])">
            <summary>
            Copies the contents of the 1D view into the given
            1D array using the given accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},``0[])">
            <summary>
            Copies the contents of the 1D array into the given
            1D view using the default accelerator stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream,``0[])">
            <summary>
            Copies the contents of the 1D array into the given
            1D view using the given stream.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseX}},``0[0:,0:])">
            <summary>
            Copies the contents of the 2D view into the given
            2D array using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseX}},ILGPU.Runtime.AcceleratorStream,``0[0:,0:])">
            <summary>
            Copies the contents of the 2D view into the given
            2D array using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseX}},``0[0:,0:])">
            <summary>
            Copies the contents of the 2D array into the given
            2D buffer using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseX}},ILGPU.Runtime.AcceleratorStream,``0[0:,0:])">
            <summary>
            Copies the contents of the 2D array into the given
            2D buffer using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY}},``0[0:,0:])">
            <summary>
            Copies the contents of the 2D view into the given
            2D array using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY}},ILGPU.Runtime.AcceleratorStream,``0[0:,0:])">
            <summary>
            Copies the contents of the 2D view into the given
            2D array using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY}},``0[0:,0:])">
            <summary>
            Copies the contents of the 2D array into the given
            2D buffer using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY}},ILGPU.Runtime.AcceleratorStream,``0[0:,0:])">
            <summary>
            Copies the contents of the 2D array into the given
            2D buffer using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseXY}},``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D view into the given
            3D array using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseXY}},ILGPU.Runtime.AcceleratorStream,``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D view into the given
            3D array using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseXY}},``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D array into the given
            3D buffer using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseXY}},ILGPU.Runtime.AcceleratorStream,``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D array into the given
            3D buffer using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY}},``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D view into the given
            3D array using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY}},ILGPU.Runtime.AcceleratorStream,``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D view into the given
            3D array using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY}},``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D array into the given
            3D buffer using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY}},ILGPU.Runtime.AcceleratorStream,``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D array into the given
            3D buffer using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense}},``0[])">
            <summary>
            Copies the contents of the 1D view into the given
            1D array using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense}},ILGPU.Runtime.AcceleratorStream,``0[])">
            <summary>
            Copies the contents of the 1D view into the given
            1D array using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense}},``0[])">
            <summary>
            Copies the contents of the 1D array into the given
            1D buffer using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense}},ILGPU.Runtime.AcceleratorStream,``0[])">
            <summary>
            Copies the contents of the 1D array into the given
            1D buffer using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.General}},``0[])">
            <summary>
            Copies the contents of the 1D view into the given
            1D array using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.General}},ILGPU.Runtime.AcceleratorStream,``0[])">
            <summary>
            Copies the contents of the 1D view into the given
            1D array using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.General}},``0[])">
            <summary>
            Copies the contents of the 1D array into the given
            1D buffer using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.General}},ILGPU.Runtime.AcceleratorStream,``0[])">
            <summary>
            Copies the contents of the 1D array into the given
            1D buffer using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.General}},``0[0:,0:])">
            <summary>
            Copies the contents of the 2D view into the given
            2D array using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.General}},ILGPU.Runtime.AcceleratorStream,``0[0:,0:])">
            <summary>
            Copies the contents of the 2D view into the given
            2D array using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.General}},``0[0:,0:])">
            <summary>
            Copies the contents of the 2D array into the given
            2D buffer using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.General}},ILGPU.Runtime.AcceleratorStream,``0[0:,0:])">
            <summary>
            Copies the contents of the 2D array into the given
            2D buffer using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.General}},``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D view into the given
            3D array using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.General}},ILGPU.Runtime.AcceleratorStream,``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D view into the given
            3D array using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.General}},``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D array into the given
            3D buffer using the default accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromCPU``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.General}},ILGPU.Runtime.AcceleratorStream,``0[0:,0:,0:])">
            <summary>
            Copies the contents of the 3D array into the given
            3D buffer using the given accelerator stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="data">The target data array.</param>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToPageLockedAsync``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},ILGPU.Runtime.PageLockScope{``0})">
            <summary>
            Copies from the source view into the given page locked memory without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="pageLockScope">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToPageLockedAsync``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.PageLockScope{``0})">
            <summary>
            Copies from the source view into the given page locked memory without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="pageLockScope">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromPageLockedAsync``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},ILGPU.Runtime.PageLockScope{``0})">
            <summary>
            Copies from the page locked memory into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="pageLockScope">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromPageLockedAsync``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Infinite},ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.PageLockScope{``0})">
            <summary>
            Copies from the page locked memory into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="pageLockScope">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToPageLockedAsync``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.PageLockScope{``0})">
            <summary>
            Copies from the source view into the given page locked memory without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="pageLockScope">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToPageLockedAsync``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.PageLockScope{``0})">
            <summary>
            Copies from the source view into the given page locked memory without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="pageLockScope">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromPageLockedAsync``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.PageLockScope{``0})">
            <summary>
            Copies from the page locked memory into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="pageLockScope">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromPageLockedAsync``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.PageLockScope{``0})">
            <summary>
            Copies from the page locked memory into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="pageLockScope">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToPageLockedAsync``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY},ILGPU.Runtime.PageLockedArray2D{``0})">
            <summary>
            Copies from the source view into the given page locked memory without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToPageLockedAsync``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY},ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.PageLockedArray2D{``0})">
            <summary>
            Copies from the source view into the given page locked memory without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromPageLockedAsync``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY},ILGPU.Runtime.PageLockedArray2D{``0})">
            <summary>
            Copies from the page locked memory into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromPageLockedAsync``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY},ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.PageLockedArray2D{``0})">
            <summary>
            Copies from the page locked memory into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToPageLockedAsync``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY},ILGPU.Runtime.PageLockedArray3D{``0})">
            <summary>
            Copies from the source view into the given page locked memory without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToPageLockedAsync``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY},ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.PageLockedArray3D{``0})">
            <summary>
            Copies from the source view into the given page locked memory without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromPageLockedAsync``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY},ILGPU.Runtime.PageLockedArray3D{``0})">
            <summary>
            Copies from the page locked memory into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromPageLockedAsync``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY},ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.PageLockedArray3D{``0})">
            <summary>
            Copies from the page locked memory into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToPageLockedAsync``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.PageLockedArray1D{``0})">
            <summary>
            Copies from the source view into the given page locked memory without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyToPageLockedAsync``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.PageLockedArray1D{``0})">
            <summary>
            Copies from the source view into the given page locked memory without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromPageLockedAsync``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.PageLockedArray1D{``0})">
            <summary>
            Copies from the page locked memory into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.CopyFromPageLockedAsync``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.PageLockedArray1D{``0})">
            <summary>
            Copies from the page locked memory into the given target view without
            synchronizing the current accelerator stream.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="target">The target view instance.</param>
            <param name="stream">The used accelerator stream.</param>
            <param name="pageLockedArray">The page locked memory.</param>
            <remarks>This method is not supported on accelerators.</remarks>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsPageLocked2D``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY})">
            <summary>
            Copies the contents of the 2D view into a new
            page locked 2D array.
            </summary>
            <param name="view">The source view.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsPageLocked2D``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 2D view into a new
            page locked 2D array.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsPageLocked3D``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY})">
            <summary>
            Copies the contents of the 3D view into a new
            page locked 3D array.
            </summary>
            <param name="view">The source view.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsPageLocked3D``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 3D view into a new
            page locked 3D array.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsPageLocked1D``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Copies the contents of the 1D view into a new
            page locked 1D array.
            </summary>
            <param name="view">The source view.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsPageLocked1D``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 1D view into a new
            page locked 1D array.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray2D``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseX})">
            <summary>
            Copies the contents of the 2D view into a new
            2D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="view">The source view.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray2D``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseX},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 2D view into a new
            2D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray2D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseX}})">
            <summary>
            Copies the contents of the 2D view into a new
            2D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="buffer">The source buffer.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray2D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseX}},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 2D view into a new
            2D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray2D``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY})">
            <summary>
            Copies the contents of the 2D view into a new
            2D array
            .
            </summary>
            <param name="view">The source view.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray2D``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 2D view into a new
            2D array
            .
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray2D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY}})">
            <summary>
            Copies the contents of the 2D view into a new
            2D array
            .
            </summary>
            <param name="buffer">The source buffer.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray2D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.DenseY}},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 2D view into a new
            2D array
            .
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray3D``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseXY})">
            <summary>
            Copies the contents of the 3D view into a new
            3D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="view">The source view.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray3D``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseXY},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 3D view into a new
            3D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray3D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseXY}})">
            <summary>
            Copies the contents of the 3D view into a new
            3D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="buffer">The source buffer.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray3D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseXY}},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 3D view into a new
            3D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray3D``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY})">
            <summary>
            Copies the contents of the 3D view into a new
            3D array
            .
            </summary>
            <param name="view">The source view.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray3D``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 3D view into a new
            3D array
            .
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray3D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY}})">
            <summary>
            Copies the contents of the 3D view into a new
            3D array
            .
            </summary>
            <param name="buffer">The source buffer.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray3D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.DenseZY}},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 3D view into a new
            3D array
            .
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray1D``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Copies the contents of the 1D view into a new
            1D array
            .
            </summary>
            <param name="view">The source view.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray1D``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 1D view into a new
            1D array
            .
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray1D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense}})">
            <summary>
            Copies the contents of the 1D view into a new
            1D array
            .
            </summary>
            <param name="buffer">The source buffer.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray1D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense}},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 1D view into a new
            1D array
            .
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray1D``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.General})">
            <summary>
            Copies the contents of the 1D view into a new
            1D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="view">The source view.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray1D``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.General},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 1D view into a new
            1D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray1D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.General}})">
            <summary>
            Copies the contents of the 1D view into a new
            1D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="buffer">The source buffer.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray1D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.General}},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 1D view into a new
            1D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray2D``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.General})">
            <summary>
            Copies the contents of the 2D view into a new
            2D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="view">The source view.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray2D``1(ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.General},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 2D view into a new
            2D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray2D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.General}})">
            <summary>
            Copies the contents of the 2D view into a new
            2D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="buffer">The source buffer.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray2D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView2D{``0,ILGPU.Stride2D.General}},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 2D view into a new
            2D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray3D``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.General})">
            <summary>
            Copies the contents of the 3D view into a new
            3D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="view">The source view.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray3D``1(ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.General},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 3D view into a new
            3D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="view">The source view.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray3D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.General}})">
            <summary>
            Copies the contents of the 3D view into a new
            3D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="buffer">The source buffer.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.GetAsArray3D``1(ILGPU.Runtime.MemoryBuffer{ILGPU.Runtime.ArrayView3D{``0,ILGPU.Stride3D.General}},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies the contents of the 3D view into a new
            3D array
            while transposing the input buffer on the CPU.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="stream">The used accelerator stream.</param>
            <returns>A new array holding the requested contents.</returns>
            <remarks>
            CAUTION: this method transposes the data on the CPU.
            This method is not supported on accelerators.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AlignTo16``1(ILGPU.ArrayView{``0})">
            <summary>
            Aligns the given array view to the alignment of 16 bytes and
            returns a view spanning the initial unaligned parts of the given view and
            another view (main) spanning the remaining aligned elements of the given view.
            </summary>
            <param name="view">The source view.</param>
            <returns>
            The prefix and main views pointing to non-aligned and aligned sub-views of
            the given view.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AlignTo16``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Aligns the given array view to the alignment of 16 bytes and
            returns a view spanning the initial unaligned parts of the given view and
            another view (main) spanning the remaining aligned elements of the given view.
            </summary>
            <param name="view">The source view.</param>
            <returns>
            The prefix and main views pointing to non-aligned and aligned sub-views of
            the given view.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsAligned16``1(ILGPU.ArrayView{``0})">
            <summary>
            Ensures that the array view is aligned to 16 of bytes
            and returns the input view. Note that this operation explicitly generates an
            operation in the ILGPU IR that preserves these semantics. This enables the
            generation of debug assertions and guides the internal vectorization analysis
            to assume the given alignment even though it might not be able to prove that
            the given alignment is valid.
            </summary>
            <param name="view">The source view.</param>
            <returns>The validated input view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsAligned16``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Ensures that the array view is aligned to 16 of bytes
            and returns the input view. Note that this operation explicitly generates an
            operation in the ILGPU IR that preserves these semantics. This enables the
            generation of debug assertions and guides the internal vectorization analysis
            to assume the given alignment even though it might not be able to prove that
            the given alignment is valid.
            </summary>
            <param name="view">The source view.</param>
            <returns>The validated input view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AlignTo32``1(ILGPU.ArrayView{``0})">
            <summary>
            Aligns the given array view to the alignment of 32 bytes and
            returns a view spanning the initial unaligned parts of the given view and
            another view (main) spanning the remaining aligned elements of the given view.
            </summary>
            <param name="view">The source view.</param>
            <returns>
            The prefix and main views pointing to non-aligned and aligned sub-views of
            the given view.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AlignTo32``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Aligns the given array view to the alignment of 32 bytes and
            returns a view spanning the initial unaligned parts of the given view and
            another view (main) spanning the remaining aligned elements of the given view.
            </summary>
            <param name="view">The source view.</param>
            <returns>
            The prefix and main views pointing to non-aligned and aligned sub-views of
            the given view.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsAligned32``1(ILGPU.ArrayView{``0})">
            <summary>
            Ensures that the array view is aligned to 32 of bytes
            and returns the input view. Note that this operation explicitly generates an
            operation in the ILGPU IR that preserves these semantics. This enables the
            generation of debug assertions and guides the internal vectorization analysis
            to assume the given alignment even though it might not be able to prove that
            the given alignment is valid.
            </summary>
            <param name="view">The source view.</param>
            <returns>The validated input view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsAligned32``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Ensures that the array view is aligned to 32 of bytes
            and returns the input view. Note that this operation explicitly generates an
            operation in the ILGPU IR that preserves these semantics. This enables the
            generation of debug assertions and guides the internal vectorization analysis
            to assume the given alignment even though it might not be able to prove that
            the given alignment is valid.
            </summary>
            <param name="view">The source view.</param>
            <returns>The validated input view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AlignTo64``1(ILGPU.ArrayView{``0})">
            <summary>
            Aligns the given array view to the alignment of 64 bytes and
            returns a view spanning the initial unaligned parts of the given view and
            another view (main) spanning the remaining aligned elements of the given view.
            </summary>
            <param name="view">The source view.</param>
            <returns>
            The prefix and main views pointing to non-aligned and aligned sub-views of
            the given view.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AlignTo64``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Aligns the given array view to the alignment of 64 bytes and
            returns a view spanning the initial unaligned parts of the given view and
            another view (main) spanning the remaining aligned elements of the given view.
            </summary>
            <param name="view">The source view.</param>
            <returns>
            The prefix and main views pointing to non-aligned and aligned sub-views of
            the given view.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsAligned64``1(ILGPU.ArrayView{``0})">
            <summary>
            Ensures that the array view is aligned to 64 of bytes
            and returns the input view. Note that this operation explicitly generates an
            operation in the ILGPU IR that preserves these semantics. This enables the
            generation of debug assertions and guides the internal vectorization analysis
            to assume the given alignment even though it might not be able to prove that
            the given alignment is valid.
            </summary>
            <param name="view">The source view.</param>
            <returns>The validated input view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsAligned64``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Ensures that the array view is aligned to 64 of bytes
            and returns the input view. Note that this operation explicitly generates an
            operation in the ILGPU IR that preserves these semantics. This enables the
            generation of debug assertions and guides the internal vectorization analysis
            to assume the given alignment even though it might not be able to prove that
            the given alignment is valid.
            </summary>
            <param name="view">The source view.</param>
            <returns>The validated input view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AlignTo128``1(ILGPU.ArrayView{``0})">
            <summary>
            Aligns the given array view to the alignment of 128 bytes and
            returns a view spanning the initial unaligned parts of the given view and
            another view (main) spanning the remaining aligned elements of the given view.
            </summary>
            <param name="view">The source view.</param>
            <returns>
            The prefix and main views pointing to non-aligned and aligned sub-views of
            the given view.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AlignTo128``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Aligns the given array view to the alignment of 128 bytes and
            returns a view spanning the initial unaligned parts of the given view and
            another view (main) spanning the remaining aligned elements of the given view.
            </summary>
            <param name="view">The source view.</param>
            <returns>
            The prefix and main views pointing to non-aligned and aligned sub-views of
            the given view.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsAligned128``1(ILGPU.ArrayView{``0})">
            <summary>
            Ensures that the array view is aligned to 128 of bytes
            and returns the input view. Note that this operation explicitly generates an
            operation in the ILGPU IR that preserves these semantics. This enables the
            generation of debug assertions and guides the internal vectorization analysis
            to assume the given alignment even though it might not be able to prove that
            the given alignment is valid.
            </summary>
            <param name="view">The source view.</param>
            <returns>The validated input view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsAligned128``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Ensures that the array view is aligned to 128 of bytes
            and returns the input view. Note that this operation explicitly generates an
            operation in the ILGPU IR that preserves these semantics. This enables the
            generation of debug assertions and guides the internal vectorization analysis
            to assume the given alignment even though it might not be able to prove that
            the given alignment is valid.
            </summary>
            <param name="view">The source view.</param>
            <returns>The validated input view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AlignTo256``1(ILGPU.ArrayView{``0})">
            <summary>
            Aligns the given array view to the alignment of 256 bytes and
            returns a view spanning the initial unaligned parts of the given view and
            another view (main) spanning the remaining aligned elements of the given view.
            </summary>
            <param name="view">The source view.</param>
            <returns>
            The prefix and main views pointing to non-aligned and aligned sub-views of
            the given view.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AlignTo256``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Aligns the given array view to the alignment of 256 bytes and
            returns a view spanning the initial unaligned parts of the given view and
            another view (main) spanning the remaining aligned elements of the given view.
            </summary>
            <param name="view">The source view.</param>
            <returns>
            The prefix and main views pointing to non-aligned and aligned sub-views of
            the given view.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsAligned256``1(ILGPU.ArrayView{``0})">
            <summary>
            Ensures that the array view is aligned to 256 of bytes
            and returns the input view. Note that this operation explicitly generates an
            operation in the ILGPU IR that preserves these semantics. This enables the
            generation of debug assertions and guides the internal vectorization analysis
            to assume the given alignment even though it might not be able to prove that
            the given alignment is valid.
            </summary>
            <param name="view">The source view.</param>
            <returns>The validated input view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsAligned256``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Ensures that the array view is aligned to 256 of bytes
            and returns the input view. Note that this operation explicitly generates an
            operation in the ILGPU IR that preserves these semantics. This enables the
            generation of debug assertions and guides the internal vectorization analysis
            to assume the given alignment even though it might not be able to prove that
            the given alignment is valid.
            </summary>
            <param name="view">The source view.</param>
            <returns>The validated input view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AlignTo512``1(ILGPU.ArrayView{``0})">
            <summary>
            Aligns the given array view to the alignment of 512 bytes and
            returns a view spanning the initial unaligned parts of the given view and
            another view (main) spanning the remaining aligned elements of the given view.
            </summary>
            <param name="view">The source view.</param>
            <returns>
            The prefix and main views pointing to non-aligned and aligned sub-views of
            the given view.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AlignTo512``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Aligns the given array view to the alignment of 512 bytes and
            returns a view spanning the initial unaligned parts of the given view and
            another view (main) spanning the remaining aligned elements of the given view.
            </summary>
            <param name="view">The source view.</param>
            <returns>
            The prefix and main views pointing to non-aligned and aligned sub-views of
            the given view.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsAligned512``1(ILGPU.ArrayView{``0})">
            <summary>
            Ensures that the array view is aligned to 512 of bytes
            and returns the input view. Note that this operation explicitly generates an
            operation in the ILGPU IR that preserves these semantics. This enables the
            generation of debug assertions and guides the internal vectorization analysis
            to assume the given alignment even though it might not be able to prove that
            the given alignment is valid.
            </summary>
            <param name="view">The source view.</param>
            <returns>The validated input view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayViewExtensions.AsAligned512``1(ILGPU.Runtime.ArrayView1D{``0,ILGPU.Stride1D.Dense})">
            <summary>
            Ensures that the array view is aligned to 512 of bytes
            and returns the input view. Note that this operation explicitly generates an
            operation in the ILGPU IR that preserves these semantics. This enables the
            generation of debug assertions and guides the internal vectorization analysis
            to assume the given alignment even though it might not be able to prove that
            the given alignment is valid.
            </summary>
            <param name="view">The source view.</param>
            <returns>The validated input view.</returns>
        </member>
        <member name="T:ILGPU.Runtime.ArrayView1D`2">
            <summary>
            Represents a general view to an array on an accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.To1DView">
            <summary>
            Converts this array view into a general 1D view.
            </summary>
            <returns>The converted general 1D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.As2DView``1(ILGPU.LongIndex2D,``0)">
            <summary>
            Converts this array view into a 2D view.
            </summary>
            <typeparam name="TOtherStride">The stride type.</typeparam>
            <param name="extent">The target extent to use.</param>
            <param name="stride">The target stride to use.</param>
            <returns>The converted 2D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.As2DDenseXView(ILGPU.LongIndex2D)">
            <summary>
            Converts this array view into a 2D view with X being the leading dimension.
            </summary>
            <param name="extent">The target extent to use.</param>
            <returns>The converted 2D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.As2DDenseYView(ILGPU.LongIndex2D)">
            <summary>
            Converts this array view into a 2D view with Y being the leading dimension.
            </summary>
            <param name="extent">The target extent to use.</param>
            <returns>The converted 2D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.As2DPitchedXView(ILGPU.LongIndex2D,System.Int32)">
            <summary>
            Converts this array view into a pitched 2D view with X being the leading
            dimension.
            </summary>
            <param name="extent">The target extent to use.</param>
            <param name="xAlignmentInBytes">
            The alignment in bytes of the leading dimension.
            </param>
            <returns>The converted 2D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.As2DPitchedYView(ILGPU.LongIndex2D,System.Int32)">
            <summary>
            Converts this array view into a pitched2D view with Y being the leading
            dimension.
            </summary>
            <param name="extent">The target extent to use.</param>
            <param name="yAlignmentInBytes">
            The alignment in bytes of the leading dimension.
            </param>
            <returns>The converted 2D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.As3DView``1(ILGPU.LongIndex3D,``0)">
            <summary>
            Converts the given view into a 3D view.
            </summary>
            <typeparam name="TOtherStride">The stride type.</typeparam>
            <param name="extent">The target extent to use.</param>
            <param name="stride">The target stride to use.</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.As3DDenseXYView(ILGPU.LongIndex3D)">
            <summary>
            Converts this array view into a 3D view with XY being the leading dimensions.
            </summary>
            <param name="extent">The target extent to use.</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.As3DDenseZYView(ILGPU.LongIndex3D)">
            <summary>
            Converts this array view into a 3D view with ZY being the leading dimensions.
            </summary>
            <param name="extent">The target extent to use.</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.As3DPitchedXYView(ILGPU.LongIndex3D,System.Int32)">
            <summary>
            Converts this array view into a pitched 3D view with XY being the leading
            dimensions.
            </summary>
            <param name="extent">The target extent to use.</param>
            <param name="xyAlignmentInBytes">
            The alignment in bytes of the leading dimension.
            </param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.As3DPitchedZYView(ILGPU.LongIndex3D,System.Int32)">
            <summary>
            Converts this array view into a pitched 3D view with ZY being the leading
            dimensions.
            </summary>
            <param name="extent">The target extent to use.</param>
            <param name="zyAlignmentInBytes">
            The alignment in bytes of the leading dimension.
            </param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="F:ILGPU.Runtime.ArrayView1D`2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.ArrayView1D`2.Empty">
            <summary>
            Represents an empty view that is not valid and has a length of 0 elements
            and a default stride initialized with its default value.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.GetEmpty(`1)">
            <summary>
            Returns an empty view using the given stride.
            </summary>
            <param name="stride">The stride to use.</param>
            <returns>The created empty view instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.#ctor(ILGPU.ArrayView{`0},ILGPU.LongIndex1D,`1)">
            <summary>
            Constructs a new 1D array view.
            </summary>
            <param name="baseView">The source view.</param>
            <param name="extent">The extent (number of elements).</param>
            <param name="stride">The stride to use.</param>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView1D`2.BaseView">
            <summary>
            Returns the associated buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView1D`2.ILGPU#IArrayView#Buffer">
            <summary>
            Returns the underlying memory buffer.
            </summary>
            <remarks>This property is not supported on accelerators.</remarks>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView1D`2.ILGPU#IArrayView#ElementSize">
            <summary>
            Returns the underlying element size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView1D`2.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView1D`2.IntExtent">
            <summary>
            Returns the 32-bit extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView1D`2.Stride">
            <summary>
            Returns the associated stride.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView1D`2.IsValid">
            <summary>
            Returns true if this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView1D`2.Length">
            <summary>
            Returns the strided length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView1D`2.IntLength">
            <summary>
            Returns the strided 32-bit length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView1D`2.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView1D`2.Item(ILGPU.Index1D)">
            <summary>
            Access the element at the given 32-bit index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView1D`2.Item(ILGPU.LongIndex1D)">
            <summary>
            Access the element at the given 64-bit index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.ComputeLinearIndex(ILGPU.Index1D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="index">The element index.</param>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.SubView(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Returns a sub view of the current view starting at the given
            32-bit offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="extent">The extent of the new sub view.</param>
            <returns>The raw sub view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.ComputeLinearIndex(ILGPU.LongIndex1D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="index">The element index.</param>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.SubView(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Returns a sub view of the current view starting at the given
            64-bit offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="extent">The extent of the new sub view.</param>
            <returns>The raw sub view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.VariableView(ILGPU.Index1D)">
            <summary>
            Returns a variable view that points to the element at the specified index.
            </summary>
            <param name="index">The variable index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.VariableView(ILGPU.LongIndex1D)">
            <summary>
            Returns a variable view that points to the element at the specified index.
            </summary>
            <param name="index">The variable index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.AsContiguous">
            <summary>
            Returns a contiguous view to this view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.AsDense">
            <summary>
            Converts this array view into a dense version.
            </summary>
            <returns>The updated array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.AsGeneral(ILGPU.Stride1D.General)">
            <summary>
            Converts this array view into a general version.
            </summary>
            <param name="stride">The generic stride information to use.</param>
            <returns>The updated array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.AsGeneral">
            <summary>
            Converts this array view into a general version.
            </summary>
            <returns>The updated array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView1D`2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="T:ILGPU.Runtime.ArrayView2D`2">
            <summary>
            Represents a general view to an array on an accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 2D stride type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.To1DView">
            <summary>
            Converts this array view into a general 1D view.
            </summary>
            <returns>The converted general 1D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.AsDenseX">
            <summary>
            Converts this array view into a dense version with leading dimension X.
            </summary>
            <returns>The updated array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.AsDenseY">
            <summary>
            Converts this array view into a dense version with leading dimension Y.
            </summary>
            <returns>The updated array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.As1DView``1(``0)">
            <summary>
            Converts the given view into a 1D view.
            </summary>
            <typeparam name="TOtherStride">The stride type.</typeparam>
            <param name="stride">The target stride to use.</param>
            <returns>The converted 1D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.As3DView``1(ILGPU.LongIndex3D,``0)">
            <summary>
            Converts the given view into a 3D view.
            </summary>
            <typeparam name="TOtherStride">The stride type.</typeparam>
            <param name="extent">The extent to use.</param>
            <param name="stride">The target stride to use.</param>
            <returns>The converted 1D view.</returns>
        </member>
        <member name="F:ILGPU.Runtime.ArrayView2D`2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.ArrayView2D`2.Empty">
            <summary>
            Represents an empty view that is not valid and has a length of 0 elements
            and a default stride initialized with its default value.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.GetEmpty(`1)">
            <summary>
            Returns an empty view using the given stride.
            </summary>
            <param name="stride">The stride to use.</param>
            <returns>The created empty view instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.#ctor(ILGPU.ArrayView{`0},ILGPU.LongIndex2D,`1)">
            <summary>
            Constructs a new 2D array view.
            </summary>
            <param name="baseView">The source view.</param>
            <param name="extent">The extent (number of elements).</param>
            <param name="stride">The stride to use.</param>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView2D`2.BaseView">
            <summary>
            Returns the associated buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView2D`2.ILGPU#IArrayView#Buffer">
            <summary>
            Returns the underlying memory buffer.
            </summary>
            <remarks>This property is not supported on accelerators.</remarks>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView2D`2.ILGPU#IArrayView#ElementSize">
            <summary>
            Returns the underlying element size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView2D`2.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView2D`2.IntExtent">
            <summary>
            Returns the 32-bit extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView2D`2.Stride">
            <summary>
            Returns the associated stride.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView2D`2.IsValid">
            <summary>
            Returns true if this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView2D`2.Length">
            <summary>
            Returns the strided length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView2D`2.IntLength">
            <summary>
            Returns the strided 32-bit length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView2D`2.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView2D`2.Item(ILGPU.Index2D)">
            <summary>
            Access the element at the given 32-bit index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView2D`2.Item(System.Int32,System.Int32)">
            <summary>
            Access the element at the given 32-bit index.
            </summary>
            <param name="x">
            The X index.
            </param>
            <param name="y">
            The Y index.
            </param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView2D`2.Item(ILGPU.LongIndex2D)">
            <summary>
            Access the element at the given 64-bit index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView2D`2.Item(System.Int64,System.Int64)">
            <summary>
            Access the element at the given 64-bit index.
            </summary>
            <param name="x">
            The X index.
            </param>
            <param name="y">
            The Y index.
            </param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.ComputeLinearIndex(ILGPU.Index2D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="index">The element index.</param>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.SubView(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Returns a sub view of the current view starting at the given
            32-bit offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="extent">The extent of the new sub view.</param>
            <returns>The raw sub view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.ComputeLinearIndex(ILGPU.LongIndex2D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="index">The element index.</param>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.SubView(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Returns a sub view of the current view starting at the given
            64-bit offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="extent">The extent of the new sub view.</param>
            <returns>The raw sub view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.VariableView(ILGPU.Index2D)">
            <summary>
            Returns a variable view that points to the element at the specified index.
            </summary>
            <param name="index">The variable index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.VariableView(ILGPU.LongIndex2D)">
            <summary>
            Returns a variable view that points to the element at the specified index.
            </summary>
            <param name="index">The variable index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.AsContiguous">
            <summary>
            Returns a contiguous view to this view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.AsGeneral(ILGPU.Stride2D.General)">
            <summary>
            Converts this array view into a general version.
            </summary>
            <param name="stride">The generic stride information to use.</param>
            <returns>The updated array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.AsGeneral">
            <summary>
            Converts this array view into a general version.
            </summary>
            <returns>The updated array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView2D`2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="T:ILGPU.Runtime.ArrayView3D`2">
            <summary>
            Represents a general view to an array on an accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 3D stride type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.To1DView">
            <summary>
            Converts this array view into a general 1D view.
            </summary>
            <returns>The converted general 1D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.AsDenseXY">
            <summary>
            Converts this array view into a dense version with leading dimensions XY.
            </summary>
            <returns>The updated array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.AsDenseZY">
            <summary>
            Converts this array view into a dense version with leading dimensions ZY.
            </summary>
            <returns>The updated array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.As1DView``1(``0)">
            <summary>
            Converts the given view into a 1D view.
            </summary>
            <typeparam name="TOtherStride">The stride type.</typeparam>
            <param name="stride">The target stride to use.</param>
            <returns>The converted 1D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.As3DView``1(ILGPU.LongIndex3D,``0)">
            <summary>
            Converts the given view into a 3D view.
            </summary>
            <typeparam name="TOtherStride">The stride type.</typeparam>
            <param name="extent">The extent to use.</param>
            <param name="stride">The target stride to use.</param>
            <returns>The converted 1D view.</returns>
        </member>
        <member name="F:ILGPU.Runtime.ArrayView3D`2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.ArrayView3D`2.Empty">
            <summary>
            Represents an empty view that is not valid and has a length of 0 elements
            and a default stride initialized with its default value.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.GetEmpty(`1)">
            <summary>
            Returns an empty view using the given stride.
            </summary>
            <param name="stride">The stride to use.</param>
            <returns>The created empty view instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.#ctor(ILGPU.ArrayView{`0},ILGPU.LongIndex3D,`1)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="baseView">The source view.</param>
            <param name="extent">The extent (number of elements).</param>
            <param name="stride">The stride to use.</param>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView3D`2.BaseView">
            <summary>
            Returns the associated buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView3D`2.ILGPU#IArrayView#Buffer">
            <summary>
            Returns the underlying memory buffer.
            </summary>
            <remarks>This property is not supported on accelerators.</remarks>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView3D`2.ILGPU#IArrayView#ElementSize">
            <summary>
            Returns the underlying element size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView3D`2.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView3D`2.IntExtent">
            <summary>
            Returns the 32-bit extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView3D`2.Stride">
            <summary>
            Returns the associated stride.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView3D`2.IsValid">
            <summary>
            Returns true if this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView3D`2.Length">
            <summary>
            Returns the strided length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView3D`2.IntLength">
            <summary>
            Returns the strided 32-bit length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView3D`2.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView3D`2.Item(ILGPU.Index3D)">
            <summary>
            Access the element at the given 32-bit index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView3D`2.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Access the element at the given 32-bit index.
            </summary>
            <param name="x">
            The X index.
            </param>
            <param name="y">
            The Y index.
            </param>
            <param name="z">
            The Z index.
            </param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView3D`2.Item(ILGPU.LongIndex3D)">
            <summary>
            Access the element at the given 64-bit index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:ILGPU.Runtime.ArrayView3D`2.Item(System.Int64,System.Int64,System.Int64)">
            <summary>
            Access the element at the given 64-bit index.
            </summary>
            <param name="x">
            The X index.
            </param>
            <param name="y">
            The Y index.
            </param>
            <param name="z">
            The Z index.
            </param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.ComputeLinearIndex(ILGPU.Index3D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="index">The element index.</param>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.SubView(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Returns a sub view of the current view starting at the given
            32-bit offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="extent">The extent of the new sub view.</param>
            <returns>The raw sub view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.ComputeLinearIndex(ILGPU.LongIndex3D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="index">The element index.</param>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.SubView(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Returns a sub view of the current view starting at the given
            64-bit offset.
            </summary>
            <param name="index">The starting offset.</param>
            <param name="extent">The extent of the new sub view.</param>
            <returns>The raw sub view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.VariableView(ILGPU.Index3D)">
            <summary>
            Returns a variable view that points to the element at the specified index.
            </summary>
            <param name="index">The variable index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.VariableView(ILGPU.LongIndex3D)">
            <summary>
            Returns a variable view that points to the element at the specified index.
            </summary>
            <param name="index">The variable index.</param>
            <returns>The resolved variable view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.AsContiguous">
            <summary>
            Returns a contiguous view to this view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.AsGeneral(ILGPU.Stride3D.General)">
            <summary>
            Converts this array view into a general version.
            </summary>
            <param name="stride">The generic stride information to use.</param>
            <returns>The updated array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.AsGeneral">
            <summary>
            Converts this array view into a general version.
            </summary>
            <returns>The updated array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ArrayView3D`2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUAcceleratorMode">
            <summary>
            The accelerator mode to be used with the <see cref="T:ILGPU.Runtime.CPU.CPUAccelerator"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUAcceleratorMode.Auto">
            <summary>
            The automatic mode uses <see cref="F:ILGPU.Runtime.CPU.CPUAcceleratorMode.Sequential"/> if a debugger is attached.
            It uses <see cref="F:ILGPU.Runtime.CPU.CPUAcceleratorMode.Parallel"/> if no debugger is attached to the
            application.
            </summary>
            <remarks>
            This is the default mode.
            </remarks>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUAcceleratorMode.Sequential">
            <summary>
            If the CPU accelerator uses a simulated sequential execution mechanism. This
            is particularly useful to simplify debugging. Note that different threads for
            distinct multiprocessors may still run in parallel.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUAcceleratorMode.Parallel">
            <summary>
            A parallel execution mode that runs all execution threads in parallel. This
            reduces processing time but makes it harder to use a debugger.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUAccelerator">
            <summary>
            Represents a general CPU-based runtime for kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context,ILGPU.Runtime.CPU.CPUDevice,ILGPU.Runtime.CPU.CPUAcceleratorMode,System.Threading.ThreadPriority)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="description">The accelerator description.</param>
            <param name="mode">The current accelerator mode.</param>
            <param name="threadPriority">
            The thread priority of the execution threads.
            </param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAccelerator.Mode">
            <summary>
            Returns the current mode.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAccelerator.ThreadPriority">
            <summary>
            Returns the current thread priority.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAccelerator.UsesSequentialExecution">
            <summary>
            Returns true if the current accelerator uses a simulated sequential execution
            mechanism. This is particularly useful to simplify debugging. Note that
            different threads for distinct multiprocessors may still run in parallel.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAccelerator.NumThreads">
            <summary>
            Returns the number of threads.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAccelerator.Backend">
            <summary>
            Returns the IL backend of this accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.CreateExtension``2(``1)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.AllocateRawInternal(System.Int64,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadKernel(ILGPU.Backends.CompiledKernel,System.Int32)">
            <summary>
            Loads the given kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="customGroupSize">The custom group size.</param>
            <returns>The loaded kernel</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadKernelInternal(ILGPU.Backends.CompiledKernel)">
            <summary>
            Loads a default kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadImplicitlyGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads an implicitly grouped kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadAutoGroupedKernelInternal(ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads an auto grouped kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.CreateStreamInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateStreamInternal"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.SynchronizeInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.OnBind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnBind"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.OnUnbind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnUnbind"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.GenerateKernelLauncherMethod(ILGPU.Backends.IL.ILCompiledKernel,System.Int32)">
            <summary>
            Generates a dynamic kernel-launcher method that will be just-in-time compiled
            during the first invocation. Using the generated launcher lowers the overhead
            for kernel launching dramatically, since unnecessary operations (like boxing)
            can be avoided.
            </summary>
            <param name="kernel">The kernel to generate a launcher for.</param>
            <param name="customGroupSize">
            The custom group size for the launching operation.
            </param>
            <returns>The generated launcher method.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.Launch(ILGPU.Runtime.CPU.CPUAcceleratorTask)">
            <summary>
            Launches the given accelerator task on this accelerator.
            </summary>
            <param name="task">The task to launch.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EstimateMaxActiveGroupsPerMultiprocessorInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.CreatePageLockFromPinnedInternal``1(System.IntPtr,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.DisposeAccelerator_SyncRoot(System.Boolean)">
            <summary>
            Dispose all managed resources allocated by this CPU accelerator instance.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUKernelExecutionHandler">
            <summary>
            Execution delegate for CPU kernels inside the runtime system.
            </summary>
            <param name="task">The referenced task.</param>
            <param name="globalIndex">The global thread index.</param>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUAcceleratorTask">
            <summary>
            Represents a single CPU-accelerator task.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUAcceleratorTask.ConstructorParameterTypes">
            <summary>
            Contains the required parameter types of the default task constructor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUAcceleratorTask.ExecuteParameterTypes">
            <summary>
            Contains the required parameter types of the task-execution method.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAcceleratorTask.GetTaskConstructor(System.Type)">
            <summary>
            Gets a task-specific constructor.
            </summary>
            <param name="taskType">The task type.</param>
            <returns>The constructor to create a new task instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAcceleratorTask.GetTotalUserDimGetter(System.Type)">
            <summary>
            Returns the getter for the <see cref="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.TotalUserDim"/> of a specific task
            type.
            </summary>
            <param name="taskType">The task type.</param>
            <returns>The getter method.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAcceleratorTask.GetTotalUserDimXYGetter(System.Type)">
            <summary>
            Returns the getter for the <see cref="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.TotalUserDimXY"/> of a specific task
            type.
            </summary>
            <param name="taskType">The task type.</param>
            <returns>The getter method.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAcceleratorTask.#ctor(ILGPU.Runtime.CPU.CPUKernelExecutionHandler,ILGPU.KernelConfig,ILGPU.RuntimeKernelConfig)">
            <summary>
            Constructs a new accelerator task.
            </summary>
            <param name="kernelExecutionDelegate">The execution method.</param>
            <param name="userConfig">The user-defined grid configuration.</param>
            <param name="config">The global task configuration.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.TotalUserDim">
            <summary>
            Returns the total dimension that was specified by the user.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.TotalUserDimXY">
            <summary>
            Extracts the upper XY part from the <see cref="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.TotalUserDim"/>.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.GridDim">
            <summary>
            Returns the current grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.GroupDim">
            <summary>
            Returns the current group dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.DynamicSharedMemoryConfig">
            <summary>
            Returns the shared memory config to use.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.KernelExecutionDelegate">
            <summary>
            Returns the associated kernel-execution delegate.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUContextExtensions">
            <summary>
            CPU specific context extensions.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUContextExtensions.DefaultCPU(ILGPU.Context.Builder)">
            <summary>
            Enables the default CPU device (see <see cref="F:ILGPU.Runtime.CPU.CPUDevice.Default"/>).
            </summary>
            <param name="builder">The builder instance.</param>
            <returns>The updated builder instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUContextExtensions.CPU(ILGPU.Context.Builder,ILGPU.Runtime.CPU.CPUDeviceKind)">
            <summary>
            Enables a CPU device of the given kind.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="kind">The CPU device kind.</param>
            <returns>The updated builder instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUContextExtensions.CPU(ILGPU.Context.Builder,ILGPU.Runtime.CPU.CPUDevice)">
            <summary>
            Enables a CPU device of the given kind.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="device">The custom CPU device.</param>
            <returns>The updated builder instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUContextExtensions.CPU(ILGPU.Context.Builder)">
            <summary>
            Enables all CPU devices.
            </summary>
            <param name="builder">The builder instance.</param>
            <returns>The updated builder instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUContextExtensions.CPU(ILGPU.Context.Builder,System.Predicate{ILGPU.Runtime.CPU.CPUDevice})">
            <summary>
            Enables all CPU devices.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="predicate">
            The predicate to include a given device.
            </param>
            <returns>The updated builder instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUContextExtensions.GetImplicitCPUAccelerator(ILGPU.Context)">
            <summary>
            Returns the implicitly created CPU accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <returns>
            The implicitly defined CPU accelerator with 0 threads per warp, 0 warps per
            MP and 0 MPs.
            </returns>
            <remarks>
            CAUTION: This accelerator is not intended for simulation purposes.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUContextExtensions.GetCPUDevice(ILGPU.Context,System.Int32)">
            <summary>
            Gets the i-th registered CPU device.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="cpuDeviceIndex">
            The relative device index for the CPU device. 0 here refers to the first
            CPU device, 1 to the second, etc.
            </param>
            <returns>The registered CPU device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUContextExtensions.GetCPUDevices(ILGPU.Context)">
            <summary>
            Gets all registered CPU devices.
            </summary>
            <param name="context">The ILGPU context.</param>
            <returns>All registered CPU devices.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUContextExtensions.CreateCPUAccelerator(ILGPU.Context,System.Int32)">
            <summary>
            Creates a new CPU accelerator using <see cref="F:ILGPU.Runtime.CPU.CPUAcceleratorMode.Auto"/>
            and default thread priority.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="cpuDeviceIndex">
            The relative device index for the CPU device. 0 here refers to the first
            CPU device, 1 to the second, etc.
            </param>
            <returns>The created CPU accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUContextExtensions.CreateCPUAccelerator(ILGPU.Context,System.Int32,ILGPU.Runtime.CPU.CPUAcceleratorMode)">
            <summary>
            Creates a new CPU accelerator with default thread priority.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="cpuDeviceIndex">
            The relative device index for the CPU device. 0 here refers to the first
            CPU device, 1 to the second, etc.
            </param>
            <param name="mode">The CPU accelerator mode.</param>
            <returns>The created CPU accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUContextExtensions.CreateCPUAccelerator(ILGPU.Context,System.Int32,ILGPU.Runtime.CPU.CPUAcceleratorMode,System.Threading.ThreadPriority)">
            <summary>
            Creates a new CPU accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="cpuDeviceIndex">
            The relative device index for the CPU device. 0 here refers to the first
            CPU device, 1 to the second, etc.
            </param>
            <param name="mode">The CPU accelerator mode.</param>
            <param name="threadPriority">
            The thread priority of the execution threads.
            </param>
            <returns>The created CPU accelerator.</returns>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUDeviceKind">
            <summary>
            Specifies a simulator kind of a <see cref="T:ILGPU.Runtime.CPU.CPUDevice"/> instance.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUDeviceKind.Default">
            <summary>
            A CPU accelerator that simulates a common configuration of a default GPU
            simulator with 1 multiprocessor, a warp size of 4 and 4 warps per
            multiprocessor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUDeviceKind.Nvidia">
            <summary>
            a CPU accelerator that simulates a common configuration of an NVIDIA GPU
            with 1 multiprocessor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUDeviceKind.AMD">
            <summary>
            A CPU accelerator that simulates a common configuration of an AMD GPU with
            1 multiprocessor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUDeviceKind.LegacyAMD">
            <summary>
            A CPU accelerator that simulates a common configuration of a legacy GCN AMD
            GPU with 1 multiprocessor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUDeviceKind.Intel">
            <summary>
            A CPU accelerator that simulates a common configuration of an Intel GPU
            with 1 multiprocessor.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUDevice">
            <summary>
            Represents a single CPU device.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUDevice.DefaultWarpSize">
            <summary>
            The default warp size of 4 threads per group.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUDevice.DefaultNumWarpsPerMultiprocessor">
            <summary>
            The default number of 4 warps per multiprocessor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUDevice.DefaultNumMultiprocessors">
            <summary>
            The default number of 1 multiprocessor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUDevice.Implicit">
            <summary>
            An implicitly defined CPU accelerator that is not intended for simulation
            purposes. Instead, it acts as a placeholder accelerator for buffers that
            are implicitly associated with a parent CPU accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUDevice.Default">
            <summary>
            A CPU accelerator that simulates a common configuration of a default GPU
            simulator with 1 multiprocessor, a warp size of 4 and 4 warps per
            multiprocessor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUDevice.Nvidia">
            <summary>
            A CPU accelerator that simulates a common configuration of an NVIDIA GPU with
            1 multiprocessor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUDevice.AMD">
            <summary>
            A CPU accelerator that simulates a common configuration of an AMD GPU with 1
            multiprocessor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUDevice.LegacyAMD">
            A CPU accelerator that simulates a common configuration of a legacy GCN AMD
            GPU with 1 multiprocessor.
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUDevice.Intel">
            <summary>
            A CPU accelerator that simulates a common configuration of an Intel GPU with
            1 multiprocessor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUDevice.All">
            <summary>
            Maps <see cref="T:ILGPU.Runtime.CPU.CPUDeviceKind"/> values to
            <see cref="T:ILGPU.Runtime.CPU.CPUDevice"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUDevice.GetDevice(ILGPU.Runtime.CPU.CPUDeviceKind)">
            <summary>
            Gets a specific CPU device.
            </summary>
            <param name="kind">The CPU device kind.</param>
            <returns>The CPU device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUDevice.GetDevices(System.Predicate{ILGPU.Runtime.CPU.CPUDevice})">
            <summary>
            Returns CPU devices.
            </summary>
            <param name="predicate">
            The predicate to include a given device.
            </param>
            <returns>All CPU devices.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUDevice.GetDevices(System.Predicate{ILGPU.Runtime.CPU.CPUDevice},ILGPU.Runtime.DeviceRegistry)">
            <summary>
            Registers CPU devices.
            </summary>
            <param name="predicate">
            The predicate to include a given device.
            </param>
            <param name="registry">The registry to add all devices to.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUDevice.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a new CPU accelerator description instance.
            </summary>
            <param name="numThreadsPerWarp">
            The number of threads per warp within a group.
            </param>
            <param name="numWarpsPerMultiprocessor">
            The number of warps per multiprocessor.
            </param>
            <param name="numMultiprocessors">
            The number of multiprocessors (number of parallel groups) to simulate.
            </param>
            <param name="skipChecks">True, to skip internal bounds checks.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUDevice.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new CPU accelerator description instance.
            </summary>
            <param name="numThreadsPerWarp">
            The number of threads per warp within a group.
            </param>
            <param name="numWarpsPerMultiprocessor">
            The number of warps per multiprocessor.
            </param>
            <param name="numMultiprocessors">
            The number of multiprocessors (number of parallel groups) to simulate.
            </param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUDevice.NumThreads">
            <summary>
            Returns the number of threads.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUDevice.CreateAccelerator(ILGPU.Context)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUDevice.CreateCPUAccelerator(ILGPU.Context)">
            <summary>
            Creates a new CPU accelerator using <see cref="F:ILGPU.Runtime.CPU.CPUAcceleratorMode.Auto"/>
            and default thread priority.
            </summary>
            <param name="context">The ILGPU context.</param>
            <returns>The created CPU accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUDevice.CreateCPUAccelerator(ILGPU.Context,ILGPU.Runtime.CPU.CPUAcceleratorMode)">
            <summary>
            Creates a new CPU accelerator with default thread priority.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="mode">The CPU accelerator mode.</param>
            <returns>The created CPU accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUDevice.CreateCPUAccelerator(ILGPU.Context,ILGPU.Runtime.CPU.CPUAcceleratorMode,System.Threading.ThreadPriority)">
            <summary>
            Creates a new CPU accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="mode">The CPU accelerator mode.</param>
            <param name="threadPriority">
            The thread priority of the execution threads.
            </param>
            <returns>The created CPU accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUDevice.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUDevice.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUKernel">
            <summary>
            Represents a single CPU kernel.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUKernel.GetKernelExecutionDelegate">
            <summary>
            Represents the <see cref="P:ILGPU.Runtime.CPU.CPUKernel.KernelExecutionDelegate"/> property getter.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUKernel.#ctor(ILGPU.Runtime.CPU.CPUAccelerator,ILGPU.Backends.CompiledKernel,System.Reflection.MethodInfo,ILGPU.Runtime.CPU.CPUKernelExecutionHandler)">
            <summary>
            Loads a compiled kernel into the given Cuda context as kernel program.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="kernel">The source kernel.</param>
            <param name="launcher">The launcher method for the given kernel.</param>
            <param name="kernelExecutionDelegate">The execution method.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUKernel.CPUAccelerator">
            <summary>
            Returns the associated CPU runtime.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUKernel.KernelExecutionDelegate">
            <summary>
            Returns the associated kernel-execution delegate.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUKernel.DisposeAcceleratorObject(System.Boolean)">
            <summary>
            Does not perform any operation.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUMemoryBuffer">
            <summary>
            A memory buffer that lives in CPU space.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.CPUMemSet(System.IntPtr,System.Byte,System.Int64,System.Int64)">
            <summary>
            Performs a unsafe memset operation on a CPU memory pointer.
            </summary>
            <param name="nativePtr">The native pointer to CPU memory.</param>
            <param name="value">The value to set.</param>
            <param name="offsetInBytes">
            The offset in bytes to begin the operation.
            </param>
            <param name="lengthInBytes">The number of bytes to set.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.CPUCopyToCPU(System.Byte@,System.Byte@,System.Int64,System.Int64)">
            <summary>
            Copies CPU content to a CPU target address.
            </summary>
            <param name="sourcePtr">The source pointer in CPU address space.</param>
            <param name="targetPtr">The target pointer in CPU address space.</param>
            <param name="sourceLengthInBytes">
            The length of the source buffer in bytes.
            </param>
            <param name="targetLengthInBytes">
            The length of the target buffer in bytes.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.CPUCopyFrom``1(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0}@,ILGPU.ArrayView{``0}@)">
            <summary>
            Copies CPU data (target view) from the given source view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="stream">The current stream.</param>
            <param name="sourceView">The source view in some address space.</param>
            <param name="targetView">The target view in CPU address space.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.CPUCopyTo``1(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0}@,ILGPU.ArrayView{``0}@)">
            <summary>
            Copies data from the source view to a CPU buffer (target view).
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="stream">The current stream.</param>
            <param name="sourceView">The source view in CPU address space.</param>
            <param name="targetView">The target view in some address space.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.CPUCopy``1(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0}@,ILGPU.ArrayView{``0}@)">
            <summary>
            Copies data from the source view to the target view, where one of the views
            has to live in the CPU address space.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="stream">The current stream.</param>
            <param name="sourceView">The source view.</param>
            <param name="targetView">The target view.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.#ctor(ILGPU.Runtime.Accelerator,System.Int64,System.Int32)">
            <summary>
            Initializes this array view source on the CPU.
            </summary>
            <param name="accelerator">The parent accelerator (if any).</param>
            <param name="length">The length of this source.</param>
            <param name="elementSize">The element size.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.MemSet(ILGPU.Runtime.AcceleratorStream,System.Byte,ILGPU.ArrayView{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Byte}@,ILGPU.ArrayView{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Byte}@,ILGPU.ArrayView{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUMemoryBuffer.PointerSourceBuffer">
            <summary>
            Creates a new view pointer wrapper that wraps a pointer reference
            inside an array view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.PointerSourceBuffer.#ctor(ILGPU.Runtime.Accelerator,System.IntPtr,System.Int64,System.Int32)">
            <summary>
            Creates a new pointer wrapper.
            </summary>
            <param name="accelerator">The parent accelerator (if any).</param>
            <param name="ptr">The native value pointer.</param>
            <param name="length">The length of this buffer.</param>
            <param name="elementSize">The element size.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.PointerSourceBuffer.DisposeAcceleratorObject(System.Boolean)">
            <summary>
            Does not perform any operation.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUMemoryBuffer.UnmanagedMemoryBuffer">
            <summary>
            Represents a buffer that allocates native memory in the CPU address space.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.UnmanagedMemoryBuffer.#ctor(ILGPU.Runtime.Accelerator,System.Int64,System.Int32)">
            <summary>
            Allocates an unmanaged memory buffer on the CPU.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="length">The length of this buffer.</param>
            <param name="elementSize">The element size.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.UnmanagedMemoryBuffer.DisposeAcceleratorObject(System.Boolean)">
            <summary>
            Frees the allocated unsafe memory.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUMemoryBuffer.PageLockedMemoryBuffer">
            <summary>
            Represents a buffer that allocates native page-locked memory in the CPU
            address space using the <see cref="T:ILGPU.Runtime.PageLockScope`1"/> class.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.PageLockedMemoryBuffer.#ctor(ILGPU.Runtime.Accelerator,System.Int64,System.Int32)">
            <summary>
            Allocates an unmanaged page-locked memory buffer on the CPU.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="length">The length of this buffer.</param>
            <param name="elementSize">The element size.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.PageLockedMemoryBuffer.DisposeAcceleratorObject(System.Boolean)">
            <summary>
            Frees the allocated pinned memory.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUMemoryBuffer.ArraySourceBuffer">
            <summary>
            Wraps a managed .Net array via a <see cref="T:System.Runtime.InteropServices.GCHandle"/> instance.
            </summary>
            <remarks>
            Note that wrapped arrays will not have an associated target accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.ArraySourceBuffer.#ctor(ILGPU.Runtime.CPU.CPUAccelerator,System.Array,System.Int32)">
            <summary>
            Constructs a new array wrapper.
            </summary>
            <param name="accelerator">The current CPU accelerator.</param>
            <param name="array">The managed array value.</param>
            <param name="elementSize">The element size.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.ArraySourceBuffer.DisposeAcceleratorObject(System.Boolean)">
            <summary>
            Frees the internal GC handle.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.GetCPUAccelerator(ILGPU.Runtime.Accelerator)">
            <summary>
            Returns either the given accelerator (if it is a <see cref="T:ILGPU.Runtime.CPU.CPUAccelerator"/>)
            or the default accelerator of the parent <see cref="T:ILGPU.Context"/> instance.
            </summary>
            <param name="accelerator">The current accelerator instance.</param>
            <returns>A valid parent CPU accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.Create``1(ILGPU.Runtime.Accelerator,``0@,System.Int64)">
            <summary>
            Creates a wrapped pointer memory buffer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The parent accelerator.</param>
            <param name="value">The value reference to the variable.</param>
            <param name="length">The length of this source.</param>
            <returns>A wrapped pointer memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.Create``1(ILGPU.Runtime.Accelerator,``0*,System.Int64)">
            <summary>
            Creates a wrapped pointer memory buffer.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="value">The native value pointer.</param>
            <param name="length">The length of this source.</param>
            <returns>A wrapped pointer memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.Create(ILGPU.Runtime.Accelerator,System.IntPtr,System.Int64,System.Int32)">
            <summary>
            Creates a wrapped pointer memory buffer.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="ptr">The native value pointer.</param>
            <param name="length">The length of this source.</param>
            <param name="elementSize">The element size.</param>
            <returns>A wrapped pointer memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.Create(ILGPU.Runtime.Accelerator,System.Int64,System.Int32)">
            <summary>
            Creates a new unmanaged memory buffer.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="length">The length to allocate.</param>
            <param name="elementSize">The element size.</param>
            <returns>An unmanaged memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.CreatePageLocked(ILGPU.Runtime.Accelerator,System.Int64,System.Int32)">
            <summary>
            Creates a new page-locked unmanaged memory view source.
            </summary>
            <param name="accelerator">
            The GPU accelerator to associate the page-locked memory allocation with.
            </param>
            <param name="length">The length to allocate.</param>
            <param name="elementSize">The element size.</param>
            <returns>An unsafe array view source.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.FromArray(System.Array)">
            <summary>
            Creates a new memory buffer wrapper around the given .Net array.
            </summary>
            <param name="array">The managed source array.</param>
            <remarks>Note that this operation is supported in kernels only.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer.FromArray(System.Array,System.Int32)">
            <summary>
            Creates a new memory buffer wrapper around the given .Net array.
            </summary>
            <param name="array">The managed source array.</param>
            <param name="elementSize">The custom element size in bytes.</param>
            <returns>The wrapper memory buffer.</returns>
            <remarks>Note that this operation is supported in kernels only.</remarks>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUMultiprocessor">
            <summary>
            Represents an abstract GPU multiprocessor simulated on the CPU.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.Create(ILGPU.Runtime.CPU.CPUAccelerator,System.Int32,System.Boolean)">
            <summary>
            Creates a new CPU multiprocessor instance.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="processorIndex">The index of the multiprocessor.</param>
            <param name="usesSequentialProcessing">
            True, if this multiprocessor uses a sequential execution policy that executes
            a single thread at a time to improve the debugging experience.
            </param>
            <returns>The created multiprocessor.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.#ctor(ILGPU.Runtime.CPU.CPUAccelerator,System.Int32)">
            <summary>
            Creates a new CPU multiprocessor.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="processorIndex">The index of the multiprocessor.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUMultiprocessor.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUMultiprocessor.MaxNumThreadsPerMultiprocessor">
            <summary>
            The maximum number of threads on this multiprocessor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUMultiprocessor.MaxNumThreadsPerGroup">
            <summary>
            The maximum number of threads per group.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUMultiprocessor.WarpSize">
            <summary>
            Returns the warp size of this multiprocessor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUMultiprocessor.NumWarpsPerMultiprocessor">
            <summary>
            Returns the number of warps per multiprocessor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUMultiprocessor.ProcessorIndex">
            <summary>
            Returns the processor index.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.StartOrContinueRuntimeThreads(System.Int32)">
            <summary>
            Starts all required runtime threads.
            </summary>
            <param name="groupSize">The group size to use.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.SetupRuntimeClasses(ILGPU.Runtime.CPU.CPUAcceleratorTask)">
            <summary>
            Setups all runtime classes related to <see cref="T:ILGPU.Runtime.CPU.CPURuntimeGroupContext"/>
            and <see cref="T:ILGPU.Runtime.CPU.CPURuntimeWarpContext"/>.
            </summary>
            <param name="task">The current CPU task.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.InitLaunch(ILGPU.Runtime.CPU.CPUAcceleratorTask)">
            <summary>
            Initializes the launch process of the given task.
            </summary>
            <param name="task">The task to launch.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.FinishLaunch">
            <summary>
            Finishes a kernel launch.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.ExecuteThread(System.Object)">
            <summary>
            Entry point for a single processing thread.
            </summary>
            <param name="arg">The absolute thread index.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.BeginLaunch(ILGPU.Runtime.CPU.CPUAcceleratorTask)">
            <summary>
            Begins a accelerator task.
            </summary>
            <param name="task">The task to launch.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.BeginThreadProcessing">
            <summary>
            Begins processing of the current thread.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.EndThreadProcessing">
            <summary>
            Ends a previously started processing task of the current thread.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.FinishThreadProcessing">
            <summary>
            Finishes processing of the current thread.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.WarpBarrier">
            <summary>
            Waits for all threads in the current warp.
            </summary>
            <returns>The number of participating threads.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.GroupBarrier">
            <summary>
            Waits for all threads in the current group.
            </summary>
            <returns>The number of participating threads.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUMultiprocessor.SequentialProcessor">
            <summary>
            A sequential multiprocessor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUMultiprocessor.SequentialProcessor.activitySet">
            <summary>
            The internal activity set.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUMultiprocessor.SequentialProcessor.activeThreadIndex">
            <summary>
            The internal index of the currently active thread.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.SequentialProcessor.#ctor(ILGPU.Runtime.CPU.CPUAccelerator,System.Int32)">
            <summary>
            Creates a new sequential processor.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.SequentialProcessor.ScheduleNextThread(System.Int32,System.Int32,System.Int32)">
            <summary>
            Puts the current thread into sleep mode (if there are some other threads
            being active) and wakes up the next thread.
            </summary>
            <param name="threadOffset">The absolute thread offset.</param>
            <param name="threadIndex">The current thread index.</param>
            <param name="threadDimension">The current number of threads.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.SequentialProcessor.WaitForThreadToBecomeActive(System.Int32,System.Int32)">
            <summary>
            Waits for the current thread to become active.
            </summary>
            <param name="threadOffset">The absolute thread offset.</param>
            <param name="threadIndex">The current thread index.</param>
            <returns>The number of participating threads.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.SequentialProcessor.BeginLaunch(ILGPU.Runtime.CPU.CPUAcceleratorTask)">
            <summary>
            Initializes the internal activity set.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.SequentialProcessor.BeginThreadProcessing">
            <summary>
            Waits for the next thread to become active.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.SequentialProcessor.EndThreadProcessing">
            <summary>
            Schedules the next thread in the waiting list.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.SequentialProcessor.FinishThreadProcessing">
            <summary>
            Removes the current thread from the activity set.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.SequentialProcessor.WarpBarrier">
            <summary>
            Schedules the next thread to become active while waiting for this
            thread to become active again.
            </summary>
            <returns>The number of participating threads.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.SequentialProcessor.GroupBarrier">
            <summary>
            Schedules the next thread to become active while waiting for this
            thread to become active again.
            </summary>
            <returns>The number of participating threads.</returns>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUMultiprocessor.ParallelProcessor">
            <summary>
            A parallel multiprocessor.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.ParallelProcessor.InitBarrier(System.Threading.Barrier,System.Int32)">
            <summary>
            Initializes a given barrier to ensure that the barrier has a sufficient
            number of participants.
            </summary>
            <param name="barrier">The barrier to initialize.</param>
            <param name="numParticipants">The number of desired participants.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.ParallelProcessor.PerformBarrier(System.Threading.Barrier)">
            <summary>
            Invokes <see cref="M:System.Threading.Barrier.SignalAndWait"/> on the given barrier while
            ensuring that all memory transactions have been committed. Furthermore,
            it determines the number of participating threads.
            </summary>
            <param name="barrier">The barrier to use.</param>
            <returns>The number of participating threads.</returns>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUMultiprocessor.ParallelProcessor.barrier">
            <summary>
            The general barrier.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUMultiprocessor.ParallelProcessor.warpBarriers">
            <summary>
            Warp barriers for each warp.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.ParallelProcessor.#ctor(ILGPU.Runtime.CPU.CPUAccelerator,System.Int32)">
            <summary>
            Creates a new parallel processor.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.ParallelProcessor.BeginLaunch(ILGPU.Runtime.CPU.CPUAcceleratorTask)">
            <summary>
            Ensures that the internal barriers are properly initialized.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.ParallelProcessor.BeginThreadProcessing">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.ParallelProcessor.EndThreadProcessing">
            <summary>
            Waits for the internal barrier.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.ParallelProcessor.FinishThreadProcessing">
            <summary>
            Removes a participant from the internal thread barrier.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.ParallelProcessor.WarpBarrier">
            <summary>
            Waits for all threads of the current warp.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.ParallelProcessor.GroupBarrier">
            <summary>
            Waits for all threads using the underlying thread barrier.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMultiprocessor.ParallelProcessor.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUProfilingMarker">
            <summary>
            Represents a point-in-time marker used in CPU profiling.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUProfilingMarker.Timestamp">
            <summary>
            The timestamp this profiling marker was created.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUProfilingMarker.Synchronize">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUProfilingMarker.MeasureFrom(ILGPU.Runtime.ProfilingMarker)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUProfilingMarker.DisposeAcceleratorObject(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPURuntimeContext">
            <summary>
            Represents a runtime context for a single group.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPURuntimeContext.ILockedOperation`1">
            <summary>
            Represents an operation that is performed by a single "main" thread in
            the scope of a parallel CPU runtime execution.
            </summary>
            <typeparam name="T">The result type of this operation.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeContext.ILockedOperation`1.ApplySyncInMainThread">
            <summary>
            Applies the current operation in sync with all other threads.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeContext.ILockedOperation`1.Result">
            <summary>
            Retrieves the global result of the operation.
            </summary>
            <remarks>
            Note that this getter will be executed by all other threads in the
            group in parallel.
            </remarks>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPURuntimeContext.IParent">
            <summary>
            A parent object that has a barrier function.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeContext.IParent.Barrier">
            <summary>
            Executes a thread barrier.
            </summary>
            <returns>The number of participating threads.</returns>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPURuntimeContext.GetBroadcastMemory`1">
            <summary>
            Represents an operation that allocates and managed broadcast memory.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeContext.GetBroadcastMemory`1.#ctor(ILGPU.Runtime.CPU.CPURuntimeContext,System.Int32)">
            <summary>
            Constructs a new allocation operation.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeContext.GetBroadcastMemory`1.Parent">
            <summary>
            Returns the parent context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeContext.GetBroadcastMemory`1.GroupIndex">
            <summary>
            Returns the current group index to read from.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeContext.GetBroadcastMemory`1.BroadcastBuffer">
            <summary>
            Returns a reference to the parent broadcast cache.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeContext.GetBroadcastMemory`1.ApplySyncInMainThread">
            <summary>
            Allocates the required broadcast memory.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeContext.GetBroadcastMemory`1.Result">
            <summary>
            Returns a view to the (potentially) adjusted broadcast cache.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeContext.memoryLock">
            <summary>
            The global memory lock variable.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeContext.broadcastBuffer">
            <summary>
            A temporary location for broadcast values.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeContext.broadcastIndex">
            <summary>
            A temporary location for broadcast indices.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeContext.#ctor(ILGPU.Runtime.CPU.CPUMultiprocessor)">
            <summary>
            Constructs a new CPU-based runtime context for parallel processing.
            </summary>
            <param name="multiprocessor">The target CPU multiprocessor.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeContext.Multiprocessor">
            <summary>
            Returns the parent multiprocessor instance.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeContext.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeContext.PerformLockStep``3(``0,``1)">
            <summary>
            Performs the given operation locked with respect to all other operating
            threads that are currently active.
            </summary>
            <typeparam name="TParent">The parent object type.</typeparam>
            <typeparam name="TOperation">The operation type.</typeparam>
            <typeparam name="T">The result type.</typeparam>
            <param name="parent">The parent object instance.</param>
            <param name="operation">The operation to perform.</param>
            <returns>The determined result value for all threads.</returns>
            <remarks>
            It internally acquires a lock using <see cref="M:ILGPU.Runtime.CPU.CPURuntimeContext.AcquireLock"/> and determines
            a "main thread" that can execute the given operation in sync with all
            other threads. Afterwards, all threads continue and query the result of
            the synchronized operation and the main thread releases its lock.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeContext.AcquireLock">
            <summary>
            Acquires the internal thread lock and returns true, if the current thread
            becomes the main thread that can perform thread-safe operations.
            </summary>
            <returns>True, if the current thread is the main thread.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeContext.ReleaseLock``1(``0,System.Boolean)">
            <summary>
            Release the internal lock.
            </summary>
            <typeparam name="TParent">The parent object type.</typeparam>
            <param name="parent">The parent object instance.</param>
            <param name="isMainThread">True, if this thread is the main thread.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeContext.Broadcast``2(``0,``1,System.Int32,System.Int32)">
            <summary>
            Executes a broadcast operation.
            </summary>
            <typeparam name="TParent">The parent object type.</typeparam>
            <typeparam name="T">The element type to broadcast.</typeparam>
            <param name="parent">The parent object instance.</param>
            <param name="value">The desired group index.</param>
            <param name="threadIndex">The current thread index.</param>
            <param name="groupIndex">The source thread index within the group.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeContext.Initialize">
            <summary>
            Initializes the internal runtime context.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeContext.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPURuntimeGroupContext">
            <summary>
            Represents a runtime context for thread groups.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.currentContext">
            <summary>
            Represents the current context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Current">
            <summary>
            Returns the current group runtime context.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.groupCounter">
            <summary>
            A counter for the computation of interlocked group counters.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.groupAllocationIndexAccumulator">
            <summary>
            Group-wide accumulator for group allocation indices.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.groupAllocationIndices">
            <summary>
            Internal storage to track group-wide allocation indices
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.dynamicSharedMemoryArrayLength">
            <summary>
            The current dynamic shared memory array size in bytes.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.sharedMemory">
            <summary>
            A temporary cache for additional shared memory requirements.
            </summary>
            <remarks>
            Note that these buffers are only required for debug CPU builds. In
            these cases, we cannot move nested
            <see cref="M:ILGPU.SharedMemory.Allocate``1(System.Int32)"/> instructions out of nested loops
            to provide the best debugging experience.
            </remarks>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.sharedMemoryLock">
            <summary>
            Shared-memory allocation lock object for synchronizing accesses to the
            <see cref="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.sharedMemory" /> list.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.#ctor(ILGPU.Runtime.CPU.CPUMultiprocessor)">
            <summary>
            Constructs a new CPU-based runtime context for parallel processing.
            </summary>
            <param name="multiprocessor">The target CPU multiprocessor.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeGroupContext.GridDimension">
            <summary>
            Returns the group dimension of the scheduled thread grid.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeGroupContext.GroupDimension">
            <summary>
            Returns the group dimension of the scheduled thread grid.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeGroupContext.GroupSize">
            <summary>
            Returns the current total group size in number of threads.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BlockBarrier">
            <summary>
            Executes a thread barrier.
            </summary>
            <returns>The number of participating threads.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.GroupAllocationSynchronizedBarrier">
            <summary>
            The internal implementation of a group barrier that takes current allocation
            indices into account.
            </summary>
            <returns>The number of participating threads.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Barrier">
            <summary>
            Executes a thread barrier.
            </summary>
            <returns>The number of participating threads.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.AllocateLocalMemory``1(System.Int32)">
            <summary>
            Performs a local-memory allocation.
            </summary>
            <returns>The resolved local-memory array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.AllocateSharedMemoryDynamic``1">
            <summary>
            Performs a dynamic shared-memory allocation.
            </summary>
            <returns>The resolved shared-memory array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.AllocateSharedMemory``1(System.Int32)">
            <summary>
            Performs a shared-memory allocation.
            </summary>
            <param name="extent">The number of elements.</param>
            <returns>The resolved shared-memory array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BarrierPopCount(System.Boolean,System.Int32@)">
            <summary>
            Executes a thread barrier and returns the number of threads for which
            the predicate evaluated to true.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="numParticipants">The number of participants.</param>
            <returns>
            The number of threads for which the predicate evaluated to true.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BarrierPopCount(System.Boolean)">
            <summary>
            Executes a thread barrier and returns the number of threads for which
            the predicate evaluated to true.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>
            The number of threads for which the predicate evaluated to true.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BarrierAnd(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true if all threads in a block
            fulfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, if all threads in a block fulfills the predicate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BarrierOr(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true if any thread in a block
            fulfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, if any thread in a block fulfills the predicate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Broadcast``1(``0,System.Int32)">
            <summary>
            Executes a broadcast operation.
            </summary>
            <typeparam name="T">The element type to broadcast.</typeparam>
            <param name="value">The desired group index.</param>
            <param name="groupIndex">The source thread index within the group.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Initialize(ILGPU.Index3D@,ILGPU.Index3D@,ILGPU.SharedMemoryConfig@)">
            <summary>
            Initializes this context.
            </summary>
            <param name="gridDimension">The grid dimension.</param>
            <param name="groupDimension">The group dimension.</param>
            <param name="sharedMemoryConfig">
            The current shared memory configuration.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.TearDown">
            <summary>
            Performs cleanup operations with respect to the previously allocated
            shared memory
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.ClearSharedMemoryAllocations">
            <summary>
            Clears all previously allocated shared-memory operations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.MakeCurrent">
            <summary>
            Makes the current context the active one for this thread.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPURuntimeThreadContext">
            <summary>
            Represents a runtime context for a single thread.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeThreadContext.currentContext">
            <summary>
            Represents the current context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.Current">
            <summary>
            Returns the current warp runtime context.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeThreadContext.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new runtime thread context.
            </summary>
            <param name="laneIdx">The current lane index.</param>
            <param name="warpIndex">The current warp index.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.LaneIndex">
            <summary>
            The current lane index within the CPU accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.WarpIndex">
            <summary>
            Returns the current warp index within the CPU accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.GridIndex">
            <summary>
            Returns the grid index within the scheduled thread grid.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.GroupIndex">
            <summary>
            Returns the group index within the scheduled thread grid.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeThreadContext.LinearGroupIndex">
            <summary>
            Returns the linear thread index within this thread group.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeThreadContext.MakeCurrent">
            <summary>
            Makes the current context the active one for this thread.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPURuntimeWarpContext">
            <summary>
            Represents a runtime context for a single warp.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeWarpContext.currentContext">
            <summary>
            Represents the current context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.Current">
            <summary>
            Returns the current warp runtime context.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPURuntimeWarpContext.ShuffleConfig">
            <summary>
            Represents a single configuration on how to perform a shuffle operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.ShuffleConfig.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new shuffle configuration.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.ShuffleConfig.CurrentLane">
            <summary>
            Returns the current contributing lane index.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.ShuffleConfig.SourceLane">
            <summary>
            Returns the relative source lane to shuffle from.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.ShuffleConfig.Offset">
            <summary>
            Returns the absolute offset to convert the relative source lane value
            into an absolute lane index to shuffle from.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.ShuffleConfig.Width">
            <summary>
            Returns the logical warp size to use.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.ShuffleConfig.IsSourceLaneInBounds">
            <summary>
            Returns true if the current relative source lane is in bounds of the
            currently specified sub-warp range.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.ShuffleConfig.AbsoluteSourceLane">
            <summary>
            Returns the absolute source lane index.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.ShuffleConfig.Validate(System.Int32)">
            <summary>
            Validates the current configuration using the given warp size.
            </summary>
            <param name="warpSize">The current warp size.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.ShuffleConfig.AdjustSourceLane(System.Int32)">
            <summary>
            Adjusts the internally stored source lane index.
            </summary>
            <param name="sourceLane">The new source lane index to use.</param>
            <returns>The updated configuration.</returns>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPURuntimeWarpContext.GetShuffleMemory`1">
            <summary>
            Represents an operation that allocates and managed shuffle memory.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.GetShuffleMemory`1.#ctor(ILGPU.Runtime.CPUMemoryBufferCache,System.Int32)">
            <summary>
            Constructs a new allocation operation.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.GetShuffleMemory`1.ShuffleBuffer">
            <summary>
            Returns the parent context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.GetShuffleMemory`1.WarpSize">
            <summary>
            Returns the warp size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.GetShuffleMemory`1.ApplySyncInMainThread">
            <summary>
            Allocates the required amount of shuffle memory.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.GetShuffleMemory`1.Result">
            <summary>
            Returns a view to the (potentially) adjusted shuffle cache.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeWarpContext.shuffleBuffer">
            <summary>
            A temporary location for shuffle values.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.#ctor(ILGPU.Runtime.CPU.CPUMultiprocessor,System.Int32)">
            <summary>
            Constructs a new CPU-based runtime context for parallel processing.
            </summary>
            <param name="multiprocessor">The target CPU multiprocessor.</param>
            <param name="numThreadsPerWarp">The number of threads per warp.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.WarpSize">
            <summary>
            Returns the number of threads per warp (statically known).
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.CurrentWarpSize">
            <summary>
            Returns the number of threads per warp in the current runtime context.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.Barrier">
            <summary>
            Executes a thread barrier.
            </summary>
            <returns>The number of participating threads.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.Shuffle``1(``0,ILGPU.Runtime.CPU.CPURuntimeWarpContext.ShuffleConfig@)">
            <summary>
            Performs a shuffle operation.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="config">The current shuffle configuration.</param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.Broadcast``1(``0,System.Int32)">
            <summary>
            Executes a broadcast operation.
            </summary>
            <typeparam name="T">The element type to broadcast.</typeparam>
            <param name="value">The desired group index.</param>
            <param name="laneIndex">The source thread index within the warp.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.Initialize(System.Int32)">
            <summary>
            Initializes this context.
            </summary>
            <param name="currentWarpSize">The current warp size.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.MakeCurrent">
            <summary>
            Makes the current context the active one for this thread.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUStream">
            <summary>
            Represents a CPU stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUStream.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new CPU stream.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUStream.Synchronize">
            <summary>
            Does not perform any operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUStream.AddProfilingMarkerInternal">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUStream.DisposeAcceleratorObject(System.Boolean)">
            <summary>
            Does not perform any operation.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUCapabilityContext">
            <summary>
            Represents capabilities available to the CPU accelerator.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CPUMemoryBufferCache">
            <summary>
            Represents a cached memory CPU buffer with a specific capacity.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPUMemoryBufferCache.cache">
            <summary>
            This represents the actual memory cache.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPUMemoryBufferCache.#ctor(ILGPU.Runtime.CPU.CPUAccelerator)">
            <summary>
            Constructs a new memory-buffer cache.
            </summary>
            <param name="accelerator">
            The associated accelerator to allocate memory on.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.CPUMemoryBufferCache.#ctor(ILGPU.Runtime.CPU.CPUAccelerator,System.Int64)">
            <summary>
            Constructs a new memory-buffer cache.
            </summary>
            <param name="accelerator">
            The associated accelerator to allocate memory on.
            </param>
            <param name="initialLength">The initial length of the buffer.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPUMemoryBufferCache.CacheSizeInBytes">
            <summary>
            Returns the current cached size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPUMemoryBufferCache.Cache">
            <summary>
            Returns the underlying memory buffer view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPUMemoryBufferCache.GetCacheSize``1">
            <summary>
            Returns the available number of elements of type T.
            </summary>
            <typeparam name="T">The desired element type.</typeparam>
            <returns>The available number of elements of type T.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPUMemoryBufferCache.Allocate``1(System.Int64)">
            <summary>
            Allocates the given number of elements and returns an array view
            to the requested amount of elements. Note that the array view
            points to not-initialized memory.
            </summary>
            <param name="numElements">The number of elements to allocate.</param>
            <returns>
            An array view that can access the requested number of elements.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.CPUMemoryBufferCache.DisposeAcceleratorObject(System.Boolean)">
            <summary>
            Disposes this cache by disposing the associated cache buffer.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaAccelerator">
            <summary>
            Represents a Cuda accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAccelerator.PitchedAllocationAlignmentInBytes">
            <summary>
            The default pitched allocation alignment in bytes (128) for all Cuda devices.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAccelerator.GetCudaAPIMethod">
            <summary>
            Represents the <see cref="P:ILGPU.Runtime.Cuda.CudaAPI.CurrentAPI"/> property.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAccelerator.LaunchKernelMethod">
            <summary>
            Represents the <see cref="M:ILGPU.Runtime.Cuda.CudaAPI.LaunchKernelWithStruct``1(ILGPU.Runtime.Cuda.CudaStream,ILGPU.Runtime.Cuda.CudaKernel,ILGPU.RuntimeKernelConfig,``0@,System.Int32)"/> method.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAccelerator.ThrowIfFailedMethod">
            <summary>
            Represents the <see cref="M:ILGPU.Runtime.Cuda.CudaException.ThrowIfFailed(ILGPU.Runtime.Cuda.CudaError)" /> method.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.GetCudaMemoryType(System.IntPtr)">
            <summary>
            Resolves the memory type of the given device pointer.
            </summary>
            <param name="value">The device pointer to check.</param>
            <returns>The resolved memory type</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.TryGetInstructionSet(ILGPU.Runtime.Cuda.CudaArchitecture,ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion@,ILGPU.Runtime.Cuda.CudaInstructionSet@)">
            <summary>
            Tries to determine the PTX instruction set to use, based on the PTX
            architecture and installed Cuda drivers.
            </summary>
            <param name="architecture">The PTX architecture</param>
            <param name="installedDriverVersion">The Cuda driver version</param>
            <param name="minDriverVersion">The minimum driver version.</param>
            <param name="instructionSet">The instruction set (if any).</param>
            <returns>True, if the instruction set could be determined.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.GetInstructionSet(ILGPU.Runtime.Cuda.CudaArchitecture,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns the PTX instruction set to use, based on the PTX architecture and
            installed Cuda drivers.
            </summary>
            <param name="architecture">The PTX architecture</param>
            <param name="installedDriverVersion">The Cuda driver version</param>
            <returns>The PTX instruction set</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,ILGPU.Runtime.Cuda.CudaDevice,ILGPU.Runtime.Cuda.CudaAcceleratorFlags)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="description">The accelerator description.</param>
            <param name="acceleratorFlags">The accelerator flags.</param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.Device">
            <summary>
            Returns the Cuda device.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.DeviceId">
            <summary>
            Returns the device id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.DriverVersion">
            <summary>
            Returns the current driver version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.Architecture">
            <summary>
            Returns the PTX architecture.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.InstructionSet">
            <summary>
            Returns the PTX instruction set.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.ClockRate">
            <summary>
            Returns the clock rate.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.MemoryClockRate">
            <summary>
            Returns the memory clock rate.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.MemoryBusWidth">
            <summary>
            Returns the memory clock rate.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.L2CacheSize">
            <summary>
            Returns L2 cache size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.MaxSharedMemoryPerMultiprocessor">
            <summary>
            Returns the maximum shared memory size per multiprocessor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.TotalNumRegistersPerMultiprocessor">
            <summary>
            Returns the total number of registers per multiprocessor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.TotalNumRegistersPerGroup">
            <summary>
            Returns the total number of registers per group.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.MaxMemoryPitch">
            <summary>
            Returns the maximum memory pitch in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.NumConcurrentCopyEngines">
            <summary>
            Returns the number of concurrent copy engines (if any, result > 0).
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.HasECCSupport">
            <summary>
            Returns true if this device has ECC support.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.SupportsManagedMemory">
            <summary>
            Returns true if this device supports managed memory allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.SupportsComputePreemption">
            <summary>
            Returns true if this device support compute preemption.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.DriverMode">
            <summary>
            Returns the current device driver mode.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.PCIDomainId">
            <summary>
            Returns the PCI domain id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.PCIBusId">
            <summary>
            Returns the PCI bus id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.PCIDeviceId">
            <summary>
            Returns the PCI device id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.NVMLPCIBusId">
            <summary>
            Returns an NVML library compatible PCI bus id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.SharedMemoryConfiguration">
            <summary>
            Gets or sets the current shared-memory configuration.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.CacheConfiguration">
            <summary>
            Gets or sets the current cache configuration.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.Backend">
            <summary>
            Returns the PTX backend of this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.Capabilities">
            <summary>
            Returns the capabilities of this accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateExtension``2(``1)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateKernel(ILGPU.Backends.PTX.PTXCompiledKernel)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateKernel(ILGPU.Backends.PTX.PTXCompiledKernel,System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateStreamInternal">
            <summary>
            Create a Cuda stream with the flag
            <see cref="F:ILGPU.Runtime.Cuda.StreamFlags.CU_STREAM_NON_BLOCKING"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateStream(ILGPU.Runtime.Cuda.StreamFlags)">
            <summary>
            Creates a <see cref="T:ILGPU.Runtime.Cuda.CudaStream"/> object using
            specified <see cref="T:ILGPU.Runtime.Cuda.StreamFlags"/>.
            </summary>
            <param name="flag">The flag to use.</param>
            <returns>The created stream.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateStream(System.IntPtr,System.Boolean)">
            <summary>
            Creates a <see cref="T:ILGPU.Runtime.Cuda.CudaStream"/> object using an externally created stream.
            </summary>
            <param name="ptr">A pointer to the externally created stream.</param>
            <param name="responsible">
            Whether ILGPU is responsible of disposing this stream.
            </param>
            <returns>The created stream.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.SynchronizeInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.OnBind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnBind"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.OnUnbind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnUnbind"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.GetFreeMemory">
            <summary>
            Queries the amount of free memory.
            </summary>
            <returns>The amount of free memory in bytes.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.AllocateRawInternal(System.Int64,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.Allocate2DPitchedX``1(ILGPU.LongIndex2D)">
            <summary>
            Allocates a pitched 2D buffer with X being the leading dimension using an
            alignment of <see cref="F:ILGPU.Runtime.Cuda.CudaAccelerator.PitchedAllocationAlignmentInBytes"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The number of elements to allocate.</param>
            <returns>An allocated 2D buffer on this accelerator.</returns>
            <remarks>
            Since X is the leading dimension, X must be less or equal to
            <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.Allocate2DPitchedY``1(ILGPU.LongIndex2D)">
            <summary>
            Allocates a pitched 2D buffer with Y being the leading dimension using an
            alignment of <see cref="F:ILGPU.Runtime.Cuda.CudaAccelerator.PitchedAllocationAlignmentInBytes"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The number of elements to allocate.</param>
            <returns>An allocated 2D buffer on this accelerator.</returns>
            <remarks>
            Since Y is the leading dimension, Y must be less or equal to
            <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.GenerateKernelLauncherMethod(ILGPU.Backends.PTX.PTXCompiledKernel,System.Int32)">
            <summary cref="M:ILGPU.Runtime.KernelAccelerator`2.GenerateKernelLauncherMethod(`0,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EstimateMaxActiveGroupsPerMultiprocessorInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreatePageLockFromPinnedInternal``1(System.IntPtr,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.DisposeAccelerator_SyncRoot(System.Boolean)">
            <summary>
            Disposes the current Cuda context.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaAcceleratorFlags">
            <summary>
            Represents the accelerator flags for a Cuda accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleAuto">
            <summary>
            Automatic scheduling (default).
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleSpin">
            <summary>
            Spin scheduling.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleYield">
            <summary>
            Yield scheduling
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleBlockingSync">
            <summary>
            Blocking synchronization as default scheduling.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.ComputeDynamicMemorySizeForBlockSize">
            <summary>
            Computes the amount of shared memory for the given block size.
            </summary>
            <param name="blockSize">The block size.</param>
            <returns>The amount of required shared memory.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.ComputeManagedDynamicMemorySizeForBlockSize">
            <summary>
            Computes the amount of shared memory for the given block size.
            </summary>
            <param name="blockSize">The block size.</param>
            <returns>The amount of required shared memory.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaAPI">
            <summary>
            Wraps the Cuda-driver API.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.Init">
            <summary>
            Initializes the driver API.
            </summary>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetDriverVersion(ILGPU.Runtime.Cuda.CudaDriverVersion@)">
            <summary>
            Resolves the current driver version.
            </summary>
            <param name="driverVersion">The resolved driver version.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetErrorString(ILGPU.Runtime.Cuda.CudaError)">
            <summary>
            Resolves the error string for the given error status.
            </summary>
            <param name="error">The error to resolve.</param>
            <returns>The resolved error string.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetDevice(System.Int32@,System.Int32)">
            <summary>
            Resolves the device id for the given ordinal.
            </summary>
            <param name="device">The device id.</param>
            <param name="ordinal">The device ordinal.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetDeviceCount(System.Int32@)">
            <summary>
            Resolves the number of available devices.
            </summary>
            <param name="count">The number of devices</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetDeviceName(System.String@,System.Int32)">
            <summary>
            Resolves the name of a device.
            </summary>
            <param name="name">The resolved name.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetTotalDeviceMemory(System.IntPtr@,System.Int32)">
            <summary>
            Resolves total device memory.
            </summary>
            <param name="bytes">The number of bytes.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetTotalDeviceMemory(System.Int64@,System.Int32)">
            <summary>
            Resolves total device memory.
            </summary>
            <param name="bytes">The number of bytes.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetDeviceAttribute(ILGPU.Runtime.Cuda.DeviceAttributeKind,System.Int32)">
            <summary>
            Resolves the value of the given device attribute.
            </summary>
            <param name="attribute">The device attribute.</param>
            <param name="device">The device.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Resolves the compute capability of the given device.
            </summary>
            <param name="major">The major capability.</param>
            <param name="minor">The minor capability.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)">
            <summary>
            Creates a new context.
            </summary>
            <param name="context">The created context.</param>
            <param name="flags">The flags to use.</param>
            <param name="device">The target device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.DestroyContext(System.IntPtr)">
            <summary>
            Destroys the given context.
            </summary>
            <param name="context">The context to destroy.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.SetCurrentContext(System.IntPtr)">
            <summary>
            Make the given context the current one.
            </summary>
            <param name="context">The context.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.SynchronizeContext">
            <summary>
            Synchronizes the current context.
            </summary>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)">
            <summary>
            Resolves the cache configuration.
            </summary>
            <param name="config">The resolved cache configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)">
            <summary>
            Updates the cache configuration.
            </summary>
            <param name="config">The updated cache configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)">
            <summary>
            Resolves the shared-memory configuration.
            </summary>
            <param name="config">The resolved shared-memory configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)">
            <summary>
            Updates the shared-memory configuration.
            </summary>
            <param name="config">The updated shared-memory configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.CanAccessPeer(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Resolves whether the given device can access the given peer device.
            </summary>
            <param name="canAccess">
            True, if the device can access the peer device.
            </param>
            <param name="device">The device.</param>
            <param name="peerDevice">The peer device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.EnablePeerAccess(System.IntPtr,System.Int32)">
            <summary>
            Enables peer access to the given context.
            </summary>
            <param name="peerContext">The peer context.</param>
            <param name="flags">The flags to use.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.DisablePeerAccess(System.IntPtr)">
            <summary>
            Disables peer access to the given context.
            </summary>
            <param name="peerContext">The peer context.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)">
            <summary>
            Resolves the given peer attribute.
            </summary>
            <param name="value">The resolved value.</param>
            <param name="attribute">The attribute to resolve.</param>
            <param name="sourceDevice">The source device.</param>
            <param name="destinationDevice">The destination device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetMemoryInfo(System.IntPtr@,System.IntPtr@)">
            <summary>
            Resolves memory information.
            </summary>
            <param name="free">The amount of free memory.</param>
            <param name="total">The total amount of memory.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetMemoryInfo(System.Int64@,System.Int64@)">
            <summary>
            Resolves memory information.
            </summary>
            <param name="free">The amount of free memory.</param>
            <param name="total">The total amount of memory.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.AllocateMemory(System.IntPtr@,System.IntPtr)">
            <summary>
            Allocates memory on the current device.
            </summary>
            <param name="devicePtr">The resulting device pointer.</param>
            <param name="bytesize">The size of the allocation in bytes.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.FreeMemory(System.IntPtr)">
            <summary>
            Frees the given device pointer.
            </summary>
            <param name="devicePtr">The device pointer.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.AllocateHostMemory(System.IntPtr@,System.IntPtr)">
            <summary>
            Allocates memory on the host.
            </summary>
            <param name="hostPtr">The resulting host pointer.</param>
            <param name="bytesize">The size of the allocation in bytes.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.FreeHostMemory(System.IntPtr)">
            <summary>
            Frees the given host pointer.
            </summary>
            <param name="hostPtr">The host pointer.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.MemcpyAsync(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Performs a memory-copy operation.
            </summary>
            <param name="destination">The destination.</param>
            <param name="source">The source.</param>
            <param name="length">The number of bytes to copy.</param>
            <returns>The error status.</returns>
            <param name="stream">
            The accelerator stream for asynchronous processing.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Performs a memory-set operation.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="value">The value to set.</param>
            <param name="length">The length in bytes.</param>
            <param name="stream">
            The accelerator stream for asynchronous processing.
            </param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a memory-set operation.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="value">The value to set.</param>
            <param name="length">The length in bytes.</param>
            <param name="stream">
            The accelerator stream for asynchronous processing.
            </param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)">
            <summary>
            Resolves a pointer-attribute value.
            </summary>
            <param name="targetPtr">The target pointer.</param>
            <param name="attribute">The attribute to resolve.</param>
            <param name="devicePtr">The pointer in device memory.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.MemHostRegister(System.IntPtr,System.IntPtr,ILGPU.Runtime.Cuda.MemHostRegisterFlags)">
            <summary>
            Registers an existing host memory range for use by CUDA.
            </summary>
            <param name="hostPtr">The host pointer.</param>
            <param name="bytesize ">The size of the buffer, in bytes.</param>
            <param name="flags">The flags to use.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.MemHostUnregister(System.IntPtr)">
            <summary>
            Unregisters a memory range that was registered with cuMemHostRegister.
            </summary>
            <param name="hostPtr">The host pointer.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.MemHostGetDevicePointer(System.IntPtr@,System.IntPtr,System.Int32)">
            <summary>
            Unregisters a memory range that was registered with cuMemHostRegister.
            </summary>
            <param name="devicePtr">The size of the buffer, in bytes.</param>
            <param name="hostPtr">The host pointer.</param>
            <param name="flags">The flags to use.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)">
            <summary>
            Creates a new accelerator stream.
            </summary>
            <param name="stream">The created stream.</param>
            <param name="flags">The flags to use.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)">
            <summary>
            Creates a new accelerator stream.
            </summary>
            <param name="stream">The created stream.</param>
            <param name="flags">The flags to use.</param>
            <param name="priority">The priority to use.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.DestroyStream(System.IntPtr)">
            <summary>
            Destroys the given stream.
            </summary>
            <param name="stream">The stream to destroy.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.SynchronizeStream(System.IntPtr)">
            <summary>
            Synchronizes with the given stream.
            </summary>
            <param name="stream">The stream to synchronize with.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.LoadModule(System.IntPtr@,System.String)">
            <summary>
            Loads the given kernel module into driver memory.
            </summary>
            <param name="kernelModule">The loaded module.</param>
            <param name="moduleData">The module data to load.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.LoadModule(System.IntPtr@,System.String,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Loads the given kernel module into driver memory.
            </summary>
            <param name="kernelModule">The loaded module.</param>
            <param name="moduleData">The module data to load.</param>
            <param name="numOptions">The number of JIT options.</param>
            <param name="jitOptions">The JIT options.</param>
            <param name="jitOptionValues">The JIT values.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.LoadModule(System.IntPtr@,System.String,System.String@)">
            <summary>
            Loads the given kernel module into driver memory.
            </summary>
            <param name="kernelModule">The loaded module.</param>
            <param name="moduleData">The module data to load.</param>
            <param name="errorLog">The error log.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.DestroyModule(System.IntPtr)">
            <summary>
            Unloads the given module.
            </summary>
            <param name="kernelModule">The module to unload.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)">
            <summary>
            Resolves the requested function handle in the scope of the given module.
            </summary>
            <param name="kernelFunction">The resolved function.</param>
            <param name="kernelModule">The module.</param>
            <param name="functionName">The name of the function.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.LaunchKernelWithStreamBinding(ILGPU.Runtime.Cuda.CudaStream,ILGPU.Runtime.Cuda.CudaKernel,ILGPU.RuntimeKernelConfig,System.IntPtr,System.IntPtr)">
            <summary>
            Launches the given kernel function.
            </summary>
            <param name="stream">The current stream.</param>
            <param name="kernel">The current kernel.</param>
            <param name="config">The current kernel configuration.</param>
            <param name="args">The arguments.</param>
            <param name="kernelArgs">The kernel arguments.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.LaunchKernelWithStruct``1(ILGPU.Runtime.Cuda.CudaStream,ILGPU.Runtime.Cuda.CudaKernel,ILGPU.RuntimeKernelConfig,``0@,System.Int32)">
            <summary>
            Launches the given kernel function.
            </summary>
            <param name="stream">The current stream.</param>
            <param name="kernel">The current kernel.</param>
            <param name="config">The current kernel configuration.</param>
            <param name="args">The argument structure.</param>
            <param name="argsSizeInBytes">The argument size in bytes.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Launches the given kernel function.
            </summary>
            <param name="kernelFunction">The function to launch.</param>
            <param name="gridDimX">The grid dimension in X dimension.</param>
            <param name="gridDimY">The grid dimension in Y dimension.</param>
            <param name="gridDimZ">The grid dimension in Z dimension.</param>
            <param name="blockDimX">The block dimension in X dimension.</param>
            <param name="blockDimY">The block dimension in Y dimension.</param>
            <param name="blockDimZ">The block dimension in Z dimension.</param>
            <param name="sharedMemSizeInBytes">The shared-memory size in bytes.</param>
            <param name="stream">The associated accelerator stream.</param>
            <param name="args">The arguments.</param>
            <param name="kernelArgs">The kernel arguments.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Computes the maximum number of blocks for maximum occupancy. 
            </summary>
            <param name="numBlocks">The number of blocks.</param>
            <param name="func">The function.</param>
            <param name="blockSize">The desired block size.</param>
            <param name="dynamicSMemSize">
            The size of the required shared memory.
            </param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)">
            <summary>
            Computes the maximum potential block size to for maximum occupancy.
            </summary>
            <param name="minGridSize">
            The minimum grid size for maximum occupancy.
            </param>
            <param name="blockSize">The block size for maximum occupancy.</param>
            <param name="func">The function.</param>
            <param name="blockSizeToDynamicSMemSize">
            Computes the amount of required shared-memory for the given block size.
            </param>
            <param name="dynamicSMemSize">
            The size of the required shared memory (independent of the block size).
            </param>
            <param name="blockSizeLimit">The block-size limit.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.ComputeManagedDynamicMemorySizeForBlockSize,System.Int32,System.Int32)">
            <summary>
            Computes the maximum potential block size to for maximum occupancy.
            </summary>
            <param name="minGridSize">
            The minimum grid size for maximum occupancy.
            </param>
            <param name="blockSize">The block size for maximum occupancy.</param>
            <param name="func">The function.</param>
            <param name="blockSizeToDynamicSMemSize">
            Computes the amount of required shared-memory for the given block size.
            </param>
            <param name="dynamicSMemSize">
            The size of the required shared memory (independent of the block size).
            </param>
            <param name="blockSizeLimit">The block-size limit.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.CreateEvent(System.IntPtr@,ILGPU.Runtime.Cuda.CudaEventFlags)">
            <summary>
            Creates a new accelerator event.
            </summary>
            <param name="event">The created event.</param>
            <param name="flags">The event creation flags.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.DestroyEvent(System.IntPtr)">
            <summary>
            Destroys the given event.
            </summary>
            <param name="event">The accelerator event.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.QueryEvent(System.IntPtr)">
            <summary>
            Queries the status of the given event.
            </summary>
            <param name="event">The accelerator event.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.ElapsedTime(System.Single@,System.IntPtr,System.IntPtr)">
            <summary>
            Computes the elapsed time between two events.
            </summary>
            <param name="milliseconds">The elapsed time in milliseconds.</param>
            <param name="start">The starting event.</param>
            <param name="end">The ending event.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.RecordEvent(System.IntPtr,System.IntPtr)">
            <summary>
            Records an event on a stream.
            </summary>
            <param name="event">The event.</param>
            <param name="stream">The accelerator stream.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAPI.SynchronizeEvent(System.IntPtr)">
            <summary>
            Synchronizes the current event.
            </summary>
            <param name="event">The event.</param>
            <returns>The error status.</returns>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAPI.LibNameWindows">
            <summary>
            Represents the driver library name on Windows.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAPI.LibNameLinux">
            <summary>
            Represents the driver library name on Linux.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAPI.LibNameMacOS">
            <summary>
            Represents the driver library name on MacOS.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAPI.CurrentAPI">
            <summary>
            Returns the driver API for the current platform.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaArchitecture">
            <summary>
            Represents a Cuda architecture.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaArchitecture.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates the architecture from major/minor values.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaArchitecture.Equals(ILGPU.Runtime.Cuda.CudaArchitecture)">
            <summary>
            Returns true if the given architecture is equal to this architecture.
            </summary>
            <param name="other">The other architecture.</param>
            <returns>
            True, if the given architecture is equal to this architecture.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaArchitecture.CompareTo(ILGPU.Runtime.Cuda.CudaArchitecture)">
            <summary>
            Compares this architecture to the given one.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaArchitecture.Major">
            <summary>
            The major version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaArchitecture.Minor">
            <summary>
            The minor version.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaArchitecture.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this architecture.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True,
            if the given object is equal to this architecture.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaArchitecture.GetHashCode">
            <summary>
            Returns the hash code of this architecture.
            </summary>
            <returns>The hash code of this architecture.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaArchitecture.ToString">
            <summary>
            Returns the string representation of the architecture.
            </summary>
            <returns>The string representation of the architecture.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaArchitecture.op_Equality(ILGPU.Runtime.Cuda.CudaArchitecture,ILGPU.Runtime.Cuda.CudaArchitecture)">
            <summary>
            Returns true if the first and the second architecture are the same.
            </summary>
            <param name="first">The first architecture.</param>
            <param name="second">The second architecture.</param>
            <returns>
            True, if the first and the second architecture are the same.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaArchitecture.op_Inequality(ILGPU.Runtime.Cuda.CudaArchitecture,ILGPU.Runtime.Cuda.CudaArchitecture)">
            <summary>
            Returns true if the first and the second architecture are not the same.
            </summary>
            <param name="first">The first architecture.</param>
            <param name="second">The second architecture.</param>
            <returns>
            True, if the first and the second architecture are not the same.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaArchitecture.op_LessThan(ILGPU.Runtime.Cuda.CudaArchitecture,ILGPU.Runtime.Cuda.CudaArchitecture)">
            <summary>
            Returns true if the first architecture is smaller than the second one.
            </summary>
            <param name="first">The first architecture.</param>
            <param name="second">The second architecture.</param>
            <returns>
            True, if the first architecture is smaller than the second one.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaArchitecture.op_LessThanOrEqual(ILGPU.Runtime.Cuda.CudaArchitecture,ILGPU.Runtime.Cuda.CudaArchitecture)">
            <summary>
            Returns true if the first architecture is less than or equal to the
            second architecture.
            </summary>
            <param name="first">The first architecture.</param>
            <param name="second">The second architecture.</param>
            <returns>
            True, if the first architecture is less or equal to the second architecture.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaArchitecture.op_GreaterThan(ILGPU.Runtime.Cuda.CudaArchitecture,ILGPU.Runtime.Cuda.CudaArchitecture)">
            <summary>
            Returns true if the first architecture is greater than the second one.
            </summary>
            <param name="first">The first architecture.</param>
            <param name="second">The second architecture.</param>
            <returns>
            True, if the first architecture is greater than the second one.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaArchitecture.op_GreaterThanOrEqual(ILGPU.Runtime.Cuda.CudaArchitecture,ILGPU.Runtime.Cuda.CudaArchitecture)">
            <summary>
            Returns true if the first architecture is greater than or equal to the
            second architecture.
            </summary>
            <param name="first">The first architecture.</param>
            <param name="second">The second architecture.</param>
            <returns>
            True, if the first architecture is greater or equal to the second
            architecture.
            </returns>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_10">
            <summary>
            The 1.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_11">
            <summary>
            The 1.1 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_12">
            <summary>
            The 1.2 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_13">
            <summary>
            The 1.3 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_20">
            <summary>
            The 2.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_30">
            <summary>
            The 3.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_32">
            <summary>
            The 3.2 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_35">
            <summary>
            The 3.5 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_37">
            <summary>
            The 3.7 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_50">
            <summary>
            The 5.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_52">
            <summary>
            The 5.2 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_53">
            <summary>
            The 5.3 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_60">
            <summary>
            The 6.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_61">
            <summary>
            The 6.1 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_62">
            <summary>
            The 6.2 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_70">
            <summary>
            The 7.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_72">
            <summary>
            The 7.2 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_75">
            <summary>
            The 7.5 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_80">
            <summary>
            The 8.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_86">
            <summary>
            The 8.6 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_87">
            <summary>
            The 8.7 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_89">
            <summary>
            The 8.9 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaArchitecture.SM_90">
            <summary>
            The 9.0 architecture.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaAsm">
            <summary>
            Provides library calls for inline PTX assembly instructions.
            </summary>
            <summary>
            Provides library calls for inline PTX assembly instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAsm.IsSupported">
            <summary>
            Returns true if running on a Cuda accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit(System.String)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``1(System.String,``0)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``1(System.String,``0@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``2(System.String,``0,``1)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``2(System.String,``0@,``1)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``3(System.String,``0,``1,``2)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``3(System.String,``0@,``1,``2)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``4(System.String,``0,``1,``2,``3)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``4(System.String,``0@,``1,``2,``3)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``5(System.String,``0,``1,``2,``3,``4)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``5(System.String,``0@,``1,``2,``3,``4)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``6(System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``6(System.String,``0@,``1,``2,``3,``4,``5)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``7(System.String,``0@,``1,``2,``3,``4,``5,``6)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``8(System.String,``0@,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``9(System.String,``0@,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.Emit``10(System.String,``0@,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``1(System.String,``0@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``2(System.String,``0@,``1@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``3(System.String,``0@,``1@,``2@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``4(System.String,``0@,``1@,``2@,``3@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``5(System.String,``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``6(System.String,``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``7(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``8(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``9(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``10(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``11(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``12(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``13(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``14(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``15(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``16(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``17(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``18(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``19(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``20(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``21(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``22(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``23(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``24(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``25(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``26(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``27(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``28(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``29(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``30(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@,``29@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
            <param name="arg29">Argument %29 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``31(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@,``29@,``30@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
            <param name="arg29">Argument %29 of the PTX instruction.</param>
            <param name="arg30">Argument %30 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``32(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@,``29@,``30@,``31@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
            <param name="arg29">Argument %29 of the PTX instruction.</param>
            <param name="arg30">Argument %30 of the PTX instruction.</param>
            <param name="arg31">Argument %31 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``33(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@,``29@,``30@,``31@,``32@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
            <param name="arg29">Argument %29 of the PTX instruction.</param>
            <param name="arg30">Argument %30 of the PTX instruction.</param>
            <param name="arg31">Argument %31 of the PTX instruction.</param>
            <param name="arg32">Argument %32 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``34(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@,``29@,``30@,``31@,``32@,``33@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
            <param name="arg29">Argument %29 of the PTX instruction.</param>
            <param name="arg30">Argument %30 of the PTX instruction.</param>
            <param name="arg31">Argument %31 of the PTX instruction.</param>
            <param name="arg32">Argument %32 of the PTX instruction.</param>
            <param name="arg33">Argument %33 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``35(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@,``29@,``30@,``31@,``32@,``33@,``34@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
            <param name="arg29">Argument %29 of the PTX instruction.</param>
            <param name="arg30">Argument %30 of the PTX instruction.</param>
            <param name="arg31">Argument %31 of the PTX instruction.</param>
            <param name="arg32">Argument %32 of the PTX instruction.</param>
            <param name="arg33">Argument %33 of the PTX instruction.</param>
            <param name="arg34">Argument %34 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``36(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@,``29@,``30@,``31@,``32@,``33@,``34@,``35@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
            <param name="arg29">Argument %29 of the PTX instruction.</param>
            <param name="arg30">Argument %30 of the PTX instruction.</param>
            <param name="arg31">Argument %31 of the PTX instruction.</param>
            <param name="arg32">Argument %32 of the PTX instruction.</param>
            <param name="arg33">Argument %33 of the PTX instruction.</param>
            <param name="arg34">Argument %34 of the PTX instruction.</param>
            <param name="arg35">Argument %35 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``37(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@,``29@,``30@,``31@,``32@,``33@,``34@,``35@,``36@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
            <param name="arg29">Argument %29 of the PTX instruction.</param>
            <param name="arg30">Argument %30 of the PTX instruction.</param>
            <param name="arg31">Argument %31 of the PTX instruction.</param>
            <param name="arg32">Argument %32 of the PTX instruction.</param>
            <param name="arg33">Argument %33 of the PTX instruction.</param>
            <param name="arg34">Argument %34 of the PTX instruction.</param>
            <param name="arg35">Argument %35 of the PTX instruction.</param>
            <param name="arg36">Argument %36 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``38(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@,``29@,``30@,``31@,``32@,``33@,``34@,``35@,``36@,``37@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
            <param name="arg29">Argument %29 of the PTX instruction.</param>
            <param name="arg30">Argument %30 of the PTX instruction.</param>
            <param name="arg31">Argument %31 of the PTX instruction.</param>
            <param name="arg32">Argument %32 of the PTX instruction.</param>
            <param name="arg33">Argument %33 of the PTX instruction.</param>
            <param name="arg34">Argument %34 of the PTX instruction.</param>
            <param name="arg35">Argument %35 of the PTX instruction.</param>
            <param name="arg36">Argument %36 of the PTX instruction.</param>
            <param name="arg37">Argument %37 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``39(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@,``29@,``30@,``31@,``32@,``33@,``34@,``35@,``36@,``37@,``38@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
            <param name="arg29">Argument %29 of the PTX instruction.</param>
            <param name="arg30">Argument %30 of the PTX instruction.</param>
            <param name="arg31">Argument %31 of the PTX instruction.</param>
            <param name="arg32">Argument %32 of the PTX instruction.</param>
            <param name="arg33">Argument %33 of the PTX instruction.</param>
            <param name="arg34">Argument %34 of the PTX instruction.</param>
            <param name="arg35">Argument %35 of the PTX instruction.</param>
            <param name="arg36">Argument %36 of the PTX instruction.</param>
            <param name="arg37">Argument %37 of the PTX instruction.</param>
            <param name="arg38">Argument %38 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``40(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@,``29@,``30@,``31@,``32@,``33@,``34@,``35@,``36@,``37@,``38@,``39@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
            <param name="arg29">Argument %29 of the PTX instruction.</param>
            <param name="arg30">Argument %30 of the PTX instruction.</param>
            <param name="arg31">Argument %31 of the PTX instruction.</param>
            <param name="arg32">Argument %32 of the PTX instruction.</param>
            <param name="arg33">Argument %33 of the PTX instruction.</param>
            <param name="arg34">Argument %34 of the PTX instruction.</param>
            <param name="arg35">Argument %35 of the PTX instruction.</param>
            <param name="arg36">Argument %36 of the PTX instruction.</param>
            <param name="arg37">Argument %37 of the PTX instruction.</param>
            <param name="arg38">Argument %38 of the PTX instruction.</param>
            <param name="arg39">Argument %39 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``41(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@,``29@,``30@,``31@,``32@,``33@,``34@,``35@,``36@,``37@,``38@,``39@,``40@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
            <param name="arg29">Argument %29 of the PTX instruction.</param>
            <param name="arg30">Argument %30 of the PTX instruction.</param>
            <param name="arg31">Argument %31 of the PTX instruction.</param>
            <param name="arg32">Argument %32 of the PTX instruction.</param>
            <param name="arg33">Argument %33 of the PTX instruction.</param>
            <param name="arg34">Argument %34 of the PTX instruction.</param>
            <param name="arg35">Argument %35 of the PTX instruction.</param>
            <param name="arg36">Argument %36 of the PTX instruction.</param>
            <param name="arg37">Argument %37 of the PTX instruction.</param>
            <param name="arg38">Argument %38 of the PTX instruction.</param>
            <param name="arg39">Argument %39 of the PTX instruction.</param>
            <param name="arg40">Argument %40 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``42(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@,``29@,``30@,``31@,``32@,``33@,``34@,``35@,``36@,``37@,``38@,``39@,``40@,``41@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
            <param name="arg29">Argument %29 of the PTX instruction.</param>
            <param name="arg30">Argument %30 of the PTX instruction.</param>
            <param name="arg31">Argument %31 of the PTX instruction.</param>
            <param name="arg32">Argument %32 of the PTX instruction.</param>
            <param name="arg33">Argument %33 of the PTX instruction.</param>
            <param name="arg34">Argument %34 of the PTX instruction.</param>
            <param name="arg35">Argument %35 of the PTX instruction.</param>
            <param name="arg36">Argument %36 of the PTX instruction.</param>
            <param name="arg37">Argument %37 of the PTX instruction.</param>
            <param name="arg38">Argument %38 of the PTX instruction.</param>
            <param name="arg39">Argument %39 of the PTX instruction.</param>
            <param name="arg40">Argument %40 of the PTX instruction.</param>
            <param name="arg41">Argument %41 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``43(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@,``29@,``30@,``31@,``32@,``33@,``34@,``35@,``36@,``37@,``38@,``39@,``40@,``41@,``42@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
            <param name="arg29">Argument %29 of the PTX instruction.</param>
            <param name="arg30">Argument %30 of the PTX instruction.</param>
            <param name="arg31">Argument %31 of the PTX instruction.</param>
            <param name="arg32">Argument %32 of the PTX instruction.</param>
            <param name="arg33">Argument %33 of the PTX instruction.</param>
            <param name="arg34">Argument %34 of the PTX instruction.</param>
            <param name="arg35">Argument %35 of the PTX instruction.</param>
            <param name="arg36">Argument %36 of the PTX instruction.</param>
            <param name="arg37">Argument %37 of the PTX instruction.</param>
            <param name="arg38">Argument %38 of the PTX instruction.</param>
            <param name="arg39">Argument %39 of the PTX instruction.</param>
            <param name="arg40">Argument %40 of the PTX instruction.</param>
            <param name="arg41">Argument %41 of the PTX instruction.</param>
            <param name="arg42">Argument %42 of the PTX instruction.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``44(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@,``21@,``22@,``23@,``24@,``25@,``26@,``27@,``28@,``29@,``30@,``31@,``32@,``33@,``34@,``35@,``36@,``37@,``38@,``39@,``40@,``41@,``42@,``43@)">
            <summary>
            Writes the inline PTX assembly instructions into the kernel.
            </summary>
            <param name="asm">The PTX assembly instruction string.</param>
            <param name="arg0">Argument %0 of the PTX instruction.</param>
            <param name="arg1">Argument %1 of the PTX instruction.</param>
            <param name="arg2">Argument %2 of the PTX instruction.</param>
            <param name="arg3">Argument %3 of the PTX instruction.</param>
            <param name="arg4">Argument %4 of the PTX instruction.</param>
            <param name="arg5">Argument %5 of the PTX instruction.</param>
            <param name="arg6">Argument %6 of the PTX instruction.</param>
            <param name="arg7">Argument %7 of the PTX instruction.</param>
            <param name="arg8">Argument %8 of the PTX instruction.</param>
            <param name="arg9">Argument %9 of the PTX instruction.</param>
            <param name="arg10">Argument %10 of the PTX instruction.</param>
            <param name="arg11">Argument %11 of the PTX instruction.</param>
            <param name="arg12">Argument %12 of the PTX instruction.</param>
            <param name="arg13">Argument %13 of the PTX instruction.</param>
            <param name="arg14">Argument %14 of the PTX instruction.</param>
            <param name="arg15">Argument %15 of the PTX instruction.</param>
            <param name="arg16">Argument %16 of the PTX instruction.</param>
            <param name="arg17">Argument %17 of the PTX instruction.</param>
            <param name="arg18">Argument %18 of the PTX instruction.</param>
            <param name="arg19">Argument %19 of the PTX instruction.</param>
            <param name="arg20">Argument %20 of the PTX instruction.</param>
            <param name="arg21">Argument %21 of the PTX instruction.</param>
            <param name="arg22">Argument %22 of the PTX instruction.</param>
            <param name="arg23">Argument %23 of the PTX instruction.</param>
            <param name="arg24">Argument %24 of the PTX instruction.</param>
            <param name="arg25">Argument %25 of the PTX instruction.</param>
            <param name="arg26">Argument %26 of the PTX instruction.</param>
            <param name="arg27">Argument %27 of the PTX instruction.</param>
            <param name="arg28">Argument %28 of the PTX instruction.</param>
            <param name="arg29">Argument %29 of the PTX instruction.</param>
            <param name="arg30">Argument %30 of the PTX instruction.</param>
            <param name="arg31">Argument %31 of the PTX instruction.</param>
            <param name="arg32">Argument %32 of the PTX instruction.</param>
            <param name="arg33">Argument %33 of the PTX instruction.</param>
            <param name="arg34">Argument %34 of the PTX instruction.</param>
            <param name="arg35">Argument %35 of the PTX instruction.</param>
            <param name="arg36">Argument %36 of the PTX instruction.</param>
            <param name="arg37">Argument %37 of the PTX instruction.</param>
            <param name="arg38">Argument %38 of the PTX instruction.</param>
            <param name="arg39">Argument %39 of the PTX instruction.</param>
            <param name="arg40">Argument %40 of the PTX instruction.</param>
            <param name="arg41">Argument %41 of the PTX instruction.</param>
            <param name="arg42">Argument %42 of the PTX instruction.</param>
            <param name="arg43">Argument %43 of the PTX instruction.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.ICudaAsmEmitParameter">
            <summary>
            Base interface used by <see cref="M:ILGPU.Runtime.Cuda.CudaAsm.EmitRef``1(System.String,``0@)"/> to
            ensure only valid generic arguments are supplied.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.Input`1">
            <summary>
            Input parameter for the PTX instructions.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.Input`1.Value">
            <summary>
            Holds the input value.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.Input`1.op_Implicit(`0)~ILGPU.Runtime.Cuda.Input{`0}">
            <summary>
            Wraps the value as an input parameter.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.Output`1">
            <summary>
            Output parameter for the PTX instructions.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.Output`1.Value">
            <summary>
            Filled in with the output value.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.Ref`1">
            <summary>
            Input/Output parameter for the PTX instructions.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.Ref`1.Value">
            <summary>
            Holds the input value. Filled in with the output value.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.Ref`1.op_Implicit(`0)~ILGPU.Runtime.Cuda.Ref{`0}">
            <summary>
            Wraps the value as a reference parameter.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaCacheConfiguration">
            <summary>
            Represents a cache configuration of a device.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.Default">
            <summary>
            The default cache configuration.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.PreferShared">
            <summary>
            Prefer shared cache.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.PreferL1">
            <summary>
            Prefer L1 cache.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.PreferEqual">
            <summary>
            Prefer shared or L1 cache.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaContextExtensions">
            <summary>
            Cuda specific context extensions.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaContextExtensions.Cuda(ILGPU.Context.Builder)">
            <summary>
            Enables all compatible Cuda devices.
            </summary>
            <param name="builder">The builder instance.</param>
            <returns>The updated builder instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaContextExtensions.Cuda(ILGPU.Context.Builder,System.Predicate{ILGPU.Runtime.Cuda.CudaDevice})">
            <summary>
            Enables all Cuda devices.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="predicate">
            The predicate to include a given device.
            </param>
            <returns>The updated builder instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaContextExtensions.Cuda(ILGPU.Context.Builder,System.Action{ILGPU.Runtime.Cuda.CudaDeviceOverride})">
            <summary>
            Enables and configures all Cuda devices.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="configure">
            The action to configure a given device.
            </param>
            <returns>The updated builder instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaContextExtensions.CudaInternal(ILGPU.Context.Builder,System.Action{ILGPU.Runtime.Cuda.CudaDeviceOverride},System.Predicate{ILGPU.Runtime.Cuda.CudaDevice})">
            <summary>
            Enables and configures all Cuda devices.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="configure">
            The action to configure a given device.
            </param>
            <param name="predicate">
            The predicate to include a given device.
            </param>
            <returns>The updated builder instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaContextExtensions.GetCudaDevice(ILGPU.Context,System.Int32)">
            <summary>
            Gets the i-th registered Cuda device.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="cudaDeviceIndex">
            The relative device index for the Cuda device. 0 here refers to the first
            Cuda device, 1 to the second, etc.
            </param>
            <returns>The registered Cuda device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaContextExtensions.GetCudaDevices(ILGPU.Context)">
            <summary>
            Gets all registered Cuda devices.
            </summary>
            <param name="context">The ILGPU context.</param>
            <returns>All registered Cuda devices.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaContextExtensions.CreateCudaAccelerator(ILGPU.Context,System.Int32)">
            <summary>
            Creates a new Cuda accelerator using
            <see cref="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleAuto"/>.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="cudaDeviceIndex">
            The relative device index for the Cuda device. 0 here refers to the first
            Cuda device, 1 to the second, etc.
            </param>
            <returns>The created Cuda accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaContextExtensions.CreateCudaAccelerator(ILGPU.Context,System.Int32,ILGPU.Runtime.Cuda.CudaAcceleratorFlags)">
            <summary>
            Creates a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="cudaDeviceIndex">
            The relative device index for the Cuda device. 0 here refers to the first
            Cuda device, 1 to the second, etc.
            </param>
            <param name="acceleratorFlags">The accelerator flags.</param>
            <returns>The created Cuda accelerator.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaDevice">
            <summary>
            Represents a single Cuda device.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.GetDevices(System.Predicate{ILGPU.Runtime.Cuda.CudaDevice})">
            <summary>
            Detects Cuda devices.
            </summary>
            <param name="predicate">
            The predicate to include a given device.
            </param>
            <returns>All detected Cuda devices.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.GetDevices(System.Action{ILGPU.Runtime.Cuda.CudaDeviceOverride},System.Predicate{ILGPU.Runtime.Cuda.CudaDevice},ILGPU.Runtime.DeviceRegistry)">
            <summary>
            Detects Cuda devices.
            </summary>
            <param name="configure">
            The action to configure a given device.
            </param>
            <param name="predicate">
            The predicate to include a given device.
            </param>
            <param name="registry">The registry to add all devices to.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.GetDevicesInternal(System.Action{ILGPU.Runtime.Cuda.CudaDeviceOverride},System.Predicate{ILGPU.Runtime.Cuda.CudaDevice},ILGPU.Runtime.DeviceRegistry)">
            <summary>
            Detects Cuda devices.
            </summary>
            <param name="configure">
            The action to configure a given device.
            </param>
            <param name="predicate">
            The predicate to include a given device.
            </param>
            <param name="registry">The registry to add all devices to.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.TryGetArchitecture(System.Int32,System.Int32,ILGPU.Runtime.Cuda.CudaArchitecture@)">
            <summary>
            Tries to get the Cuda architecture for the given major and minor versions.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <param name="architecture">The determined architecture (if any).</param>
            <returns>True, if the architecture is supported.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.GetArchitecture(System.Int32,System.Int32)">
            <summary>
            Resolves the Cuda architecture for the given major and minor versions.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <returns>The resolved Cuda version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.#ctor(System.Int32)">
            <summary>
            Constructs a new Cuda accelerator reference.
            </summary>
            <param name="deviceId">The Cuda device id.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.InitDeviceInfo">
            <summary>
            Init general device information.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.InitArchitectureInfo">
            <summary>
            Init architecture information.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.InitGridInfo">
            <summary>
            Init grid information.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.InitMemoryInfo">
            <summary>
            Init memory information.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.InitMiscInfo">
            <summary>
            Init misc information.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.InitPCIInfo">
            <summary>
            Init PCI information.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.DeviceId">
            <summary>
            Returns the Cuda device id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.DriverVersion">
            <summary>
            Returns the current driver version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.Architecture">
            <summary>
            Returns the PTX architecture (if supported).
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.InstructionSet">
            <summary>
            Returns the PTX instruction set (if supported).
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.ClockRate">
            <summary>
            Returns the clock rate.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.MemoryClockRate">
            <summary>
            Returns the memory clock rate.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.MemoryBusWidth">
            <summary>
            Returns the memory clock rate.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.L2CacheSize">
            <summary>
            Returns L2 cache size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.MaxSharedMemoryPerMultiprocessor">
            <summary>
            Returns the maximum shared memory size per multiprocessor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.TotalNumRegistersPerMultiprocessor">
            <summary>
            Returns the total number of registers per multiprocessor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.TotalNumRegistersPerGroup">
            <summary>
            Returns the total number of registers per group.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.MaxMemoryPitch">
            <summary>
            Returns the maximum memory pitch in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.NumConcurrentCopyEngines">
            <summary>
            Returns the number of concurrent copy engines (if any, result > 0).
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.HasECCSupport">
            <summary>
            Returns true if this device has ECC support.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.SupportsManagedMemory">
            <summary>
            Returns true if this device supports managed memory allocations.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.SupportsComputePreemption">
            <summary>
            Returns true if this device supports compute preemption.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.SupportsMappingHostMemory">
            <summary>
            Returns true if this device supports mapping host memory.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.SupportsUsingHostPointerForRegisteredMemory">
            <summary>
            Returns true if this device supports using the host pointer for registered
            memory.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.DriverMode">
            <summary>
            Returns the current device driver mode.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.PCIDomainId">
            <summary>
            Returns the PCI domain id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.PCIBusId">
            <summary>
            Returns the PCI bus id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.PCIDeviceId">
            <summary>
            Returns the PCI device id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDevice.NVMLPCIBusId">
            <summary>
            Returns an NVML library compatible PCI bus id.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.CreateAccelerator(ILGPU.Context)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.CreateCudaAccelerator(ILGPU.Context)">
            <summary>
            Creates a new Cuda accelerator using
            <see cref="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleAuto"/>.
            </summary>
            <param name="context">The ILGPU context.</param>
            <returns>The created Cuda accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.CreateCudaAccelerator(ILGPU.Context,ILGPU.Runtime.Cuda.CudaAcceleratorFlags)">
            <summary>
            Creates a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="acceleratorFlags">The accelerator flags.</param>
            <returns>The created Cuda accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.PrintHeader(System.IO.TextWriter)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.PrintGeneralInfo(System.IO.TextWriter)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDevice.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaDeviceOverride">
            <summary>
            Represents overridable settings of a Cuda device.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDeviceOverride.Device">
            <summary>
            The Cuda device to configure.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDeviceOverride.InstructionSet">
            <summary>
            Forces the Cuda device to use the specified Instruction Set.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDeviceOverride.#ctor(ILGPU.Runtime.Cuda.CudaDevice)">
            <summary>
            Constructs a new instance with the overridable settings.
            </summary>
            <param name="device">The Cuda device.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDeviceOverride.ApplyOverrides">
            <summary>
            Applies all the overridden settings to the Cuda device.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaDriverVersion">
            <summary>
            Represents a CUDA driver version
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.FromMajorMinor(System.Int32,System.Int32)">
            <summary>
            Returns the CUDA driver version from major/minor values
            </summary>
            <param name="major">The major version</param>
            <param name="minor">The minor version</param>
            <returns>The CUDA driver version</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.FromValue(System.Int32)">
            <summary>
            Returns the CUDA driver version from a value
            </summary>
            <param name="value">The CUDA driver value</param>
            <returns>The CUDA driver version</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.Equals(ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true if the given version is equal to this version.
            </summary>
            <param name="other">The other version.</param>
            <returns>True, if the given version is equal to this version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.CompareTo(ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Compares this version to the given one.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDriverVersion.Major">
            <summary>
            Major driver version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDriverVersion.Minor">
            <summary>
            Minor driver version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaDriverVersion.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this version.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to this version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.GetHashCode">
            <summary>
            Returns the hash code of this version.
            </summary>
            <returns>The hash code of this version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.ToString">
            <summary>
            Returns the string representation of the driver version.
            </summary>
            <returns>The string representation of the driver version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_Implicit(ILGPU.Runtime.Cuda.CudaDriverVersion)~System.Int32">
            <summary>
            Converts a version into an int.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_Equality(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true if the first and the second version are the same.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first and the second version are the same.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_Inequality(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true if the first and the second version are not the same.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>
            True, if the first and the second version are not the same.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_LessThan(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true if the first version is smaller than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>
            True, if the first version is smaller than the second one.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_LessThanOrEqual(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true if the first version is less than or equal to the second
            version.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>
            True, if the first version is less or equal to the second version.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_GreaterThan(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true if the first version is greater than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>
            True, if the first version is greater than the second one.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersion.op_GreaterThanOrEqual(ILGPU.Runtime.Cuda.CudaDriverVersion,ILGPU.Runtime.Cuda.CudaDriverVersion)">
            <summary>
            Returns true if the first version is greater than or equal to the second
            version.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>
            True, if the first version is greater or equal to the second version.
            </returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaDriverVersionUtils">
            <summary>
            Utilities for <see cref="T:ILGPU.Runtime.Cuda.CudaDriverVersion"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersionUtils.GetMinimumDriverVersion(ILGPU.Runtime.Cuda.CudaArchitecture)">
            <summary>
            Resolves the minimum CUDA driver version for the PTX architecture
            </summary>
            <param name="architecture">The PTX architecture</param>
            <returns>The minimum driver version</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaDriverVersionUtils.GetMinimumDriverVersion(ILGPU.Runtime.Cuda.CudaInstructionSet)">
            <summary>
            Resolves the minimum CUDA driver version for the PTX instruction set
            </summary>
            <param name="instructionSet">The PTX instruction set</param>
            <returns>The minimum driver version</returns>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaDriverVersionUtils.ArchitectureLookup">
            <summary>
            Maps PTX architecture to their corresponding minimum CUDA driver version.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaDriverVersionUtils.InstructionSetLookup">
            <summary>
            Maps PTX ISA to their corresponding minimum CUDA driver version.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaException">
            <summary>
            Represents a Cuda exception that can be thrown by the Cuda runtime.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.#ctor">
            <summary>
            Constructs a new Cuda exception.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.#ctor(ILGPU.Runtime.Cuda.CudaError)">
            <summary>
            Constructs a new Cuda exception.
            </summary>
            <param name="error">The Cuda runtime error.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.#ctor(System.String)">
            <summary>
            Constructs a new Cuda exception.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new Cuda exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaException.Error">
            <summary>
            Returns the error.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaException.AcceleratorType">
            <summary>
            Returns <see cref="F:ILGPU.Runtime.AcceleratorType.Cuda"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.VerifyDisposed(System.Boolean,ILGPU.Runtime.Cuda.CudaError)">
            <summary>
            Checks the given status and throws an exception in case of an error if
            <paramref name="disposing"/> is set to true. If it is set to false, the
            exception will be suppressed in all cases.
            </summary>
            <param name="disposing">
            True, if this function has been called by the dispose method, false otherwise.
            </param>
            <param name="cudaStatus">The Cuda status to check.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.ThrowIfFailed(ILGPU.Runtime.Cuda.CudaError)">
            <summary>
            Checks the given status and throws an exception in case of an error.
            </summary>
            <param name="cudaStatus">The Cuda status to check.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaInstructionSet">
            <summary>
            Represents a Cuda (PTX) ISA (Instruction Set Architecture).
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaInstructionSet.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates the instruction set from major/minor values.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaInstructionSet.Equals(ILGPU.Runtime.Cuda.CudaInstructionSet)">
            <summary>
            Returns true if the given instruction set is equal to this instruction set.
            </summary>
            <param name="other">The other instruction set.</param>
            <returns>
            True, if the given instruction set is equal to this instruction set.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaInstructionSet.CompareTo(ILGPU.Runtime.Cuda.CudaInstructionSet)">
            <summary>
            Compares this instruction set to the given one.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaInstructionSet.Major">
            <summary>
            The major version
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaInstructionSet.Minor">
            <summary>
            The minor version
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaInstructionSet.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this instruction set.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True,
            if the given object is equal to this instruction set.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaInstructionSet.GetHashCode">
            <summary>
            Returns the hash code of this instruction set.
            </summary>
            <returns>The hash code of this instruction set.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaInstructionSet.ToString">
            <summary>
            Returns the string representation of the instruction set.
            </summary>
            <returns>The string representation of the instruction set.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaInstructionSet.op_Equality(ILGPU.Runtime.Cuda.CudaInstructionSet,ILGPU.Runtime.Cuda.CudaInstructionSet)">
            <summary>
            Returns true if the first and the second instruction set are the same.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>
            True, if the first and the second instruction set are the same.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaInstructionSet.op_Inequality(ILGPU.Runtime.Cuda.CudaInstructionSet,ILGPU.Runtime.Cuda.CudaInstructionSet)">
            <summary>
            Returns true if the first and the second instruction set are not the same.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>
            True, if the first and the second instruction set are not the same.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaInstructionSet.op_LessThan(ILGPU.Runtime.Cuda.CudaInstructionSet,ILGPU.Runtime.Cuda.CudaInstructionSet)">
            <summary>
            Returns true if the first instruction set is smaller than the second one.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>
            True, if the first instruction set is smaller than the second one.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaInstructionSet.op_LessThanOrEqual(ILGPU.Runtime.Cuda.CudaInstructionSet,ILGPU.Runtime.Cuda.CudaInstructionSet)">
            <summary>
            Returns true if the first instruction set is less than or equal to the
            second instruction set.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>
            True, if the first instruction set is less or equal to the second instruction
            set.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaInstructionSet.op_GreaterThan(ILGPU.Runtime.Cuda.CudaInstructionSet,ILGPU.Runtime.Cuda.CudaInstructionSet)">
            <summary>
            Returns true if the first instruction set is greater than the second one.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>
            True, if the first instruction set is greater than the second one.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaInstructionSet.op_GreaterThanOrEqual(ILGPU.Runtime.Cuda.CudaInstructionSet,ILGPU.Runtime.Cuda.CudaInstructionSet)">
            <summary>
            Returns true if the first instruction set is greater than or equal to the
            second instruction set.
            </summary>
            <param name="first">The first instruction set.</param>
            <param name="second">The second instruction set.</param>
            <returns>
            True, if the first instruction set is greater or equal to the second
            instruction set.
            </returns>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_10">
            <summary>
            The 1.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_11">
            <summary>
            The 1.1 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_12">
            <summary>
            The 1.2 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_13">
            <summary>
            The 1.3 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_14">
            <summary>
            The 1.4 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_20">
            <summary>
            The 2.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_21">
            <summary>
            The 2.1 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_22">
            <summary>
            The 2.2 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_23">
            <summary>
            The 2.3 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_30">
            <summary>
            The 3.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_31">
            <summary>
            The 3.1 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_32">
            <summary>
            The 3.2 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_40">
            <summary>
            The 4.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_41">
            <summary>
            The 4.1 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_42">
            <summary>
            The 4.2 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_43">
            <summary>
            The 4.3 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_50">
            <summary>
            The 5.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_60">
            <summary>
            The 6.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_61">
            <summary>
            The 6.1 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_62">
            <summary>
            The 6.2 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_63">
            <summary>
            The 6.3 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_64">
            <summary>
            The 6.4 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_65">
            <summary>
            The 6.5 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_70">
            <summary>
            The 7.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_71">
            <summary>
            The 7.1 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_72">
            <summary>
            The 7.2 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_73">
            <summary>
            The 7.3 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_74">
            <summary>
            The 7.4 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_75">
            <summary>
            The 7.5 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_76">
            <summary>
            The 7.6 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_77">
            <summary>
            The 7.7 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_78">
            <summary>
            The 7.8 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_80">
            <summary>
            The 8.0 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_81">
            <summary>
            The 8.1 ISA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaInstructionSet.ISA_82">
            <summary>
            The 8.2 ISA.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaKernel">
            <summary>
            Represents a Cuda kernel that can be directly launched on a GPU.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaKernel.modulePtr">
            <summary>
            Holds the pointer to the native Cuda module in memory.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaKernel.functionPtr">
            <summary>
            Holds the pointer to the native Cuda function in memory.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaKernel.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,ILGPU.Backends.PTX.PTXCompiledKernel,System.Reflection.MethodInfo)">
            <summary>
            Loads a compiled kernel into the given Cuda context as kernel program.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="kernel">The source kernel.</param>
            <param name="launcher">The launcher method for the given kernel.</param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaKernel.ModulePtr">
            <summary>
            Returns the Cuda module pointer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaKernel.FunctionPtr">
            <summary>
            Returns the Cuda function pointer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaKernel.DisposeAcceleratorObject(System.Boolean)">
            <summary>
            Disposes this Cuda kernel.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaMemoryBuffer">
            <summary>
            Represents an unmanaged Cuda buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer.CudaMemSet``1(ILGPU.Runtime.Cuda.CudaStream,System.Byte,ILGPU.ArrayView{``0}@)">
            <summary>
            Performs a Cuda memset operation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="stream">
            The Cuda stream to use (can be null to preserve backwards compatibility).
            </param>
            <param name="value">The value to write into the buffer.</param>
            <param name="targetView">The target view to write to.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer.CudaCopy``1(ILGPU.Runtime.Cuda.CudaStream,ILGPU.ArrayView{``0}@,ILGPU.ArrayView{``0}@)">
            <summary>
            Performs a Cuda copy operation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="stream">
            The Cuda stream to use (can be null to preserve backwards compatibility).
            </param>
            <param name="sourceView">The source view to copy from.</param>
            <param name="targetView">The target view to copy to.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,System.Int64,System.Int32)">
            <summary>
            Constructs a new Cuda buffer.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="length">The length of this buffer.</param>
            <param name="elementSize">The element size.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer.MemSet(ILGPU.Runtime.AcceleratorStream,System.Byte,ILGPU.ArrayView{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Byte}@,ILGPU.ArrayView{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Byte}@,ILGPU.ArrayView{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer.DisposeAcceleratorObject(System.Boolean)">
            <summary>
            Disposes this Cuda buffer.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaMemoryType">
            <summary>
            Represents the type of a device pointer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.None">
            <summary>
            Represents no known memory type.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Host">
            <summary>
            Represents a host pointer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Device">
            <summary>
            Represents a device pointer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Array">
            <summary>
            Represents a pointer to a Cuda array.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Unified">
            <summary>
            Represents a unified-memory pointer.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.StreamFlags">
            <summary>
            Used to create <see cref="T:ILGPU.Runtime.Cuda.CudaStream"/> objects.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.StreamFlags.CU_STREAM_DEFAULT">
            <summary>
            Specifies a blocking stream.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.StreamFlags.CU_STREAM_NON_BLOCKING">
            <summary>
            Specifies a non-blocking stream. Used if no other flag is specified.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.DeviceDriverMode">
            <summary>
            Represents the device driver mode of a particular Cuda device.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.DeviceDriverMode.WDDM">
            <summary>
            The Windows Display Driver Model.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.DeviceDriverMode.TCC">
            <summary>
            The Tesla Compute Cluster Driver.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.DeviceAttributeKind">
            <summary>
            Specifies a specific attribute kind of a Cuda device.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaEventFlags.CU_EVENT_DEFAULT">
            <summary>
            Default event creation flag.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaEventFlags.CU_EVENT_BLOCKING_SYNC">
            <summary>
            The created event should use blocking synchronization.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaEventFlags.CU_EVENT_DISABLE_TIMING">
            <summary>
            The created event does not need to record timing data.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaEventFlags.CU_EVENT_INTERPROCESS">
            <summary>
            The created event may be used as an interprocess event.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.MemHostRegisterFlags">
            <summary>
            Represents flags used to register host memory with the CUDA.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.MemHostRegisterFlags.CU_MEMHOSTREGISTER_PORTABLE">
            <summary>
            Host memory is portable between CUDA contexts.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.MemHostRegisterFlags.CU_MEMHOSTREGISTER_DEVICEMAP">
            <summary>
            Host memory is mapped into CUDA address space.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.MemHostRegisterFlags.CU_MEMHOSTREGISTER_IOMEMORY">
            <summary>
            Memory pointer is treated as pointing to some memory-mapped I/O space.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.MemHostRegisterFlags.CU_MEMHOSTREGISTER_READ_ONLY">
            <summary>
            Memory pointer is treated as pointing to memory that is considered read-only.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaProfilingMarker">
            <summary>
            Represents a point-in-time marker used in CUDA profiling.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaProfilingMarker.EventPtr">
            <summary>
            The native event pointer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaProfilingMarker.Synchronize">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaProfilingMarker.MeasureFrom(ILGPU.Runtime.ProfilingMarker)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaProfilingMarker.DisposeAcceleratorObject(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration">
            <summary>
            Represents a shared-memory configuration of a device.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration.Default">
            <summary>
            The default shared-memory configuration.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration.FourByteBankSize">
            <summary>
            Setup a bank size of 4 byte.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration.EightByteBankSize">
            <summary>
            Setup a bank size of 8 byte.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaStream">
            <summary>
            Represents a Cuda stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaStream.#ctor(ILGPU.Runtime.Accelerator,System.IntPtr,System.Boolean)">
            <summary>
            Constructs a new Cuda stream from the given native pointer.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="ptr">The native stream pointer.</param>
            <param name="responsible">
            Whether ILGPU is responsible of disposing this stream.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaStream.#ctor(ILGPU.Runtime.Accelerator,ILGPU.Runtime.Cuda.StreamFlags)">
            <summary>
            Constructs a new Cuda stream with given <see cref="T:ILGPU.Runtime.Cuda.StreamFlags"/>.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="flag">
            Stream flag to use. Allows blocking and non-blocking streams.
            </param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaStream.StreamPtr">
            <summary>
            Returns the underlying native Cuda stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaStream.Synchronize">
            <summary cref="M:ILGPU.Runtime.AcceleratorStream.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaStream.AddProfilingMarkerInternal">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaStream.DisposeAcceleratorObject(System.Boolean)">
            <summary>
            Disposes this Cuda stream.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.NvvmAPI">
            <summary>
            Wrapper for the NVVM API.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.Create(System.String)">
            <summary>
            Creates a new instance of the NVVM API for the specified path.
            </summary>
            <param name="libNvvmPath">Path to NVVM library.</param>
            <returns>The NVVM API instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.Create(System.String,System.String)">
            <summary>
            Creates a new instance of the NVVM API for the specified path.
            </summary>
            <param name="libNvvmPath">Path to NVVM library.</param>
            <param name="libDevicePath">Path to LibDevice bitcode.</param>
            <returns>The NVVM API instance.</returns>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.NvvmAPI.LibDeviceBytes">
            <summary>
            The bytes of the loaded LibDevice bitcode.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.NvvmAPI.libDeviceBytes">
            <summary>
            The storage bytes of the loaded LibDevice bitcode. Exposed to the caller
            via <see cref="P:ILGPU.Runtime.Cuda.NvvmAPI.LibDeviceBytes"/> so that the contents cannot be modified.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.NvvmAPI.libNvvmModule">
            <summary>
            Handle to NVVM module.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.GetErrorString(ILGPU.Runtime.Cuda.NvvmResult)">
            <summary>
            Gets the error string for the NVVM error code.
            </summary>
            <param name="result">The error code.</param>
            <returns>The error string.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.GetVersion(System.Int32@,System.Int32@)">
            <summary>
            Gets the NVVM version.
            </summary>
            <param name="major">Filled in with the major version.</param>
            <param name="minor">Filled in with the minor version.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.GetIRVersion(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the NVVM IR version.
            </summary>
            <param name="majorIR">Filled in with the major version</param>
            <param name="minorIR">Filled in with the minor version.</param>
            <param name="majorDbg">Filled in with the major version</param>
            <param name="minorDbg">Filled in with the minor version.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.CreateProgram(System.IntPtr@)">
            <summary>
            Creates a new NVVM program.
            </summary>
            <param name="program">Filled in with the program handle.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.DestroyProgram(System.IntPtr@)">
            <summary>
            Destroys a previously created NVVM program.
            </summary>
            <param name="program">The program to destroy. Filled in with NULL.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.AddModuleToProgram(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Add a module to the program.
            </summary>
            <param name="program">The program.</param>
            <param name="buffer">The buffer pointer.</param>
            <param name="size">The buffer size.</param>
            <param name="name">The module name.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.LazyAddModuleToProgram(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Add a lazy module to the program.
            </summary>
            <param name="program">The program.</param>
            <param name="buffer">The buffer pointer.</param>
            <param name="size">The buffer size.</param>
            <param name="name">The module name.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.CompileProgram(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Compiles the program.
            </summary>
            <param name="program">The program.</param>
            <param name="numOptions">The number of options.</param>
            <param name="options">The options.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.VerifyProgram(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Verifies the program.
            </summary>
            <param name="program">The program.</param>
            <param name="numOptions">The number of options.</param>
            <param name="options">The options.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.GetCompiledResult(System.IntPtr,System.String@)">
            <summary>
            Gets the compiled PTX result.
            </summary>
            <param name="program">The program.</param>
            <param name="result">Filled in with the PTX result.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.GetCompiledResultSize(System.IntPtr,System.IntPtr@)">
            <summary>
            Gets the size of the compiled PTX result.
            </summary>
            <param name="program">The program.</param>
            <param name="bufferSize">Filled in with the buffer size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.GetCompiledResult(System.IntPtr,System.IntPtr)">
            <summary>
            Gets the compiled PTX result.
            </summary>
            <param name="program">The program.</param>
            <param name="buffer">The buffer pointer.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.GetProgramLog(System.IntPtr,System.String@)">
            <summary>
            Gets the program log.
            </summary>
            <param name="program">The program.</param>
            <param name="result">Filled in with the program log.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.GetProgramLogSize(System.IntPtr,System.IntPtr@)">
            <summary>
            Gets the size of the program log.
            </summary>
            <param name="program">The program.</param>
            <param name="bufferSize">Filled in with the buffer size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvvmAPI.GetProgramLog(System.IntPtr,System.IntPtr)">
            <summary>
            Gets the program log.
            </summary>
            <param name="program">The program.</param>
            <param name="buffer">The buffer pointer.</param>
            <returns>The error code.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.LibDevice">
            <summary>
            Provides bindings for Cuda LibDevice functions.
            </summary>
            <remarks>
            Deals with thunking the Cuda LibDevice functions, because the compiled PTX uses:
            - b32 registers rather than f16 registers (Half type).
            - b32 registers rather than f32 registers (float type).
            - b64 registers rather than f64 registers (double type).
            </remarks>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaCapabilityContext">
            <summary>
            Represents capabilities available to Cuda accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaCapabilityContext.#ctor(ILGPU.Runtime.Cuda.CudaArchitecture)">
            <summary>
            Create a new capability context of Cuda accelerators.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaCapabilityContext.Float16_Min">
            <summary>
            Supports Float16 intrinsic Min.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaCapabilityContext.Float16_Max">
            <summary>
            Supports Float16 intrinsic Max.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaCapabilityContext.Float16_TanH">
            <summary>
            Supports Float16 intrinsic TanH.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaCapabilityContext.Float32_TanH">
            <summary>
            Supports Float32 intrinsic TanH.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaCapabilityContext.GetNotSupportedFloat16_MinException">
            <summary>
            Creates exception for 'Float16_Min'.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaCapabilityContext.GetNotSupportedFloat16_MaxException">
            <summary>
            Creates exception for 'Float16_Max'.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaCapabilityContext.GetNotSupportedFloat16_TanHException">
            <summary>
            Creates exception for 'Float16_TanH'.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaCapabilityContext.GetNotSupportedFloat32_TanHException">
            <summary>
            Creates exception for 'Float32_TanH'.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAPI_0.IsSupported">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAPI_1.IsSupported">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaAPI_NotSupported">
            <summary>
            The NotSupported implementation of the CudaAPI wrapper.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAPI_NotSupported.IsSupported">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.CudaPageLockScope`1">
            <summary>
            Represents a CUDA page lock scope.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CudaPageLockScope`1.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,System.IntPtr,System.Int64)">
            <summary>
            Constructs a page lock scope for the accelerator.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="hostPtr">The host buffer pointer to page lock.</param>
            <param name="numElements">The number of elements in the buffer.</param>
        </member>
        <member name="P:ILGPU.Runtime.CudaPageLockScope`1.HostPtr">
            <summary>
            The host pointer used for registration.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CudaPageLockScope`1.DisposeAcceleratorObject(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.Runtime.ScopedAcceleratorBinding">
            <summary>
            Represents a temporary binding of an accelerator object. The old binding can be
            recovered by either <see cref="M:ILGPU.Runtime.ScopedAcceleratorBinding.Recover"/> or the <see cref="M:ILGPU.Runtime.ScopedAcceleratorBinding.Dispose"/> method.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new scoped binding.
            </summary>
            <param name="accelerator">The new accelerator.</param>
        </member>
        <member name="P:ILGPU.Runtime.ScopedAcceleratorBinding.OldAccelerator">
            <summary>
            Returns the old accelerator that was the current one
            before the current binding operation (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ScopedAcceleratorBinding.IsRecoverable">
            <summary>
            Returns true if an old accelerator has to be recovered.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.Recover">
            <summary>
            Recovers the old accelerator and resets the internal state.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.Equals(ILGPU.Runtime.ScopedAcceleratorBinding)">
            <summary>
            Returns true if the given binding is equal to the current binding.
            </summary>
            <param name="other">The other binding.</param>
            <returns>
            True, if the given binding is equal to the current binding.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.Dispose">
            <summary>
            Recovers the old accelerator and resets the internal state.
            </summary>
            <remarks>
            The dispose method is useful in combination with using statements.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current binding.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current binding.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.GetHashCode">
            <summary>
            Returns the hash code of this binding.
            </summary>
            <returns>The hash code of this binding.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.ToString">
            <summary>
            Returns the string representation of this binding.
            </summary>
            <returns>The string representation of this binding.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.op_Equality(ILGPU.Runtime.ScopedAcceleratorBinding,ILGPU.Runtime.ScopedAcceleratorBinding)">
            <summary>
            Returns true if the first and second binding are the same.
            </summary>
            <param name="first">The first binding.</param>
            <param name="second">The second binding.</param>
            <returns>True, if the first and second binding are the same.</returns>
        </member>
        <member name="M:ILGPU.Runtime.ScopedAcceleratorBinding.op_Inequality(ILGPU.Runtime.ScopedAcceleratorBinding,ILGPU.Runtime.ScopedAcceleratorBinding)">
            <summary>
            Returns true if the first and second binding are not the same.
            </summary>
            <param name="first">The first binding.</param>
            <param name="second">The second binding.</param>
            <returns>True, if the first and second binding are not the same.</returns>
        </member>
        <member name="T:ILGPU.Runtime.BaseDebugArrayView`1">
            <summary>
            Base debug view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.BaseDebugArrayView`1.SyncDebuggerState(ILGPU.ArrayView{`0})">
            <summary>
            Synchronizes all running streams to ensure a consistent debugging state.
            </summary>
            <param name="source">The source debugger state.</param>
        </member>
        <member name="M:ILGPU.Runtime.BaseDebugArrayView`1.GetDebuggerData(ILGPU.ArrayView{`0})">
            <summary>
            Returns the underlying data of the given view for debugging purposes.
            </summary>
            <param name="source">The source view.</param>
            <returns>The raw view data for debugging purposes.</returns>
        </member>
        <member name="M:ILGPU.Runtime.BaseDebugArrayView`1.#ctor">
            <summary>
            Constructs a new debug view.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.DebugArrayView`1">
            <summary>
            Represents a debugger view for generic array views.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.DebugArrayView`1.#ctor(ILGPU.ArrayView{`0})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="source">The source array view.</param>
        </member>
        <member name="P:ILGPU.Runtime.DebugArrayView`1.Data">
            <summary>
            The buffer data.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.DebugArrayView1D`2">
            <summary>
            Represents a debugger view for 1D array views using stride information.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The stride type.</typeparam>
        </member>
        <member name="P:ILGPU.Runtime.DebugArrayView1D`2.Extent">
            <summary>
            The extent of the view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.DebugArrayView1D`2.Stride">
            <summary>
            The stride information.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.DebugArrayView1D`2.Data">
            <summary>
            The buffer data.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.DebugArrayView2D`2">
            <summary>
            Represents a debugger view for 2D array views using stride information.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The stride type.</typeparam>
        </member>
        <member name="P:ILGPU.Runtime.DebugArrayView2D`2.Extent">
            <summary>
            The extent of the view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.DebugArrayView2D`2.Stride">
            <summary>
            The stride information.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.DebugArrayView2D`2.Data">
            <summary>
            The buffer data.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.DebugArrayView3D`2">
            <summary>
            Represents a debugger view for 3D array views using stride information.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The stride type.</typeparam>
        </member>
        <member name="P:ILGPU.Runtime.DebugArrayView3D`2.Extent">
            <summary>
            The extent of the view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.DebugArrayView3D`2.Stride">
            <summary>
            The stride information.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.DebugArrayView3D`2.Data">
            <summary>
            The buffer data.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.IDevice">
            <summary>
            Represents an abstract device object.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IDevice.Name">
            <summary>
            Returns the name of this device.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IDevice.MemorySize">
            <summary>
            Returns the memory size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IDevice.MaxGridSize">
            <summary>
            Returns the max grid size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IDevice.MaxGroupSize">
            <summary>
            Returns the max group size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IDevice.MaxNumThreadsPerGroup">
            <summary>
            Returns the maximum number of threads in a group.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IDevice.MaxSharedMemoryPerGroup">
            <summary>
            Returns the maximum number of shared memory per thread group in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IDevice.MaxConstantMemory">
            <summary>
            Returns the maximum number of constant memory in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IDevice.WarpSize">
            <summary>
            Return the warp size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IDevice.NumMultiprocessors">
            <summary>
            Returns the number of available multiprocessors.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IDevice.MaxNumThreadsPerMultiprocessor">
            <summary>
            Returns the maximum number of threads per multiprocessor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IDevice.MaxNumThreads">
            <summary>
            Returns the maximum number of threads of this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IDevice.Capabilities">
            <summary>
            Returns the supported capabilities of this accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.IDevice.PrintInformation(System.IO.TextWriter)">
            <summary>
            Prints device information to the given text writer.
            </summary>
            <param name="writer">The target text writer to write to.</param>
        </member>
        <member name="T:ILGPU.Runtime.Device">
            <summary>
            Represents a single device object.
            </summary>
            <remarks>
            Note that all derived class have to be annotated with the
            <see cref="T:ILGPU.Runtime.DeviceTypeAttribute"/> attribute.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Device.#ctor">
            <summary>
            Constructs a new device.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Device.AcceleratorType">
            <summary>
            Returns the type of the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Device.Name">
            <summary>
            Returns the name of this device.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Device.MemorySize">
            <summary>
            Returns the memory size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Device.MaxGridSize">
            <summary>
            Returns the max grid size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Device.MaxGroupSize">
            <summary>
            Returns the max group size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Device.MaxNumThreadsPerGroup">
            <summary>
            Returns the maximum number of threads in a group.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Device.MaxSharedMemoryPerGroup">
            <summary>
            Returns the maximum number of shared memory per thread group in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Device.MaxConstantMemory">
            <summary>
            Returns the maximum number of constant memory in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Device.WarpSize">
            <summary>
            Return the warp size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Device.NumMultiprocessors">
            <summary>
            Returns the number of available multiprocessors.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Device.MaxNumThreadsPerMultiprocessor">
            <summary>
            Returns the maximum number of threads per multiprocessor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Device.MaxNumThreads">
            <summary>
            Returns the maximum number of threads of this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Device.Capabilities">
            <summary>
            Returns the supported capabilities of this device.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Device.CreateAccelerator(ILGPU.Context)">
            <summary>
            Creates a new accelerator instance.
            </summary>
            <param name="context">The context instance.</param>
            <returns>The created accelerator instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Device.PrintInformation(System.IO.TextWriter)">
            <summary>
            Prints device information to the given text writer.
            </summary>
            <param name="writer">The target text writer to write to.</param>
        </member>
        <member name="M:ILGPU.Runtime.Device.PrintHeader(System.IO.TextWriter)">
            <summary>
            Prints general header information that should appear at the top.
            </summary>
            <param name="writer">The target text writer to write to.</param>
        </member>
        <member name="M:ILGPU.Runtime.Device.PrintGeneralInfo(System.IO.TextWriter)">
            <summary>
            Print general GPU specific information to the given text writer.
            </summary>
            <param name="writer">The target text writer to write to.</param>
        </member>
        <member name="M:ILGPU.Runtime.Device.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current device.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current device.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Device.GetHashCode">
            <summary>
            Returns the hash code of this device.
            </summary>
            <returns>The hash code of this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Device.ToString">
            <summary>
            Returns the string representation of this accelerator description.
            </summary>
            <returns>The string representation of this accelerator.</returns>
        </member>
        <member name="T:ILGPU.Runtime.DeviceTypeAttribute">
            <summary>
            Annotates classes derived from <see cref="T:ILGPU.Runtime.Device"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.DeviceTypeAttribute.GetAcceleratorType(System.Type)">
            <summary>
            Gets the accelerator type of the given device class.
            </summary>
            <param name="type">The device class type.</param>
            <returns>The accelerator type.</returns>
        </member>
        <member name="M:ILGPU.Runtime.DeviceTypeAttribute.#ctor(ILGPU.Runtime.AcceleratorType)">
            <summary>
            Constructs a new device type attribute.
            </summary>
            <param name="acceleratorType">
            The accelerator type of the annotated device.
            </param>
        </member>
        <member name="P:ILGPU.Runtime.DeviceTypeAttribute.AcceleratorType">
            <summary>
            Returns the associated accelerator type.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.DeviceExtensions">
            <summary>
            Extension methods for devices.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.DeviceExtensions.PrintInformation(ILGPU.Runtime.IDevice)">
            <summary>
            Prints device information to the standard <see cref="P:System.Console.Out"/> stream.
            </summary>
            <param name="device">The device to print.</param>
        </member>
        <member name="T:ILGPU.Runtime.DeviceRegistry">
            <summary>
            A registry for device instances to avoid duplicate registrations.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.DeviceRegistry.registered">
            <summary>
            The set of all registered devices.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.DeviceRegistry.devices">
            <summary>
            Stores all registered accelerator device objects.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.DeviceRegistry.Count">
            <summary>
            Returns the number of registered devices.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.DeviceRegistry.Register(ILGPU.Runtime.Device)">
            <summary>
            Registers the given device.
            </summary>
            <param name="device">The device to register.</param>
        </member>
        <member name="M:ILGPU.Runtime.DeviceRegistry.Register``1(``0,System.Predicate{``0})">
            <summary>
            Registers the given device if the predicate evaluates to true.
            </summary>
            <typeparam name="TDevice">The device class type.</typeparam>
            <param name="device">The device to register.</param>
            <param name="predicate">
            The device predicate to check whether to include the device or not.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.DeviceRegistry.ToImmutable">
            <summary>
            Converts this registry into an immutable array.
            </summary>
            <returns>The created immutable array of devices.</returns>
        </member>
        <member name="T:ILGPU.Runtime.IAcceleratorExtensionProvider`1">
            <summary>
            Represents a generic accelerator-extension provider.
            </summary>
            <typeparam name="TExtension">The type of the extension to be created.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.IAcceleratorExtensionProvider`1.CreateCPUExtension(ILGPU.Runtime.CPU.CPUAccelerator)">
            <summary>
            Creates an extension for a CPU accelerator.
            </summary>
            <param name="accelerator">The target accelerator.</param>
            <returns>The created extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.IAcceleratorExtensionProvider`1.CreateCudaExtension(ILGPU.Runtime.Cuda.CudaAccelerator)">
            <summary>
            Creates an extension for a Cuda accelerator.
            </summary>
            <param name="accelerator">The target accelerator.</param>
            <returns>The created extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.IAcceleratorExtensionProvider`1.CreateOpenCLExtension(ILGPU.Runtime.OpenCL.CLAccelerator)">
            <summary>
            Creates an extension for an OpenCL accelerator.
            </summary>
            <param name="accelerator">The target accelerator.</param>
            <returns>The created extension.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Kernel">
            <summary>
            Represents the base class for all runtime kernels.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.ImplementSpecializationCacheArgs(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            Implements a <see cref="T:ILGPU.Runtime.ISpecializationCacheArgs"/> interface in order to
            make the given <paramref name="typeBuilder"/> compatible with a
            <see cref="T:ILGPU.Runtime.SpecializationCache`3"/> instance.
            </summary>
            <param name="typeBuilder">The target type builder to use.</param>
            <param name="fields">The source fields used for implementation.</param>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.CreateSpecializedLauncher``2(ILGPU.Runtime.Accelerator,ILGPU.Backends.EntryPoints.EntryPointDescription@,ILGPU.Runtime.KernelSpecialization@,ILGPU.IR.Method,``1@)">
            <summary>
            Creates a launcher delegate that uses the
            <see cref="T:ILGPU.Runtime.SpecializationCache`3"/> to create
            dynamically specialized kernels.
            </summary>
            <typeparam name="TLoader">The associated loader type.</typeparam>
            <typeparam name="TDelegate">The launcher delegate type.</typeparam>
            <param name="accelerator">The associated accelerator.</param>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelMethod">The kernel IR method.</param>
            <param name="loader">The loader instance.</param>
            <returns>
            A dynamic kernel launcher that automatically specializes kernels.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.CreateSpecializedLauncherMethod``1(ILGPU.RuntimeSystem,ILGPU.Backends.EntryPoints.EntryPointDescription@,System.Type,System.Type)">
            <summary>
            Creates a specialized launcher method that uses the
            <see cref="T:ILGPU.Runtime.SpecializationCache`3"/>.
            </summary>
            <typeparam name="TDelegate">The launcher delegate type.</typeparam>
            <param name="runtimeSystem">The current runtime system.</param>
            <param name="entry">The entry point to compile into a kernel.</param>
            <param name="keyStruct">The key struct.</param>
            <param name="cacheType">The parent cache type.</param>
            <returns>The specialized launcher method.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.CreateSpecializedLauncherStruct(ILGPU.RuntimeSystem,ILGPU.Backends.EntryPoints.EntryPointDescription@)">
            <summary>
            Creates a specialized launcher struct to be used with a dictionary cache.
            </summary>
            <param name="runtimeSystem">The current runtime system.</param>
            <param name="entry">The entry point to compile into a kernel.</param>
            <returns>The key kernel type.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.#ctor(ILGPU.Runtime.Accelerator,ILGPU.Backends.CompiledKernel,System.Reflection.MethodInfo)">
            <summary>
            Constructs a new kernel.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="compiledKernel">The source kernel.</param>
            <param name="launcher">The launcher method for the given kernel.</param>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.Launcher">
            <summary>
            Returns the associated kernel launcher.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.Specialization">
            <summary>
            Returns the associated specialization.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.NumParameters">
            <summary>
            Returns the number of uniform parameters.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.Info">
            <summary>
            Returns information about all functions in the compiled kernel.
            </summary>
            <remarks>
            This instance will be available when the property
            <see cref="P:ILGPU.ContextProperties.EnableKernelInformation"/> is enabled.
            </remarks>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.CompiledKernel">
            <summary>
            Returns the associated compiled kernel object.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.CreateLauncherDelegate``1">
            <summary>
            Creates a launcher delegate for this kernel.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <returns>The created delegate.</returns>
            <remarks>Note that the first argument is the accelerator stream.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.InvokeLauncher``1(``0,ILGPU.Runtime.AcceleratorStream,System.Object[])">
            <summary>
            Invokes the associated launcher via reflection.
            </summary>
            <typeparam name="T">The index type T.</typeparam>
            <param name="dimension">The grid dimension.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="args">The kernel arguments.</param>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.Launch``1(ILGPU.Runtime.AcceleratorStream,``0,System.Object[])">
            <summary>
            Launches the current kernel with the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="dimension">The grid dimension.</param>
            <param name="args">The kernel arguments.</param>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.Launch(ILGPU.Runtime.AcceleratorStream,System.Int32,System.Object[])">
            <summary>
            Launches the current kernel with the given arguments.
            </summary>
            <param name="dimension">The grid dimension.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="args">The kernel arguments.</param>
        </member>
        <member name="T:ILGPU.Runtime.KernelUtil">
            <summary>
            Contains utility methods to work with kernel objects.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelUtil.TryGetKernel``1(``0,ILGPU.Runtime.Kernel@)">
            <summary>
            Tries to resolve a kernel object from a previously created kernel delegate.
            </summary>
            <typeparam name="TDelegate">The kernel-delegate type.</typeparam>
            <param name="kernelDelegate">The kernel-delegate instance.</param>
            <param name="kernel">The resolved kernel object (if any).</param>
            <returns>True, if a kernel object could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelUtil.GetKernel``1(``0)">
            <summary>
            Resolves a kernel object from a previously created kernel delegate.
            If this is not possible, the method will throw an
            <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <typeparam name="TDelegate">The kernel-delegate type.</typeparam>
            <param name="kernelDelegate">The kernel-delegate instance.</param>
            <returns>The resolved kernel object.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelUtil.GetCompiledKernel``1(``0)">
            <summary>
            Returns the compiled kernel object that is associated with the given kernel
            delegate handle.
            </summary>
            <typeparam name="TDelegate">The kernel-delegate type.</typeparam>
            <param name="kernelDelegate">The kernel-delegate instance.</param>
            <returns>The compiled kernel object.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelUtil.GetKernelSpecialization``1(``0)">
            <summary>
            Returns the kernel specialization that is associated with the given kernel
            delegate handle.
            </summary>
            <typeparam name="TDelegate">The kernel-delegate type.</typeparam>
            <param name="kernelDelegate">The kernel-delegate instance.</param>
            <returns>The kernel specialization instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelUtil.GetKernelInfo``1(``0)">
            <summary>
            Returns the kernel compilation information (if any) that is associated with
            the given kernel delegate handle.
            </summary>
            <typeparam name="TDelegate">The kernel-delegate type.</typeparam>
            <param name="kernelDelegate">The kernel-delegate instance.</param>
            <returns>The kernel specialization instance.</returns>
            <remarks>
            This instance will be available when the property
            <see cref="P:ILGPU.ContextProperties.EnableKernelInformation"/> is enabled.
            </remarks>
        </member>
        <member name="T:ILGPU.Runtime.KernelAccelerator`2">
            <summary>
            Represents an accelerator that manages typed kernel.
            </summary>
            <typeparam name="TCompiledKernel">The type of a compiled kernel.</typeparam>
            <typeparam name="TKernel">The type of a loaded runtime kernel</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.#ctor(ILGPU.Context,ILGPU.Runtime.Device)">
            <summary>
            Constructs a new kernel accelerator.
            </summary>
            <param name="context">The target context.</param>
            <param name="device">The device.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.LoadKernelInternal(ILGPU.Backends.CompiledKernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.LoadKernelInternal(ILGPU.Backends.CompiledKernel)"/>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.LoadImplicitlyGroupedKernelInternal(ILGPU.Backends.CompiledKernel,System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads an implicitly grouped kernel on the current accelerator.
            </summary>
            <param name="kernel">The compiled kernel to load.</param>
            <param name="customGroupSize">The user-defined group size.</param>
            <param name="kernelInfo">The resolved kernel information.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.LoadAutoGroupedKernelInternal(ILGPU.Backends.CompiledKernel,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads an auto grouped kernel on the current accelerator.
            </summary>
            <param name="kernel">The compiled kernel to load.</param>
            <param name="kernelInfo">The resolved kernel information.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.GenerateKernelLauncherMethod(`0,System.Int32)">
            <summary>
            Generates a dynamic kernel-launcher method that will be just-in-time compiled
            during the first invocation. Using the generated launcher lowers the overhead
            for kernel launching dramatically, since unnecessary operations (like boxing)
            can be avoided.
            </summary>
            <param name="kernel">The kernel to generate a launcher for.</param>
            <param name="customGroupSize">
            The custom group size used for automatic blocking.
            </param>
            <returns>The generated launcher method.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.CreateKernel(`0)">
            <summary>
            Creates an abstract kernel without an initialized launcher.
            </summary>
            <param name="compiledKernel">The compiled kernel.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelAccelerator`2.CreateKernel(`0,System.Reflection.MethodInfo)">
            <summary>
            Creates an abstract kernel with an initialized launcher.
            </summary>
            <param name="compiledKernel">The compiled kernel.</param>
            <param name="launcher">The actual kernel launcher method.</param>
        </member>
        <member name="T:ILGPU.Runtime.KernelInfo">
            <summary>
            Provides detailed information about compiled kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelInfo.CreateFrom(ILGPU.Backends.CompiledKernel.KernelInfo,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new kernel information object.
            </summary>
            <param name="info">The underlying kernel info (if any).</param>
            <param name="minGroupSize">The minimum group size (if known).</param>
            <param name="minGridSize">The minimum grid size (if known).</param>
            <returns>The created kernel information object.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelInfo.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Constructs a new kernel information object.
            </summary>
            <param name="minGroupSize">The minimum group size (if known).</param>
            <param name="minGridSize">The minimum grid size (if known).</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelInfo.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},ILGPU.IR.Analyses.AllocaKindInformation@,System.Collections.Immutable.ImmutableArray{ILGPU.Backends.CompiledKernel.FunctionInfo})">
            <summary>
            Constructs a new kernel information object.
            </summary>
            <param name="minGroupSize">The minimum group size (if known).</param>
            <param name="minGridSize">The minimum grid size (if known).</param>
            <param name="sharedAllocations">All shared allocations.</param>
            <param name="functions">
            An array containing detailed function information.
            </param>
        </member>
        <member name="P:ILGPU.Runtime.KernelInfo.MinGroupSize">
            <summary>
            Returns the estimated group size to gain maximum occupancy on this device.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.KernelInfo.MinGridSize">
            <summary>
            Returns the minimum grid size to gain maximum occupancy on this device.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelInfo.Dump(System.IO.TextWriter)">
            <summary>
            Dumps kernel information to the given text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="T:ILGPU.Runtime.KernelLauncherBuilder">
            <summary>
            Builder methods for kernel launchers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadDimensions``1(System.Type,``0@,System.Action,System.Action{System.Int32})">
            <summary>
            Emits code to load a 3D dimension of a grid or a group index.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="indexType">
            The index type (can be Index1D, Index2D or Index3D).
            </param>
            <param name="emitter">The target IL emitter.</param>
            <param name="loadIdx">
            A callback to load the referenced index value onto the stack.
            </param>
            <param name="manipulateIdx">
            A callback to manipulate the loaded index of a given dimension.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitSharedMemorySpeficiation``1(ILGPU.Backends.EntryPoints.EntryPoint,``0@)">
            <summary>
            Emits code for loading a <see cref="T:ILGPU.Backends.EntryPoints.SharedMemorySpecification"/> instance.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="entryPoint">The entry point for code generation.</param>
            <param name="emitter">The target IL emitter.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadKernelConfig``1(ILGPU.Backends.EntryPoints.EntryPoint,``0,System.Int32,ILGPU.Index3D@,ILGPU.Index3D@,System.Int32)">
            <summary>
            Emits a kernel-dimension configuration. In the case of an ungrouped index
            type, all arguments will be transformed into a <see cref="T:ILGPU.KernelConfig"/>
            instance. Otherwise, the passed kernel configuration will be used without
            any modifications.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="entryPoint">The entry point.</param>
            <param name="emitter">The target IL emitter.</param>
            <param name="dimensionIdx">
            The argument index of the provided launch-dimension index.
            </param>
            <param name="maxGridSize">The max grid dimensions.</param>
            <param name="maxGroupSize">The max group dimensions.</param>
            <param name="customGroupSize">
            The custom group size used for automatic blocking.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitVerifyKernelLaunchBounds``1(``0,ILGPU.Index3D@,ILGPU.Index3D@)">
            <summary>
            Emits IL instructions to verify the kernel launch bounds.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="emitter">The target IL emitter.</param>
            <param name="maxGridSize">The max grid dimensions.</param>
            <param name="maxGroupSize">The max group dimensions.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.VerifyKernelLaunchBounds(ILGPU.Index3D,ILGPU.Index3D,ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Helper function used to verify the kernel launch dimensions.
            </summary>
            <param name="gridDim">Kernel launch grid dimensions.</param>
            <param name="groupDim">Kernel launch group dimensions.</param>
            <param name="maxGridSize">Accelerator max grid dimensions.</param>
            <param name="maxGroupSize">Accelerator max group dimensions.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadRuntimeKernelConfig``1(ILGPU.Backends.EntryPoints.EntryPoint,``0,System.Int32,ILGPU.Index3D@,ILGPU.Index3D@,System.Int32)">
            <summary>
            Emits a new runtime kernel configuration.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="entryPoint">The entry point.</param>
            <param name="emitter">The target IL emitter.</param>
            <param name="dimensionIdx">
            The argument index of the provided launch-dimension index.
            </param>
            <param name="maxGridSize">The max grid dimensions.</param>
            <param name="maxGroupSize">The max group dimensions.</param>
            <param name="customGroupSize">
            The custom group size used for automatic blocking.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadKernelArgument``2(System.Int32,``1@)">
            <summary>
            Emits code for loading a typed kernel from a generic kernel instance.
            </summary>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <typeparam name="T">The kernel type.</typeparam>
            <param name="kernelArgumentIndex">
            The index of the launcher parameter.
            </param>
            <param name="emitter">The target IL emitter.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadAcceleratorStream``2(System.Int32,``1@)">
            <summary>
            Emits code for loading a typed accelerator stream from a generic
            accelerator-stream instance.
            </summary>
            <typeparam name="T">The kernel type.</typeparam>
            <typeparam name="TEmitter">The emitter type.</typeparam>
            <param name="streamArgumentIndex">The index of the stream parameter.</param>
            <param name="emitter">The target IL emitter.</param>
        </member>
        <member name="T:ILGPU.Runtime.KernelSpecialization">
            <summary>
            Represents a kernel specialization.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.KernelSpecialization.Empty">
            <summary>
            Represents an empty (or *no*) specialization that allows the compiler to
            freely decide on its own.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Constructs a new specialization object.
            </summary>
            <param name="maxNumThreadsPerGroup">
            The maximum number of threads per group.
            </param>
            <param name="minNumGroupsPerMultiprocessor">
            The minimum number of groups per multiprocessor.
            </param>
        </member>
        <member name="P:ILGPU.Runtime.KernelSpecialization.MaxNumThreadsPerGroup">
            <summary>
            Returns the desired maximum number of threads per group.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.KernelSpecialization.MinNumGroupsPerMultiprocessor">
            <summary>
            Returns the desired minimum number of groups per multiprocessor.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.Equals(ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Returns true if the given specialization is equal to the current
            specialization.
            </summary>
            <param name="other">The other specialization.</param>
            <returns>
            True, if the given specialization is equal to the current specialization.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.IsCompatibleWith(ILGPU.Runtime.Accelerator)">
            <summary>
            Checks whether the given accelerator is compatible with the current
            specialization.
            </summary>
            <param name="accelerator">The target accelerator.</param>
            <returns>
            True, if the given accelerator is compatible with the current specialization.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current specialization.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            True, if the given object is equal to the current specialization.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.GetHashCode">
            <summary>
            Returns the hash code of this specialization.
            </summary>
            <returns>The hash code of this specialization.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.ToString">
            <summary>
            Returns the string representation of this specialization.
            </summary>
            <returns>The string representation of this specialization.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.op_Equality(ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Returns true if the specialization and second specialization are the same.
            </summary>
            <param name="first">The first specialization.</param>
            <param name="second">The second specialization.</param>
            <returns>
            True, if the first and second specialization are the same.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelSpecialization.op_Inequality(ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Returns true if the first and second specialization are not the same.
            </summary>
            <param name="first">The first specialization.</param>
            <param name="second">The second specialization.</param>
            <returns>
            True, if the first and second specialization are not the same.
            </returns>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer">
            <summary>
            Represents an abstract memory buffer that can be used in the scope of ILGPU
            runtime kernels.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.#ctor(ILGPU.Runtime.Accelerator,System.Int64,System.Int32)">
            <summary>
            Initializes this array view buffer.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="length">The length of this buffer.</param>
            <param name="elementSize">The element size.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.Init(System.Int64,System.Int32)">
            <summary>
            Initializes the internal length properties.
            </summary>
            <param name="length">The length of this buffer.</param>
            <param name="elementSize">The element size.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer.NativePtr">
            <summary>
            Returns the native pointer of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer.Length">
            <summary>
            Returns the length of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer.ElementSize">
            <summary>
            Returns the element size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.MemSet(ILGPU.Runtime.AcceleratorStream,System.Byte,System.Int64,System.Int64)">
            <summary>
            Sets the contents of the current buffer to the given byte value.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="value">The value to write into the memory buffer.</param>
            <param name="targetOffsetInBytes">The target offset in bytes.</param>
            <param name="length">The number of bytes to set.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.MemSet(ILGPU.Runtime.AcceleratorStream,System.Byte,ILGPU.ArrayView{System.Byte}@)">
            <summary>
            Sets the contents of the current buffer to the given byte value.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="value">The value to write into the memory buffer.</param>
            <param name="targetView">The raw target view of this buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.CopyTo(ILGPU.Runtime.AcceleratorStream,System.Int64,ILGPU.ArrayView{System.Byte}@)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="sourceOffsetInBytes">The source offset in bytes.</param>
            <param name="targetView">The target view.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Byte}@,ILGPU.ArrayView{System.Byte}@)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="sourceView">The source view of this buffer.</param>
            <param name="targetView">The target view.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Byte}@,System.Int64)">
            <summary>
            Copies elements from the source view to the current buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="sourceView">The source view.</param>
            <param name="targetOffsetInBytes">The target offset in bytes.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Byte}@,ILGPU.ArrayView{System.Byte}@)">
            <summary>
            Copies elements from the source view to the current buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="sourceView">The source view.</param>
            <param name="targetView">The target view of this buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.AsRawArrayView">
            <summary>
            Returns a raw array view of the whole buffer.
            </summary>
            <returns>The raw array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.AsRawArrayView(System.Int64)">
            <summary>
            Returns a raw array view starting at the given byte offset.
            </summary>
            <param name="offsetInBytes">The raw offset in bytes.</param>
            <returns>The raw array view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.AsRawArrayView(System.Int64,System.Int64)">
            <summary>
            Returns a raw array slice of the this buffer.
            </summary>
            <param name="offsetInBytes">The raw offset in bytes.</param>
            <param name="lengthInBytes">The raw length in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.AsArrayView``1(System.Int64,System.Int64)">
            <summary>
            Gets an array view that spans the given number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="offset">The offset.</param>
            <param name="length">The number of elements.</param>
            <returns>The created array view.</returns>
        </member>
        <member name="T:ILGPU.Runtime.IMemoryBuffer`1">
            <summary>
            An abstract memory buffer based on a specific view type.
            </summary>
            <typeparam name="TView">The underlying view type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer`1.MemSet(ILGPU.Runtime.AcceleratorStream,System.Byte,System.Int64,System.Int64)">
            <summary>
            Sets the contents of the current buffer to the given byte value.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="value">The value to write into the memory buffer.</param>
            <param name="targetOffsetInBytes">The target offset in bytes.</param>
            <param name="length">The number of bytes to set.</param>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer`1.CopyTo(ILGPU.Runtime.AcceleratorStream,System.Int64,ILGPU.ArrayView{System.Byte}@)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="sourceOffsetInBytes">The source offset in bytes.</param>
            <param name="targetView">The target view.</param>
        </member>
        <member name="M:ILGPU.Runtime.IMemoryBuffer`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Byte}@,System.Int64)">
            <summary>
            Copies elements from the source view to the current buffer.
            </summary>
            <param name="stream">The used accelerator stream.</param>
            <param name="sourceView">The source view.</param>
            <param name="targetOffsetInBytes">The target offset in bytes.</param>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer`1">
            <summary>
            Represents an opaque memory buffer that can be used in the scope of ILGPU runtime
            kernels.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.#ctor(ILGPU.Runtime.Accelerator,`0@)">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="view">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.Buffer">
            <summary>
            Returns the owned memory buffer instance.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.ILGPU#IArrayView#Buffer">
            <summary>
            Returns the same memory buffer instance.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.ILGPU#IContiguousArrayView#Index">
            <summary>
            Returns the base offset 0.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.ILGPU#IContiguousArrayView#IndexInBytes">
            <summary>
            Returns the base offset 0.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.View">
            <summary>
            Returns an array view that can access this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.IsValid">
            <summary>
            Returns true if this buffer has not been disposed.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.MemSet(ILGPU.Runtime.AcceleratorStream,System.Byte,ILGPU.ArrayView{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Byte}@,ILGPU.ArrayView{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Byte}@,ILGPU.ArrayView{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.DisposeAcceleratorObject(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.op_Implicit(ILGPU.Runtime.MemoryBuffer{`0})~`0">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAccelerator">
            <summary>
            Represents an OpenCL accelerator (CPU or GPU device).
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.GetCLAPIMethod">
            <summary>
            Represents the <see cref="P:ILGPU.Runtime.OpenCL.CLAPI.CurrentAPI"/> property.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.GenericLaunchKernelMethod">
            <summary>
            Represents the <see cref="M:ILGPU.Runtime.OpenCL.CLAPI.LaunchKernelWithStreamBinding``1(ILGPU.Runtime.OpenCL.CLStream,ILGPU.Runtime.OpenCL.CLKernel,ILGPU.RuntimeKernelConfig)"/> method.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.ThrowIfFailedMethod">
            <summary>
            Represents the <see cref="M:ILGPU.Runtime.OpenCL.CLException.ThrowIfFailed(ILGPU.Runtime.OpenCL.CLError)" /> method.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.DummyKernelName">
            <summary>
            Specifies the kernel entry point name for the following dummy kernels.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.DummyKernelSource">
            <summary>
            The first dummy kernel that is compiled during accelerator initialization.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.DummySubGroupKernelSource">
            <summary>
            The second dummy kernel that is compiled during accelerator initialization.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAccelerator.SubGroupExtensions">
            <summary>
            All subgroup extensions.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.#ctor(ILGPU.Context,ILGPU.Runtime.OpenCL.CLDevice)">
            <summary>
            Constructs a new OpenCL accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="description">The accelerator description.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.InitVendorFeatures">
            <summary>
            Initializes major vendor features.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.InitSubGroupSupport(ILGPU.Runtime.OpenCL.CLDevice)">
            <summary>
            Initializes support for sub groups.
            </summary>
            <param name="acceleratorId">The current accelerator id.</param>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.Device">
            <summary>
            Returns the parent OpenCL device.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.PlatformId">
            <summary>
            Returns the native OpenCL platform id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.PlatformName">
            <summary>
            Returns the associated platform name.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.PlatformVersion">
            <summary>
            Returns the associated platform version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.VendorName">
            <summary>
            Returns the associated vendor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.Vendor">
            <summary>
            Returns the main accelerator vendor type.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.DeviceId">
            <summary>
            Returns the native OpenCL device id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.DeviceType">
            <summary>
            Returns the OpenCL device type.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.ClockRate">
            <summary>
            Returns the clock rate.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.CVersion">
            <summary>
            Returns the supported OpenCL C version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.CLStdVersion">
            <summary>
            Returns the OpenCL C version passed to -cl-std.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.Backend">
            <summary>
            Returns the OpenCL backend of this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAccelerator.Capabilities">
            <summary>
            Returns the capabilities of this accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CreateExtension``2(``1)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.AllocateRawInternal(System.Int64,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CreateKernel(ILGPU.Backends.OpenCL.CLCompiledKernel)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CreateKernel(ILGPU.Backends.OpenCL.CLCompiledKernel,System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CreateStreamInternal">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CreateStream(System.IntPtr,System.Boolean)">
            <summary>
            Creates a <see cref="T:ILGPU.Runtime.OpenCL.CLStream"/> object from an externally
            created stream/queue using its pointer.
            </summary>
            <param name="ptr">The pointer to use while creating the new stream.</param>
            <param name="responsible">
            Whether ILGPU is responsible of disposing this stream.
            </param>
            <returns>The created stream.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.SynchronizeInternal">
            <summary cref="M:ILGPU.Runtime.Accelerator.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.OnBind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnBind"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.OnUnbind">
            <summary cref="M:ILGPU.Runtime.Accelerator.OnUnbind"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CanAccessPeerInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EnablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.DisablePeerAccessInternal(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.GenerateKernelLauncherMethod(ILGPU.Backends.OpenCL.CLCompiledKernel,System.Int32)">
            <summary cref="M:ILGPU.Runtime.KernelAccelerator`2.GenerateKernelLauncherMethod(`0,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.EstimateMaxActiveGroupsPerMultiprocessorInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.CreatePageLockFromPinnedInternal``1(System.IntPtr,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAccelerator.DisposeAccelerator_SyncRoot(System.Boolean)">
            <summary>
            Disposes the current OpenCL context.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAPI">
            <summary>
            Wraps the OpenCL-driver API.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAPI.ILaunchHandler">
            <summary>
            An abstract launch handler to specialize kernel launches.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ILaunchHandler.PreLaunchKernel(ILGPU.Runtime.OpenCL.CLStream,ILGPU.Runtime.OpenCL.CLKernel,ILGPU.RuntimeKernelConfig)">
            <summary>
            Performs pre-launch operations for a specific kernel.
            </summary>
            <param name="stream">The current stream.</param>
            <param name="kernel">The current kernel.</param>
            <param name="config">The current kernel configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAPI.DefaultLaunchHandler">
            <summary>
            The default launch handler that does not perform any specific launch
            operations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.DefaultLaunchHandler.PreLaunchKernel(ILGPU.Runtime.OpenCL.CLStream,ILGPU.Runtime.OpenCL.CLKernel,ILGPU.RuntimeKernelConfig)">
            <summary>
            Does not perform any operations and returns
            <see cref="F:ILGPU.Runtime.OpenCL.CLError.CL_SUCCESS"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAPI.DynamicSharedMemoryHandler">
            <summary>
            A dynamic shared memory handler that setups a dynamic memory allocation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.DynamicSharedMemoryHandler.PreLaunchKernel(ILGPU.Runtime.OpenCL.CLStream,ILGPU.Runtime.OpenCL.CLKernel,ILGPU.RuntimeKernelConfig)">
            <summary>
            Setups a dynamic shared memory allocation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.Init">
            <summary>
            Initializes the driver API.
            </summary>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetNumPlatforms(System.Int32@)">
            <summary>
            Resolves the number of available platforms.
            </summary>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetPlatforms(System.IntPtr[],System.Int32@)">
            <summary>
            Resolves the number of available platforms.
            </summary>
            <param name="platforms">The target platform ids to fill.</param>
            <param name="numPlatforms">The resolved number of platforms.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetPlatforms(System.IntPtr*,System.Int32@)">
            <summary>
            Resolves the number of available platforms.
            </summary>
            <param name="platforms">The target platform ids to fill.</param>
            <param name="numPlatforms">The resolved number of platforms.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetPlatformInfo(System.IntPtr,ILGPU.Runtime.OpenCL.CLPlatformInfoType)">
            <summary>
            Resolves platform information as string value.
            </summary>
            <param name="platform">The platform.</param>
            <param name="type">The information type.</param>
            <returns>The resolved string value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetPlatformInfo``1(System.IntPtr,ILGPU.Runtime.OpenCL.CLPlatformInfoType)">
            <summary>
            Resolves platform information as typed structure value of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="platform">The platform.</param>
            <param name="type">The information type.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetDevices(System.IntPtr,ILGPU.Runtime.OpenCL.CLDeviceType,System.IntPtr[],System.Int32@)">
            <summary>
            Resolves the number of available devices.
            </summary>
            <param name="platform">The target platform.</param>
            <param name="deviceType">The device type.</param>
            <param name="devices">The device ids to fill.</param>
            <param name="numDevices">The number of devices.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetDevices(System.IntPtr,ILGPU.Runtime.OpenCL.CLDeviceType,System.IntPtr*,System.Int32@)">
            <summary>
            Resolves the number of available devices.
            </summary>
            <param name="platform">The target platform.</param>
            <param name="deviceType">The device type.</param>
            <param name="devices">The device ids to fill.</param>
            <param name="numDevices">The number of devices.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReleaseDevice(System.IntPtr)">
            <summary>
            Releases the given device.
            </summary>
            <param name="device">The device</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetDeviceInfo(System.IntPtr,ILGPU.Runtime.OpenCL.CLDeviceInfoType)">
            <summary>
            Resolves device information as string value.
            </summary>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <returns>The resolved string value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetDeviceInfo``1(System.IntPtr,ILGPU.Runtime.OpenCL.CLDeviceInfoType)">
            <summary>
            Resolves device information as typed structure value of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetDeviceInfo``1(System.IntPtr,ILGPU.Runtime.OpenCL.CLDeviceInfoType,``0@)">
            <summary>
            Resolves device information as typed structure value of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <param name="value">The resolved value.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetDeviceInfo``1(System.IntPtr,ILGPU.Runtime.OpenCL.CLDeviceInfoType,``0[])">
            <summary>
            Resolves device information as array of typed structure values of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <param name="elements">The elements to fill.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetExtension``1(System.IntPtr)">
            <summary>
            Resolves an extension delegate for the given platform.
            </summary>
            <typeparam name="T">The delegate type.</typeparam>
            <param name="platform">The platform pointer.</param>
            <returns>The resolved extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetExtension``1(System.IntPtr,System.String)">
            <summary>
            Resolves an extension delegate for the given platform.
            </summary>
            <typeparam name="T">The delegate type.</typeparam>
            <param name="platform">The platform pointer.</param>
            <param name="name">The extension name.</param>
            <returns>The resolved extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.CreateContext(System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a new context.
            </summary>
            <param name="device">The device.</param>
            <param name="context">The created context.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReleaseContext(System.IntPtr)">
            <summary>
            Releases the given context.
            </summary>
            <param name="context">The context to release.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.CreateCommandQueue(ILGPU.Runtime.OpenCL.CLPlatformVersion,System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.CLCommandQueueProperties,System.IntPtr@)">
            <summary>
            Creates a new command queue.
            </summary>
            <param name="platformVersion">The current platform version.</param>
            <param name="device">The associated device.</param>
            <param name="context">The parent context.</param>
            <param name="commandQueueProperties">The command queue properties.</param>
            <param name="queue">The created queue.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReleaseCommandQueue(System.IntPtr)">
            <summary>
            Releases the given command queue.
            </summary>
            <param name="queue">The queue to release.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.FlushCommandQueue(System.IntPtr)">
            <summary>
            Flushes the given command queue.
            </summary>
            <param name="queue">The queue to flush.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.FinishCommandQueue(System.IntPtr)">
            <summary>
            Finishes the given command queue.
            </summary>
            <param name="queue">The queue to finish.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.CreateProgram(System.IntPtr,System.String,System.IntPtr@)">
            <summary>
            Creates a new program.
            </summary>
            <param name="context">The context.</param>
            <param name="source">The program source.</param>
            <param name="program">The created program.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.BuildProgram(System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Builds a program.
            </summary>
            <param name="program">The program to build.</param>
            <param name="device">The associated device.</param>
            <param name="options">
            The program build options (refer to the OpenCL specification).
            </param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.BuildProgram(System.IntPtr,System.IntPtr*,System.Int32,System.String)">
            <summary>
            Builds a program.
            </summary>
            <param name="program">The program to build.</param>
            <param name="devices">The associated devices.</param>
            <param name="numDevices">The number of associated devices.</param>
            <param name="options">
            The program build options (refer to the OpenCL specification).
            </param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.BuildProgram(System.IntPtr,System.IntPtr[],System.String)">
            <summary>
            Builds a program.
            </summary>
            <param name="program">The program to build.</param>
            <param name="devices">The associated devices.</param>
            <param name="options">
            The program build options (refer to the OpenCL specification).
            </param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetProgramInfo(System.IntPtr,ILGPU.Runtime.OpenCL.CLProgramInfo,System.IntPtr,System.Void*,System.IntPtr@)">
            <summary>
            Resolves program information.
            </summary>
            <param name="program">The program pointer.</param>
            <param name="paramName">The param name to query.</param>
            <param name="paramValueSize">The size of the parameter value.</param>
            <param name="paramValue">The parameter value to use.</param>
            <param name="paramValueSizeRet">The resulting parameter value size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetProgramBuildInfo(System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.CLProgramBuildInfo,System.IntPtr,System.Void*,System.IntPtr@)">
            <summary>
            Resolves program build information.
            </summary>
            <param name="program">The program pointer.</param>
            <param name="device">The associated device.</param>
            <param name="paramName">The param name to query.</param>
            <param name="paramValueSize">The size of the parameter value.</param>
            <param name="paramValue">The parameter value to use.</param>
            <param name="paramValueSizeRet">The resulting parameter value size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetProgramBuildLog(System.IntPtr,System.IntPtr,System.String@)">
            <summary>
            Resolves program build-log information.
            </summary>
            <param name="program">The program pointer.</param>
            <param name="device">The associated device.</param>
            <param name="buildLog">The build log (if any).</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReleaseProgram(System.IntPtr)">
            <summary>
            Releases the given program.
            </summary>
            <param name="program">The program to release.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.CreateKernel(System.IntPtr,System.String,System.IntPtr@)">
            <summary>
            Creates a new kernel.
            </summary>
            <param name="program">The source program to use.</param>
            <param name="kernelName">The kernel name in the scope of the program.</param>
            <param name="kernel">The created kernel.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReleaseKernel(System.IntPtr)">
            <summary>
            Releases the given kernel.
            </summary>
            <param name="kernel">The kernel to release.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.SetKernelArgument``1(System.IntPtr,System.Int32,``0)">
            <summary>
            Sets a kernel argument.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
            <param name="kernel">The target kernel.</param>
            <param name="index">The argument index.</param>
            <param name="value">The managed value to set.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.SetKernelArgumentUnsafe(System.IntPtr,System.Int32,System.Int32,System.Void*)">
            <summary>
            Sets a kernel argument.
            </summary>
            <param name="kernel">The target kernel.</param>
            <param name="index">The argument index.</param>
            <param name="size">The argument size in bytes.</param>
            <param name="value">A pointer to the value to set.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.SetKernelArgumentUnsafeWithKernel(ILGPU.Runtime.OpenCL.CLKernel,System.Int32,System.Int32,System.Void*)">
            <summary>
            Sets a kernel argument.
            </summary>
            <param name="kernel">The target kernel.</param>
            <param name="index">The argument index.</param>
            <param name="size">The argument size in bytes.</param>
            <param name="value">A pointer to the value to set.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.LaunchKernelWithStreamBinding``1(ILGPU.Runtime.OpenCL.CLStream,ILGPU.Runtime.OpenCL.CLKernel,ILGPU.RuntimeKernelConfig)">
            <summary>
            Launches the given kernel function.
            </summary>
            <typeparam name="THandler">
            The handler type to customize the launch process.
            </typeparam>
            <param name="stream">The current stream.</param>
            <param name="kernel">The current kernel.</param>
            <param name="config">The current kernel configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.LaunchKernelUnsafe(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr*,System.IntPtr*,System.IntPtr*)">
            <summary>
            Launches a kernel.
            </summary>
            <param name="queue">The queue.</param>
            <param name="kernel">The kernel to launch.</param>
            <param name="workDimensions">The general work dimensions.</param>
            <param name="workOffsets">All work offsets.</param>
            <param name="globalWorkSizes">All global work sizes.</param>
            <param name="localWorkSizes">All local work sizes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.LaunchKernel(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr[],System.IntPtr[],System.IntPtr[])">
            <summary>
            Launches a kernel.
            </summary>
            <param name="queue">The queue.</param>
            <param name="kernel">The kernel to launch.</param>
            <param name="workDimensions">The general work dimensions.</param>
            <param name="workOffsets">All work offsets.</param>
            <param name="globalWorkSizes">All global work sizes.</param>
            <param name="localWorkSizes">All local work sizes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetKernelWorkGroupInfo``1(System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.CLKernelWorkGroupInfoType)">
            <summary>
            Resolves kernel work-group information as typed structure value of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="kernel">The kernel.</param>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetKernelWorkGroupInfo``1(System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.CLKernelWorkGroupInfoType,``0[])">
            <summary>
            Resolves kernel work-group information as typed array of values of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="kernel">The kernel.</param>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <param name="elements">The desired elements.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.CreateBuffer(System.IntPtr,ILGPU.Runtime.OpenCL.CLBufferFlags,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a new buffer.
            </summary>
            <param name="context">The context.</param>
            <param name="flags">The buffer flags.</param>
            <param name="size">The buffer size in bytes.</param>
            <param name="hostPointer">The host pointer to copy from (if any).</param>
            <param name="buffer">The created buffer.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReleaseBuffer(System.IntPtr)">
            <summary>
            Releases the given buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReadBuffer(ILGPU.Runtime.AcceleratorStream,System.IntPtr,System.Boolean,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Reads from a buffer into host memory.
            </summary>
            <param name="stream">
            The accelerator stream for asynchronous processing.
            </param>
            <param name="buffer">The source buffer to read from.</param>
            <param name="blockingRead">
            True, if the operation blocks until completion.
            </param>
            <param name="offset">The source offset in bytes.</param>
            <param name="size">The data size in bytes.</param>
            <param name="ptr">The target pointer in host memory.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.WriteBuffer(ILGPU.Runtime.AcceleratorStream,System.IntPtr,System.Boolean,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Writes to a buffer from host memory.
            </summary>
            <param name="stream">
            The accelerator stream for asynchronous processing.
            </param>
            <param name="buffer">The target buffer to write to.</param>
            <param name="blockingWrite">
            True, if the operation blocks until completion.
            </param>
            <param name="offset">The target offset in bytes.</param>
            <param name="size">The data size in bytes.</param>
            <param name="ptr">The source pointer in host memory.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.FillBuffer``1(ILGPU.Runtime.AcceleratorStream,System.IntPtr,``0,System.IntPtr,System.IntPtr)">
            <summary>
            Fills the given buffer with the specified pattern.
            </summary>
            <typeparam name="T">The data type used for filling.</typeparam>
            <param name="stream">
            The accelerator stream for asynchronous processing.
            </param>
            <param name="buffer">The target buffer to fill.</param>
            <param name="pattern">The pattern value used for filling.</param>
            <param name="offset">The target offset in bytes.</param>
            <param name="size">The size in bytes to fill.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.CopyBuffer(ILGPU.Runtime.AcceleratorStream,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Copies the contents of the source buffer into the target buffer.
            </summary>
            <param name="stream">
            The accelerator stream for asynchronous processing.
            </param>
            <param name="sourceBuffer">The source buffer.</param>
            <param name="targetBuffer">The target buffer.</param>
            <param name="sourceOffset">
            The source offset inside the source buffer.
            </param>
            <param name="targetOffset">
            The target offset inside the target buffer.
            </param>
            <param name="size">The size to copy in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.ReleaseEvent(System.IntPtr)">
            <summary>
            Releases the given event.
            </summary>
            <param name="event">The event.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.WaitForEvents(System.ReadOnlySpan{System.IntPtr})">
            <summary>
            Waits on the given events to complete.
            </summary>
            <param name="events">The events to wait on.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.EnqueueBarrier(System.IntPtr)">
             <summary>
             Enqueues a barrier command on the given command queue which waits for all
             previously enqueued commands to complete before it completes.
            
             This command blocks command execution, that is, any following commands
             enqueued after it do not execute until it completes. 
             </summary>
             <param name="queue">The command queue.</param>
             <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.EnqueueBarrierWithWaitList(System.IntPtr,System.IntPtr[],System.IntPtr*)">
            <summary>
            Enqueues a barrier command on the given command queue which waits for the
            list of events to complete, or if the list is empty, waits for all previously
            enqueued commands to complete before it completes.
            
            This command blocks command execution, that is, any following commands
            enqueued after it do not execute until it completes. 
            </summary>
            <param name="queue">The command queue.</param>
            <param name="waitEvents">The events to wait on.</param>
            <param name="resultEvent">The returned event object.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetEventInfo(System.IntPtr,ILGPU.Runtime.OpenCL.CLEventInfo,System.IntPtr,System.Void*)">
            <summary>
            Returns profiling information for the command associated with event,
            if profiling is enabled.
            </summary>
            <param name="event">The event object.</param>
            <param name="param_name">The information to query.</param>
            <param name="param_value_size">The size in bytes of parameter value.</param>
            <param name="param_value">
            Pointer to memory where the result being queried is returned.
            </param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLAPI.GetEventProfilingInfo(System.IntPtr,ILGPU.Runtime.OpenCL.CLProfilingInfo,System.UInt64@)">
            <summary>
            Returns profiling information for the command associated with event,
            if profiling is enabled.
            </summary>
            <param name="event">The event object.</param>
            <param name="profilingInfo">The profiling command to query.</param>
            <param name="nanoseconds">The time counter in nanoseconds.</param>
            <returns>The error code.</returns>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAPI.LibNameWindows">
            <summary>
            Represents the driver library name on Windows.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAPI.LibNameLinux">
            <summary>
            Represents the driver library name on Linux.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLAPI.LibNameMacOS">
            <summary>
            Represents the driver library name on MacOS.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAPI.CurrentAPI">
            <summary>
            Returns the driver API for the current platform.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLContextExtensions">
            <summary>
            OpenCL specific context extensions.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLContextExtensions.OpenCL(ILGPU.Context.Builder)">
            <summary>
            Enables all compatible OpenCL devices.
            </summary>
            <param name="builder">The builder instance.</param>
            <returns>The updated builder instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLContextExtensions.OpenCL(ILGPU.Context.Builder,System.Predicate{ILGPU.Runtime.OpenCL.CLDevice})">
            <summary>
            Enables all OpenCL devices.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="predicate">
            The predicate to include a given device.
            </param>
            <returns>The updated builder instance.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLContextExtensions.GetCLDevice(ILGPU.Context,System.Int32)">
            <summary>
            Gets the i-th registered OpenCL device.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="clDeviceIndex">
            The relative device index for the OpenCL device. 0 here refers to the first
            OpenCL device, 1 to the second, etc.
            </param>
            <returns>The registered OpenCL device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLContextExtensions.GetCLDevices(ILGPU.Context)">
            <summary>
            Gets all registered OpenCL devices.
            </summary>
            <param name="context">The ILGPU context.</param>
            <returns>All registered OpenCL devices.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLContextExtensions.CreateCLAccelerator(ILGPU.Context,System.Int32)">
            <summary>
            Creates a new OpenCL accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="clDeviceIndex">
            The relative device index for the OpenCL device. 0 here refers to the first
            OpenCL device, 1 to the second, etc.
            </param>
            <returns>The created OpenCL accelerator.</returns>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLDeviceVendor">
            <summary>
            Represents the major OpenCL device vendor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLDeviceVendor.AMD">
            <summary>
            Represents an AMD accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLDeviceVendor.Intel">
            <summary>
            Represents an Intel accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLDeviceVendor.Nvidia">
            <summary>
            Represents an NVIDIA accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLDeviceVendor.Other">
            <summary>
            Represents another OpenCL device vendor.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLDevice">
            <summary>
            Represents a single OpenCL device.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLDevice.MaxNumDevicesPerPlatform">
            <summary>
            The maximum number of devices per platform.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.GetDevices(System.Predicate{ILGPU.Runtime.OpenCL.CLDevice})">
            <summary>
            Detects OpenCL devices.
            </summary>
            <param name="predicate">
            The predicate to include a given devices.
            </param>
            <returns>All detected OpenCL devices.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.GetDevices(System.Predicate{ILGPU.Runtime.OpenCL.CLDevice},ILGPU.Runtime.DeviceRegistry)">
            <summary>
            Detects OpenCL devices.
            </summary>
            <param name="predicate">
            The predicate to include a given device.
            </param>
            <param name="registry">The registry to add all devices to.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.GetDevicesInternal(System.Predicate{ILGPU.Runtime.OpenCL.CLDevice},ILGPU.Runtime.DeviceRegistry)">
            <summary>
            Detects OpenCL devices.
            </summary>
            <param name="predicate">
            The predicate to include a given device.
            </param>
            <param name="registry">The registry to add all devices to.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            Constructs a new OpenCL accelerator reference.
            </summary>
            <param name="platformId">The OpenCL platform id.</param>
            <param name="deviceId">The OpenCL device id.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.InitPlatformInfo">
            <summary>
            Init general platform information.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.InitDeviceInfo">
            <summary>
            Init general device information.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.InitGridInfo">
            <summary>
            Init grid information.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.InitVendorAndWarpSizeInfo">
            <summary>
            Init vendor-specific features.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.InitMemoryInfo">
            <summary>
            Init memory information.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.InitCInfo">
            <summary>
            Init OpenCL C language information.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.InitExtensions">
            <summary>
            Init general OpenCL extensions.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLDevice.PlatformId">
            <summary>
            Returns the OpenCL platform id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLDevice.DeviceId">
            <summary>
            Returns the OpenCL device id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLDevice.PlatformName">
            <summary>
            Returns the associated platform name.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLDevice.PlatformVersion">
            <summary>
            Returns the associated platform version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLDevice.VendorName">
            <summary>
            Returns the associated vendor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLDevice.Vendor">
            <summary>
            Returns the main accelerator vendor type.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLDevice.DeviceType">
            <summary>
            Returns the OpenCL device type.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLDevice.DeviceVersion">
            <summary>
            Returns the OpenCL device version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLDevice.ClockRate">
            <summary>
            Returns the clock rate.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLDevice.CVersion">
            <summary>
            Returns the supported OpenCL C version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLDevice.CLStdVersion">
            <summary>
            Returns the OpenCL C version passed to -cl-std.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLDevice.Extensions">
            <summary>
            Returns all extensions.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLDevice.Capabilities">
            <summary>
            Returns the supported capabilities of this accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.CreateAccelerator(ILGPU.Context)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.CreateCLAccelerator(ILGPU.Context)">
            <summary>
            Creates a new OpenCL accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <returns>The created OpenCL accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.GetDeviceInfo``1(ILGPU.Runtime.OpenCL.CLDeviceInfoType,``0@)">
            <summary>
            Resolves device information as typed structure value of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="type">The information type.</param>
            <param name="value">The resolved value.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.GetDeviceInfo``1(ILGPU.Runtime.OpenCL.CLDeviceInfoType)">
            <summary>
            Resolves device information as typed structure value of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="type">The information type.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.HasExtension(System.String)">
            <summary>
            Returns true if the given extension is supported.
            </summary>
            <param name="extension">The extension to look for.</param>
            <returns>True, if the extension is supported.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.HasAllExtensions``1(``0)">
            <summary>
            Returns true if all of the given extensions are supported.
            </summary>
            <param name="extensions">The extensions to look for.</param>
            <returns>True, if all of the given extensions are supported.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.HasAnyExtension``1(``0)">
            <summary>
            Returns true if any of the given extensions is supported.
            </summary>
            <param name="extensions">The extensions to look for.</param>
            <returns>True, if any of the given extensions is supported.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.TryGetKernelSubGroupInfo``1(System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.CLKernelSubGroupInfoType,System.Int32,System.IntPtr*,``0@)">
            <summary>
            Tries to resolves kernel sub-group information as typed structure value of
            type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="kernel">The kernel.</param>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <param name="numInputs">The number of inputs.</param>
            <param name="inputs">All input values.</param>
            <param name="value">The resolved value.</param>
            <returns>True, if the value could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.TryGetKernelSubGroupInfo``1(System.IntPtr,System.IntPtr,ILGPU.Runtime.OpenCL.CLKernelSubGroupInfoType,System.IntPtr[],``0@)">
            <summary>
            Resolves kernel sub-group information as typed structure value of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="kernel">The kernel.</param>
            <param name="device">The device.</param>
            <param name="type">The information type.</param>
            <param name="inputs">All input values.</param>
            <param name="value">The resolved value.</param>
            <returns>True, if the value could be resolved.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.PrintHeader(System.IO.TextWriter)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.PrintGeneralInfo(System.IO.TextWriter)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDevice.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLDeviceVersion">
            <summary>
            Represents an OpenCL device version.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLDeviceVersion.CL10">
            <summary>
            The OpenCL device version 1.0.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLDeviceVersion.CL11">
            <summary>
            The OpenCL device version 1.1.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLDeviceVersion.CL12">
            <summary>
            The OpenCL device version 1.2.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLDeviceVersion.CL20">
            <summary>
            The OpenCL device version 2.0.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLDeviceVersion.CL21">
            <summary>
            The OpenCL device version 2.1.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLDeviceVersion.CL22">
            <summary>
            The OpenCL device version 2.2.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLDeviceVersion.CL30">
            <summary>
            The OpenCL device version 3.0.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLDeviceVersion.VersionRegex">
            <summary>
            The internal regex that is used to parse OpenCL versions.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDeviceVersion.TryParse(System.String,ILGPU.Runtime.OpenCL.CLDeviceVersion@)">
            <summary>
            Tries to parse the given string expression into an OpenCL C version.
            </summary>
            <param name="expression">The expression to parse.</param>
            <param name="version">The parsed version (if any).</param>
            <returns>
            True, if the given expression could be parsed into an OpenCL C version.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDeviceVersion.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new OpenCL device version.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLDeviceVersion.Major">
            <summary>
            The major OpenCL device Version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLDeviceVersion.Minor">
            <summary>
            The minor OpenCL device Version.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDeviceVersion.ToString">
            <summary>
            Returns the OpenCL device string representation.
            </summary>
            <returns>The string representation of this OpenCL device version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDeviceVersion.op_LessThan(ILGPU.Runtime.OpenCL.CLDeviceVersion,ILGPU.Runtime.OpenCL.CLDeviceVersion)">
            <summary>
            Returns true if the first version is smaller than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is smaller than the second one.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDeviceVersion.op_GreaterThan(ILGPU.Runtime.OpenCL.CLDeviceVersion,ILGPU.Runtime.OpenCL.CLDeviceVersion)">
            <summary>
            Returns true if the first version is greater than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is greater than the second one.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDeviceVersion.op_LessThanOrEqual(ILGPU.Runtime.OpenCL.CLDeviceVersion,ILGPU.Runtime.OpenCL.CLDeviceVersion)">
            <summary>
            Returns true if the first version is smaller than or equal to the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is smaller than the second one.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLDeviceVersion.op_GreaterThanOrEqual(ILGPU.Runtime.OpenCL.CLDeviceVersion,ILGPU.Runtime.OpenCL.CLDeviceVersion)">
            <summary>
            Returns true if the first version is greater than or equal to the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is greater than the second one.</returns>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLException">
            <summary>
            Represents an OpenCL exception that can be thrown by the OpenCL runtime.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.#ctor">
            <summary>
            Constructs a new OpenCL exception.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.#ctor(ILGPU.Runtime.OpenCL.CLError)">
            <summary>
            Constructs a new OpenCL exception.
            </summary>
            <param name="errorCode">The OpenCL runtime error.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.#ctor(System.String)">
            <summary>
            Constructs a new OpenCL exception.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new OpenCL exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.
            </param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLException.Error">
            <summary>
            Returns the error.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLException.AcceleratorType">
            <summary>
            Returns <see cref="F:ILGPU.Runtime.AcceleratorType.OpenCL"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.VerifyDisposed(System.Boolean,ILGPU.Runtime.OpenCL.CLError)">
            <summary>
            Checks the given status and throws an exception in case of an error if
            <paramref name="disposing"/> is set to true. If it is set to false, the
            exception will be suppressed in all cases.
            </summary>
            <param name="disposing">
            True, if this function has been called by the dispose method, false otherwise.
            </param>
            <param name="clStatus">The OpenCL error code to check.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLException.ThrowIfFailed(ILGPU.Runtime.OpenCL.CLError)">
            <summary>
            Checks the given status and throws an exception in case of an error.
            </summary>
            <param name="clStatus">The OpenCL error code to check.</param>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLKernel">
            <summary>
            Represents an OpenCL kernel that can be directly launched on an OpenCL device.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLKernel.LoadKernel(ILGPU.Runtime.OpenCL.CLAccelerator,System.String,System.String,ILGPU.Backends.OpenCL.CLCVersion,System.IntPtr@,System.IntPtr@,System.String@)">
            <summary>
            Loads the given OpenCL kernel.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="name">The name of the entry-point function.</param>
            <param name="source">The OpenCL source code.</param>
            <param name="version">The OpenCL C version.</param>
            <param name="programPtr">The created program pointer.</param>
            <param name="kernelPtr">The created kernel pointer.</param>
            <param name="errorLog">The error log (if any).</param>
            <returns>
            True, if the program and the kernel could be loaded successfully.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLKernel.LoadBinaryRepresentation(System.IntPtr)">
            <summary>
            Loads the binary representation of the given OpenCL kernel.
            </summary>
            <param name="program">The program pointer.</param>
            <returns>The binary representation of the underlying kernel.</returns>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLKernel.programPtr">
            <summary>
            Holds the pointer to the native OpenCL program in memory.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLKernel.kernelPtr">
            <summary>
            Holds the pointer to the native OpenCL kernel in memory.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLKernel.#ctor(ILGPU.Runtime.OpenCL.CLAccelerator,ILGPU.Backends.OpenCL.CLCompiledKernel,System.Reflection.MethodInfo)">
            <summary>
            Loads a compiled kernel into the given OpenCL context as kernel program.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="kernel">The source kernel.</param>
            <param name="launcher">The launcher method for the given kernel.</param>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLKernel.ProgramPtr">
            <summary>
            Returns the OpenCL program ptr.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLKernel.KernelPtr">
            <summary>
            Returns the OpenCL kernel ptr.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLKernel.LoadBinaryRepresentation">
            <summary>
            Loads the binary representation of the underlying OpenCL kernel.
            </summary>
            <returns>The binary representation of the underlying kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLKernel.DisposeAcceleratorObject(System.Boolean)">
            <summary>
            Disposes this OpenCL kernel.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLMemoryBuffer">
            <summary>
            Represents an unmanaged OpenCL buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer.CLMemSet``1(ILGPU.Runtime.OpenCL.CLStream,System.Byte,ILGPU.ArrayView{``0}@)">
            <summary>
            Performs an OpenCL memset operation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="stream">The CL stream to use (must not be null)</param>
            <param name="value">The value to write into the buffer.</param>
            <param name="targetView">The target view to write to.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer.CLCopy``1(ILGPU.Runtime.OpenCL.CLStream,ILGPU.ArrayView{``0}@,ILGPU.ArrayView{``0}@)">
            <summary>
            Performs an OpenCL copy operation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="stream">The CL stream to use (must not be null)</param>
            <param name="sourceView">The source view to copy from.</param>
            <param name="targetView">The target view to copy to.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer.#ctor(ILGPU.Runtime.OpenCL.CLAccelerator,System.Int64,System.Int32)">
            <summary>
            Constructs a new CL buffer.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="length">The length of this buffer.</param>
            <param name="elementSize">The element size.</param>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer.MemSet(ILGPU.Runtime.AcceleratorStream,System.Byte,ILGPU.ArrayView{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer.CopyFrom(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Byte}@,ILGPU.ArrayView{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer.CopyTo(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Byte}@,ILGPU.ArrayView{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLMemoryBuffer.DisposeAcceleratorObject(System.Boolean)">
            <summary>
            Disposes this OpenCL buffer.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLPlatformVersion">
            <summary>
            Represents an OpenCL platform version.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLPlatformVersion.CL10">
            <summary>
            The OpenCL API version 1.0.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLPlatformVersion.CL11">
            <summary>
            The OpenCL API version 1.1.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLPlatformVersion.CL12">
            <summary>
            The OpenCL API version 1.2.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLPlatformVersion.CL20">
            <summary>
            The OpenCL API version 2.0.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLPlatformVersion.CL21">
            <summary>
            The OpenCL API version 2.1.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLPlatformVersion.CL22">
            <summary>
            The OpenCL API version 2.2.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLPlatformVersion.CL30">
            <summary>
            The OpenCL API version 3.0.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLPlatformVersion.VersionRegex">
            <summary>
            The internal regex that is used to parse OpenCL versions.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLPlatformVersion.TryParse(System.String,ILGPU.Runtime.OpenCL.CLPlatformVersion@)">
            <summary>
            Tries to parse the given string expression into an OpenCL C version.
            </summary>
            <param name="expression">The expression to parse.</param>
            <param name="version">The parsed version (if any).</param>
            <returns>
            True, if the given expression could be parsed into an OpenCL C version.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLPlatformVersion.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new OpenCL platform version.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLPlatformVersion.Major">
            <summary>
            The major OpenCL platform Version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLPlatformVersion.Minor">
            <summary>
            The minor OpenCL platform Version.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLPlatformVersion.ToString">
            <summary>
            Returns the OpenCL platform string representation.
            </summary>
            <returns>The string representation of this OpenCL platform version.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLPlatformVersion.op_LessThan(ILGPU.Runtime.OpenCL.CLPlatformVersion,ILGPU.Runtime.OpenCL.CLPlatformVersion)">
            <summary>
            Returns true if the first version is smaller than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is smaller than the second one.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLPlatformVersion.op_GreaterThan(ILGPU.Runtime.OpenCL.CLPlatformVersion,ILGPU.Runtime.OpenCL.CLPlatformVersion)">
            <summary>
            Returns true if the first version is greater than the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is greater than the second one.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLPlatformVersion.op_LessThanOrEqual(ILGPU.Runtime.OpenCL.CLPlatformVersion,ILGPU.Runtime.OpenCL.CLPlatformVersion)">
            <summary>
            Returns true if the first version is smaller than or equal to the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is smaller than the second one.</returns>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLPlatformVersion.op_GreaterThanOrEqual(ILGPU.Runtime.OpenCL.CLPlatformVersion,ILGPU.Runtime.OpenCL.CLPlatformVersion)">
            <summary>
            Returns true if the first version is greater than or equal to the second one.
            </summary>
            <param name="first">The first version.</param>
            <param name="second">The second version.</param>
            <returns>True, if the first version is greater than the second one.</returns>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLProfilingMarker">
            <summary>
            Represents a point-in-time marker used in OpenCL profiling.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLProfilingMarker.EventPtr">
            <summary>
            The native event pointer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLProfilingMarker.Synchronize">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLProfilingMarker.MeasureFrom(ILGPU.Runtime.ProfilingMarker)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLProfilingMarker.DisposeAcceleratorObject(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLStream">
            <summary>
            Represents an OpenCL stream.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLStream.CommandQueue">
            <summary>
            Returns the native OpenCL command queue.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLStream.Synchronize">
            <summary cref="M:ILGPU.Runtime.AcceleratorStream.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLStream.AddProfilingMarkerInternal">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLStream.DisposeAcceleratorObject(System.Boolean)">
            <summary>
            Disposes this OpenCL stream.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLCapabilityContext">
            <summary>
            Represents capabilities available to OpenCL accelerators.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLCapabilityContext.Float16Extensions">
            <summary>
            Extensions for Float16.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLCapabilityContext.Float64Extensions">
            <summary>
            Extensions for Float64.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.OpenCL.CLCapabilityContext.Int64_AtomicsExtensions">
            <summary>
            Extensions for Int64_Atomics.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLCapabilityContext.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a new capability context of OpenCL accelerators.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLCapabilityContext.Extensions">
            <summary>
            List of OpenCL extensions.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLCapabilityContext.Float16">
            <summary>
            Supports Float16 (Half) data type.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLCapabilityContext.Float64">
            <summary>
            Supports Float64 (double) data type.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLCapabilityContext.GenericAddressSpace">
            <summary>
            Supports generic address space.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLCapabilityContext.Int64_Atomics">
            <summary>
            Supports 64-bit Atomics.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLCapabilityContext.SubGroups">
            <summary>
            Supports SubGroups.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLCapabilityContext.GetNotSupportedFloat16Exception">
            <summary>
            Creates exception for 'Float16'.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLCapabilityContext.GetNotSupportedFloat64Exception">
            <summary>
            Creates exception for 'Float64'.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLCapabilityContext.GetNotSupportedGenericAddressSpaceException">
            <summary>
            Creates exception for 'GenericAddressSpace'.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLCapabilityContext.GetNotSupportedInt64_AtomicsException">
            <summary>
            Creates exception for 'Int64_Atomics'.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.OpenCL.CLCapabilityContext.GetNotSupportedSubGroupsException">
            <summary>
            Creates exception for 'SubGroups'.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAPI_0.IsSupported">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAPI_1.IsSupported">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.OpenCL.CLAPI_NotSupported">
            <summary>
            The NotSupported implementation of the CLAPI wrapper.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.OpenCL.CLAPI_NotSupported.IsSupported">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.PageLockedArray`1">
            <summary>
            Represents a .Net array that is pinned with respect to the .Net GC and page
            locked in physical memory.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray`1.Span">
            <summary>
            Returns the span including all elements of the underlying arrays.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray`1.MemoryBuffer">
            <summary>
            Returns the memory buffer wrapper of the .Net array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray`1.Scope">
            <summary>
            Returns the page locking scope that includes the underlying array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray`1.ArrayView">
            <summary>
            Returns the array view of the underlying .Net array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray`1.Length">
            <summary>
            Returns the length of this array.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArray`1.Initialize(ILGPU.Runtime.Accelerator,System.IntPtr,System.Int64)">
            <summary>
            Initializes this page locked array.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="ptr">The pinned host pointer.</param>
            <param name="length">The total number of elements.</param>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArray`1.GetEnumerator">
            <summary>
            Returns the internal underlying <see cref="T:System.Span`1.Enumerator"/> enumerator.
            </summary>
            <returns>An enumerator to iterate over all elements in the array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArray`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.Runtime.PageLockedArray1D`1">
            <summary>
            Represents a page locked 1D array in memory.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
        </member>
        <member name="F:ILGPU.Runtime.PageLockedArray1D`1.Empty">
            <summary>
            Represents an empty 1D array.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArray1D`1.#ctor(ILGPU.Runtime.Accelerator,ILGPU.LongIndex1D)">
            <summary>
            Creates a new page-locked 1D array.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="extent">The number of elements to allocate.</param>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArray1D`1.#ctor(ILGPU.Runtime.Accelerator,ILGPU.LongIndex1D,System.Boolean)">
            <summary>
            Creates a new page-locked 1D array.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="extent">The number of elements to allocate.</param>
            <param name="uninitialized">True, to allocate an uninitialized array.</param>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray1D`1.Extent">
            <summary>
            Returns the extent of this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray1D`1.Span">
            <inheritdoc/>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray1D`1.Item(System.Int32)">
            <summary>
            Returns a reference to the i-th array element.
            </summary>
            <param name="index">The index of the array element.</param>
            <returns>The determined value reference.</returns>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray1D`1.Item(System.Int64)">
            <summary>
            Returns a reference to the i-th array element.
            </summary>
            <param name="index">The index of the array element.</param>
            <returns>The determined value reference.</returns>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArray1D`1.GetArray">
            <summary>
            Returns the underlying array.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.PageLockedArrayExtensions">
            <summary>
            Extension methods for page locked array types.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArrayExtensions.AllocatePageLocked1D``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex1D,System.Boolean)">
            <summary>
            Creates a page locked array in CPU memory optimized for GPU data exchange.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The associated accelerator.</param>
            <param name="extent">The number of elements.</param>
            <param name="uninitialized">True, to skip data initialization.</param>
            <returns>The allocated array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArrayExtensions.AllocatePageLocked1D``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex1D)">
            <summary>
            Creates a page locked array in CPU memory optimized for GPU data exchange.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The associated accelerator.</param>
            <param name="extent">The number of elements.</param>
            <returns>The allocated array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArrayExtensions.AllocatePageLocked2D``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex2D@)">
            <summary>
            Creates a page locked array in CPU memory optimized for GPU data exchange.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The associated accelerator.</param>
            <param name="extent">The number of elements.</param>
            <returns>The allocated array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArrayExtensions.AllocatePageLocked3D``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex3D@)">
            <summary>
            Creates a page locked array in CPU memory optimized for GPU data exchange.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The associated accelerator.</param>
            <param name="extent">The number of elements.</param>
            <returns>The allocated array.</returns>
        </member>
        <member name="T:ILGPU.Runtime.PageLockScope`1">
            <summary>
            Represents the scope/duration of a page lock.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.PageLockScope`1.#ctor(ILGPU.Runtime.Accelerator,System.Int64)">
            <summary>
            Constructs a page lock scope for the accelerator.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="numElements">The number of elements.</param>
        </member>
        <member name="P:ILGPU.Runtime.PageLockScope`1.AddrOfLockedObject">
            <summary>
            Returns the address of page locked object.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.PageLockScope`1.Length">
            <summary>
            Returns the number of elements.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.PageLockScope`1.LengthInBytes">
            <summary>
            Returns the length of the page locked memory in bytes.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.NullPageLockScope`1">
            <summary>
            A null/no-op page lock scope.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.NullPageLockScope`1.#ctor(ILGPU.Runtime.Accelerator,System.IntPtr,System.Int64)">
            <summary>
            Constructs a page lock scope for the accelerator.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="hostPtr">The host buffer pointer to page lock.</param>
            <param name="numElements">The number of elements in the buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.NullPageLockScope`1.DisposeAcceleratorObject(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.Runtime.ProfilingMarker">
            <summary>
            Represents a point-in-time marker used in profiling.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ProfilingMarker.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a profiling marker.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.ProfilingMarker.Synchronize">
            <summary>
            Waits for the profiling marker to complete.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ProfilingMarker.MeasureFrom(ILGPU.Runtime.ProfilingMarker)">
            <summary>
            Returns the elapsed time from this profiling marker to the given marker.
            </summary>
            <param name="marker">The comparison profiing marker.</param>
            <returns>The elapsed time.</returns>
            <remarks>Will block until the profiling markers have completed.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.ProfilingMarker.op_Subtraction(ILGPU.Runtime.ProfilingMarker,ILGPU.Runtime.ProfilingMarker)">
            <summary>
            Returns the elapsed time between two profiling markers.
            </summary>
            <param name="end">The end profiing marker.</param>
            <param name="start">The start profiing marker.</param>
            <returns>The elapsed time.</returns>
            <remarks>Will block until the profiling markers has completed.</remarks>
        </member>
        <member name="T:ILGPU.Runtime.ProfilingMarkers">
            <summary>
            Profiling marker extensions for accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ProfilingMarkers.AddProfilingMarker(ILGPU.Runtime.Accelerator)">
            <summary>
            Adds a profiling marker to the accelerator default stream.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.ISpecializationCacheArgs">
            <summary>
            The base interface for all automatically generated specialization argument
            structures that are used in combination with the
            <see cref="T:ILGPU.Runtime.SpecializationCache`3"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ISpecializationCacheArgs.GetSpecializedArg(System.Int32)">
            <summary>
            Returns the i-th argument as an untyped managed object.
            </summary>
            <param name="index">The argument index.</param>
            <returns>The resolved untyped managed object.</returns>
        </member>
        <member name="T:ILGPU.Runtime.SpecializationCache`3">
            <summary>
            A specialization cache to store and managed specialized kernel versions.
            </summary>
            <typeparam name="TLoader">The associated loader type.</typeparam>
            <typeparam name="TArgs">The arguments key type for caching.</typeparam>
            <typeparam name="TDelegate">The launcher delegate type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.SpecializationCache`3.#ctor(ILGPU.Runtime.Accelerator,ILGPU.IR.Method,`0,ILGPU.Backends.EntryPoints.EntryPointDescription,ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Constructs a new specialization cache.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="kernelMethod">The IR kernel method.</param>
            <param name="loader">The loader instance.</param>
            <param name="entry">The associated entry point.</param>
            <param name="specialization">The kernel specialization.</param>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.KernelMethod">
            <summary>
            Returns the associated raw kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.Loader">
            <summary>
            Returns the associated kernel loader.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.Entry">
            <summary>
            Returns the current entry point description.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.SpecializationCache`3.KernelSpecialization">
            <summary>
            Returns the current kernel specialization.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.SpecializationCache`3.CreateKernelWrapper(ILGPU.IR.IRContext,ILGPU.IR.Method,`1@)">
            <summary>
            Creates a kernel wrapper method that invokes the actual kernel method
            with specialized values.
            </summary>
            <param name="kernelContext">The current kernel context.</param>
            <param name="kernelMethod">The kernel method to invoke.</param>
            <param name="args">The target arguments.</param>
            <returns>The created IR method.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializationCache`3.SpecializeKernel(`1@)">
            <summary>
            Specializes a kernel with the given customized arguments.
            </summary>
            <param name="args">The argument structure.</param>
            <returns>The specialized kernel launcher.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializationCache`3.GetOrCreateKernel(`1)">
            <summary>
            Gets or creates a specialized kernel based on the arguments provided.
            </summary>
            <param name="args">The arguments used to specialize the kernel.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializationCache`3.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.SpecializedValue">
            <summary>
            Provides static helper functions for the structure
            <see cref="T:ILGPU.Runtime.SpecializedValue`1"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue.New``1(``0)">
            <summary>
            Creates a new specialized value instance.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="value">The value.</param>
            <returns>The new specialized value.</returns>
        </member>
        <member name="T:ILGPU.Runtime.SpecializedValue`1">
            <summary>
            Represents a dynamically specialized value that can be passed to a kernel.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.#ctor(`0)">
            <summary>
            Constructs a new specialized value.
            </summary>
            <param name="value">The underlying value to use.</param>
        </member>
        <member name="P:ILGPU.Runtime.SpecializedValue`1.Value">
            <summary>
            Gets or sets the underlying value.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.Equals(ILGPU.Runtime.SpecializedValue{`0})">
            <summary>
            Returns true if the other specialized value is equal to this value.
            </summary>
            <param name="other">The other specialized value.</param>
            <returns>
            True, if the other specialized value is equal to this value.
            </returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to this value.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to this value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.GetHashCode">
            <summary>
            Returns the hash code of this value.
            </summary>
            <returns>The hash code of this value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.ToString">
            <summary>
            Returns the string representation of this value.
            </summary>
            <returns>The string representation of this value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.op_Equality(ILGPU.Runtime.SpecializedValue{`0},ILGPU.Runtime.SpecializedValue{`0})">
            <summary>
            Returns true if the first and second value are the same.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>True, if the first and second value are the same.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.op_Inequality(ILGPU.Runtime.SpecializedValue{`0},ILGPU.Runtime.SpecializedValue{`0})">
            <summary>
            Returns true if the first and second value are not the same.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>True, if the first and second value are not the same.</returns>
        </member>
        <member name="M:ILGPU.Runtime.SpecializedValue`1.op_Implicit(ILGPU.Runtime.SpecializedValue{`0})~`0">
            <summary>
            Converts the given <see cref="T:ILGPU.Runtime.SpecializedValue`1"/> instance into its
            underlying value.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="T:ILGPU.Runtime.KernelLoaders">
            <summary>
            Contains extensions for convenient kernel loading of default kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``1(ILGPU.Runtime.Accelerator,System.Action{``0},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelSpecialization)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.KernelSpecialization,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given explicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="specialization">The kernel specialization.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32,ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implicitly-grouped kernel will be launched with the given group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate
            that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},ILGPU.Runtime.KernelInfo@)">
            <summary>
            Loads the given implicitly grouped kernel and returns a launcher delegate that uses the default accelerator stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="kernelInfo">Detailed information about the loaded kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer1D`2">
            <summary>
            Represents an opaque 1D memory buffer that can be used in the
            scope of ILGPU runtime kernels.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer1D`2.#ctor(ILGPU.Runtime.Accelerator,ILGPU.Runtime.ArrayView1D{`0,`1}@)">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="view">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer1D`2.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer1D`2.IntExtent">
            <summary>
            Returns the 32-bit extent of this view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer1D`2.AsContiguous">
            <summary>
            Returns a contiguous view to this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer1D`2.op_Explicit(ILGPU.Runtime.MemoryBuffer1D{`0,`1})~ILGPU.ArrayView{`0}">
            <summary>
            Explicitly converts this buffer into a contiguous array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer2D`2">
            <summary>
            Represents an opaque 2D memory buffer that can be used in the
            scope of ILGPU runtime kernels.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 2D stride type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`2.#ctor(ILGPU.Runtime.Accelerator,ILGPU.Runtime.ArrayView2D{`0,`1}@)">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="view">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`2.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`2.IntExtent">
            <summary>
            Returns the 32-bit extent of this view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`2.AsContiguous">
            <summary>
            Returns a contiguous view to this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`2.op_Explicit(ILGPU.Runtime.MemoryBuffer2D{`0,`1})~ILGPU.ArrayView{`0}">
            <summary>
            Explicitly converts this buffer into a contiguous array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer3D`2">
            <summary>
            Represents an opaque 3D memory buffer that can be used in the
            scope of ILGPU runtime kernels.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 3D stride type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`2.#ctor(ILGPU.Runtime.Accelerator,ILGPU.Runtime.ArrayView3D{`0,`1}@)">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="view">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`2.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`2.IntExtent">
            <summary>
            Returns the 32-bit extent of this view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`2.AsContiguous">
            <summary>
            Returns a contiguous view to this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`2.op_Explicit(ILGPU.Runtime.MemoryBuffer3D{`0,`1})~ILGPU.ArrayView{`0}">
            <summary>
            Explicitly converts this buffer into a contiguous array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="T:ILGPU.Runtime.PageLockedArray2D`1">
            <summary>
            Represents a page locked 2D array in memory.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
        </member>
        <member name="F:ILGPU.Runtime.PageLockedArray2D`1.Empty">
            <summary>
            Represents an empty 2D array.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArray2D`1.#ctor(ILGPU.Runtime.Accelerator,ILGPU.LongIndex2D@)">
            <summary>
            Creates a new page-locked 2D array.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="extent">The number of elements to allocate.</param>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray2D`1.Extent">
            <summary>
            Returns the extent of this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray2D`1.Span">
            <inheritdoc/>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Returns a reference to the i-th array element.
            </summary>
            <param name="x">
            The X index.
            </param>
            <param name="y">
            The Y index.
            </param>
            <returns>The determined value reference.</returns>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray2D`1.Item(System.Int64,System.Int64)">
            <summary>
            Returns a reference to the i-th array element.
            </summary>
            <param name="x">
            The X index.
            </param>
            <param name="y">
            The Y index.
            </param>
            <returns>The determined value reference.</returns>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArray2D`1.GetArray">
            <summary>
            Returns the underlying array.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArray2D`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.Runtime.PageLockedArray3D`1">
            <summary>
            Represents a page locked 3D array in memory.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
        </member>
        <member name="F:ILGPU.Runtime.PageLockedArray3D`1.Empty">
            <summary>
            Represents an empty 3D array.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArray3D`1.#ctor(ILGPU.Runtime.Accelerator,ILGPU.LongIndex3D@)">
            <summary>
            Creates a new page-locked 2D array.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="extent">The number of elements to allocate.</param>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray3D`1.Extent">
            <summary>
            Returns the extent of this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray3D`1.Span">
            <inheritdoc/>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray3D`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a reference to the i-th array element.
            </summary>
            <param name="x">
            The X index.
            </param>
            <param name="y">
            The Y index.
            </param>
            <param name="z">
            The Z index.
            </param>
            <returns>The determined value reference.</returns>
        </member>
        <member name="P:ILGPU.Runtime.PageLockedArray3D`1.Item(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns a reference to the i-th array element.
            </summary>
            <param name="x">
            The X index.
            </param>
            <param name="y">
            The Y index.
            </param>
            <param name="z">
            The Z index.
            </param>
            <returns>The determined value reference.</returns>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArray3D`1.GetArray">
            <summary>
            Returns the underlying array.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.PageLockedArray3D`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ILGPU.Runtime.CapabilityContext">
            <summary>
            Represents general capabilities available to all accelerators.
            </summary>
        </member>
        <member name="T:ILGPU.SharedMemory">
            <summary>
            Contains methods to allocate and managed shared memory.
            </summary>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate``1">
            <summary>
            Allocates a single element in shared memory.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <returns>An allocated element in shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate``1(System.Int32)">
            <summary>
            Allocates a chunk of shared memory with the specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.GetDynamic``1">
            <summary>
            Gets a chunk of dynamically allocated shared memory as typed memory view
            with the element type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <returns>A view to a dynamically allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate1D``1(ILGPU.Index1D)">
            <summary>
            Allocates a 1D chunk of shared memory with the specified number
            of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent of the buffer.</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate1D``2(ILGPU.Index1D,``1)">
            <summary>
            Allocates a 1D chunk of shared memory with the
            specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The stride type.</typeparam>
            <param name="extent">The extent of the buffer.</param>
            <param name="stride">The buffer stride.</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate2D``2(ILGPU.Index2D,``1)">
            <summary>
            Allocates a 2D chunk of shared memory with the
            specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The stride type.</typeparam>
            <param name="extent">The extent of the buffer.</param>
            <param name="stride">The buffer stride.</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate3D``2(ILGPU.Index3D,``1)">
            <summary>
            Allocates a 3D chunk of shared memory with the
            specified number of elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The stride type.</typeparam>
            <param name="extent">The extent of the buffer.</param>
            <param name="stride">The buffer stride.</param>
            <returns>An allocated region of shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate2DDenseX``1(ILGPU.Index2D@)">
            <summary>
            Allocates a 2D chunk of shared memory with X
            as the leading dimension.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The number of elements to allocate.</param>
            <returns>An allocated 2D buffer on shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate2DDenseY``1(ILGPU.Index2D@)">
            <summary>
            Allocates a 2D chunk of shared memory with Y
            as the leading dimension.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The number of elements to allocate.</param>
            <returns>An allocated 2D buffer on shared memory.</returns>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate3DDenseXY``1(ILGPU.Index3D@)">
            <summary>
            Allocates a 3D chunk of shared memory with XY 
            as the leading dimensions.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The number of elements to allocate.</param>
            <returns>An allocated 3D buffer on shared memory.</returns>
            <remarks>
            Since XY are the leading dimension, combined dimension 
            (multiplied sizes) must be less or equal to <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:ILGPU.SharedMemory.Allocate3DDenseZY``1(ILGPU.Index3D@)">
            <summary>
            Allocates a 3D chunk of shared memory with ZY 
            as the leading dimensions.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The number of elements to allocate.</param>
            <returns>An allocated 3D buffer on shared memory.</returns>
            <remarks>
            Since ZY are the leading dimension, combined dimension 
            (multiplied sizes) must be less or equal to <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="T:ILGPU.IStride`1">
            <summary>
            A generic stride description based on the given <typeparamref name="TIndex"/>
            type.
            </summary>
            <typeparam name="TIndex">The underlying n-D index type.</typeparam>
        </member>
        <member name="P:ILGPU.IStride`1.StrideExtent">
            <summary>
            Returns the associated stride extent.
            </summary>
        </member>
        <member name="M:ILGPU.IStride`1.To1DStride">
            <summary>
            Converts this stride instance into a general 1D stride.
            </summary>
            <returns>The general 1D stride.</returns>
        </member>
        <member name="T:ILGPU.IStride`2">
            <summary>
            A generic stride based on 32-bit and 64-bit index information.
            </summary>
            <typeparam name="TIndex">The actual 32-bit stride index.</typeparam>
            <typeparam name="TLongIndex">The 64-bit stride index.</typeparam>
        </member>
        <member name="M:ILGPU.IStride`2.ComputeElementIndex(`0)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.IStride`2.ComputeElementIndex(`1)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.IStride`2.ComputeElementIndexChecked(`0,`0)">
            <summary>
            Computes the linear 32-bit element address using the given index while
            verifying that the given index is within the bounds of the specified extent.
            </summary>
            <param name="index">The dimension for the index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.IStride`2.ComputeElementIndexChecked(`1,`1)">
            <summary>
            Computes the linear 64-bit element address using the given index while
            verifying that the given index is within the bounds of the specified extent.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.IStride`2.ReconstructFromElementIndex(System.Int32)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.IStride`2.ReconstructFromElementIndex(System.Int64)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.IStride`2.ComputeBufferLength(`0)">
            <summary>
            Computes the 32-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 32-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.IStride`2.ComputeBufferLength(`1)">
            <summary>
            Computes the 64-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 64-bit length of a required allocation.</returns>
        </member>
        <member name="T:ILGPU.ICastableStride`3">
            <summary>
            A stride that can be cast using a <see cref="T:ILGPU.IStrideCastContext"/>.
            </summary>
            <typeparam name="TIndex">The actual 32-bit stride index.</typeparam>
            <typeparam name="TLongIndex">The 64-bit stride index.</typeparam>
            <typeparam name="TStride">
            The stride type implementing this interface.
            </typeparam>
        </member>
        <member name="M:ILGPU.ICastableStride`3.Cast``1(``0@,`1@)">
            <summary>
            Computes a new extent and stride based on the given cast context. The context
            thereby adjusts extent information which can in turn be based on the element
            size of the source view and the element size of the target element type.
            </summary>
            <typeparam name="TContext">The cast context type.</typeparam>
            <param name="context">
            The cast context to adjust element information.
            </param>
            <param name="extent">The source extent.</param>
            <returns>The adjusted extent and stride information.</returns>
        </member>
        <member name="T:ILGPU.IStrideCastContext">
            <summary>
            A generic cast context for <see cref="M:ILGPU.ICastableStride`3.Cast``1(``0@,`1@)"/> operations.
            </summary>
        </member>
        <member name="M:ILGPU.IStrideCastContext.ComputeNewExtent(System.Int32)">
            <summary>
            Computes an adjusted extent taking source and target element size information
            into account (based on 32bit).
            </summary>
            <param name="sourceExtent">The source extent.</param>
            <returns>The adjusted extent.</returns>
        </member>
        <member name="M:ILGPU.IStrideCastContext.ComputeNewExtent(System.Int64)">
            <summary>
            Computes an adjusted extent taking source and target element size information
            into account (based on 64bit).
            </summary>
            <param name="sourceExtent">The source extent.</param>
            <returns>The adjusted extent.</returns>
        </member>
        <member name="T:ILGPU.StrideExtensions">
            <summary>
            Contains helper functions for generic <see cref="T:ILGPU.IStride`1"/> types.
            </summary>
        </member>
        <member name="M:ILGPU.StrideExtensions.GetPitchedLeadingDimension``1(System.Int64,System.Int32)">
            <summary>
            Determines a pitched leading dimension.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="leadingDimension">The size of the leading dimension.</param>
            <param name="alignmentInBytes">
            The alignment in bytes of the leading dimension.
            </param>
            <returns>The pitched leading dimension.</returns>
        </member>
        <member name="T:ILGPU.StrideExtensions.ElementSizeCastContext">
            <summary>
            An element-size based cast context.
            </summary>
        </member>
        <member name="M:ILGPU.StrideExtensions.ElementSizeCastContext.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new element-size context.
            </summary>
            <param name="elementSize">The source element size.</param>
            <param name="newElementSize">The target element size.</param>
        </member>
        <member name="P:ILGPU.StrideExtensions.ElementSizeCastContext.ElementSize">
            <summary>
            Returns the source element size.
            </summary>
        </member>
        <member name="P:ILGPU.StrideExtensions.ElementSizeCastContext.NewElementSize">
            <summary>
            Returns the target element size.
            </summary>
        </member>
        <member name="M:ILGPU.StrideExtensions.ElementSizeCastContext.ComputeNewExtent(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.StrideExtensions.ElementSizeCastContext.ComputeNewExtent(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.StrideExtensions.CreateCastContext(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:ILGPU.StrideExtensions.ElementSizeCastContext"/>.
            </summary>
            <param name="elementSize">The source element size.</param>
            <param name="newElementSize">The target element size.</param>
            <returns>The created cast context.</returns>
        </member>
        <member name="T:ILGPU.Stride1D">
            <summary>
            Container class for all 1D strides.
            </summary>
        </member>
        <member name="T:ILGPU.Stride1D.Dense">
            <summary>
            A dense stride without padding.
            </summary>
        </member>
        <member name="M:ILGPU.Stride1D.Dense.Cast``1(``0@,ILGPU.LongIndex1D@)">
            <summary>
            Computes a new extent and stride based on the given cast context.
            </summary>
            <typeparam name="TContext">The cast context type.</typeparam>
            <param name="context">
            The cast context to adjust element information.
            </param>
            <param name="extent">The source extent.</param>
            <returns>The adjusted extent and stride information.</returns>
        </member>
        <member name="P:ILGPU.Stride1D.Dense.StrideExtent">
            <summary>
            Returns a constant stride of Index1D.One;
            </summary>
        </member>
        <member name="P:ILGPU.Stride1D.Dense.XStride">
            <summary>
            Returns the constant 1.
            </summary>
        </member>
        <member name="M:ILGPU.Stride1D.Dense.ComputeElementIndex(ILGPU.Index1D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Dense.ComputeElementIndex(ILGPU.LongIndex1D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Dense.ComputeElementIndexChecked(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Computes the linear 32-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for the index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Dense.ComputeElementIndexChecked(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Computes the linear 64-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Dense.ReconstructFromElementIndex(System.Int32)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Dense.ReconstructFromElementIndex(System.Int64)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Dense.ComputeBufferLength(ILGPU.Index1D)">
            <summary>
            Computes the 32-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 32-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Dense.ComputeBufferLength(ILGPU.LongIndex1D)">
            <summary>
            Computes the 64-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 64-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Dense.AsGeneral">
            <summary>
            Returns this stride as general 1D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride1D.Dense.To1DStride">
            <summary>
            Converts this stride instance into a general 1D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride1D.Dense.ToString">
            <summary>
            Returns the string representation of this stride.
            </summary>
            <returns>The string representation of this stride.</returns>
        </member>
        <member name="T:ILGPU.Stride1D.Infinite">
            <summary>
            An infinite stride.
            </summary>
        </member>
        <member name="P:ILGPU.Stride1D.Infinite.StrideExtent">
            <summary>
            Returns a constant stride of Index1D.Zero;
            </summary>
        </member>
        <member name="P:ILGPU.Stride1D.Infinite.XStride">
            <summary>
            Returns the constant 0.
            </summary>
        </member>
        <member name="M:ILGPU.Stride1D.Infinite.ComputeElementIndex(ILGPU.Index1D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Infinite.ComputeElementIndex(ILGPU.LongIndex1D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Infinite.ComputeElementIndexChecked(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Computes the linear 32-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for the index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Infinite.ComputeElementIndexChecked(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Computes the linear 64-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Infinite.ReconstructFromElementIndex(System.Int32)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Infinite.ReconstructFromElementIndex(System.Int64)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Infinite.ComputeBufferLength(ILGPU.Index1D)">
            <summary>
            Computes the 32-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 32-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Infinite.ComputeBufferLength(ILGPU.LongIndex1D)">
            <summary>
            Computes the 64-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 64-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.Infinite.AsGeneral">
            <summary>
            Returns this stride as general 1D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride1D.Infinite.To1DStride">
            <summary>
            Converts this stride instance into a general 1D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride1D.Infinite.ToString">
            <summary>
            Returns the string representation of this stride.
            </summary>
            <returns>The string representation of this stride.</returns>
        </member>
        <member name="T:ILGPU.Stride1D.General">
            <summary>
            A general 1D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride1D.General.#ctor(ILGPU.Index1D)">
            <summary>
            Creates a new general 1D stride.
            </summary>
            <param name="stride">The underlying stride information.</param>
        </member>
        <member name="P:ILGPU.Stride1D.General.StrideExtent">
            <summary>
            Returns the associated stride extent.
            </summary>
        </member>
        <member name="P:ILGPU.Stride1D.General.XStride">
            <summary>
            Returns the X-dimension stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride1D.General.ComputeElementIndex(ILGPU.Index1D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.General.ComputeElementIndex(ILGPU.LongIndex1D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.General.ComputeElementIndexChecked(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Computes the linear 32-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for the index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.General.ComputeElementIndexChecked(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Computes the linear 64-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.General.ReconstructFromElementIndex(System.Int32)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.General.ReconstructFromElementIndex(System.Int64)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.General.ComputeBufferLength(ILGPU.Index1D)">
            <summary>
            Computes the 32-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 32-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.General.ComputeBufferLength(ILGPU.LongIndex1D)">
            <summary>
            Computes the 64-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 64-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.General.AsGeneral">
            <summary>
            Returns this stride as general 1D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride1D.General.To1DStride">
            <summary>
            Converts this stride instance into a general 1D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride1D.General.ToString">
            <summary>
            Returns the string representation of this stride.
            </summary>
            <returns>The string representation of this stride.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.ComputeElementIndex``1(``0,ILGPU.Index1D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.ComputeElementIndex``1(``0,ILGPU.LongIndex1D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.ComputeElementIndexChecked``1(``0,ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Computes the linear 32-bit element address using the given index while
            verifying that the given index is within the bounds of the specified extent.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="index">The dimension for the index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.ComputeElementIndexChecked``1(``0,ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Computes the linear 64-bit element address using the given index while
            verifying that the given index is within the bounds of the specified extent.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.ComputeBufferLength``1(``0,ILGPU.Index1D)">
            <summary>
            Computes the 32-bit length of a required allocation.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="extent">The extent to allocate.</param>
            <returns>The 32-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride1D.ComputeBufferLength``1(``0,ILGPU.LongIndex1D)">
            <summary>
            Computes the 64-bit length of a required allocation.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="extent">The extent to allocate.</param>
            <returns>The 64-bit length of a required allocation.</returns>
        </member>
        <member name="T:ILGPU.Stride2D">
            <summary>
            Container class for all 2D strides.
            </summary>
        </member>
        <member name="T:ILGPU.Stride2D.DenseX">
            <summary>
            A 2D dense X stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.FromExtent(ILGPU.Index2D)">
            <summary>
            Constructs a 2D stride from the given 2D extent.
            </summary>
            <param name="extent">The index to use.</param>
            <returns>The constructed stride.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.FromExtent(ILGPU.LongIndex2D)">
            <summary>
            Constructs a 2D stride from the given 2D extent.
            </summary>
            <param name="extent">The index to use.</param>
            <returns>The constructed stride.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.ComputeElementIndex(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Computes the linear 32-bit element address using the given index and
            extent information.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.ComputeElementIndex(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Computes the linear 64-bit element address using the given index
            extent information.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.ReconstructFromElementIndex(System.Int32,ILGPU.Index2D)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.ReconstructFromElementIndex(System.Int64,ILGPU.LongIndex2D)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.#ctor(System.Int32)">
            <summary>
            Constructs a new dense X stride.
            </summary>
            <param name="yStride">The stride of the Y dimension.</param>
        </member>
        <member name="P:ILGPU.Stride2D.DenseX.XStride">
            <summary>
            Returns the constant 1.
            </summary>
        </member>
        <member name="P:ILGPU.Stride2D.DenseX.YStride">
            <summary>
            Returns the Y-dimension stride.
            </summary>
        </member>
        <member name="P:ILGPU.Stride2D.DenseX.StrideExtent">
            <summary>
            Returns the associated stride extent of the form (1, YStride).
            </summary>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.ComputeElementIndex(ILGPU.Index2D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.ComputeElementIndex(ILGPU.LongIndex2D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.ComputeElementIndexChecked(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Computes the linear 32-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for the index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.ComputeElementIndexChecked(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Computes the linear 64-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.ReconstructFromElementIndex(System.Int32)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.ReconstructFromElementIndex(System.Int64)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.ComputeBufferLength(ILGPU.Index2D)">
            <summary>
            Computes the 32-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 32-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.ComputeBufferLength(ILGPU.LongIndex2D)">
            <summary>
            Computes the 64-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 64-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.Cast``1(``0@,ILGPU.LongIndex2D@)">
            <summary>
            Computes a new extent and stride based on the given cast context.
            </summary>
            <typeparam name="TContext">The cast context type.</typeparam>
            <param name="context">
            The cast context to adjust element information.
            </param>
            <param name="extent">The source extent.</param>
            <returns>The adjusted extent and stride information.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.AsGeneral">
            <summary>
            Returns this stride as general 2D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.To1DStride">
            <summary>
            Converts this stride instance into a general 1D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride2D.DenseX.ToString">
            <summary>
            Returns the string representation of this stride.
            </summary>
            <returns>The string representation of this stride.</returns>
        </member>
        <member name="T:ILGPU.Stride2D.DenseY">
            <summary>
            A 2D dense Y stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.FromExtent(ILGPU.Index2D)">
            <summary>
            Constructs a 2D stride from the given 2D extent.
            </summary>
            <param name="extent">The index to use.</param>
            <returns>The constructed stride.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.FromExtent(ILGPU.LongIndex2D)">
            <summary>
            Constructs a 2D stride from the given 2D extent.
            </summary>
            <param name="extent">The index to use.</param>
            <returns>The constructed stride.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.ComputeElementIndex(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Computes the linear 32-bit element address using the given index and
            extent information.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.ComputeElementIndex(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Computes the linear 64-bit element address using the given index
            extent information.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.ReconstructFromElementIndex(System.Int32,ILGPU.Index2D)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.ReconstructFromElementIndex(System.Int64,ILGPU.LongIndex2D)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.#ctor(System.Int32)">
            <summary>
            Constructs a new dense Y stride.
            </summary>
            <param name="xStride">The stride of the X dimension.</param>
        </member>
        <member name="P:ILGPU.Stride2D.DenseY.XStride">
            <summary>
            Returns the X-dimension stride.
            </summary>
        </member>
        <member name="P:ILGPU.Stride2D.DenseY.YStride">
            <summary>
            Returns the constant 1.
            </summary>
        </member>
        <member name="P:ILGPU.Stride2D.DenseY.StrideExtent">
            <summary>
            Returns the associated stride extent of the form (XStride, 1).
            </summary>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.ComputeElementIndex(ILGPU.Index2D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.ComputeElementIndex(ILGPU.LongIndex2D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.ComputeElementIndexChecked(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Computes the linear 32-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for the index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.ComputeElementIndexChecked(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Computes the linear 64-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.ReconstructFromElementIndex(System.Int32)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.ReconstructFromElementIndex(System.Int64)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.ComputeBufferLength(ILGPU.Index2D)">
            <summary>
            Computes the 32-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 32-bit length of a required allocation.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.ComputeBufferLength(ILGPU.LongIndex2D)">
            <summary>
            Computes the 64-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 64-bit length of a required allocation.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.Cast``1(``0@,ILGPU.LongIndex2D@)">
            <summary>
            Computes a new extent and stride based on the given cast context.
            </summary>
            <typeparam name="TContext">The cast context type.</typeparam>
            <param name="context">
            The cast context to adjust element information.
            </param>
            <param name="extent">The source extent.</param>
            <returns>The adjusted extent and stride information.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.AsGeneral">
            <summary>
            Returns this stride as general 2D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.To1DStride">
            <summary>
            Converts this stride instance into a general 1D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride2D.DenseY.ToString">
            <summary>
            Returns the string representation of this stride.
            </summary>
            <returns>The string representation of this stride.</returns>
        </member>
        <member name="T:ILGPU.Stride2D.Infinite">
            <summary>
            An infinite stride.
            </summary>
        </member>
        <member name="P:ILGPU.Stride2D.Infinite.StrideExtent">
            <summary>
            Returns a constant stride of Index2D.Zero;
            </summary>
        </member>
        <member name="P:ILGPU.Stride2D.Infinite.XStride">
            <summary>
            Returns the constant 0.
            </summary>
        </member>
        <member name="P:ILGPU.Stride2D.Infinite.YStride">
            <summary>
            Returns the constant 0.
            </summary>
        </member>
        <member name="M:ILGPU.Stride2D.Infinite.ComputeElementIndex(ILGPU.Index2D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.Infinite.ComputeElementIndex(ILGPU.LongIndex2D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.Infinite.ComputeElementIndexChecked(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Computes the linear 32-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for the index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.Infinite.ComputeElementIndexChecked(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Computes the linear 64-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.Infinite.ReconstructFromElementIndex(System.Int32)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.Infinite.ReconstructFromElementIndex(System.Int64)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.Infinite.ComputeBufferLength(ILGPU.Index2D)">
            <summary>
            Computes the 32-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 32-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.Infinite.ComputeBufferLength(ILGPU.LongIndex2D)">
            <summary>
            Computes the 64-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 64-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.Infinite.AsGeneral">
            <summary>
            Returns this stride as general 2D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride2D.Infinite.To1DStride">
            <summary>
            Converts this stride instance into a general 1D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride2D.Infinite.ToString">
            <summary>
            Returns the string representation of this stride.
            </summary>
            <returns>The string representation of this stride.</returns>
        </member>
        <member name="T:ILGPU.Stride2D.GetLeadingDimensionSize">
            <summary>
            Returns the size of the leading dimension based on the given extent.
            </summary>
        </member>
        <member name="T:ILGPU.Stride2D.BuildStride`1">
            <summary>
            Builds a stride based on the given extent and the size of the leading
            dimension.
            </summary>
        </member>
        <member name="T:ILGPU.Stride2D.General">
            <summary>
            A general 2D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride2D.General.#ctor(ILGPU.Index2D)">
            <summary>
            Creates a new general 2D stride.
            </summary>
            <param name="stride">The underlying stride information.</param>
        </member>
        <member name="P:ILGPU.Stride2D.General.StrideExtent">
            <summary>
            Returns the associated stride extent.
            </summary>
        </member>
        <member name="P:ILGPU.Stride2D.General.XStride">
            <summary>
            Returns the X-dimension stride.
            </summary>
        </member>
        <member name="P:ILGPU.Stride2D.General.YStride">
            <summary>
            Returns the Y-dimension stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride2D.General.ComputeElementIndex(ILGPU.Index2D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.General.ComputeElementIndex(ILGPU.LongIndex2D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.General.ComputeElementIndexChecked(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Computes the linear 32-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for the index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.General.ComputeElementIndexChecked(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Computes the linear 64-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.General.ReconstructFromElementIndex(System.Int32)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.General.ReconstructFromElementIndex(System.Int64)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.General.ComputeBufferLength(ILGPU.Index2D)">
            <summary>
            Computes the 32-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 32-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.General.ComputeBufferLength(ILGPU.LongIndex2D)">
            <summary>
            Computes the 64-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 64-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.General.AsGeneral">
            <summary>
            Returns this stride as general 2D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride2D.General.To1DStride">
            <summary>
            Converts this stride instance into a general 1D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride2D.General.ToString">
            <summary>
            Returns the string representation of this stride.
            </summary>
            <returns>The string representation of this stride.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.ComputeElementIndex``1(``0,ILGPU.Index2D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.ComputeElementIndex``1(``0,ILGPU.LongIndex2D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.ComputeElementIndexChecked``1(``0,ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Computes the linear 32-bit element address using the given index while
            verifying that the given index is within the bounds of the specified extent.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="index">The dimension for the index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.ComputeElementIndexChecked``1(``0,ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Computes the linear 64-bit element address using the given index while
            verifying that the given index is within the bounds of the specified extent.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.ComputeBufferLength``1(``0,ILGPU.Index2D)">
            <summary>
            Computes the 32-bit length of a required allocation.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="extent">The extent to allocate.</param>
            <returns>The 32-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride2D.ComputeBufferLength``1(``0,ILGPU.LongIndex2D)">
            <summary>
            Computes the 64-bit length of a required allocation.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="extent">The extent to allocate.</param>
            <returns>The 64-bit length of a required allocation.</returns>
        </member>
        <member name="T:ILGPU.Stride3D">
            <summary>
            Container class for all 3D strides.
            </summary>
        </member>
        <member name="T:ILGPU.Stride3D.DenseXY">
            <summary>
            A 3D dense XY stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.FromExtent(ILGPU.Index3D)">
            <summary>
            Constructs a 3D stride from the given 3D extent.
            </summary>
            <param name="extent">The index to use.</param>
            <returns>The constructed stride.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.FromExtent(ILGPU.LongIndex3D)">
            <summary>
            Constructs a 3D stride from the given 3D extent.
            </summary>
            <param name="extent">The index to use.</param>
            <returns>The constructed stride.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.ComputeElementIndex(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Computes the linear 32-bit element address using the given index and
            extent information.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.ComputeElementIndex(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Computes the linear 64-bit element address using the given index
            extent information.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.ReconstructFromElementIndex(System.Int32,ILGPU.Index3D)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.ReconstructFromElementIndex(System.Int64,ILGPU.LongIndex3D)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new dense XY stride.
            </summary>
            <param name="yStride">The stride of the Y dimension.</param>
            <param name="zStride">The stride of the Z dimension.</param>
        </member>
        <member name="P:ILGPU.Stride3D.DenseXY.XStride">
            <summary>
            Returns the constant 1.
            </summary>
        </member>
        <member name="P:ILGPU.Stride3D.DenseXY.YStride">
            <summary>
            Returns the Y-dimension stride.
            </summary>
        </member>
        <member name="P:ILGPU.Stride3D.DenseXY.ZStride">
            <summary>
            Returns the Z-dimension stride.
            </summary>
        </member>
        <member name="P:ILGPU.Stride3D.DenseXY.StrideExtent">
            <summary>
            Returns the associated stride extent of the form (1, YStride, ZStride).
            </summary>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.ComputeElementIndex(ILGPU.Index3D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.ComputeElementIndex(ILGPU.LongIndex3D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.ComputeElementIndexChecked(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Computes the linear 32-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for the index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.ComputeElementIndexChecked(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Computes the linear 64-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.ReconstructFromElementIndex(System.Int32)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.ReconstructFromElementIndex(System.Int64)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.ComputeBufferLength(ILGPU.Index3D)">
            <summary>
            Computes the 32-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 3264-bit length of a required allocation.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.ComputeBufferLength(ILGPU.LongIndex3D)">
            <summary>
            Computes the 64-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 64-bit length of a required allocation.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.Cast``1(``0@,ILGPU.LongIndex3D@)">
            <summary>
            Computes a new extent and stride based on the given cast context.
            </summary>
            <typeparam name="TContext">The cast context type.</typeparam>
            <param name="context">
            The cast context to adjust element information.
            </param>
            <param name="extent">The source extent.</param>
            <returns>The adjusted extent and stride information.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.AsGeneral">
            <summary>
            Returns this stride as general 3D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.To1DStride">
            <summary>
            Converts this stride instance into a general 1D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride3D.DenseXY.ToString">
            <summary>
            Returns the string representation of this stride.
            </summary>
            <returns>The string representation of this stride.</returns>
        </member>
        <member name="T:ILGPU.Stride3D.DenseZY">
            <summary>
            A 3D dense ZY stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.FromExtent(ILGPU.Index3D)">
            <summary>
            Constructs a 3D stride from the given 3D extent.
            </summary>
            <param name="extent">The index to use.</param>
            <returns>The constructed stride.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.FromExtent(ILGPU.LongIndex3D)">
            <summary>
            Constructs a 3D stride from the given 3D extent.
            </summary>
            <param name="extent">The index to use.</param>
            <returns>The constructed stride.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.ComputeElementIndex(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Computes the linear 32-bit element address using the given index and
            extent information.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.ComputeElementIndex(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Computes the linear 64-bit element address using the given index
            extent information.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.ReconstructFromElementIndex(System.Int32,ILGPU.Index3D)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.ReconstructFromElementIndex(System.Int64,ILGPU.LongIndex3D)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <param name="extent">The extent to be used.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new dense ZY stride.
            </summary>
            <param name="xStride">The stride of the X dimension.</param>
            <param name="yStride">The stride of the Y dimension.</param>
        </member>
        <member name="P:ILGPU.Stride3D.DenseZY.XStride">
            <summary>
            Returns the X-dimension stride.
            </summary>
        </member>
        <member name="P:ILGPU.Stride3D.DenseZY.YStride">
            <summary>
            Returns the Y-dimension stride.
            </summary>
        </member>
        <member name="P:ILGPU.Stride3D.DenseZY.ZStride">
            <summary>
            Returns the constant 1.
            </summary>
        </member>
        <member name="P:ILGPU.Stride3D.DenseZY.StrideExtent">
            <summary>
            Returns the associated stride extent of the form (XStride, YStride, 1).
            </summary>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.ComputeElementIndex(ILGPU.Index3D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.ComputeElementIndex(ILGPU.LongIndex3D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.ComputeElementIndexChecked(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Computes the linear 32-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for the index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.ComputeElementIndexChecked(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Computes the linear 64-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.ReconstructFromElementIndex(System.Int32)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.ReconstructFromElementIndex(System.Int64)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.ComputeBufferLength(ILGPU.Index3D)">
            <summary>
            Computes the 32-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 32-bit length of a required allocation.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.ComputeBufferLength(ILGPU.LongIndex3D)">
            <summary>
            Computes the 64-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 64-bit length of a required allocation.</returns>
            <remarks>This method is not supported on accelerators.</remarks>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.Cast``1(``0@,ILGPU.LongIndex3D@)">
            <summary>
            Computes a new extent and stride based on the given cast context.
            </summary>
            <typeparam name="TContext">The cast context type.</typeparam>
            <param name="context">
            The cast context to adjust element information.
            </param>
            <param name="extent">The source extent.</param>
            <returns>The adjusted extent and stride information.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.AsGeneral">
            <summary>
            Returns this stride as general 3D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.To1DStride">
            <summary>
            Converts this stride instance into a general 1D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride3D.DenseZY.ToString">
            <summary>
            Returns the string representation of this stride.
            </summary>
            <returns>The string representation of this stride.</returns>
        </member>
        <member name="T:ILGPU.Stride3D.Infinite">
            <summary>
            An infinite stride.
            </summary>
        </member>
        <member name="P:ILGPU.Stride3D.Infinite.StrideExtent">
            <summary>
            Returns a constant stride of Index3D.Zero;
            </summary>
        </member>
        <member name="P:ILGPU.Stride3D.Infinite.XStride">
            <summary>
            Returns the constant 0.
            </summary>
        </member>
        <member name="P:ILGPU.Stride3D.Infinite.YStride">
            <summary>
            Returns the constant 0.
            </summary>
        </member>
        <member name="P:ILGPU.Stride3D.Infinite.ZStride">
            <summary>
            Returns the constant 0.
            </summary>
        </member>
        <member name="M:ILGPU.Stride3D.Infinite.ComputeElementIndex(ILGPU.Index3D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.Infinite.ComputeElementIndex(ILGPU.LongIndex3D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.Infinite.ComputeElementIndexChecked(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Computes the linear 32-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for the index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.Infinite.ComputeElementIndexChecked(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Computes the linear 64-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.Infinite.ReconstructFromElementIndex(System.Int32)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.Infinite.ReconstructFromElementIndex(System.Int64)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.Infinite.ComputeBufferLength(ILGPU.Index3D)">
            <summary>
            Computes the 32-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 32-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.Infinite.ComputeBufferLength(ILGPU.LongIndex3D)">
            <summary>
            Computes the 64-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 64-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.Infinite.AsGeneral">
            <summary>
            Returns this stride as general 3D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride3D.Infinite.To1DStride">
            <summary>
            Converts this stride instance into a general 1D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride3D.Infinite.ToString">
            <summary>
            Returns the string representation of this stride.
            </summary>
            <returns>The string representation of this stride.</returns>
        </member>
        <member name="T:ILGPU.Stride3D.GetLeadingDimensionSize">
            <summary>
            Returns the size of the leading dimension based on the given extent.
            </summary>
        </member>
        <member name="T:ILGPU.Stride3D.BuildStride`1">
            <summary>
            Builds a stride based on the given extent and the size of the leading
            dimension.
            </summary>
        </member>
        <member name="T:ILGPU.Stride3D.General">
            <summary>
            A general 3D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride3D.General.#ctor(ILGPU.Index3D)">
            <summary>
            Creates a new general 3D stride.
            </summary>
            <param name="stride">The underlying stride information.</param>
        </member>
        <member name="P:ILGPU.Stride3D.General.StrideExtent">
            <summary>
            Returns the associated stride extent.
            </summary>
        </member>
        <member name="P:ILGPU.Stride3D.General.XStride">
            <summary>
            Returns the X-dimension stride.
            </summary>
        </member>
        <member name="P:ILGPU.Stride3D.General.YStride">
            <summary>
            Returns the Y-dimension stride.
            </summary>
        </member>
        <member name="P:ILGPU.Stride3D.General.ZStride">
            <summary>
            Returns the Z-dimension stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride3D.General.ComputeElementIndex(ILGPU.Index3D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.General.ComputeElementIndex(ILGPU.LongIndex3D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.General.ComputeElementIndexChecked(ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Computes the linear 32-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for the index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.General.ComputeElementIndexChecked(ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Computes the linear 64-bit element address using the given index while
            verifying that the given index is within the bounds of the specified
            extent.
            </summary>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.General.ReconstructFromElementIndex(System.Int32)">
            <summary>
            Reconstructs a 32-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.General.ReconstructFromElementIndex(System.Int64)">
            <summary>
            Reconstructs a 64-bit index from a linear element index.
            </summary>
            <param name="elementIndex">The linear element index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.General.ComputeBufferLength(ILGPU.Index3D)">
            <summary>
            Computes the 32-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 32-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.General.ComputeBufferLength(ILGPU.LongIndex3D)">
            <summary>
            Computes the 64-bit length of a required allocation.
            </summary>
            <param name="extent">The extent to allocate.</param>
            <returns>The 64-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.General.AsGeneral">
            <summary>
            Returns this stride as general 3D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride3D.General.To1DStride">
            <summary>
            Converts this stride instance into a general 1D stride.
            </summary>
        </member>
        <member name="M:ILGPU.Stride3D.General.ToString">
            <summary>
            Returns the string representation of this stride.
            </summary>
            <returns>The string representation of this stride.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.ComputeElementIndex``1(``0,ILGPU.Index3D)">
            <summary>
            Computes the linear 32-bit element address using the given index.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.ComputeElementIndex``1(``0,ILGPU.LongIndex3D)">
            <summary>
            Computes the linear 64-bit element address using the given index.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="index">The dimension for index computation.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.ComputeElementIndexChecked``1(``0,ILGPU.Index3D,ILGPU.Index3D)">
            <summary>
            Computes the linear 32-bit element address using the given index while
            verifying that the given index is within the bounds of the specified extent.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="index">The dimension for the index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.ComputeElementIndexChecked``1(``0,ILGPU.LongIndex3D,ILGPU.LongIndex3D)">
            <summary>
            Computes the linear 64-bit element address using the given index while
            verifying that the given index is within the bounds of the specified extent.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="index">The dimension for index computation.</param>
            <param name="extent">The extent dimension to check.</param>
            <returns>The computed linear element address.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.ComputeBufferLength``1(``0,ILGPU.Index3D)">
            <summary>
            Computes the 32-bit length of a required allocation.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="extent">The extent to allocate.</param>
            <returns>The 32-bit length of a required allocation.</returns>
        </member>
        <member name="M:ILGPU.Stride3D.ComputeBufferLength``1(``0,ILGPU.LongIndex3D)">
            <summary>
            Computes the 64-bit length of a required allocation.
            </summary>
            <param name="stride">The stride to use.</param>
            <param name="extent">The extent to allocate.</param>
            <returns>The 64-bit length of a required allocation.</returns>
        </member>
        <member name="T:ILGPU.Util.Bitwise">
            <summary>
            Bitwise utility methods.
            Used instead of &amp; and | to avoid false-positives from code analysis tools
            that suggest they potentially be changed to &amp;&amp; and ||.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Bitwise.And(System.Boolean,System.Boolean)">
            <summary>
            Performs bitwise operator &amp; on two values.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Bitwise.And(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Performs bitwise operator &amp; on three values.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Bitwise.And(System.Int32,System.Int32)">
            <summary>
            Performs bitwise operator &amp; on two values.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Bitwise.And(System.UInt32,System.UInt32)">
            <summary>
            Performs bitwise operator &amp; on two values.
            </summary>\
        </member>
        <member name="M:ILGPU.Util.Bitwise.And(System.Int64,System.Int64)">
            <summary>
            Performs bitwise operator &amp; on two values.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Bitwise.And(System.UInt64,System.UInt64)">
            <summary>
            Performs bitwise operator &amp; on two values.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Bitwise.Or(System.Boolean,System.Boolean)">
            <summary>
            Performs bitwise operator | on two values.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Bitwise.Or(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Performs bitwise operator | on three values.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Bitwise.Or(System.Int32,System.Int32)">
            <summary>
            Performs bitwise operator | on two values.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Bitwise.Or(System.UInt32,System.UInt32)">
            <summary>
            Performs bitwise operator | on two values.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Bitwise.Or(System.Int64,System.Int64)">
            <summary>
            Performs bitwise operator | on two values.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Bitwise.Or(System.UInt64,System.UInt64)">
            <summary>
            Performs bitwise operator | on two values.
            </summary>
        </member>
        <member name="T:ILGPU.Util.DisposeBase">
            <summary>
            Utility base class for correct implementations of IDisposable
            </summary>
        </member>
        <member name="F:ILGPU.Util.DisposeBase.disposeBarrier">
            <summary>
            A synchronization primitive to avoid multiple concurrent invocations of the
            <see cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/> function.
            </summary>
        </member>
        <member name="F:ILGPU.Util.DisposeBase.isDisposed">
            <summary>
            Tracks whether the object has been disposed.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DisposeBase.IsDisposed">
            <summary>
            Returns true if the current object has been disposed
            </summary>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.VerifyNotDisposed">
            <summary>
            Verifies if the current instance is not disposed and still alive. If the
            current object has been disposed, this method throws a
            <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <remarks>
            This method has been added for general utility purposes and is not used.
            </remarks>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.DisposeDriver(System.Boolean)">
            <summary>
            Thread-safe wrapper for the actual dispose functionality.
            </summary>
            <param name="disposing">
            True, if the method is not called by the finalizer.
            </param>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)">
            <summary>
            Frees allocated resources.
            </summary>
            <param name="disposing">
            True, if the method is not called by the finalizer.
            </param>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.MarkDisposed_Unsafe">
            <summary>
            Marks the current object as disposed.
            </summary>
            <returns>Return true if the object has not been disposed.</returns>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.Dispose">
            <summary>
            Triggers the 'dispose' functionality of this object.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.Finalize">
            <summary>
            The custom finalizer for dispose-base objects.
            </summary>
        </member>
        <member name="T:ILGPU.Util.Extension">
            <summary>
            An abstract runtime-object extension instance.
            </summary>
        </member>
        <member name="T:ILGPU.Util.CachedExtension">
            <summary>
            An abstract runtime-object extension instance.
            </summary>
        </member>
        <member name="M:ILGPU.Util.CachedExtension.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
        </member>
        <member name="T:ILGPU.Util.IExtensionObject`1">
            <summary>
            An abstract extension object.
            </summary>
            <typeparam name="TExtension">The underlying extension type.</typeparam>
        </member>
        <member name="M:ILGPU.Util.IExtensionObject`1.RegisterExtension``1(``0)">
            <summary>
            Registers a new backend extensions.
            </summary>
            <typeparam name="T">The extension type.</typeparam>
            <param name="extension">The extension instance to register.</param>
        </member>
        <member name="M:ILGPU.Util.IExtensionObject`1.GetExtension``1">
            <summary>
            Retrieves a backend extension of the given type.
            </summary>
            <typeparam name="T">The extension type.</typeparam>
            <returns>The extension instance.</returns>
        </member>
        <member name="M:ILGPU.Util.IExtensionObject`1.TryGetExtension``1(``0@)">
            <summary>
            Tries to retrieve a backend extension of the given type.
            </summary>
            <typeparam name="T">The extension type.</typeparam>
            <param name="extension">The extension instance.</param>
            <returns>True, if the extension could be retrieved.</returns>
        </member>
        <member name="M:ILGPU.Util.IExtensionObject`1.ForEachExtension(System.Action{`0})">
            <summary>
            Executes the given action for each registered extension.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="T:ILGPU.Util.ExtensionBase`1">
            <summary>
            An extension base object that provides a default implementation of an
            <see cref="T:ILGPU.Util.IExtensionObject`1"/>.
            </summary>
            <typeparam name="TExtension">The underlying extension type.</typeparam>
        </member>
        <member name="F:ILGPU.Util.ExtensionBase`1.extensions">
            <summary>
            The associated backend extensions.
            </summary>
        </member>
        <member name="M:ILGPU.Util.ExtensionBase`1.RegisterExtension``1(``0)">
            <summary>
            Registers a new extensions.
            </summary>
            <typeparam name="T">The extension type.</typeparam>
            <param name="extension">The extension instance to register.</param>
            <remarks>This method is not thread-safe.</remarks>
        </member>
        <member name="M:ILGPU.Util.ExtensionBase`1.GetExtension``1">
            <summary>
            Retrieves a extension of the given type.
            </summary>
            <typeparam name="T">The extension type name.</typeparam>
            <returns>The extension instance.</returns>
        </member>
        <member name="M:ILGPU.Util.ExtensionBase`1.TryGetExtension``1(``0@)">
            <summary>
            Tries to retrieve a backend extension of the given type.
            </summary>
            <typeparam name="T">The extension type.</typeparam>
            <param name="extension">The extension instance.</param>
            <returns>True, if the extension could be retrieved.</returns>
        </member>
        <member name="M:ILGPU.Util.ExtensionBase`1.ForEachExtension(System.Action{`0})">
            <summary>
            Executes the given action for each registered extension.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:ILGPU.Util.ExtensionBase`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Util.CachedExtensionBase`1">
            <summary>
            An extension base object that provides a default implementation of an
            <see cref="T:ILGPU.Util.IExtensionObject`1"/> including caches.
            </summary>
            <typeparam name="TExtension">The underlying extension type.</typeparam>
        </member>
        <member name="M:ILGPU.Util.CachedExtensionBase`1.ClearCache(ILGPU.ClearCacheMode)">
            <summary>
            Clears all internal caches.
            </summary>
            <param name="mode">The clear mode.</param>
            <remarks>This method is not thread-safe.</remarks>
        </member>
        <member name="T:ILGPU.Util.FormatString">
            <summary>
            Helper class to parse a string containing .NET style string formatting.
            e.g. "Hello {0}"
            </summary>
        </member>
        <member name="T:ILGPU.Util.FormatString.FormatExpression">
            <summary>
            Represents a single format command.
            </summary>
        </member>
        <member name="M:ILGPU.Util.FormatString.FormatExpression.#ctor(System.ReadOnlySpan{System.Char})">
            <summary>
            Constructs a new format expression.
            </summary>
            <param name="string">The string expression.</param>
        </member>
        <member name="M:ILGPU.Util.FormatString.FormatExpression.#ctor(System.String)">
            <summary>
            Constructs a new format expression.
            </summary>
            <param name="string">The string expression.</param>
        </member>
        <member name="M:ILGPU.Util.FormatString.FormatExpression.#ctor(System.Int32)">
            <summary>
            Constructs a new format expression.
            </summary>
            <param name="argument">The argument reference.</param>
        </member>
        <member name="P:ILGPU.Util.FormatString.FormatExpression.String">
            <summary>
            Returns the string to output (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Util.FormatString.FormatExpression.Argument">
            <summary>
            Returns the argument reference to output.
            </summary>
        </member>
        <member name="P:ILGPU.Util.FormatString.FormatExpression.HasArgument">
            <summary>
            Returns true if the current expression has an argument reference.
            </summary>
        </member>
        <member name="M:ILGPU.Util.FormatString.TryParse(System.String,System.Collections.Immutable.ImmutableArray{ILGPU.Util.FormatString.FormatExpression}@)">
            <summary>
            Parses the given format expression into an array of format expressions.
            </summary>
            <param name="formatExpression">The format expression.</param>
            <param name="expressions">The array of managed format expressions.</param>
            <returns>True, if all expressions could be parsed successfully.</returns>
        </member>
        <member name="T:ILGPU.Util.InlineList`1">
            <summary>
            An inline array list that has to be passed by reference to avoid unnecessary
            heap allocations.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="F:ILGPU.Util.InlineList`1.Empty">
            <summary>
            An empty inline list.
            </summary>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Create(System.Int32)">
            <summary>
            Creates a new inline list with the given capacity and storage capacity.
            </summary>
            <param name="capacity">The capacity.</param>
            <returns>The new inline list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Create(`0)">
            <summary>
            Creates a new inline list with the given item.
            </summary>
            <param name="item">The first item.</param>
            <returns>The created inline list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Create(`0,`0)">
            <summary>
            Creates a new inline list with the given items.
            </summary>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
            <returns>The created inline list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Create``1(``0)">
            <summary>
            Creates a new inline list from the given list.
            </summary>
            <typeparam name="TList">The list type.</typeparam>
            <param name="list">The source list.</param>
            <returns>The new inline list.</returns>
        </member>
        <member name="P:ILGPU.Util.InlineList`1.Count">
            <summary>
            Returns the number of items.
            </summary>
        </member>
        <member name="P:ILGPU.Util.InlineList`1.Capacity">
            <summary>
            The total capacity.
            </summary>
        </member>
        <member name="P:ILGPU.Util.InlineList`1.Item(System.Int32)">
            <summary>
            Returns a reference to the i-th item.
            </summary>
            <param name="index">The item index.</param>
            <returns>The item reference.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.EnsureCapacity">
            <summary>
            Ensures that at least a single item can be stored.
            </summary>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Reserve(System.Int32)">
            <summary>
            Ensures that this list as at least the given capacity.
            </summary>
            <param name="capacity">The capacity to ensure.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Add(`0)">
            <summary>
            Adds the given item to this list.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.AddRange``1(``0)">
            <summary>
            Adds the given items to this list.
            </summary>
            <typeparam name="TList">The list type.</typeparam>
            <param name="list">The source list.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.AddRange(System.ReadOnlySpan{`0}@)">
            <summary>
            Adds the given items to this list.
            </summary>
            <param name="span">The source span.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Clear">
            <summary>
            Clears all items.
            </summary>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Resize(System.Int32)">
            <summary>
            Resizes the current list to have a sufficient capacity for all items while
            settings the number of elements to <paramref name="count"/>.
            </summary>
            <param name="count">The desired number of elements.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Contains``1(`0,``0)">
            <summary>
            Returns true if the given item is contained in this list.
            </summary>
            <param name="item">The item to look for.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>True, if the given item contained in this list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the internally stored items to the given array.
            </summary>
            <param name="array">The target array to copy to.</param>
            <param name="arrayIndex">The base index.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Insert(`0,System.Int32)">
            <summary>
            Inserts the given item at the specified index.
            </summary>
            <param name="item">The item to insert.</param>
            <param name="index">The target index.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.IndexOf``1(`0,``0)">
            <summary>
            Returns the index of the given item.
            </summary>
            <param name="item">The item to look for.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>The index of the item or -1.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Remove``1(`0,``0)">
            <summary>
            Removes the given item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>True, if the item could be removed from the list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.RemoveAll``1(`0,``0)">
            <summary>
            Removes all items that match from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="comparer">The comparer to use.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item with the specified index.
            </summary>
            <param name="index">The item index.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Pop">
            <summary>
            Pops an element from the back of this list.
            </summary>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Reverse">
            <summary>
            Reverses all items in this list.
            </summary>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.MoveTo(ILGPU.Util.InlineList{`0}@)">
            <summary>
            Moves the current items to the given target list.
            </summary>
            <param name="list">The target list to move to.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.CopyTo(ILGPU.Util.InlineList{`0}@)">
            <summary>
            Copies all items to the given target list.
            </summary>
            <param name="list">The target list.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Clone">
            <summary>
            Clones this inline list.
            </summary>
            <returns>A clone of the current inline list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Slice(System.Int32,System.Int32)">
            <summary>
            Slices a sub inline list out of this one.
            </summary>
            <param name="startIndex">The start index to begin slicing.</param>
            <param name="count">The number of elements to slice.</param>
            <returns>The new inline list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.SliceTo(System.Int32,System.Int32,ILGPU.Util.InlineList{`0}@)">
            <summary>
            Slices a sub inline list out of this one into the given one.
            </summary>
            <param name="startIndex">The start index to begin slicing.</param>
            <param name="count">The number of elements to slice.</param>
            <param name="list">The target list.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.Equals``1(ILGPU.Util.InlineList{`0},``0)">
            <summary>
            Returns true if the given list is equal to the current list.
            </summary>
            <param name="other">The other list.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>True, if the given list is equal to the current list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.AsSpan">
            <summary>
            Converts this inline list into a span.
            </summary>
            <returns>The span.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.AsReadOnlySpan">
            <summary>
            Converts this inline list into a read-only span.
            </summary>
            <returns>The read-only span.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.GetEnumerator">
            <summary>
            Returns an enumerator to enumerate all items in this list.
            </summary>
            <returns>The enumerator.</returns>
            <remarks>
            CAUTION: iterating over this list can be dangerous, as the underlying inline
            list might change and this instance is a structure value.
            </remarks>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.ToString``1(``0)">
            <summary>
            Returns the string representation of this list.
            </summary>
            <returns>The string representation of this list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.ToString">
            <summary>
            Returns the string representation of this list.
            </summary>
            <returns>The string representation of this list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.op_Explicit(ILGPU.Util.InlineList{`0})~System.Span{`0}">
            <summary>
            Converts the given list into a span.
            </summary>
            <param name="list">The list to convert.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList`1.op_Implicit(ILGPU.Util.InlineList{`0})~System.ReadOnlySpan{`0}">
            <summary>
            Converts the given list into a read-only span.
            </summary>
            <param name="list">The list to convert.</param>
        </member>
        <member name="T:ILGPU.Util.InlineList">
            <summary>
            Inline list utility methods.
            </summary>
        </member>
        <member name="T:ILGPU.Util.InlineList.IFormatter`1">
            <summary>
            An abstract value formatter for inline lists.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Util.InlineList.IFormatter`1.Format(`0)">
            <summary>
            Formats the given item.
            </summary>
            <param name="item">The item to format.</param>
            <returns>The formatted string representation.</returns>
        </member>
        <member name="T:ILGPU.Util.InlineList.DefaultFormatter`1">
            <summary>
            The default formatter that calls the <see cref="M:System.Object.ToString"/> method.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Util.InlineList.DefaultFormatter`1.Format(`0)">
            <summary>
            Formats the given item using <see cref="M:System.Object.ToString"/>.
            </summary>
            <param name="item">The item to format.</param>
            <returns>The default string representation.</returns>
        </member>
        <member name="T:ILGPU.Util.InlineList.IPredicate`1">
            <summary>
            An abstract predicate interface.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Util.InlineList.IPredicate`1.Apply(`0)">
            <summary>
            Applies this predicate to the given item.
            </summary>
            <param name="item">The item to apply the predicate to.</param>
            <returns>
            True, if the predicate implementation evaluates to true.
            </returns>
        </member>
        <member name="T:ILGPU.Util.InlineList.TruePredicate`1">
            <summary>
            A predicate that always returns true.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Util.InlineList.TruePredicate`1.Apply(`0)">
            <summary>
            Returns always true.
            </summary>
            <param name="item">The item to apply the predicate to.</param>
            <returns>True.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList.ExceptAll``2(System.ReadOnlySpan{``0},``0,``1)">
            <summary>
            Returns a new span that does not contain the given element.
            </summary>
            <param name="span">The span that might contain the given item.</param>
            <param name="element">The item to exclude for.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>A span that does not contain the given element.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList.Contains``2(System.ReadOnlySpan{``0},``0,``1)">
            <summary>
            Returns true if the given item is contained in this span.
            </summary>
            <param name="span">The span that might contain the given item.</param>
            <param name="element">The item to look for.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>True, if the given item contained in this list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList.Any``2(System.ReadOnlySpan{``0},``1)">
            <summary>
            Returns true if the predicate evaluates to true for any item.
            </summary>
            <param name="span">The span that might contain the given item.</param>
            <param name="predicate">The predicate instance.</param>
            <returns>True, if the predicate evaluates to true for any item.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList.ToInlineList``1(System.ReadOnlySpan{``0})">
            <summary>
            Creates a new inline list from the given span.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="span">The span instance.</param>
            <returns>The created inline list.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList.ToSet``1(System.ReadOnlySpan{``0})">
            <summary>
            Converts the given span into a <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="span">The span instance.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList.ToSet``2(System.ReadOnlySpan{``0},``1)">
            <summary>
            Converts the given span into a <see cref="T:System.Collections.Generic.HashSet`1"/> that contains all
            all elements for which the given predicate evaluates to true.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <param name="span">The span instance.</param>
            <param name="predicate">The predicate instance.</param>
            <returns>The created set.</returns>
        </member>
        <member name="M:ILGPU.Util.InlineList.CopyTo``1(System.ReadOnlySpan{``0},ILGPU.Util.InlineList{``0}@)">
            <summary>
            Copies the items from the given span to the inline list.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="span">The span instance.</param>
            <param name="list">A reference to the inline list.</param>
        </member>
        <member name="M:ILGPU.Util.InlineList.ToString``2(System.ReadOnlySpan{``0},``1)">
            <summary>
            Returns the string representation of the given span.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TFormatter">The formatter type.</typeparam>
            <param name="span">The span instance.</param>
            <param name="formatter">The custom formatter.</param>
            <returns>The string representation of this list.</returns>
        </member>
        <member name="T:ILGPU.Util.MethodExtensions">
            <summary>
            Extensions for methods.
            </summary>
        </member>
        <member name="M:ILGPU.Util.MethodExtensions.GetParameterOffset(System.Reflection.MethodBase)">
            <summary>
            Returns a parameter offset of 1 for instance methods and 0 for static
            methods.
            </summary>
            <param name="method">The method to compute the parameter offset for.</param>
            <returns>
            A parameter offset of 1 for instance methods and 0 for static methods.
            </returns>
        </member>
        <member name="M:ILGPU.Util.MethodExtensions.IsNotCapturingLambda(System.Reflection.MethodBase)">
            <summary>
            Returns true if the method can be considered a non-capturing lambda.
            </summary>
            <param name="method">The method to check.</param>
            <returns>True, if the method is a non-capturing lambda.</returns>
        </member>
        <member name="T:ILGPU.Util.NativeLibrary">
             <summary>
             Provides cross-platform functions for loading a DLL and extracting function
             pointers.
            
             System.Runtime.InteropServices.NativeLibrary is not available for
             NETFRAMEWORK or NETSTANDARD.
             </summary>
        </member>
        <member name="T:ILGPU.Util.RawString">
             <summary>
             Helper to coerce the C# compiler into preferencing the FormattableString
             overload of a function, and to also accept a regular string.
            
             https://www.damirscorner.com/blog/posts/20180921-FormattableStringAsMethodParameter.html
             </summary>
        </member>
        <member name="P:ILGPU.Util.RawString.Value">
            <summary>
            The string value.
            </summary>
        </member>
        <member name="M:ILGPU.Util.RawString.op_Implicit(System.Char)~ILGPU.Util.RawString">
            <summary>
            Implicit conversion from char.
            </summary>
            <param name="value">The char value.</param>
        </member>
        <member name="M:ILGPU.Util.RawString.op_Implicit(System.String)~ILGPU.Util.RawString">
            <summary>
            Implicit conversion from string.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:ILGPU.Util.RawString.op_Implicit(System.FormattableString)~ILGPU.Util.RawString">
            <summary>
            Implicit conversion from <see cref="T:System.FormattableString"/>.
            </summary>
            <remarks>
            This should not be used, but is necessary to coerce the C# compiler.
            </remarks>
            <param name="value">The string value.</param>
        </member>
        <member name="T:ILGPU.Util.ReadOnlyScopedLock">
            <summary>
            Represents read only scoped lock based on a <see cref="T:System.Threading.ReaderWriterLockSlim"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Util.ReadOnlyScopedLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Constructs a new read scope and acquires the lock.
            </summary>
            <param name="readerWriterLock">The parent lock.</param>
        </member>
        <member name="M:ILGPU.Util.ReadOnlyScopedLock.Dispose">
            <summary>
            Releases the read lock.
            </summary>
        </member>
        <member name="T:ILGPU.Util.WriteScopedLock">
            <summary>
            Represents write scoped lock based on a <see cref="T:System.Threading.ReaderWriterLockSlim"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Util.WriteScopedLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Constructs a new write scope and acquires the lock.
            </summary>
            <param name="readerWriterLock">The parent lock.</param>
        </member>
        <member name="M:ILGPU.Util.WriteScopedLock.Dispose">
            <summary>
            Releases the write lock.
            </summary>
        </member>
        <member name="T:ILGPU.Util.UpgradeableScopedLock">
            <summary>
            Represents an upgradeable read scoped lock based on a
            <see cref="T:System.Threading.ReaderWriterLockSlim"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Util.UpgradeableScopedLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Constructs a new upgradeable read scope and acquires the lock.
            </summary>
            <param name="readerWriterLock">The parent lock.</param>
        </member>
        <member name="M:ILGPU.Util.UpgradeableScopedLock.EnterWriteScope">
            <summary>
            Enters a new write lock.
            </summary>
        </member>
        <member name="M:ILGPU.Util.UpgradeableScopedLock.Dispose">
            <summary>
            Releases the upgradeable read lock.
            </summary>
        </member>
        <member name="T:ILGPU.Util.LockExtensions">
            <summary>
            Additional extensions for scoped locks.
            </summary>
        </member>
        <member name="M:ILGPU.Util.LockExtensions.EnterReadScope(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Enters a new read scope.
            </summary>
        </member>
        <member name="M:ILGPU.Util.LockExtensions.EnterUpgradeableReadScope(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Enters a new upgradeable read scope.
            </summary>
        </member>
        <member name="M:ILGPU.Util.LockExtensions.EnterWriteScope(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Enters a new write scope.
            </summary>
        </member>
        <member name="T:ILGPU.Util.TypeExtensions">
            <summary>
            Represents general type extensions.
            </summary>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsArrayViewType(System.Type,System.Type@)">
            <summary>
            Checks whether the given type is an array view type.
            </summary>
            <param name="type">The source type.</param>
            <param name="elementType">
            The resolved element type in case of an array view.
            </param>
            <returns>True, in case of an array view.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsValueTuple(System.Type)">
            <summary>
            Checks whether the given type is a value tuple type.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, in case of a value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsSpecializedType(System.Type,System.Type@)">
            <summary>
            Checks whether the given type is a specialized type.
            </summary>
            <param name="type">The source type.</param>
            <param name="nestedType">
            The resolved element type in case of an array view.
            </param>
            <returns>True, in case of an array view.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsImmutableArray(System.Type,System.Type@)">
            <summary>
            Checks whether the given type is an immutable array.
            </summary>
            <param name="type">The source type.</param>
            <param name="elementType">The element type (if any).</param>
            <returns>True, if the given type is an immutable array.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.HasSupportedBaseClass(System.Type)">
            <summary>
            Returns true if the given type has a supported base class.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type has a supported base class.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsDelegate(System.Type)">
            <summary>
            Returns true if the given type is a delegate type.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type is a delegate type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetDelegateInvokeMethod(System.Type)">
            <summary>
            Resolves the delegate invocation method of the given type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved delegate invocation method.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetReturnType(System.Reflection.MethodBase)">
            <summary>
            Resolves the return type of the given method.
            </summary>
            <param name="method">The method base.</param>
            <returns>The resolved return type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsVoidPtr(System.Type)">
            <summary>
            Returns true if the given type is a void pointer.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type is a void pointer.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsPassedViaPtr(System.Type)">
            <summary>
            Returns true if the given type is passed via reference.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type is passed via reference.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsTreatedAsPtr(System.Type)">
            <summary>
            Returns true if the given type is treated as a pointer type.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type is treated as a pointer type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsSignedInt(System.Type)">
            <summary>
            Returns true if the given type represents a signed int.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type represents a signed int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsUnsignedInt(System.Type)">
            <summary>
            Returns true if the given type represents an unsigned int.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type represents an unsigned int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsILGPUPrimitiveType(System.Type)">
            <summary>
            Returns true if the given type is an ILGPU intrinsic primitive type.
            </summary>
            <param name="type">The source type.</param>
            <returns>
            True, if the given type is an ILGPU intrinsic primitive type.
            </returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetManagedType(ILGPU.BasicValueType)">
            <summary>
            Resolves the managed type for the given basic-value type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved managed type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetBasicValueType(System.Type)">
            <summary>
            Resolves the basic-value type for the given managed type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetArithmeticBasicValueType(System.Type)">
            <summary>
            Resolves the basic-value type for the given managed type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetBasicValueType(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Resolves the basic-value type for the given type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetArithmeticBasicValueType(ILGPU.BasicValueType,System.Boolean)">
            <summary>
            Resolves the basic-value type for the given type.
            </summary>
            <param name="type">The source type.</param>
            <param name="isUnsigned">
            True, if the basic value type should be interpreted as unsigned.
            </param>
            <returns>The resolved basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsInt(System.Type)">
            <summary>
            Returns true if the given type represents an int.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type represents an int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsInt(ILGPU.BasicValueType)">
            <summary>
            Returns true if the given basic-value type represents an int.
            </summary>
            <param name="value">The basic-value type.</param>
            <returns>True, if the given basic-value type represents an int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsFloat(System.Type)">
            <summary>
            Returns true if the given type represents a float.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, if the given type represents a float.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsFloat(ILGPU.BasicValueType)">
            <summary>
            Returns true if the given basic-value type represents a float.
            </summary>
            <param name="value">The basic-value type.</param>
            <returns>True, if the given basic-value type represents a float.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsFloat(ILGPU.ArithmeticBasicValueType)">
            <summary>
            Returns true if the given arithmetic basic value type represents a float.
            </summary>
            <param name="value">The arithmetic basic value type.</param>
            <returns>
            True, if the given arithmetic basic value represents a float.
            </returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.ToTargetUnsignedFlags(System.Type)">
            <summary>
            Converts the given type into conversion target flags.
            </summary>
            <param name="type">The type to convert.</param>
            <returns>The required conversion flags.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.AsNotNull``1(``0)">
            <summary>
            Applies the null-forgiving operator.
            </summary>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.AsNotNullCast``1(System.Object)">
            <summary>
            Applies the null-forgiving operator.
            </summary>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.ThrowIfNull``1(``0)">
            <summary>
            Throws exception of the value is null.
            </summary>
        </member>
        <member name="T:ILGPU.Util.Utilities">
            <summary>
            General utility methods.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Utilities.Swap``1(``0@,``0@)">
            <summary>
            Swaps the given values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="first">The first value to swap with the second one.</param>
            <param name="second">The second value to swap with the first one.</param>
        </member>
        <member name="M:ILGPU.Util.Utilities.Swap``1(System.Boolean,``0@,``0@)">
            <summary>
            Swaps the given values if swap is true.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="performSwap">True, if the values should be swapped.</param>
            <param name="first">The first value to swap with the second one.</param>
            <param name="second">The second value to swap with the first one.</param>
            <returns>True, if the values were swapped.</returns>
        </member>
        <member name="M:ILGPU.Util.Utilities.Select``1(System.Boolean,``0,``0)">
            <summary>
            Selects between the two given values.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="takeFirst">
            True, if the
            <paramref name="first"/> value should be taken.</param>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <returns>The selected value.</returns>
            <remarks>
            Note that this function will be mapped to the ILGPU IR.
            </remarks>
        </member>
        <member name="M:ILGPU.Util.Utilities.IsPowerOf2(System.Int64)">
            <summary>
            Returns true if the given integer is a power of two.
            </summary>
            <param name="value">The integer value.</param>
            <returns>True, if the given integer is a power of two.</returns>
        </member>
        <member name="M:ILGPU.Util.Utilities.IsPowerOf2(System.UInt64)">
            <summary>
            Returns true if the given integer is a power of two.
            </summary>
            <param name="value">The integer value.</param>
            <returns>True, if the given integer is a power of two.</returns>
        </member>
        <member name="M:ILGPU.Util.Utilities.GCD(System.Int64,System.Int64)">
            <summary>
            Computes the greatest common divisor using the Euclidean algorithm.
            </summary>
            <param name="a">The first number.</param>
            <param name="b">The second number.</param>
            <returns>The GCD of both numbers.</returns>
        </member>
        <member name="M:ILGPU.Util.Utilities.LCM(System.Int64,System.Int64)">
            <summary>
            Computes the least common multiple.
            </summary>
            <param name="a">The first number.</param>
            <param name="b">The second number.</param>
            <returns>The LCM of both numbers.</returns>
        </member>
        <member name="M:ILGPU.Util.Utilities.InitNotNullable``1">
            <summary>
            Initializes a non-nullable instance with null.
            </summary>
        </member>
        <member name="T:ILGPU.Util.DataBlock`2">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.#ctor(`0,`1)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.#ctor(System.ValueTuple{`0,`1})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`2.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`2.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.Equals(ILGPU.Util.DataBlock{`0,`1})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.op_Implicit(ILGPU.Util.DataBlock{`0,`1})~System.ValueTuple{`0,`1}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.op_Implicit(System.ValueTuple{`0,`1})~ILGPU.Util.DataBlock{`0,`1}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.op_Equality(ILGPU.Util.DataBlock{`0,`1},ILGPU.Util.DataBlock{`0,`1})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`2.op_Inequality(ILGPU.Util.DataBlock{`0,`1},ILGPU.Util.DataBlock{`0,`1})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`3">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.#ctor(`0,`1,`2)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.#ctor(System.ValueTuple{`0,`1,`2})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`3.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`3.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`3.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.Equals(ILGPU.Util.DataBlock{`0,`1,`2})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2})~System.ValueTuple{`0,`1,`2}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.op_Implicit(System.ValueTuple{`0,`1,`2})~ILGPU.Util.DataBlock{`0,`1,`2}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2},ILGPU.Util.DataBlock{`0,`1,`2})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`3.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2},ILGPU.Util.DataBlock{`0,`1,`2})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`4">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.#ctor(System.ValueTuple{`0,`1,`2,`3})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`4.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`4.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`4.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`4.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3})~System.ValueTuple{`0,`1,`2,`3}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.op_Implicit(System.ValueTuple{`0,`1,`2,`3})~ILGPU.Util.DataBlock{`0,`1,`2,`3}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3},ILGPU.Util.DataBlock{`0,`1,`2,`3})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`4.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3},ILGPU.Util.DataBlock{`0,`1,`2,`3})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`5">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`5.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.#ctor(System.ValueTuple{`0,`1,`2,`3,`4})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`5.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`5.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`5.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`5.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`5.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4})~System.ValueTuple{`0,`1,`2,`3,`4}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`5.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`6">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`6.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`6.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5})~System.ValueTuple{`0,`1,`2,`3,`4,`5}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`6.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`7">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`7.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`7.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`7.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`8">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`8.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`8.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`8.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`9">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`9.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`9.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`9.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`10">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`10.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`10.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`10.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`11">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
            <typeparam name="T11">The element type of the 11-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`11.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`11.Item11">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`11.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`12">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
            <typeparam name="T11">The element type of the 11-th element.</typeparam>
            <typeparam name="T12">The element type of the 12-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`12.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item11">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`12.Item12">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`12.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`13">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
            <typeparam name="T11">The element type of the 11-th element.</typeparam>
            <typeparam name="T12">The element type of the 12-th element.</typeparam>
            <typeparam name="T13">The element type of the 13-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`13.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item11">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item12">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`13.Item13">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`13.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`14">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
            <typeparam name="T11">The element type of the 11-th element.</typeparam>
            <typeparam name="T12">The element type of the 12-th element.</typeparam>
            <typeparam name="T13">The element type of the 13-th element.</typeparam>
            <typeparam name="T14">The element type of the 14-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`14.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item11">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item12">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item13">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`14.Item14">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`14.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.DataBlock`15">
            <summary>
            Represents a tuple consisting of multiple elements.
            </summary>
            <typeparam name="T1">The element type of the 1st element.</typeparam>
            <typeparam name="T2">The element type of the 2nd element.</typeparam>
            <typeparam name="T3">The element type of the 3-th element.</typeparam>
            <typeparam name="T4">The element type of the 4-th element.</typeparam>
            <typeparam name="T5">The element type of the 5-th element.</typeparam>
            <typeparam name="T6">The element type of the 6-th element.</typeparam>
            <typeparam name="T7">The element type of the 7-th element.</typeparam>
            <typeparam name="T8">The element type of the 8-th element.</typeparam>
            <typeparam name="T9">The element type of the 9-th element.</typeparam>
            <typeparam name="T10">The element type of the 10-th element.</typeparam>
            <typeparam name="T11">The element type of the 11-th element.</typeparam>
            <typeparam name="T12">The element type of the 12-th element.</typeparam>
            <typeparam name="T13">The element type of the 13-th element.</typeparam>
            <typeparam name="T14">The element type of the 14-th element.</typeparam>
            <typeparam name="T15">The element type of the 15-th element.</typeparam>
        </member>
        <member name="F:ILGPU.Util.DataBlock`15.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13,System.ValueTuple{`14}}})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item1">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item2">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item3">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item4">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item5">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item6">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item7">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item8">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item9">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item10">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item11">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item12">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item13">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item14">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DataBlock`15.Item15">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.Equals(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.op_Implicit(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13,System.ValueTuple{`14}}}">
            <summary>
            Converts the given data block into its tuple representation.
            </summary>
            <param name="dataBlock">The data block to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13,System.ValueTuple{`14}}})~ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}">
            <summary>
            Converts the given tuple into its data block representation.
            </summary>
            <param name="valueTuple">The value tuple to convert.</param>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.op_Equality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.DataBlock`15.op_Inequality(ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},ILGPU.Util.DataBlock{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block do not represent the same elements.</returns>
        </member>
        <member name="T:ILGPU.Util.Short2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short2.#ctor(System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short2.#ctor(System.Int16,System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short2.#ctor(ILGPU.Util.DataBlock{System.Int16,System.Int16})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.Equals(ILGPU.Util.Short2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Short2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Multiply(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Division(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Subtraction(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Addition(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Implicit(System.Int16)~ILGPU.Util.Short2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Implicit(ILGPU.Util.Short2)~System.ValueTuple{System.Int16,System.Int16}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Implicit(ILGPU.Util.Short2)~ILGPU.Util.DataBlock{System.Int16,System.Int16}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Equality(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Short2.op_Inequality(ILGPU.Util.Short2,ILGPU.Util.Short2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Short3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short3.#ctor(System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short3.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short3.#ctor(ILGPU.Util.DataBlock{System.Int16,System.Int16,System.Int16})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.Equals(ILGPU.Util.Short3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Short3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Multiply(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Division(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Subtraction(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Addition(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Implicit(System.Int16)~ILGPU.Util.Short3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Implicit(ILGPU.Util.Short3)~System.ValueTuple{System.Int16,System.Int16,System.Int16}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Implicit(ILGPU.Util.Short3)~ILGPU.Util.DataBlock{System.Int16,System.Int16,System.Int16}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Equality(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Short3.op_Inequality(ILGPU.Util.Short3,ILGPU.Util.Short3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Short4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Short4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short4.#ctor(System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short4.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short4.#ctor(ILGPU.Util.DataBlock{System.Int16,System.Int16,System.Int16,System.Int16})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Short4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Short4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.Equals(ILGPU.Util.Short4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Short4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Multiply(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Division(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Subtraction(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Addition(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Implicit(System.Int16)~ILGPU.Util.Short4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Implicit(ILGPU.Util.Short4)~System.ValueTuple{System.Int16,System.Int16,System.Int16,System.Int16}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Implicit(ILGPU.Util.Short4)~ILGPU.Util.DataBlock{System.Int16,System.Int16,System.Int16,System.Int16}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Equality(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Short4.op_Inequality(ILGPU.Util.Short4,ILGPU.Util.Short4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Int2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int2.#ctor(System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int2.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int2.#ctor(ILGPU.Util.DataBlock{System.Int32,System.Int32})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.Equals(ILGPU.Util.Int2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Int2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Multiply(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Division(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Subtraction(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Addition(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Implicit(System.Int32)~ILGPU.Util.Int2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Implicit(ILGPU.Util.Int2)~System.ValueTuple{System.Int32,System.Int32}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Implicit(ILGPU.Util.Int2)~ILGPU.Util.DataBlock{System.Int32,System.Int32}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Equality(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Int2.op_Inequality(ILGPU.Util.Int2,ILGPU.Util.Int2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Int3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int3.#ctor(System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int3.#ctor(ILGPU.Util.DataBlock{System.Int32,System.Int32,System.Int32})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.Equals(ILGPU.Util.Int3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Int3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Multiply(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Division(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Subtraction(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Addition(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Implicit(System.Int32)~ILGPU.Util.Int3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Implicit(ILGPU.Util.Int3)~System.ValueTuple{System.Int32,System.Int32,System.Int32}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Implicit(ILGPU.Util.Int3)~ILGPU.Util.DataBlock{System.Int32,System.Int32,System.Int32}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Equality(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Int3.op_Inequality(ILGPU.Util.Int3,ILGPU.Util.Int3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Int4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Int4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int4.#ctor(System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int4.#ctor(ILGPU.Util.DataBlock{System.Int32,System.Int32,System.Int32,System.Int32})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Int4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Int4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.Equals(ILGPU.Util.Int4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Int4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Multiply(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Division(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Subtraction(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Addition(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Implicit(System.Int32)~ILGPU.Util.Int4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Implicit(ILGPU.Util.Int4)~System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Implicit(ILGPU.Util.Int4)~ILGPU.Util.DataBlock{System.Int32,System.Int32,System.Int32,System.Int32}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Equality(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Int4.op_Inequality(ILGPU.Util.Int4,ILGPU.Util.Int4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Long2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long2.#ctor(System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long2.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long2.#ctor(ILGPU.Util.DataBlock{System.Int64,System.Int64})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.Equals(ILGPU.Util.Long2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Long2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Multiply(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Division(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Subtraction(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Addition(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Implicit(System.Int64)~ILGPU.Util.Long2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Implicit(ILGPU.Util.Long2)~System.ValueTuple{System.Int64,System.Int64}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Implicit(ILGPU.Util.Long2)~ILGPU.Util.DataBlock{System.Int64,System.Int64}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Equality(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Long2.op_Inequality(ILGPU.Util.Long2,ILGPU.Util.Long2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Long3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long3.#ctor(System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long3.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long3.#ctor(ILGPU.Util.DataBlock{System.Int64,System.Int64,System.Int64})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.Equals(ILGPU.Util.Long3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Long3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Multiply(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Division(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Subtraction(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Addition(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Implicit(System.Int64)~ILGPU.Util.Long3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Implicit(ILGPU.Util.Long3)~System.ValueTuple{System.Int64,System.Int64,System.Int64}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Implicit(ILGPU.Util.Long3)~ILGPU.Util.DataBlock{System.Int64,System.Int64,System.Int64}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Equality(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Long3.op_Inequality(ILGPU.Util.Long3,ILGPU.Util.Long3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Long4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Long4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long4.#ctor(System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long4.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long4.#ctor(ILGPU.Util.DataBlock{System.Int64,System.Int64,System.Int64,System.Int64})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Long4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Long4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.Equals(ILGPU.Util.Long4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Long4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Multiply(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Division(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Subtraction(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Addition(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Implicit(System.Int64)~ILGPU.Util.Long4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Implicit(ILGPU.Util.Long4)~System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Implicit(ILGPU.Util.Long4)~ILGPU.Util.DataBlock{System.Int64,System.Int64,System.Int64,System.Int64}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Equality(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Long4.op_Inequality(ILGPU.Util.Long4,ILGPU.Util.Long4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Half2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Half2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Half2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half2.#ctor(ILGPU.Half)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half2.#ctor(ILGPU.Half,ILGPU.Half)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half2.#ctor(ILGPU.Util.DataBlock{ILGPU.Half,ILGPU.Half})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.Equals(ILGPU.Util.Half2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Half2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Multiply(ILGPU.Util.Half2,ILGPU.Util.Half2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Division(ILGPU.Util.Half2,ILGPU.Util.Half2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Subtraction(ILGPU.Util.Half2,ILGPU.Util.Half2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Addition(ILGPU.Util.Half2,ILGPU.Util.Half2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Implicit(ILGPU.Half)~ILGPU.Util.Half2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Implicit(ILGPU.Util.Half2)~System.ValueTuple{ILGPU.Half,ILGPU.Half}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Implicit(ILGPU.Util.Half2)~ILGPU.Util.DataBlock{ILGPU.Half,ILGPU.Half}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Equality(ILGPU.Util.Half2,ILGPU.Util.Half2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Half2.op_Inequality(ILGPU.Util.Half2,ILGPU.Util.Half2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Half3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Half3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Half3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half3.#ctor(ILGPU.Half)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half3.#ctor(ILGPU.Half,ILGPU.Half,ILGPU.Half)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half3.#ctor(ILGPU.Util.DataBlock{ILGPU.Half,ILGPU.Half,ILGPU.Half})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.Equals(ILGPU.Util.Half3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Half3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Multiply(ILGPU.Util.Half3,ILGPU.Util.Half3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Division(ILGPU.Util.Half3,ILGPU.Util.Half3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Subtraction(ILGPU.Util.Half3,ILGPU.Util.Half3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Addition(ILGPU.Util.Half3,ILGPU.Util.Half3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Implicit(ILGPU.Half)~ILGPU.Util.Half3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Implicit(ILGPU.Util.Half3)~System.ValueTuple{ILGPU.Half,ILGPU.Half,ILGPU.Half}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Implicit(ILGPU.Util.Half3)~ILGPU.Util.DataBlock{ILGPU.Half,ILGPU.Half,ILGPU.Half}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Equality(ILGPU.Util.Half3,ILGPU.Util.Half3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Half3.op_Inequality(ILGPU.Util.Half3,ILGPU.Util.Half3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Half4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Half4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Half4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half4.#ctor(ILGPU.Half)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half4.#ctor(ILGPU.Half,ILGPU.Half,ILGPU.Half,ILGPU.Half)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half4.#ctor(ILGPU.Util.DataBlock{ILGPU.Half,ILGPU.Half,ILGPU.Half,ILGPU.Half})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Half4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Half4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.Equals(ILGPU.Util.Half4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Half4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Multiply(ILGPU.Util.Half4,ILGPU.Util.Half4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Division(ILGPU.Util.Half4,ILGPU.Util.Half4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Subtraction(ILGPU.Util.Half4,ILGPU.Util.Half4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Addition(ILGPU.Util.Half4,ILGPU.Util.Half4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Implicit(ILGPU.Half)~ILGPU.Util.Half4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Implicit(ILGPU.Util.Half4)~System.ValueTuple{ILGPU.Half,ILGPU.Half,ILGPU.Half,ILGPU.Half}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Implicit(ILGPU.Util.Half4)~ILGPU.Util.DataBlock{ILGPU.Half,ILGPU.Half,ILGPU.Half,ILGPU.Half}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Equality(ILGPU.Util.Half4,ILGPU.Util.Half4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Half4.op_Inequality(ILGPU.Util.Half4,ILGPU.Util.Half4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Float2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float2.#ctor(System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float2.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float2.#ctor(ILGPU.Util.DataBlock{System.Single,System.Single})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.Equals(ILGPU.Util.Float2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Float2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Multiply(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Division(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Subtraction(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Addition(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Implicit(System.Single)~ILGPU.Util.Float2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Implicit(ILGPU.Util.Float2)~System.ValueTuple{System.Single,System.Single}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Implicit(ILGPU.Util.Float2)~ILGPU.Util.DataBlock{System.Single,System.Single}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Equality(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Float2.op_Inequality(ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Float3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float3.#ctor(System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float3.#ctor(ILGPU.Util.DataBlock{System.Single,System.Single,System.Single})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.Equals(ILGPU.Util.Float3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Float3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Multiply(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Division(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Subtraction(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Addition(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Implicit(System.Single)~ILGPU.Util.Float3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Implicit(ILGPU.Util.Float3)~System.ValueTuple{System.Single,System.Single,System.Single}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Implicit(ILGPU.Util.Float3)~ILGPU.Util.DataBlock{System.Single,System.Single,System.Single}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Equality(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Float3.op_Inequality(ILGPU.Util.Float3,ILGPU.Util.Float3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Float4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Float4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float4.#ctor(System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float4.#ctor(ILGPU.Util.DataBlock{System.Single,System.Single,System.Single,System.Single})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Float4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Float4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.Equals(ILGPU.Util.Float4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Float4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Multiply(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Division(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Subtraction(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Addition(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Implicit(System.Single)~ILGPU.Util.Float4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Implicit(ILGPU.Util.Float4)~System.ValueTuple{System.Single,System.Single,System.Single,System.Single}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Implicit(ILGPU.Util.Float4)~ILGPU.Util.DataBlock{System.Single,System.Single,System.Single,System.Single}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Equality(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Float4.op_Inequality(ILGPU.Util.Float4,ILGPU.Util.Float4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Double2">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double2.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double2.#ctor(System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double2.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double2.#ctor(ILGPU.Util.DataBlock{System.Double,System.Double})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double2.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double2.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double2.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double2.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.Equals(ILGPU.Util.Double2)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Double2.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Multiply(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Division(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Subtraction(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Addition(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Implicit(System.Double)~ILGPU.Util.Double2">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Implicit(ILGPU.Util.Double2)~System.ValueTuple{System.Double,System.Double}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Implicit(ILGPU.Util.Double2)~ILGPU.Util.DataBlock{System.Double,System.Double}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Equality(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Double2.op_Inequality(ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Double3">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double3.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double3.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double3.#ctor(System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double3.#ctor(ILGPU.Util.DataBlock{System.Double,System.Double,System.Double})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double3.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double3.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double3.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double3.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double3.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.Equals(ILGPU.Util.Double3)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Double3.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Multiply(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Division(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Subtraction(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Addition(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Implicit(System.Double)~ILGPU.Util.Double3">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Implicit(ILGPU.Util.Double3)~System.ValueTuple{System.Double,System.Double,System.Double}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Implicit(ILGPU.Util.Double3)~ILGPU.Util.DataBlock{System.Double,System.Double,System.Double}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Equality(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Double3.op_Inequality(ILGPU.Util.Double3,ILGPU.Util.Double3)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.Util.Double4">
            <summary>
            Represents a combined structure type to hold multiple primitive values of the
            same type.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double4.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="F:ILGPU.Util.Double4.dataBlock">
            <summary>
            The internal data block.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double4.#ctor(System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new data container.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double4.#ctor(ILGPU.Util.DataBlock{System.Double,System.Double,System.Double,System.Double})">
            <summary>
            Constructs a new data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double4.DataBlock">
            <summary>
            The underlying raw data block.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double4.X">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double4.Y">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double4.Z">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="P:ILGPU.Util.Double4.W">
            <summary>
            Returns the i-th element.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Double4.ToValueTuple">
            <summary>
            Returns a value tuple that stores all items.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.Equals(ILGPU.Util.Double4)">
            <summary cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:ILGPU.Util.Double4.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.GetHashCode">
            <summary>
            Returns the combined hash code of all items.
            </summary>
            <returns>The hash code of all items.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Multiply(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Executes an arithmetic * operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Division(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Executes an arithmetic / operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Subtraction(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Executes an arithmetic - operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Addition(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Executes an arithmetic + operation on all elements.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Implicit(System.Double)~ILGPU.Util.Double4">
            <summary>
            Converts the given single value into its container representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Implicit(ILGPU.Util.Double4)~System.ValueTuple{System.Double,System.Double,System.Double,System.Double}">
            <summary>
            Converts the given value into its tuple representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Implicit(ILGPU.Util.Double4)~ILGPU.Util.DataBlock{System.Double,System.Double,System.Double,System.Double}">
            <summary>
            Converts the given value into its data block representation.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Equality(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Returns true if both data blocks represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>True, if both data block represent the same elements.</returns>
        </member>
        <member name="M:ILGPU.Util.Double4.op_Inequality(ILGPU.Util.Double4,ILGPU.Util.Double4)">
            <summary>
            Returns true if both data blocks do not represent the same elements.
            </summary>
            <param name="left">The left block.</param>
            <param name="right">The right block.</param>
            <returns>
            True, if both data block do not represent the same elements.
            </returns>
        </member>
        <member name="T:ILGPU.VariableView`1">
            <summary>
            Represents a general view to a variable.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
        </member>
        <member name="F:ILGPU.VariableView`1.VariableSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.VariableView`1.#ctor(ILGPU.ArrayView{`0})">
            <summary>
            Constructs a new variable view.
            </summary>
            <param name="baseView">The base view.</param>
        </member>
        <member name="P:ILGPU.VariableView`1.BaseView">
            <summary>
            Returns the base view.
            </summary>
        </member>
        <member name="P:ILGPU.VariableView`1.IsValid">
            <summary>
            Returns true if this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.VariableView`1.Value">
            <summary>
            Accesses the stored value.
            </summary>
        </member>
        <member name="M:ILGPU.VariableView`1.CopyTo(ILGPU.VariableView{`0})">
            <summary>
            Copies the current value to the memory location of the given view.
            </summary>
            <param name="targetView">The target view.</param>
            <remarks>
            The target view must be accessible from the this view (e.g. same accelerator).
            </remarks>
        </member>
        <member name="M:ILGPU.VariableView`1.CopyFrom(ILGPU.VariableView{`0})">
            <summary>
            Copies the value from the memory location of the given view.
            </summary>
            <param name="sourceView">The source view.</param>
            <remarks>
            The source view must be accessible from the this view (e.g. same accelerator).
            </remarks>
        </member>
        <member name="M:ILGPU.VariableView`1.SubView``1(System.Int32)">
            <summary>
            Creates a sub view into this view.
            </summary>
            <param name="offsetInBytes"></param>
        </member>
        <member name="M:ILGPU.VariableView`1.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="T:ILGPU.Warp">
            <summary>
            Contains warp-wide functions.
            </summary>
        </member>
        <member name="P:ILGPU.Warp.WarpSize">
            <summary>
            Returns the warp size.
            </summary>
        </member>
        <member name="P:ILGPU.Warp.LaneIdx">
            <summary>
            Returns the current lane index [0, WarpSize - 1].
            </summary>
        </member>
        <member name="P:ILGPU.Warp.IsFirstLane">
            <summary>
            Returns true if the current lane is the first lane.
            </summary>
        </member>
        <member name="P:ILGPU.Warp.IsLastLane">
            <summary>
            Returns true if the current lane is the last lane.
            </summary>
        </member>
        <member name="P:ILGPU.Warp.WarpIdx">
            <summary>
            Returns the current warp index in the range [0, NumUsedWarps - 1].
            </summary>
            <returns>The current warp index in the range [0, NumUsedWarps - 1].</returns>
        </member>
        <member name="M:ILGPU.Warp.ComputeWarpIdx(ILGPU.Index1D)">
            <summary>
            Computes the current warp index in the range [0, NumUsedWarps - 1].
            </summary>
            <param name="groupThreadIdx">
            The current thread index within the current group.
            </param>
            <returns>
            The current warp index in the range [0, NumUsedWarps - 1].
            </returns>
        </member>
        <member name="M:ILGPU.Warp.ComputeWarpThreadIdx(ILGPU.Index1D)">
            <summary>
            Computes the current thread within a warp in the range [0, WarpSize - 1].
            </summary>
            <param name="groupThreadIdx">
            The current thread index within the current group.
            </param>
            <returns>
            The current warp thread index in the range [0, WarpSize - 1].
            </returns>
        </member>
        <member name="M:ILGPU.Warp.Barrier">
            <summary>
            Executes a thread barrier in the scope of a warp.
            </summary>
        </member>
        <member name="M:ILGPU.Warp.Shuffle``1(``0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the specified source lane.
            The width of the shuffle operation is the warp size.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="sourceLane">The source lane.</param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleInternal``1(``0,System.Int32)">
            <summary>
            Internal wrapper that implements shuffle operations.
            </summary>
        </member>
        <member name="M:ILGPU.Warp.Shuffle``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the specified source lane.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="sourceLane">The source lane.</param>
            <param name="width">
            The width of the shuffle operation. Width must be a power of 2.
            </param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.SubShuffleInternal``1(``0,System.Int32,System.Int32)">
            <summary>
            Internal wrapper that implements shuffle operations.
            </summary>
        </member>
        <member name="M:ILGPU.Warp.ShuffleDown``1(``0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane + delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to add to the current lane.</param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleDownInternal``1(``0,System.Int32)">
            <summary>
            Internal wrapper that implements shuffle down operations.
            </summary>
        </member>
        <member name="M:ILGPU.Warp.ShuffleDown``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane + delta.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to add to the current lane.</param>
            <param name="width">
            The width of the shuffle operation. Width must be a power of 2.
            </param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.SubShuffleDownInternal``1(``0,System.Int32,System.Int32)">
            <summary>
            Internal wrapper that implements shuffle down operations.
            </summary>
        </member>
        <member name="M:ILGPU.Warp.ShuffleUp``1(``0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane - delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to subtract to the current lane.</param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleUpInternal``1(``0,System.Int32)">
            <summary>
            Internal wrapper that implements shuffle up operations.
            </summary>
        </member>
        <member name="M:ILGPU.Warp.ShuffleUp``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane - delta.
            </summary>
            <typeparam name="T">The value type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to subtract to the current lane.</param>
            <param name="width">
            The width of the shuffle operation. Width must be a power of 2.
            </param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.SubShuffleUpInternal``1(``0,System.Int32,System.Int32)">
            <summary>
            Internal wrapper that implements shuffle up operations.
            </summary>
        </member>
        <member name="M:ILGPU.Warp.ShuffleXor``1(``0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane xor mask.
            The width of the shuffle operation is the warp size.
            </summary>
            <typeparam name="T">The type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="mask">The mask to xor to the current lane.</param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleXorInternal``1(``0,System.Int32)">
            <summary>
            Internal wrapper that implements shuffle xor operations.
            </summary>
        </member>
        <member name="M:ILGPU.Warp.ShuffleXor``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane xor mask.
            </summary>
            <typeparam name="T">The type to shuffle.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="mask">The mask to xor to the current lane.</param>
            <param name="width">
            The width of the shuffle operation. Width must be a power of 2.
            </param>
            <returns>
            The value of the variable in the scope of the desired lane.
            </returns>
            <remarks>
            Note that all threads in a warp should participate in the shuffle operation.
            </remarks>
        </member>
        <member name="M:ILGPU.Warp.SubShuffleXorInternal``1(``0,System.Int32,System.Int32)">
            <summary>
            Internal wrapper that implements shuffle xor operations.
            </summary>
        </member>
        <member name="M:ILGPU.Warp.Broadcast``1(``0,System.Int32)">
            <summary>
            Performs a broadcast operation that broadcasts the given value
            from the specified thread to all other threads in the warp.
            </summary>
            <typeparam name="T">The type to broadcast.</typeparam>
            <param name="value">The value to broadcast.</param>
            <param name="sourceLane">The source thread index within the warp.</param>
            <remarks>
            Note that the source lane must be the same for all threads in the warp.
            </remarks>
        </member>
        <member name="T:ILGPU.Index1D">
            <summary>
            Represents a 1D index.
            </summary>
        </member>
        <member name="F:ILGPU.Index1D.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.Index1D.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.Index1D.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="F:ILGPU.Index1D.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.Index1D.Min(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index1D.Max(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index1D.Clamp(ILGPU.Index1D,ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Index1D.#ctor(System.Int32)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
        </member>
        <member name="P:ILGPU.Index1D.X">
            <summary>
            Returns the X index.
            </summary>
        </member>
        <member name="P:ILGPU.Index1D.IsFirst">
            <summary>
            Returns true if this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.Index1D.Size">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index1D.LongSize">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index1D.ILGPU#IIndex#Size">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index1D.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="M:ILGPU.Index1D.ToLongIndex">
            <summary>
            Converts this index to a long integer index.
            </summary>
            <returns>The resulting long integer representation.</returns>
        </member>
        <member name="M:ILGPU.Index1D.InBounds(ILGPU.Index1D)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.Index1D.InBoundsInclusive(ILGPU.Index1D)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.Index1D.Add(ILGPU.Index1D)">
            <summary>
            Computes this + right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index1D.Subtract(ILGPU.Index1D)">
            <summary>
            Computes this - right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index1D.Equals(ILGPU.Index1D)">
            <summary>
            Returns true if the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, if the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index1D.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index1D.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Index1D.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.Index1D.op_Implicit(ILGPU.Index1D)~ILGPU.LongIndex1D">
            <summary>
            Converts this index to a long integer index.
            </summary>
            <param name="index">The index to convert.</param>
            <returns>The resulting long integer representation.</returns>
        </member>
        <member name="M:ILGPU.Index1D.Add(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index1D.op_Addition(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index1D.Subtract(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index1D.op_Subtraction(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index1D.Multiply(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index1D.op_Multiply(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index1D.Divide(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index1D.op_Division(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index1D.op_Equality(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Returns true if the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.Index1D.op_Inequality(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Returns true if the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are not the same.</returns>
        </member>
        <member name="M:ILGPU.Index1D.op_Implicit(ILGPU.Index1D)~System.Int32">
            <summary>
            Implicitly converts an index to an int.
            </summary>
            <param name="idx">The index to convert.</param>
        </member>
        <member name="M:ILGPU.Index1D.op_Implicit(System.Int32)~ILGPU.Index1D">
            <summary>
            Implicitly converts an int to an index.
            </summary>
            <param name="idx">The int to convert.</param>
        </member>
        <member name="M:ILGPU.Index1D.op_Explicit(ILGPU.Index1D)~System.UInt32">
            <summary>
            Implicitly converts an index to an unsigned value.
            </summary>
            <param name="idx">The index to convert.</param>
        </member>
        <member name="T:ILGPU.Index2D">
            <summary>
            Represents a 2D index.
            </summary>
        </member>
        <member name="F:ILGPU.Index2D.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.Index2D.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.Index2D.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="F:ILGPU.Index2D.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.Index2D.Min(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index2D.Max(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index2D.Clamp(ILGPU.Index2D,ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Index2D.#ctor(System.Int32)">
            <summary>
            Constructs a new index using a single value for each component.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Index2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
        </member>
        <member name="P:ILGPU.Index2D.X">
            <summary>
            Returns the X index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2D.Y">
            <summary>
            Returns the Y index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2D.IsFirst">
            <summary>
            Returns true if this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2D.Size">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2D.LongSize">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2D.ILGPU#IIndex#Size">
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2D.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="M:ILGPU.Index2D.ToLongIndex">
            <summary>
            Converts this index to a long integer index.
            </summary>
            <returns>The resulting long integer representation.</returns>
        </member>
        <member name="M:ILGPU.Index2D.InBounds(ILGPU.Index2D)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.Index2D.InBoundsInclusive(ILGPU.Index2D)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.Index2D.Add(ILGPU.Index2D)">
            <summary>
            Computes this + right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index2D.Subtract(ILGPU.Index2D)">
            <summary>
            Computes this - right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index2D.ToValueTuple">
            <summary>
            Returns a value tuple that stores all dimensions.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.Index2D.Deconstruct(System.Int32@,System.Int32@)">
            <summary>
            Deconstructs the current instance into a tuple.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
        </member>
        <member name="M:ILGPU.Index2D.Equals(ILGPU.Index2D)">
            <summary>
            Returns true if the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, if the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index2D.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index2D.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Index2D.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.Index2D.op_Implicit(ILGPU.Index2D)~ILGPU.LongIndex2D">
            <summary>
            Converts this index to a long integer index.
            </summary>
            <param name="index">The index to convert.</param>
            <returns>The resulting long integer representation.</returns>
        </member>
        <member name="M:ILGPU.Index2D.op_Implicit(System.ValueTuple{System.Int32,System.Int32})~ILGPU.Index2D">
            <summary>
            Converts the given value tuple into an equivalent <see cref="T:ILGPU.Index2D"/>.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:ILGPU.Index2D.Add(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index2D.op_Addition(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index2D.Subtract(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index2D.op_Subtraction(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index2D.Multiply(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index2D.op_Multiply(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index2D.Divide(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index2D.op_Division(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index2D.op_Equality(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Returns true if the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.Index2D.op_Inequality(ILGPU.Index2D,ILGPU.Index2D)">
            <summary>
            Returns true if the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are not the same.</returns>
        </member>
        <member name="T:ILGPU.LongIndex1D">
            <summary>
            Represents a 1D index.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex1D.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex1D.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex1D.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex1D.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.LongIndex1D.Min(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.Max(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.Clamp(ILGPU.LongIndex1D,ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.#ctor(System.Int64)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
        </member>
        <member name="P:ILGPU.LongIndex1D.X">
            <summary>
            Returns the X index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex1D.IsFirst">
            <summary>
            Returns true if this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex1D.Size">
            <summary>
            Returns the size represented by this index.
            </summary>
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex1D.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="M:ILGPU.LongIndex1D.ToIntIndex">
            <summary>
            Converts this index to an integer index.
            </summary>
            <returns>The resulting integer representation.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.InBounds(ILGPU.LongIndex1D)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.InBoundsInclusive(ILGPU.LongIndex1D)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.Add(ILGPU.LongIndex1D)">
            <summary>
            Computes this + right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.Subtract(ILGPU.LongIndex1D)">
            <summary>
            Computes this - right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.Equals(ILGPU.LongIndex1D)">
            <summary>
            Returns true if the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, if the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.op_Explicit(ILGPU.LongIndex1D)~ILGPU.Index1D">
            <summary>
            Converts this index to an integer index.
            </summary>
            <param name="index">The index to convert.</param>
            <returns>The resulting integer representation.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.Add(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.op_Addition(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.Subtract(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.op_Subtraction(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.Multiply(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.op_Multiply(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.Divide(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.op_Division(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.op_Equality(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Returns true if the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.op_Inequality(ILGPU.LongIndex1D,ILGPU.LongIndex1D)">
            <summary>
            Returns true if the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are not the same.</returns>
        </member>
        <member name="M:ILGPU.LongIndex1D.op_Implicit(ILGPU.LongIndex1D)~System.Int64">
            <summary>
            Implicitly converts an index to an int.
            </summary>
            <param name="idx">The index to convert.</param>
        </member>
        <member name="M:ILGPU.LongIndex1D.op_Implicit(System.Int64)~ILGPU.LongIndex1D">
            <summary>
            Implicitly converts an int to an index.
            </summary>
            <param name="idx">The int to convert.</param>
        </member>
        <member name="M:ILGPU.LongIndex1D.op_Explicit(ILGPU.LongIndex1D)~System.UInt64">
            <summary>
            Implicitly converts an index to an unsigned value.
            </summary>
            <param name="idx">The index to convert.</param>
        </member>
        <member name="T:ILGPU.LongIndex2D">
            <summary>
            Represents a 2D index.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex2D.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex2D.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex2D.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="F:ILGPU.LongIndex2D.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.LongIndex2D.Min(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.Max(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.Clamp(ILGPU.LongIndex2D,ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.#ctor(System.Int64)">
            <summary>
            Constructs a new index using a single value for each component.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.LongIndex2D.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructs a new index.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
        </member>
        <member name="P:ILGPU.LongIndex2D.X">
            <summary>
            Returns the X index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex2D.Y">
            <summary>
            Returns the Y index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex2D.IsFirst">
            <summary>
            Returns true if this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex2D.Size">
            <summary>
            Returns the size represented by this index.
            </summary>
            <summary>
            Returns the size represented by this index.
            </summary>
        </member>
        <member name="P:ILGPU.LongIndex2D.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="M:ILGPU.LongIndex2D.ToIntIndex">
            <summary>
            Converts this index to an integer index.
            </summary>
            <returns>The resulting integer representation.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.InBounds(ILGPU.LongIndex2D)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.InBoundsInclusive(ILGPU.LongIndex2D)">
            <summary>
            Returns true if the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True if the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.Add(ILGPU.LongIndex2D)">
            <summary>
            Computes this + right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.Subtract(ILGPU.LongIndex2D)">
            <summary>
            Computes this - right-hand side.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.ToValueTuple">
            <summary>
            Returns a value tuple that stores all dimensions.
            </summary>
            <returns>The constructed value tuple.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.Deconstruct(System.Int64@,System.Int64@)">
            <summary>
            Deconstructs the current instance into a tuple.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
        </member>
        <member name="M:ILGPU.LongIndex2D.Equals(ILGPU.LongIndex2D)">
            <summary>
            Returns true if the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, if the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.op_Explicit(ILGPU.LongIndex2D)~ILGPU.Index2D">
            <summary>
            Converts this index to an integer index.
            </summary>
            <param name="index">The index to convert.</param>
            <returns>The resulting integer representation.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.op_Implicit(System.ValueTuple{System.Int64,System.Int64})~ILGPU.LongIndex2D">
            <summary>
            Converts the given value tuple into an equivalent <see cref="T:ILGPU.LongIndex2D"/>.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:ILGPU.LongIndex2D.Add(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.op_Addition(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.Subtract(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.op_Subtraction(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.Multiply(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.op_Multiply(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.Divide(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.op_Division(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.op_Equality(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Returns true if the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.LongIndex2D.op_Inequality(ILGPU.LongIndex2D,ILGPU.LongIndex2D)">
            <summary>
            Returns true if the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, if the first and second index are not the same.</returns>
        </member>
        <member name="T:ILGPU.IStride1D">
            <summary>
            An abstract 1D stride.
            </summary>
        </member>
        <member name="P:ILGPU.IStride1D.XStride">
            <summary>
            Returns the X dimension of the stride extent.
            </summary>
        </member>
        <member name="M:ILGPU.IStride1D.AsGeneral">
            <summary>
            Returns this stride as general 1D stride.
            </summary>
        </member>
        <member name="T:ILGPU.IStride2D">
            <summary>
            An abstract 2D stride.
            </summary>
        </member>
        <member name="P:ILGPU.IStride2D.XStride">
            <summary>
            Returns the X dimension of the stride extent.
            </summary>
        </member>
        <member name="P:ILGPU.IStride2D.YStride">
            <summary>
            Returns the Y dimension of the stride extent.
            </summary>
        </member>
        <member name="M:ILGPU.IStride2D.AsGeneral">
            <summary>
            Returns this stride as general 2D stride.
            </summary>
        </member>
        <member name="T:ILGPU.IStride3D">
            <summary>
            An abstract 3D stride.
            </summary>
        </member>
        <member name="P:ILGPU.IStride3D.XStride">
            <summary>
            Returns the X dimension of the stride extent.
            </summary>
        </member>
        <member name="P:ILGPU.IStride3D.YStride">
            <summary>
            Returns the Y dimension of the stride extent.
            </summary>
        </member>
        <member name="P:ILGPU.IStride3D.ZStride">
            <summary>
            Returns the Z dimension of the stride extent.
            </summary>
        </member>
        <member name="M:ILGPU.IStride3D.AsGeneral">
            <summary>
            Returns this stride as general 3D stride.
            </summary>
        </member>
    </members>
</doc>
